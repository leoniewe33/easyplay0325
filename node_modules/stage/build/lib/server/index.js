"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.lambdaHandler = exports.setupExpress = exports.defaultRouter = exports.loadUserRouter = void 0;
const express_1 = __importDefault(require("express"));
const serverless_express_1 = __importDefault(require("@vendia/serverless-express"));
const errorHandler_1 = require("./errorHandler");
const loadUserRouter = async (main) => {
    let app = express_1.default.Router();
    const defaultMain = main["default"] || main;
    await defaultMain(app);
    return app;
};
exports.loadUserRouter = loadUserRouter;
const defaultRouter = () => {
    const router = express_1.default.Router();
    router.get("/api", (req, res) => {
        res.send({
            message: "Hi there! You're running Includable Stage.",
        });
    });
    return router;
};
exports.defaultRouter = defaultRouter;
const setupExpress = async (manifest, main) => {
    const app = (0, express_1.default)();
    app.use((0, exports.defaultRouter)());
    try {
        app.use(await (0, exports.loadUserRouter)(main));
        app.all("*", (req, res) => {
            res.setHeader("content-type", "text/html");
            res.send(manifest.indexHtml);
        });
    }
    catch (e) {
        console.log("Main function encountered an error");
        console.error(e);
        app.all("*", () => {
            throw e;
        });
    }
    app.use(errorHandler_1.errorHandler);
    return app;
};
exports.setupExpress = setupExpress;
const lambdaHandler = (manifest, main) => {
    require("source-map-support").install();
    let serverlessExpressInstance;
    async function setup(event) {
        const app = await (0, exports.setupExpress)(manifest, main);
        serverlessExpressInstance = (0, serverless_express_1.default)({ app });
        return serverlessExpressInstance(...event);
    }
    function handler(...event) {
        if (serverlessExpressInstance)
            return serverlessExpressInstance(...event);
        return setup(event);
    }
    return handler;
};
exports.lambdaHandler = lambdaHandler;
