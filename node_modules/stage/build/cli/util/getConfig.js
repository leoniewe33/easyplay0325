"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfig = void 0;
const promises_1 = __importDefault(require("fs/promises"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const getConfig = async () => {
    // Check if file exists
    const configPath = path_1.default.resolve(process.cwd(), "stage.json");
    if (!fs_1.default.existsSync(configPath)) {
        throw new Error(`Config file not found at ${configPath}.`);
    }
    // Read JSON
    const config = JSON.parse(await promises_1.default.readFile(configPath, "utf8"));
    if (!config || typeof config !== "object") {
        throw new Error(`Config file at ${configPath} is not valid JSON.`);
    }
    // Do some basic validation
    if (!config.name || !config.name.match(/^[a-z\d-]+$/)) {
        throw new Error(`Invalid app name: ${config.name}. Can only contain lowercase letters, numbers and dashes.`);
    }
    if (config.name.length > 24) {
        throw new Error(`Invalid app name: ${config.name}. Should be less than 24 characters long.`);
    }
    return config;
};
exports.getConfig = getConfig;
