"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildCommand = void 0;
const promises_1 = __importDefault(require("fs/promises"));
const vite_1 = require("vite");
const yaml_1 = require("yaml");
const path_1 = __importDefault(require("path"));
const esbuild_1 = __importDefault(require("esbuild"));
const nanoid_1 = require("nanoid");
const viteConfig_1 = require("../util/viteConfig");
const getConfig_1 = require("../util/getConfig");
const buildCommand = async () => {
    // Get app config
    const config = await (0, getConfig_1.getConfig)();
    const buildPath = path_1.default.resolve(process.env.STAGE_APP_PATH || "", ".stage", "build");
    // Create temp directory
    await promises_1.default.mkdir(".stage/build/frontend", { recursive: true });
    await promises_1.default.mkdir(".stage/build/serverless", { recursive: true });
    // TODO: clean serverless directory
    // Build frontend
    await (0, vite_1.build)({
        ...viteConfig_1.viteConfig,
        configFile: false,
        build: {
            ...viteConfig_1.viteConfig.build,
            outDir: path_1.default.resolve(buildPath, "frontend"),
            assetsDir: "_stage",
            emptyOutDir: true,
        },
        logLevel: "info",
    });
    // Create serverless.yml
    // const packagePath = path.resolve(process.env.STAGE_APP_PATH || "", "package.json");
    const templatePath = path_1.default.resolve(viteConfig_1.viteConfig.root, "serverless", "config.yml");
    const template = (0, yaml_1.parse)(await promises_1.default.readFile(templatePath, "utf8"));
    template.service = `stage-${config.name}`;
    await promises_1.default.writeFile(path_1.default.resolve(buildPath, "serverless", "serverless.yml"), (0, yaml_1.stringify)(template));
    // Prepare main.js
    await promises_1.default.copyFile(path_1.default.resolve(viteConfig_1.viteConfig.root, "serverless", "main.js"), path_1.default.resolve(buildPath, "serverless", "main.js"));
    // Prepare manifest.json
    await promises_1.default.writeFile(path_1.default.resolve(buildPath, "serverless", "manifest.json"), JSON.stringify({
        version: (0, nanoid_1.nanoid)(5),
        indexHtml: await promises_1.default.readFile(path_1.default.resolve(buildPath, "frontend", "index.html"), "utf8"),
    }));
    // Build main lambda function
    try {
        await esbuild_1.default.build({
            bundle: true,
            sourcemap: "inline",
            platform: "node",
            external: ["aws-sdk"],
            entryPoints: [path_1.default.resolve(buildPath, "serverless", "main.js")],
            outfile: path_1.default.resolve(buildPath, "serverless", "handler.js"),
        });
    }
    catch (e) {
        console.log("Failed compiling lambda function - ", e.message);
        process.exit(1);
    }
};
exports.buildCommand = buildCommand;
