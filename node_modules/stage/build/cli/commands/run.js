"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runCommand = void 0;
const express_1 = __importDefault(require("express"));
const vite_1 = require("vite");
const esbuild_1 = require("esbuild");
const viteConfig_1 = require("../util/viteConfig");
const esbuildConfig_1 = require("../util/esbuildConfig");
const server_1 = require("../../lib/server");
const path_1 = __importDefault(require("path"));
const promises_1 = __importDefault(require("fs/promises"));
const chalk_1 = __importDefault(require("chalk"));
let userDefinedRouter;
const reloadUserRouter = async (indexPath) => {
    let app = express_1.default.Router();
    try {
        delete require.cache[require.resolve(indexPath)];
        const index = require(indexPath);
        app = await (0, server_1.loadUserRouter)(index);
    }
    catch (error) {
        console.error(`${chalk_1.default.red.bold("ERROR")} Failed to load app: ${error}`);
    }
    userDefinedRouter = app;
};
const runCommand = async () => {
    const app = (0, express_1.default)();
    const port = 3000; // TODO: auto find available port
    const vite = await (0, vite_1.createServer)({
        ...viteConfig_1.viteConfig,
        configFile: false,
        server: {
            middlewareMode: true,
        },
    });
    await promises_1.default.mkdir(".stage/build/serverless", { recursive: true });
    const buildPath = path_1.default.resolve(process.env.STAGE_APP_PATH || "", ".stage", "build");
    const outPath = path_1.default.resolve(buildPath, "serverless", "index.js");
    (0, esbuild_1.build)({
        ...esbuildConfig_1.esbuildConfig,
        incremental: true,
        entryPoints: [path_1.default.resolve(process.env.STAGE_APP_PATH || "", "index.js")],
        outfile: outPath,
        watch: {
            onRebuild(error) {
                if (error) {
                    console.error(`${chalk_1.default.red.bold("ERROR")} Failed to reload app: ${error}`);
                    return;
                }
                reloadUserRouter(outPath);
            },
        },
    })
        .catch((error) => {
        console.error(`${chalk_1.default.red.bold("ERROR")} Failed to load app: ${error}`);
        process.exit(1);
    })
        .then(() => {
        console.log("Listening for changes...");
        reloadUserRouter(outPath);
    });
    app.use((0, server_1.defaultRouter)());
    app.use((req, res, next) => {
        if (!userDefinedRouter) {
            return next();
        }
        userDefinedRouter(req, res, next);
    });
    app.use(vite.middlewares);
    app.listen(port, () => {
        console.log(`${chalk_1.default.bgGreen.bold.black(" Local server started ")}`);
        console.log(`Local address: http://127.0.0.1:${port}/`);
    });
};
exports.runCommand = runCommand;
