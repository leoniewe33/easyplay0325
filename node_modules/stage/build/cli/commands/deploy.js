"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deployCommand = void 0;
const chalk_1 = __importDefault(require("chalk"));
const fs_1 = __importDefault(require("fs"));
const build_1 = require("./build");
const path_1 = __importDefault(require("path"));
const spawn_1 = require("../util/spawn");
const client_s3_1 = require("@aws-sdk/client-s3");
const client_cloudfront_1 = require("@aws-sdk/client-cloudfront");
const s3_sync_client_1 = __importDefault(require("s3-sync-client"));
const mime_types_1 = __importDefault(require("mime-types"));
const deployCommand = async () => {
    // Track current working directory
    const currentWorkingDirectory = process.cwd();
    // First build the app
    console.log(`\n${chalk_1.default.bgBlueBright.bold.black(" Building app ")}`);
    await (0, build_1.buildCommand)();
    // Then deploy
    console.log(`\n${chalk_1.default.bgBlueBright.bold.black(" Deploying app ")}`);
    // Update lambda
    const buildPath = path_1.default.resolve(process.env.STAGE_APP_PATH || "", ".stage", "build");
    const serverlessBinPath = path_1.default.resolve(__dirname, "..", "..", "..", "node_modules", ".bin", "serverless");
    const stackJsonFile = path_1.default.resolve(currentWorkingDirectory, ".stage", "build", "stack.json");
    process.chdir(path_1.default.resolve(buildPath, "serverless"));
    const additionalParams = process.argv.slice(3);
    if (!fs_1.default.existsSync(stackJsonFile)) {
        // Initial deploy - create stack via serverless
        console.log("This might take a few minutes the first time.");
        await (0, spawn_1.spawnAsync)("node", [serverlessBinPath, "deploy", "--verbose", "--aws-s3-accelerate", ...additionalParams]);
    }
    else {
        // Update lambda
        console.log("Updating lambda function...");
        await (0, spawn_1.spawnAsync)("node", [serverlessBinPath, "deploy", "function", "--function", "main", ...additionalParams]);
    }
    // Upload assets
    const stack = JSON.parse(fs_1.default.readFileSync(stackJsonFile, "utf8"));
    console.log("\nUploading static assets...");
    const s3Client = new client_s3_1.S3Client({});
    const { sync } = new s3_sync_client_1.default({ client: s3Client });
    await sync(path_1.default.resolve(buildPath, "frontend"), `s3://${stack.bucket}`, {
        commandInput: {
            ACL: "public-read",
            ContentType: (syncCommandInput) => {
                console.log(chalk_1.default.gray(`${syncCommandInput.Key}`));
                return syncCommandInput.Key.includes(".css") ? "text/css" : mime_types_1.default.lookup(syncCommandInput.Key) || "text/html";
            },
        },
    });
    // Invalidate cloudfront cache
    console.log("\nInvalidating cloudfront cache...");
    const cloudfront = new client_cloudfront_1.CloudFront({});
    await cloudfront.createInvalidation({
        DistributionId: stack.distribution,
        InvalidationBatch: {
            CallerReference: new Date().getTime().toString(),
            Paths: {
                Quantity: 1,
                Items: ["/*"],
            },
        },
    });
    // Deploy complete
    console.log(`\n${chalk_1.default.bgGreen.bold.black(" Deployment complete ")}`);
    console.log(`https://${stack.domain}/\n`);
    // Restore working directory
    process.chdir(currentWorkingDirectory);
};
exports.deployCommand = deployCommand;
