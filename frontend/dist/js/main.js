// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        globalObject
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"80cCk":[function(require,module,exports,__globalThis) {
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
var HMR_USE_SSE = false;
module.bundle.HMR_BUNDLE_ID = "0bcb44a518dbc454";
"use strict";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, HMR_USE_SSE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: {|[string]: mixed|};
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var HMR_USE_SSE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData[moduleName],
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData[moduleName] = undefined;
}
module.bundle.Module = Module;
module.bundle.hotData = {};
var checkedAssets /*: {|[string]: boolean|} */ , disposedAssets /*: {|[string]: boolean|} */ , assetsToDispose /*: Array<[ParcelRequire, string]> */ , assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
    return HMR_PORT || location.port;
}
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == 'https:' && ![
        'localhost',
        '127.0.0.1',
        '0.0.0.0'
    ].includes(hostname) ? 'wss' : 'ws';
    var ws;
    if (HMR_USE_SSE) ws = new EventSource('/__parcel_hmr');
    else try {
        ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');
    } catch (err) {
        if (err.message) console.error(err.message);
        ws = {};
    }
    // Web extension context
    var extCtx = typeof browser === 'undefined' ? typeof chrome === 'undefined' ? null : chrome : browser;
    // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes('test.js');
    }
    // $FlowFixMe
    ws.onmessage = async function(event /*: {data: string, ...} */ ) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        disposedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        assetsToDispose = [];
        var data /*: HMRMessage */  = JSON.parse(event.data);
        if (data.type === 'reload') fullReload();
        else if (data.type === 'update') {
            // Remove error overlay if there is one
            if (typeof document !== 'undefined') removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH);
            // Handle HMR Update
            let handled = assets.every((asset)=>{
                return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') window.dispatchEvent(new CustomEvent('parcelhmraccept'));
                await hmrApplyUpdates(assets);
                hmrDisposeQueue();
                // Run accept callbacks. This will also re-execute other disposed assets in topological order.
                let processedAssets = {};
                for(let i = 0; i < assetsToAccept.length; i++){
                    let id = assetsToAccept[i][1];
                    if (!processedAssets[id]) {
                        hmrAccept(assetsToAccept[i][0], id);
                        processedAssets[id] = true;
                    }
                }
            } else fullReload();
        }
        if (data.type === 'error') {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
            }
            if (typeof document !== 'undefined') {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html);
                // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    if (ws instanceof WebSocket) {
        ws.onerror = function(e) {
            if (e.message) console.error(e.message);
        };
        ws.onclose = function() {
            console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
        };
    }
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] \u2728 Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement('div');
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, '') : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          \u{1F6A8} ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + '</div>').join('')}
        </div>
        ${diagnostic.documentation ? `<div>\u{1F4DD} <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ''}
      </div>
    `;
    }
    errorHTML += '</div>';
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if ('reload' in location) location.reload();
    else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var href = link.getAttribute('href');
    if (!href) return;
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute('href', // $FlowFixMe
    href.split('?')[0] + '?' + Date.now());
    // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href /*: string */  = links[i].getAttribute('href');
            var hostname = getHostname();
            var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === 'js') {
        if (typeof document !== 'undefined') {
            let script = document.createElement('script');
            script.src = asset.url + '?t=' + Date.now();
            if (asset.outputFormat === 'esmodule') script.type = 'module';
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === 'function') {
            // Worker scripts
            if (asset.outputFormat === 'esmodule') return import(asset.url + '?t=' + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + '?t=' + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension fix
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3 && typeof ServiceWorkerGlobalScope != 'undefined' && global instanceof ServiceWorkerGlobalScope) {
                        extCtx.runtime.reload();
                        return;
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle /*: ParcelRequire */ , asset /*:  HMRAsset */ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === 'css') reloadCSS();
    else if (asset.type === 'js') {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
            // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        }
        // Always traverse to the parent bundle, even if we already replaced the asset in this bundle.
        // This is required in case modules are duplicated. We need to ensure all instances have the updated code.
        if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        }
        // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id];
        delete bundle.cache[id];
        // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id);
}
function hmrAcceptCheck(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
    // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToDispose.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {
        assetsToAccept.push([
            bundle,
            id
        ]);
        return true;
    }
}
function hmrDisposeQueue() {
    // Dispose all old assets.
    for(let i = 0; i < assetsToDispose.length; i++){
        let id = assetsToDispose[i][1];
        if (!disposedAssets[id]) {
            hmrDispose(assetsToDispose[i][0], id);
            disposedAssets[id] = true;
        }
    }
    assetsToDispose = [];
}
function hmrDispose(bundle /*: ParcelRequire */ , id /*: string */ ) {
    var cached = bundle.cache[id];
    bundle.hotData[id] = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData[id];
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData[id]);
    });
    delete bundle.cache[id];
}
function hmrAccept(bundle /*: ParcelRequire */ , id /*: string */ ) {
    // Execute the module.
    bundle(id);
    // Run the accept callbacks in the new version of the module.
    var cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
        let assetsToAlsoAccept = [];
        cached.hot._acceptCallbacks.forEach(function(cb) {
            let additionalAssets = cb(function() {
                return getParents(module.bundle.root, id);
            });
            if (Array.isArray(additionalAssets) && additionalAssets.length) assetsToAlsoAccept.push(...additionalAssets);
        });
        if (assetsToAlsoAccept.length) {
            let handled = assetsToAlsoAccept.every(function(a) {
                return hmrAcceptCheck(a[0], a[1]);
            });
            if (!handled) return fullReload();
            hmrDisposeQueue();
        }
    }
}

},{}],"1SICI":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _user = require("../../../backend/src/user");
var _userDefault = parcelHelpers.interopDefault(_user);
var _arrowRightPng = require("/images/arrow_right.png");
var _arrowRightPngDefault = parcelHelpers.interopDefault(_arrowRightPng);
var _hakenPng = require("/images/Haken.png");
var _hakenPngDefault = parcelHelpers.interopDefault(_hakenPng);
var _userRegPng = require("/images/userReg.png");
var _userRegPngDefault = parcelHelpers.interopDefault(_userRegPng);
"use strict";
var userLang = navigator.language || navigator.userLanguage;
var loggedIn = false;
checkLoginStatus();
//Funktionen beim Aufruf der Seite um die Inhalte zu laden
document.addEventListener('DOMContentLoaded', function() {
    console.log("onLoad Function");
    fetchRecommendedPodcasts();
    // dcheckLoginStatus();
    const resultsDiv = document.getElementById('podcast-list');
    resultsDiv.innerHTML = '<p class="loading-message">Empfohlene Podcast werden geladen...</p>';
    getCategories();
    const searchInput = document.getElementById('search-title');
    if (searchInput) searchInput.addEventListener('keydown', function(event) {
        if (event.key === 'Enter') searchPodcasts();
    });
    else console.error("Search input field not found");
    //Wenn man keine Favoriten hat, wird das Panel nicht angezeigt --> wirkt cleaner
    let favorites = JSON.parse(localStorage.getItem('favorites')) || [];
    console.log(favorites);
    if (favorites.length === 0) document.getElementById("newestEpisodes").innerHTML = '';
    else favorites.forEach((element)=>{
        insertFavouriteEpisodes(element);
    });
});
//Einfügen der neusten Episoden der Lieblingspodcasts
async function insertFavouriteEpisodes(id) {
    var div = document.getElementById("fav-div");
    let url = new URL('https://api.fyyd.de/0.2/podcast/episodes');
    url.searchParams.append("podcast_id", id);
    url.searchParams.append("count", 1);
    console.log('URL:', url.href);
    try {
        const response = await fetch(url);
        const data = await response.json();
        console.log(data.data.episodes.length);
        const podcastDiv = document.createElement('div');
        const podcastImage = document.createElement('img');
        const podcastTitle = document.createElement('h4');
        const link = document.createElement("a");
        link.href = `podcastDash.html?id=${encodeURIComponent(id)}`;
        link.target = "_blank";
        podcastTitle.innerHTML = limitToXWords(data.data.episodes[0].title, 6);
        podcastImage.src = data.data.layoutImageURL;
        podcastDiv.appendChild(podcastImage);
        podcastDiv.appendChild(podcastTitle);
        link.appendChild(podcastDiv);
        div.appendChild(link);
    } catch (error) {
        console.error('Error fetching recommended podcasts:', error);
        document.getElementById('podcast-list').innerHTML = '<p class="loading-message">Fehler beim Laden empfohlener Podcasts. Bitte probiere es sp\xe4ter nochmal.</p>';
    }
}
//Suchfunktion die nach dem eingegebenen Titel sucht
function searchPodcasts() {
    const searchTitle = document.getElementById('search-title').value;
    const resultsDiv = document.getElementById('search');
    resultsDiv.innerHTML = '<p class="loading-message">Suche l\xe4uft...';
    fetchPodcasts(searchTitle, 0);
}
//Holt die benötigte Anfrage von der API und nutzt das Page system um dynamisch nachzuladen
async function fetchPodcasts(title, page) {
    showLoadingAnimation();
    let url = new URL('https://api.fyyd.de/0.2/search/podcast/');
    url.searchParams.append('title', title);
    url.searchParams.append('page', page);
    console.log('URL:', url.href);
    const resultsDiv = document.getElementById('search');
    if (page === 0) resultsDiv.innerHTML = '<p class="loading-message suche">Suche l\xe4uft...</p>';
    const existingMoreBtn = document.getElementById('more-btn-search');
    if (existingMoreBtn) existingMoreBtn.parentNode.removeChild(existingMoreBtn);
    const loadingMessage = document.createElement('p');
    if (page != 0) loadingMessage.textContent = 'Ergebnisse werden geladen...';
    loadingMessage.setAttribute('id', 'loading-message');
    resultsDiv.appendChild(loadingMessage);
    try {
        const response = await fetch(url);
        const data = await response.json();
        insertSearchResults(data, page);
        // Remove the loading message
        const loadingMessage = document.getElementById('loading-message');
        if (loadingMessage) loadingMessage.remove();
        // Add "more" button if there are more results
        if (data.data.length > 0) {
            // Create the button element with Material Icon
            const moreBtn = document.createElement('button');
            moreBtn.className = "more-button";
            moreBtn.style = "border: none; background: white;";
            moreBtn.setAttribute("id", "more-btn-search"); // ID for the button
            moreBtn.addEventListener('click', function() {
                console.log("moreBtn");
                fetchPodcasts(title, page + 1);
            });
            // Create the icon element
            const icon = document.createElement('img');
            icon.src = (0, _arrowRightPngDefault.default);
            icon.style = "height: 90px; margin-bottom: 125px; padding-left: 40px";
            // Append the icon to the button
            moreBtn.appendChild(icon);
            // Append the button to the container
            resultsDiv.appendChild(moreBtn);
        } else resultsDiv.innerHTML = 'Keine weiteren Ergebnisse.';
    } catch (error) {
        console.error('Error fetching podcasts:', error);
        resultsDiv.innerHTML = '<p class="loading-message">Fehler beim Laden von Podcasts. Bitte probiere es sp\xe4ter nochmal.</p>';
    }
    hideLoadingAnimation();
}
//Holt aus allen Podcast eine zufällige Seite
async function fetchRecommendedPodcasts() {
    showLoadingAnimation();
    let url = new URL('https://api.fyyd.de/0.2/podcasts/');
    url.searchParams.append('page', getRandomInt(1370));
    url.searchParams.append('count', 30);
    console.log('URL:', url.href);
    try {
        const response = await fetch(url);
        const data = await response.json();
        insertRecommendedResults(data);
    } catch (error) {
        console.error('Error fetching recommended podcasts:', error);
        document.getElementById('podcast-list').innerHTML = '<p class="loading-message">Fehler beim Laden empfohlener Podcasts. Bitte probiere es sp\xe4ter nochmal.</p>';
    }
    hideLoadingAnimation();
}
//Zufallsfunktion für Recommended gibt eine Zufallszahl von 0 bis max zurück
function getRandomInt(max) {
    return Math.floor(Math.random() * max);
}
//Einfügen der Zufälligen Podcast (Empfohlen sind hier einfach zufällige Podcast, sodass jeder Podcast die Chance hat gesehen zu werden)
function insertRecommendedResults(data) {
    const resultsDiv = document.getElementById('podcast-list');
    resultsDiv.innerHTML = '';
    data.data.forEach((podcast)=>{
        const podcastDiv = document.createElement('div');
        const titleDiv = document.createElement('h4');
        const descriptionDiv = document.createElement('p');
        const podcastImage = document.createElement('img');
        const podcastLink = document.createElement('a');
        titleDiv.textContent = podcast.title;
        podcastImage.src = podcast.layoutImageURL;
        podcastImage.className = 'img';
        podcastLink.appendChild(podcastImage);
        podcastLink.appendChild(titleDiv);
        podcastLink.href = `podcastDash.html?id=${encodeURIComponent(podcast.id)}`;
        //podcastLink.target = "_blank"; besser fürs Abspielen im Hintergrund aber nervig, da zu viele Tabs
        podcastDiv.appendChild(podcastLink);
        resultsDiv.appendChild(podcastDiv);
    });
}
//Einfügen der suche
function insertSearchResults(data, page) {
    const resultsDiv = document.getElementById('search');
    // Wenn es sich um die erste Seite handelt, wird das div geleert
    if (page === 0) resultsDiv.innerHTML = '';
    data.data.forEach((podcast)=>{
        const podcastDiv = document.createElement('div');
        const titleDiv = document.createElement('h4');
        const podcastImage = document.createElement('img');
        const podcastLink = document.createElement('a');
        titleDiv.textContent = podcast.title;
        podcastImage.src = podcast.layoutImageURL;
        podcastImage.className = 'img'; // Added class for image styling
        podcastLink.appendChild(podcastImage);
        podcastLink.appendChild(titleDiv);
        podcastLink.href = `podcastDash.html?id=${encodeURIComponent(podcast.id)}`;
        podcastLink.target = "_blank";
        podcastDiv.appendChild(podcastLink);
        resultsDiv.appendChild(podcastDiv);
    });
}
//Limitiert die Wörter für die Podcastfolgen, da diese zu lang für das Grid war, es werden nicht mehr als x Wörter zurückgegeben
function limitToXWords(input, x) {
    const words = input.split(" ");
    if (words.length > x) return words.slice(0, x).join(" ");
    return input;
}
//laden der Kategorien von der API
async function getCategories() {
    let url = new URL('https://api.fyyd.de/0.2/categories');
    console.log('URL:', url.href);
    try {
        const response = await fetch(url);
        const data = await response.json();
        const div = document.getElementById("categoryContainer");
        div.innerHTML = '';
        const catBtndiv = document.createElement('div');
        const catCount = data.data.length;
        var forCounter = 0;
        var randomCat = Math.floor(Math.random() * catCount + 1);
        console.log(randomCat);
        data.data.forEach((element)=>{
            const catBtn = document.createElement('input');
            catBtn.setAttribute("type", "button");
            catBtn.setAttribute("value", element.name_de);
            catBtn.className = 'category-button';
            forCounter++;
            if (forCounter === randomCat) {
                console.log("fetching" + element.name_de);
                fetchCategoryPodcasts(element.id, element.name_de, 0);
            }
            catBtn.addEventListener('click', function() {
                fetchCategoryPodcasts(element.id, element.name_de, 0);
            });
            catBtndiv.appendChild(catBtn);
        });
        div.appendChild(catBtndiv);
    } catch (error) {
        console.error('Error fetching categories:', error);
        document.getElementById("categoryContainer").innerHTML = '<p class="loading-message">Fehler beim Laden von Kategorien. Bitte probiere es sp\xe4ter nochmal.</p>';
    }
}
//Fetchen der jeweiligen Kategorie, dabei nutzen wir auch hier das Page System zum nachladen um mehr Podcasts anzuzeigen
async function fetchCategoryPodcasts(id, name, page) {
    showLoadingAnimation();
    let url = new URL('https://api.fyyd.de/0.2/category');
    url.searchParams.append('category_id', id);
    url.searchParams.append('page', page);
    console.log('URL:', url.href);
    document.getElementById("category-search-monitor").innerHTML = name;
    const resultsDiv = document.getElementById("categoryResult");
    if (page === 0) resultsDiv.innerHTML = '<p class="loading-message">Inhalte der Kategorie ' + name + ' werden geladen...</p>';
    else {
        const existingMoreBtn = document.getElementById('more-btn');
        if (existingMoreBtn) resultsDiv.removeChild(existingMoreBtn);
        const loadingMessage = document.createElement('p');
        loadingMessage.textContent = "Weitere Podcasts werden geladen...";
        loadingMessage.setAttribute("id", "loading-message");
        resultsDiv.appendChild(loadingMessage);
    }
    try {
        const response = await fetch(url);
        const data = await response.json();
        insertCategorySearchResults(data, page === 0);
        const loadingMessage = document.getElementById('loading-message');
        if (loadingMessage) resultsDiv.removeChild(loadingMessage);
        //Erstellen des More-Buttons am Ende des Grids um mehr anzuzeigen
        const moreBtn = document.createElement('button');
        moreBtn.setAttribute("type", "button");
        moreBtn.setAttribute("id", "more-btn");
        moreBtn.style = "border: none; background: white;";
        moreBtn.addEventListener('click', function() {
            console.log("moreBtn");
            fetchCategoryPodcasts(id, name, page + 1);
        });
        const icon = document.createElement('img');
        icon.src = (0, _arrowRightPngDefault.default);
        icon.style.height = "90px";
        icon.style.marginBottom = "140px";
        icon.style.paddingLeft = "40px";
        moreBtn.appendChild(icon);
        resultsDiv.appendChild(moreBtn);
    } catch (error) {
        console.error('Error fetching category podcasts:', error);
        document.getElementById("categoryResult").innerHTML = '<p class="loading-message">Fehler beim Laden von Podcasts. Bitte probiere es sp\xe4ter nochmal.</p>';
    }
    hideLoadingAnimation();
}
//Einfügen der Ergebnis bei der Kategorie-Suche, isInitialLoad ist hier, dass der Inhalt bereits geladen wurde, dann würde das Div geleert werden
function insertCategorySearchResults(data, isInitialLoad) {
    const resultsDiv = document.getElementById("categoryResult");
    if (isInitialLoad) resultsDiv.innerHTML = '';
    data.data.podcasts.forEach((podcasts)=>{
        const podcastDiv = document.createElement('div');
        const titleDiv = document.createElement('h4');
        const podcastImage = document.createElement('img');
        const podcastLink = document.createElement('a');
        titleDiv.textContent = podcasts.title;
        podcastImage.src = podcasts.layoutImageURL;
        podcastImage.className = 'img';
        podcastLink.appendChild(podcastImage);
        podcastLink.appendChild(titleDiv);
        podcastLink.href = `podcastDash.html?id=${encodeURIComponent(podcasts.id)}&title=${encodeURIComponent(podcasts.title)}&description=${encodeURIComponent(podcasts.description)}&image=${encodeURIComponent(podcasts.layoutImageURL)}`;
        podcastLink.target = "_blank";
        podcastDiv.appendChild(podcastLink);
        resultsDiv.appendChild(podcastDiv);
    });
}
//Funktionen für die Animation
function showLoadingAnimation() {
    const loadingAnimation = document.getElementById('loadingAnimation');
    if (loadingAnimation) {
        loadingAnimation.style.animationPlayState = 'running'; // Start the animation
        loadingAnimation.style.display = 'flex'; // Ensure it's visible
    } else console.error("Loading animation element not found.");
}
function hideLoadingAnimation() {
    const loadingAnimation = document.getElementById('loadingAnimation');
    if (loadingAnimation) loadingAnimation.style.animationPlayState = 'paused'; // Pause the animation
    else console.error("Loading animation element not found.");
}
document.addEventListener('DOMContentLoaded', function() {
    document.getElementById("show-dialog").addEventListener("click", ()=>{
        document.getElementById("dialog").showModal();
    });
    document.getElementById("close-dialog").addEventListener("click", ()=>{
        document.getElementById("dialog").close();
    });
    document.getElementById("close-dialog2").addEventListener("click", ()=>{
        document.getElementById("dialog").close();
    });
    document.getElementById("close-dialog3").addEventListener("click", ()=>{
        document.getElementById("dialog").close();
    });
});
document.getElementById("showRegister").addEventListener("click", function(event) {
    event.preventDefault();
    document.querySelector(".form-wrapper").classList.add("switch-right");
});
document.getElementById("showLogin").addEventListener("click", function(event) {
    event.preventDefault();
    document.querySelector(".form-wrapper").classList.remove("switch-right");
});
document.getElementById("Anmeldung").addEventListener("click", login);
const userinput = document.getElementById("user");
const passwordinput = document.getElementById("passwd");
if (userinput && passwordinput) {
    passwordinput.addEventListener('keydown', function(event) {
        if (event.key === 'Enter') login();
    });
    userinput.addEventListener('keydown', function(event) {
        if (event.key === 'Enter') login();
    });
} else console.error("Login Credentials not complete!");
async function login() {
    const user = document.getElementById("user").value;
    const password = document.getElementById("passwd").value;
    const response = await fetch("http://localhost:10042/login", {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            username: user,
            password
        }),
        credentials: "include" // WICHTIG: Session-Cookies mit senden
    });
    const result = await response.json();
    alert(result.message);
    checkLoginStatus();
}
document.getElementById("registrieren").addEventListener("click", async function() {
    console.log("Registrierungs-Button wurde geklickt!");
    const username = document.getElementById("reg-email").value;
    const password = document.getElementById("reg-passwd").value;
    try {
        const response = await fetch("http://localhost:10042/register", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                username,
                password
            })
        });
        const result = await response.json();
        alert(result.message);
    } catch (error) {
        console.error("Fehler bei der Registrierung:", error);
        alert("Registrierung fehlgeschlagen!");
    }
});
async function checkLoginStatus() {
    const response = await fetch("http://localhost:10042/session", {
        credentials: "include"
    });
    const result = await response.json();
    profilePicture = document.getElementById("IconShow");
    if (result.loggedIn) {
        loggedIn = true;
        profilePicture.src = (0, _userRegPngDefault.default);
        console.log("Benutzer ist angemeldet:", result.user);
        loadDropDownWithoutReg();
    }
}
async function loadDropDownWithoutReg() {
    const userIcon = document.getElementById("IconShow");
    const dialog = document.getElementById("dialog");
    if (!userIcon) {
        console.error("Element 'IconShow' nicht gefunden!");
        return;
    }
    const dropdown = document.createElement("div");
    dropdown.classList.add("user-dropdown");
    dropdown.innerHTML = `
        <ul>
            <li><a href="profil.html">Profil</a></li>
            <li id="logoutBtn">Logout</li>
        </ul>
    `;
    dropdown.style.display = "none";
    document.body.appendChild(dropdown);
    try {
        const response = await fetch("http://localhost:10042/session", {
            credentials: "include"
        });
        const data = await response.json();
        if (data.loggedIn) {
            userIcon.addEventListener("click", (e)=>{
                e.stopPropagation();
                dropdown.style.display = dropdown.style.display === "block" ? "none" : "block";
                dropdown.style.position = "absolute";
                dropdown.style.top = `${userIcon.offsetTop + userIcon.offsetHeight}px`;
                dropdown.style.left = `${userIcon.offsetLeft}px`;
            });
            document.addEventListener("click", (e)=>{
                if (!dropdown.contains(e.target) && e.target !== userIcon) dropdown.style.display = "none";
            });
        } else userIcon.addEventListener("click", ()=>dialog.showModal());
    } catch (err) {
        console.error("Fehler beim Abrufen des Login-Status:", err);
    }
}

},{"/images/arrow_right.png":"b8t3b","/images/Haken.png":"7XrxI","/images/userReg.png":"6kQJM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","../../../backend/src/user":"aeQvR"}],"b8t3b":[function(require,module,exports,__globalThis) {
module.exports = require("55bd951f7b7265f2").getBundleURL('10Mjw') + "../arrow_right.ee810a87.png" + "?" + Date.now();

},{"55bd951f7b7265f2":"lgJ39"}],"lgJ39":[function(require,module,exports,__globalThis) {
"use strict";
var bundleURL = {};
function getBundleURLCached(id) {
    var value = bundleURL[id];
    if (!value) {
        value = getBundleURL();
        bundleURL[id] = value;
    }
    return value;
}
function getBundleURL() {
    try {
        throw new Error();
    } catch (err) {
        var matches = ('' + err.stack).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\/\/[^)\n]+/g);
        if (matches) // The first two stack frames will be this function and getBundleURLCached.
        // Use the 3rd one, which will be a runtime in the original bundle.
        return getBaseURL(matches[2]);
    }
    return '/';
}
function getBaseURL(url) {
    return ('' + url).replace(/^((?:https?|file|ftp|(chrome|moz|safari-web)-extension):\/\/.+)\/[^/]+$/, '$1') + '/';
}
// TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.
function getOrigin(url) {
    var matches = ('' + url).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\/\/[^/]+/);
    if (!matches) throw new Error('Origin not found');
    return matches[0];
}
exports.getBundleURL = getBundleURLCached;
exports.getBaseURL = getBaseURL;
exports.getOrigin = getOrigin;

},{}],"7XrxI":[function(require,module,exports,__globalThis) {
module.exports = require("e3ada2ce19a6ebbe").getBundleURL('10Mjw') + "../Haken.efe9cfd2.png" + "?" + Date.now();

},{"e3ada2ce19a6ebbe":"lgJ39"}],"6kQJM":[function(require,module,exports,__globalThis) {
module.exports = require("816934b1192d5d47").getBundleURL('10Mjw') + "../userReg.ce0786d7.png" + "?" + Date.now();

},{"816934b1192d5d47":"lgJ39"}],"gkKU3":[function(require,module,exports,__globalThis) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, '__esModule', {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === 'default' || key === '__esModule' || Object.prototype.hasOwnProperty.call(dest, key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"aeQvR":[function(require,module,exports,__globalThis) {
const mongoose = require("f781c870c93ceb3");
const passportLocalMongoose = require("f99f8bb86da8814e");
const UserSchema = new mongoose.Schema({
    username: String,
    password: String
});
// Passport-Plugin hinzufügen
UserSchema.plugin(passportLocalMongoose);
module.exports = mongoose.model("User", UserSchema);

},{"f781c870c93ceb3":"03Vvx","f99f8bb86da8814e":"k9sH4"}],"03Vvx":[function(require,module,exports,__globalThis) {
/*! For license information please see browser.umd.js.LICENSE.txt */ !function(t, e) {
    module.exports = e();
}("undefined" != typeof self ? self : this, ()=>(()=>{
        var t = {
            1419: (t, e, r)=>{
                var n = e;
                n.bignum = r(7799), n.define = r(2392).define, n.base = r(1620), n.constants = r(8050), n.decoders = r(2240), n.encoders = r(9176);
            },
            2392: (t, e, r)=>{
                var n = r(1419), i = r(1679);
                function o(t, e) {
                    this.name = t, this.body = e, this.decoders = {}, this.encoders = {};
                }
                e.define = function(t, e) {
                    return new o(t, e);
                }, o.prototype._createNamed = function(t) {
                    var e;
                    try {
                        e = Object(function() {
                            var t = new Error("Cannot find module 'vm'");
                            throw t.code = "MODULE_NOT_FOUND", t;
                        }())("(function " + this.name + "(entity) {\n  this._initNamed(entity);\n})");
                    } catch (t) {
                        e = function(t) {
                            this._initNamed(t);
                        };
                    }
                    return i(e, t), e.prototype._initNamed = function(e) {
                        t.call(this, e);
                    }, new e(this);
                }, o.prototype._getDecoder = function(t) {
                    return t = t || "der", this.decoders.hasOwnProperty(t) || (this.decoders[t] = this._createNamed(n.decoders[t])), this.decoders[t];
                }, o.prototype.decode = function(t, e, r) {
                    return this._getDecoder(e).decode(t, r);
                }, o.prototype._getEncoder = function(t) {
                    return t = t || "der", this.encoders.hasOwnProperty(t) || (this.encoders[t] = this._createNamed(n.encoders[t])), this.encoders[t];
                }, o.prototype.encode = function(t, e, r) {
                    return this._getEncoder(e).encode(t, r);
                };
            },
            8260: (t, e, r)=>{
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                var i = r(1679), o = r(1620).Reporter, a = r(5832).Buffer;
                function s(t, e) {
                    o.call(this, e), a.isBuffer(t) ? (this.base = t, this.offset = 0, this.length = t.length) : this.error("Input not Buffer");
                }
                function u(t, e) {
                    if (Array.isArray(t)) this.length = 0, this.value = t.map(function(t) {
                        return t instanceof u || (t = new u(t, e)), this.length += t.length, t;
                    }, this);
                    else if ("number" == typeof t) {
                        if (!(0 <= t && t <= 255)) return e.error("non-byte EncoderBuffer value");
                        this.value = t, this.length = 1;
                    } else if ("string" == typeof t) this.value = t, this.length = a.byteLength(t);
                    else {
                        if (!a.isBuffer(t)) return e.error("Unsupported type: " + n(t));
                        this.value = t, this.length = t.length;
                    }
                }
                i(s, o), e.t = s, s.prototype.save = function() {
                    return {
                        offset: this.offset,
                        reporter: o.prototype.save.call(this)
                    };
                }, s.prototype.restore = function(t) {
                    var e = new s(this.base);
                    return e.offset = t.offset, e.length = this.offset, this.offset = t.offset, o.prototype.restore.call(this, t.reporter), e;
                }, s.prototype.isEmpty = function() {
                    return this.offset === this.length;
                }, s.prototype.readUInt8 = function(t) {
                    return this.offset + 1 <= this.length ? this.base.readUInt8(this.offset++, !0) : this.error(t || "DecoderBuffer overrun");
                }, s.prototype.skip = function(t, e) {
                    if (!(this.offset + t <= this.length)) return this.error(e || "DecoderBuffer overrun");
                    var r = new s(this.base);
                    return r._reporterState = this._reporterState, r.offset = this.offset, r.length = this.offset + t, this.offset += t, r;
                }, s.prototype.raw = function(t) {
                    return this.base.slice(t ? t.offset : this.offset, this.length);
                }, e.d = u, u.prototype.join = function(t, e) {
                    return t || (t = new a(this.length)), e || (e = 0), 0 === this.length || (Array.isArray(this.value) ? this.value.forEach(function(r) {
                        r.join(t, e), e += r.length;
                    }) : ("number" == typeof this.value ? t[e] = this.value : "string" == typeof this.value ? t.write(this.value, e) : a.isBuffer(this.value) && this.value.copy(t, e), e += this.length)), t;
                };
            },
            1620: (t, e, r)=>{
                var n = e;
                n.Reporter = r(6555).a, n.DecoderBuffer = r(8260).t, n.EncoderBuffer = r(8260).d, n.Node = r(4258);
            },
            4258: (t, e, r)=>{
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                var i = r(1620).Reporter, o = r(1620).EncoderBuffer, a = r(1620).DecoderBuffer, s = r(3528), u = [
                    "seq",
                    "seqof",
                    "set",
                    "setof",
                    "objid",
                    "bool",
                    "gentime",
                    "utctime",
                    "null_",
                    "enum",
                    "int",
                    "objDesc",
                    "bitstr",
                    "bmpstr",
                    "charstr",
                    "genstr",
                    "graphstr",
                    "ia5str",
                    "iso646str",
                    "numstr",
                    "octstr",
                    "printstr",
                    "t61str",
                    "unistr",
                    "utf8str",
                    "videostr"
                ], c = [
                    "key",
                    "obj",
                    "use",
                    "optional",
                    "explicit",
                    "implicit",
                    "def",
                    "choice",
                    "any",
                    "contains"
                ].concat(u);
                function f(t, e) {
                    var r = {};
                    this._baseState = r, r.enc = t, r.parent = e || null, r.children = null, r.tag = null, r.args = null, r.reverseArgs = null, r.choice = null, r.optional = !1, r.any = !1, r.obj = !1, r.use = null, r.useDecoder = null, r.key = null, r.default = null, r.explicit = null, r.implicit = null, r.contains = null, r.parent || (r.children = [], this._wrap());
                }
                t.exports = f;
                var l = [
                    "enc",
                    "parent",
                    "children",
                    "tag",
                    "args",
                    "reverseArgs",
                    "choice",
                    "optional",
                    "any",
                    "obj",
                    "use",
                    "alteredUse",
                    "key",
                    "default",
                    "explicit",
                    "implicit",
                    "contains"
                ];
                f.prototype.clone = function() {
                    var t = this._baseState, e = {};
                    l.forEach(function(r) {
                        e[r] = t[r];
                    });
                    var r = new this.constructor(e.parent);
                    return r._baseState = e, r;
                }, f.prototype._wrap = function() {
                    var t = this._baseState;
                    c.forEach(function(e) {
                        this[e] = function() {
                            var r = new this.constructor(this);
                            return t.children.push(r), r[e].apply(r, arguments);
                        };
                    }, this);
                }, f.prototype._init = function(t) {
                    var e = this._baseState;
                    s(null === e.parent), t.call(this), e.children = e.children.filter(function(t) {
                        return t._baseState.parent === this;
                    }, this), s.equal(e.children.length, 1, "Root node can have only one child");
                }, f.prototype._useArgs = function(t) {
                    var e = this._baseState, r = t.filter(function(t) {
                        return t instanceof this.constructor;
                    }, this);
                    t = t.filter(function(t) {
                        return !(t instanceof this.constructor);
                    }, this), 0 !== r.length && (s(null === e.children), e.children = r, r.forEach(function(t) {
                        t._baseState.parent = this;
                    }, this)), 0 !== t.length && (s(null === e.args), e.args = t, e.reverseArgs = t.map(function(t) {
                        if ("object" !== n(t) || t.constructor !== Object) return t;
                        var e = {};
                        return Object.keys(t).forEach(function(r) {
                            r == (0 | r) && (r |= 0);
                            var n = t[r];
                            e[n] = r;
                        }), e;
                    }));
                }, [
                    "_peekTag",
                    "_decodeTag",
                    "_use",
                    "_decodeStr",
                    "_decodeObjid",
                    "_decodeTime",
                    "_decodeNull",
                    "_decodeInt",
                    "_decodeBool",
                    "_decodeList",
                    "_encodeComposite",
                    "_encodeStr",
                    "_encodeObjid",
                    "_encodeTime",
                    "_encodeNull",
                    "_encodeInt",
                    "_encodeBool"
                ].forEach(function(t) {
                    f.prototype[t] = function() {
                        var e = this._baseState;
                        throw new Error(t + " not implemented for encoding: " + e.enc);
                    };
                }), u.forEach(function(t) {
                    f.prototype[t] = function() {
                        var e = this._baseState, r = Array.prototype.slice.call(arguments);
                        return s(null === e.tag), e.tag = t, this._useArgs(r), this;
                    };
                }), f.prototype.use = function(t) {
                    s(t);
                    var e = this._baseState;
                    return s(null === e.use), e.use = t, this;
                }, f.prototype.optional = function() {
                    return this._baseState.optional = !0, this;
                }, f.prototype.def = function(t) {
                    var e = this._baseState;
                    return s(null === e.default), e.default = t, e.optional = !0, this;
                }, f.prototype.explicit = function(t) {
                    var e = this._baseState;
                    return s(null === e.explicit && null === e.implicit), e.explicit = t, this;
                }, f.prototype.implicit = function(t) {
                    var e = this._baseState;
                    return s(null === e.explicit && null === e.implicit), e.implicit = t, this;
                }, f.prototype.obj = function() {
                    var t = this._baseState, e = Array.prototype.slice.call(arguments);
                    return t.obj = !0, 0 !== e.length && this._useArgs(e), this;
                }, f.prototype.key = function(t) {
                    var e = this._baseState;
                    return s(null === e.key), e.key = t, this;
                }, f.prototype.any = function() {
                    return this._baseState.any = !0, this;
                }, f.prototype.choice = function(t) {
                    var e = this._baseState;
                    return s(null === e.choice), e.choice = t, this._useArgs(Object.keys(t).map(function(e) {
                        return t[e];
                    })), this;
                }, f.prototype.contains = function(t) {
                    var e = this._baseState;
                    return s(null === e.use), e.contains = t, this;
                }, f.prototype._decode = function(t, e) {
                    var r = this._baseState;
                    if (null === r.parent) return t.wrapResult(r.children[0]._decode(t, e));
                    var n, i = r.default, o = !0, s = null;
                    if (null !== r.key && (s = t.enterKey(r.key)), r.optional) {
                        var u = null;
                        if (null !== r.explicit ? u = r.explicit : null !== r.implicit ? u = r.implicit : null !== r.tag && (u = r.tag), null !== u || r.any) {
                            if (o = this._peekTag(t, u, r.any), t.isError(o)) return o;
                        } else {
                            var c = t.save();
                            try {
                                null === r.choice ? this._decodeGeneric(r.tag, t, e) : this._decodeChoice(t, e), o = !0;
                            } catch (t) {
                                o = !1;
                            }
                            t.restore(c);
                        }
                    }
                    if (r.obj && o && (n = t.enterObject()), o) {
                        if (null !== r.explicit) {
                            var f = this._decodeTag(t, r.explicit);
                            if (t.isError(f)) return f;
                            t = f;
                        }
                        var l = t.offset;
                        if (null === r.use && null === r.choice) {
                            r.any && (c = t.save());
                            var h = this._decodeTag(t, null !== r.implicit ? r.implicit : r.tag, r.any);
                            if (t.isError(h)) return h;
                            r.any ? i = t.raw(c) : t = h;
                        }
                        if (e && e.track && null !== r.tag && e.track(t.path(), l, t.length, "tagged"), e && e.track && null !== r.tag && e.track(t.path(), t.offset, t.length, "content"), r.any || (i = null === r.choice ? this._decodeGeneric(r.tag, t, e) : this._decodeChoice(t, e)), t.isError(i)) return i;
                        if (r.any || null !== r.choice || null === r.children || r.children.forEach(function(r) {
                            r._decode(t, e);
                        }), r.contains && ("octstr" === r.tag || "bitstr" === r.tag)) {
                            var p = new a(i);
                            i = this._getUse(r.contains, t._reporterState.obj)._decode(p, e);
                        }
                    }
                    return r.obj && o && (i = t.leaveObject(n)), null === r.key || null === i && !0 !== o ? null !== s && t.exitKey(s) : t.leaveKey(s, r.key, i), i;
                }, f.prototype._decodeGeneric = function(t, e, r) {
                    var n = this._baseState;
                    return "seq" === t || "set" === t ? null : "seqof" === t || "setof" === t ? this._decodeList(e, t, n.args[0], r) : /str$/.test(t) ? this._decodeStr(e, t, r) : "objid" === t && n.args ? this._decodeObjid(e, n.args[0], n.args[1], r) : "objid" === t ? this._decodeObjid(e, null, null, r) : "gentime" === t || "utctime" === t ? this._decodeTime(e, t, r) : "null_" === t ? this._decodeNull(e, r) : "bool" === t ? this._decodeBool(e, r) : "objDesc" === t ? this._decodeStr(e, t, r) : "int" === t || "enum" === t ? this._decodeInt(e, n.args && n.args[0], r) : null !== n.use ? this._getUse(n.use, e._reporterState.obj)._decode(e, r) : e.error("unknown tag: " + t);
                }, f.prototype._getUse = function(t, e) {
                    var r = this._baseState;
                    return r.useDecoder = this._use(t, e), s(null === r.useDecoder._baseState.parent), r.useDecoder = r.useDecoder._baseState.children[0], r.implicit !== r.useDecoder._baseState.implicit && (r.useDecoder = r.useDecoder.clone(), r.useDecoder._baseState.implicit = r.implicit), r.useDecoder;
                }, f.prototype._decodeChoice = function(t, e) {
                    var r = this._baseState, n = null, i = !1;
                    return Object.keys(r.choice).some(function(o) {
                        var a = t.save(), s = r.choice[o];
                        try {
                            var u = s._decode(t, e);
                            if (t.isError(u)) return !1;
                            n = {
                                type: o,
                                value: u
                            }, i = !0;
                        } catch (e) {
                            return t.restore(a), !1;
                        }
                        return !0;
                    }, this), i ? n : t.error("Choice not matched");
                }, f.prototype._createEncoderBuffer = function(t) {
                    return new o(t, this.reporter);
                }, f.prototype._encode = function(t, e, r) {
                    var n = this._baseState;
                    if (null === n.default || n.default !== t) {
                        var i = this._encodeValue(t, e, r);
                        if (void 0 !== i && !this._skipDefault(i, e, r)) return i;
                    }
                }, f.prototype._encodeValue = function(t, e, r) {
                    var o = this._baseState;
                    if (null === o.parent) return o.children[0]._encode(t, e || new i);
                    var a = null;
                    if (this.reporter = e, o.optional && void 0 === t) {
                        if (null === o.default) return;
                        t = o.default;
                    }
                    var s = null, u = !1;
                    if (o.any) a = this._createEncoderBuffer(t);
                    else if (o.choice) a = this._encodeChoice(t, e);
                    else if (o.contains) s = this._getUse(o.contains, r)._encode(t, e), u = !0;
                    else if (o.children) s = o.children.map(function(r) {
                        if ("null_" === r._baseState.tag) return r._encode(null, e, t);
                        if (null === r._baseState.key) return e.error("Child should have a key");
                        var i = e.enterKey(r._baseState.key);
                        if ("object" !== n(t)) return e.error("Child expected, but input is not object");
                        var o = r._encode(t[r._baseState.key], e, t);
                        return e.leaveKey(i), o;
                    }, this).filter(function(t) {
                        return t;
                    }), s = this._createEncoderBuffer(s);
                    else if ("seqof" === o.tag || "setof" === o.tag) {
                        if (!o.args || 1 !== o.args.length) return e.error("Too many args for : " + o.tag);
                        if (!Array.isArray(t)) return e.error("seqof/setof, but data is not Array");
                        var c = this.clone();
                        c._baseState.implicit = null, s = this._createEncoderBuffer(t.map(function(r) {
                            var n = this._baseState;
                            return this._getUse(n.args[0], t)._encode(r, e);
                        }, c));
                    } else null !== o.use ? a = this._getUse(o.use, r)._encode(t, e) : (s = this._encodePrimitive(o.tag, t), u = !0);
                    if (!o.any && null === o.choice) {
                        var f = null !== o.implicit ? o.implicit : o.tag, l = null === o.implicit ? "universal" : "context";
                        null === f ? null === o.use && e.error("Tag could be omitted only for .use()") : null === o.use && (a = this._encodeComposite(f, u, l, s));
                    }
                    return null !== o.explicit && (a = this._encodeComposite(o.explicit, !1, "context", a)), a;
                }, f.prototype._encodeChoice = function(t, e) {
                    var r = this._baseState, n = r.choice[t.type];
                    return n || s(!1, t.type + " not found in " + JSON.stringify(Object.keys(r.choice))), n._encode(t.value, e);
                }, f.prototype._encodePrimitive = function(t, e) {
                    var r = this._baseState;
                    if (/str$/.test(t)) return this._encodeStr(e, t);
                    if ("objid" === t && r.args) return this._encodeObjid(e, r.reverseArgs[0], r.args[1]);
                    if ("objid" === t) return this._encodeObjid(e, null, null);
                    if ("gentime" === t || "utctime" === t) return this._encodeTime(e, t);
                    if ("null_" === t) return this._encodeNull();
                    if ("int" === t || "enum" === t) return this._encodeInt(e, r.args && r.reverseArgs[0]);
                    if ("bool" === t) return this._encodeBool(e);
                    if ("objDesc" === t) return this._encodeStr(e, t);
                    throw new Error("Unsupported tag: " + t);
                }, f.prototype._isNumstr = function(t) {
                    return /^[0-9 ]*$/.test(t);
                }, f.prototype._isPrintstr = function(t) {
                    return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(t);
                };
            },
            6555: (t, e, r)=>{
                var n = r(1679);
                function i(t) {
                    this._reporterState = {
                        obj: null,
                        path: [],
                        options: t || {},
                        errors: []
                    };
                }
                function o(t, e) {
                    this.path = t, this.rethrow(e);
                }
                e.a = i, i.prototype.isError = function(t) {
                    return t instanceof o;
                }, i.prototype.save = function() {
                    var t = this._reporterState;
                    return {
                        obj: t.obj,
                        pathLen: t.path.length
                    };
                }, i.prototype.restore = function(t) {
                    var e = this._reporterState;
                    e.obj = t.obj, e.path = e.path.slice(0, t.pathLen);
                }, i.prototype.enterKey = function(t) {
                    return this._reporterState.path.push(t);
                }, i.prototype.exitKey = function(t) {
                    var e = this._reporterState;
                    e.path = e.path.slice(0, t - 1);
                }, i.prototype.leaveKey = function(t, e, r) {
                    var n = this._reporterState;
                    this.exitKey(t), null !== n.obj && (n.obj[e] = r);
                }, i.prototype.path = function() {
                    return this._reporterState.path.join("/");
                }, i.prototype.enterObject = function() {
                    var t = this._reporterState, e = t.obj;
                    return t.obj = {}, e;
                }, i.prototype.leaveObject = function(t) {
                    var e = this._reporterState, r = e.obj;
                    return e.obj = t, r;
                }, i.prototype.error = function(t) {
                    var e, r = this._reporterState, n = t instanceof o;
                    if (e = n ? t : new o(r.path.map(function(t) {
                        return "[" + JSON.stringify(t) + "]";
                    }).join(""), t.message || t, t.stack), !r.options.partial) throw e;
                    return n || r.errors.push(e), e;
                }, i.prototype.wrapResult = function(t) {
                    var e = this._reporterState;
                    return e.options.partial ? {
                        result: this.isError(t) ? null : t,
                        errors: e.errors
                    } : t;
                }, n(o, Error), o.prototype.rethrow = function(t) {
                    if (this.message = t + " at: " + (this.path || "(shallow)"), Error.captureStackTrace && Error.captureStackTrace(this, o), !this.stack) try {
                        throw new Error(this.message);
                    } catch (t) {
                        this.stack = t.stack;
                    }
                    return this;
                };
            },
            425: (t, e, r)=>{
                var n = r(8050);
                e.tagClass = {
                    0: "universal",
                    1: "application",
                    2: "context",
                    3: "private"
                }, e.tagClassByName = n._reverse(e.tagClass), e.tag = {
                    0: "end",
                    1: "bool",
                    2: "int",
                    3: "bitstr",
                    4: "octstr",
                    5: "null_",
                    6: "objid",
                    7: "objDesc",
                    8: "external",
                    9: "real",
                    10: "enum",
                    11: "embed",
                    12: "utf8str",
                    13: "relativeOid",
                    16: "seq",
                    17: "set",
                    18: "numstr",
                    19: "printstr",
                    20: "t61str",
                    21: "videostr",
                    22: "ia5str",
                    23: "utctime",
                    24: "gentime",
                    25: "graphstr",
                    26: "iso646str",
                    27: "genstr",
                    28: "unistr",
                    29: "charstr",
                    30: "bmpstr"
                }, e.tagByName = n._reverse(e.tag);
            },
            8050: (t, e, r)=>{
                var n = e;
                n._reverse = function(t) {
                    var e = {};
                    return Object.keys(t).forEach(function(r) {
                        (0 | r) == r && (r |= 0);
                        var n = t[r];
                        e[n] = r;
                    }), e;
                }, n.der = r(425);
            },
            3879: (t, e, r)=>{
                var n = r(1679), i = r(1419), o = i.base, a = i.bignum, s = i.constants.der;
                function u(t) {
                    this.enc = "der", this.name = t.name, this.entity = t, this.tree = new c, this.tree._init(t.body);
                }
                function c(t) {
                    o.Node.call(this, "der", t);
                }
                function f(t, e) {
                    var r = t.readUInt8(e);
                    if (t.isError(r)) return r;
                    var n = s.tagClass[r >> 6], i = !(32 & r);
                    if (31 & ~r) r &= 31;
                    else {
                        var o = r;
                        for(r = 0; !(128 & ~o);){
                            if (o = t.readUInt8(e), t.isError(o)) return o;
                            r <<= 7, r |= 127 & o;
                        }
                    }
                    return {
                        cls: n,
                        primitive: i,
                        tag: r,
                        tagStr: s.tag[r]
                    };
                }
                function l(t, e, r) {
                    var n = t.readUInt8(r);
                    if (t.isError(n)) return n;
                    if (!e && 128 === n) return null;
                    if (!(128 & n)) return n;
                    var i = 127 & n;
                    if (i > 4) return t.error("length octect is too long");
                    n = 0;
                    for(var o = 0; o < i; o++){
                        n <<= 8;
                        var a = t.readUInt8(r);
                        if (t.isError(a)) return a;
                        n |= a;
                    }
                    return n;
                }
                t.exports = u, u.prototype.decode = function(t, e) {
                    return t instanceof o.DecoderBuffer || (t = new o.DecoderBuffer(t, e)), this.tree._decode(t, e);
                }, n(c, o.Node), c.prototype._peekTag = function(t, e, r) {
                    if (t.isEmpty()) return !1;
                    var n = t.save(), i = f(t, 'Failed to peek tag: "' + e + '"');
                    return t.isError(i) ? i : (t.restore(n), i.tag === e || i.tagStr === e || i.tagStr + "of" === e || r);
                }, c.prototype._decodeTag = function(t, e, r) {
                    var n = f(t, 'Failed to decode tag of "' + e + '"');
                    if (t.isError(n)) return n;
                    var i = l(t, n.primitive, 'Failed to get length of "' + e + '"');
                    if (t.isError(i)) return i;
                    if (!r && n.tag !== e && n.tagStr !== e && n.tagStr + "of" !== e) return t.error('Failed to match tag: "' + e + '"');
                    if (n.primitive || null !== i) return t.skip(i, 'Failed to match body of: "' + e + '"');
                    var o = t.save(), a = this._skipUntilEnd(t, 'Failed to skip indefinite length body: "' + this.tag + '"');
                    return t.isError(a) ? a : (i = t.offset - o.offset, t.restore(o), t.skip(i, 'Failed to match body of: "' + e + '"'));
                }, c.prototype._skipUntilEnd = function(t, e) {
                    for(;;){
                        var r = f(t, e);
                        if (t.isError(r)) return r;
                        var n, i = l(t, r.primitive, e);
                        if (t.isError(i)) return i;
                        if (n = r.primitive || null !== i ? t.skip(i) : this._skipUntilEnd(t, e), t.isError(n)) return n;
                        if ("end" === r.tagStr) break;
                    }
                }, c.prototype._decodeList = function(t, e, r, n) {
                    for(var i = []; !t.isEmpty();){
                        var o = this._peekTag(t, "end");
                        if (t.isError(o)) return o;
                        var a = r.decode(t, "der", n);
                        if (t.isError(a) && o) break;
                        i.push(a);
                    }
                    return i;
                }, c.prototype._decodeStr = function(t, e) {
                    if ("bitstr" === e) {
                        var r = t.readUInt8();
                        return t.isError(r) ? r : {
                            unused: r,
                            data: t.raw()
                        };
                    }
                    if ("bmpstr" === e) {
                        var n = t.raw();
                        if (n.length % 2 == 1) return t.error("Decoding of string type: bmpstr length mismatch");
                        for(var i = "", o = 0; o < n.length / 2; o++)i += String.fromCharCode(n.readUInt16BE(2 * o));
                        return i;
                    }
                    if ("numstr" === e) {
                        var a = t.raw().toString("ascii");
                        return this._isNumstr(a) ? a : t.error("Decoding of string type: numstr unsupported characters");
                    }
                    if ("octstr" === e) return t.raw();
                    if ("objDesc" === e) return t.raw();
                    if ("printstr" === e) {
                        var s = t.raw().toString("ascii");
                        return this._isPrintstr(s) ? s : t.error("Decoding of string type: printstr unsupported characters");
                    }
                    return /str$/.test(e) ? t.raw().toString() : t.error("Decoding of string type: " + e + " unsupported");
                }, c.prototype._decodeObjid = function(t, e, r) {
                    for(var n, i = [], o = 0; !t.isEmpty();){
                        var a = t.readUInt8();
                        o <<= 7, o |= 127 & a, 128 & a || (i.push(o), o = 0);
                    }
                    128 & a && i.push(o);
                    var s = i[0] / 40 | 0, u = i[0] % 40;
                    if (n = r ? i : [
                        s,
                        u
                    ].concat(i.slice(1)), e) {
                        var c = e[n.join(" ")];
                        void 0 === c && (c = e[n.join(".")]), void 0 !== c && (n = c);
                    }
                    return n;
                }, c.prototype._decodeTime = function(t, e) {
                    var r = t.raw().toString();
                    if ("gentime" === e) var n = 0 | r.slice(0, 4), i = 0 | r.slice(4, 6), o = 0 | r.slice(6, 8), a = 0 | r.slice(8, 10), s = 0 | r.slice(10, 12), u = 0 | r.slice(12, 14);
                    else {
                        if ("utctime" !== e) return t.error("Decoding " + e + " time is not supported yet");
                        n = 0 | r.slice(0, 2), i = 0 | r.slice(2, 4), o = 0 | r.slice(4, 6), a = 0 | r.slice(6, 8), s = 0 | r.slice(8, 10), u = 0 | r.slice(10, 12), n = n < 70 ? 2e3 + n : 1900 + n;
                    }
                    return Date.UTC(n, i - 1, o, a, s, u, 0);
                }, c.prototype._decodeNull = function(t) {
                    return null;
                }, c.prototype._decodeBool = function(t) {
                    var e = t.readUInt8();
                    return t.isError(e) ? e : 0 !== e;
                }, c.prototype._decodeInt = function(t, e) {
                    var r = t.raw(), n = new a(r);
                    return e && (n = e[n.toString(10)] || n), n;
                }, c.prototype._use = function(t, e) {
                    return "function" == typeof t && (t = t(e)), t._getDecoder("der").tree;
                };
            },
            2240: (t, e, r)=>{
                var n = e;
                n.der = r(3879), n.pem = r(8330);
            },
            8330: (t, e, r)=>{
                var n = r(1679), i = r(5832).Buffer, o = r(3879);
                function a(t) {
                    o.call(this, t), this.enc = "pem";
                }
                n(a, o), t.exports = a, a.prototype.decode = function(t, e) {
                    for(var r = t.toString().split(/[\r\n]+/g), n = e.label.toUpperCase(), a = /^-----(BEGIN|END) ([^-]+)-----$/, s = -1, u = -1, c = 0; c < r.length; c++){
                        var f = r[c].match(a);
                        if (null !== f && f[2] === n) {
                            if (-1 !== s) {
                                if ("END" !== f[1]) break;
                                u = c;
                                break;
                            }
                            if ("BEGIN" !== f[1]) break;
                            s = c;
                        }
                    }
                    if (-1 === s || -1 === u) throw new Error("PEM section not found for: " + n);
                    var l = r.slice(s + 1, u).join("");
                    l.replace(/[^a-z0-9\+\/=]+/gi, "");
                    var h = new i(l, "base64");
                    return o.prototype.decode.call(this, h, e);
                };
            },
            2655: (t, e, r)=>{
                var n = r(1679), i = r(5832).Buffer, o = r(1419), a = o.base, s = o.constants.der;
                function u(t) {
                    this.enc = "der", this.name = t.name, this.entity = t, this.tree = new c, this.tree._init(t.body);
                }
                function c(t) {
                    a.Node.call(this, "der", t);
                }
                function f(t) {
                    return t < 10 ? "0" + t : t;
                }
                t.exports = u, u.prototype.encode = function(t, e) {
                    return this.tree._encode(t, e).join();
                }, n(c, a.Node), c.prototype._encodeComposite = function(t, e, r, n) {
                    var o, a = function(t, e, r, n) {
                        var i;
                        if ("seqof" === t ? t = "seq" : "setof" === t && (t = "set"), s.tagByName.hasOwnProperty(t)) i = s.tagByName[t];
                        else {
                            if ("number" != typeof t || (0 | t) !== t) return n.error("Unknown tag: " + t);
                            i = t;
                        }
                        return i >= 31 ? n.error("Multi-octet tag encoding unsupported") : (e || (i |= 32), i |= s.tagClassByName[r || "universal"] << 6);
                    }(t, e, r, this.reporter);
                    if (n.length < 128) return (o = new i(2))[0] = a, o[1] = n.length, this._createEncoderBuffer([
                        o,
                        n
                    ]);
                    for(var u = 1, c = n.length; c >= 256; c >>= 8)u++;
                    (o = new i(2 + u))[0] = a, o[1] = 128 | u, c = 1 + u;
                    for(var f = n.length; f > 0; c--, f >>= 8)o[c] = 255 & f;
                    return this._createEncoderBuffer([
                        o,
                        n
                    ]);
                }, c.prototype._encodeStr = function(t, e) {
                    if ("bitstr" === e) return this._createEncoderBuffer([
                        0 | t.unused,
                        t.data
                    ]);
                    if ("bmpstr" === e) {
                        for(var r = new i(2 * t.length), n = 0; n < t.length; n++)r.writeUInt16BE(t.charCodeAt(n), 2 * n);
                        return this._createEncoderBuffer(r);
                    }
                    return "numstr" === e ? this._isNumstr(t) ? this._createEncoderBuffer(t) : this.reporter.error("Encoding of string type: numstr supports only digits and space") : "printstr" === e ? this._isPrintstr(t) ? this._createEncoderBuffer(t) : this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark") : /str$/.test(e) || "objDesc" === e ? this._createEncoderBuffer(t) : this.reporter.error("Encoding of string type: " + e + " unsupported");
                }, c.prototype._encodeObjid = function(t, e, r) {
                    if ("string" == typeof t) {
                        if (!e) return this.reporter.error("string objid given, but no values map found");
                        if (!e.hasOwnProperty(t)) return this.reporter.error("objid not found in values map");
                        t = e[t].split(/[\s\.]+/g);
                        for(var n = 0; n < t.length; n++)t[n] |= 0;
                    } else if (Array.isArray(t)) for(t = t.slice(), n = 0; n < t.length; n++)t[n] |= 0;
                    if (!Array.isArray(t)) return this.reporter.error("objid() should be either array or string, got: " + JSON.stringify(t));
                    if (!r) {
                        if (t[1] >= 40) return this.reporter.error("Second objid identifier OOB");
                        t.splice(0, 2, 40 * t[0] + t[1]);
                    }
                    var o = 0;
                    for(n = 0; n < t.length; n++){
                        var a = t[n];
                        for(o++; a >= 128; a >>= 7)o++;
                    }
                    var s = new i(o), u = s.length - 1;
                    for(n = t.length - 1; n >= 0; n--)for(a = t[n], s[u--] = 127 & a; (a >>= 7) > 0;)s[u--] = 128 | 127 & a;
                    return this._createEncoderBuffer(s);
                }, c.prototype._encodeTime = function(t, e) {
                    var r, n = new Date(t);
                    return "gentime" === e ? r = [
                        f(n.getFullYear()),
                        f(n.getUTCMonth() + 1),
                        f(n.getUTCDate()),
                        f(n.getUTCHours()),
                        f(n.getUTCMinutes()),
                        f(n.getUTCSeconds()),
                        "Z"
                    ].join("") : "utctime" === e ? r = [
                        f(n.getFullYear() % 100),
                        f(n.getUTCMonth() + 1),
                        f(n.getUTCDate()),
                        f(n.getUTCHours()),
                        f(n.getUTCMinutes()),
                        f(n.getUTCSeconds()),
                        "Z"
                    ].join("") : this.reporter.error("Encoding " + e + " time is not supported yet"), this._encodeStr(r, "octstr");
                }, c.prototype._encodeNull = function() {
                    return this._createEncoderBuffer("");
                }, c.prototype._encodeInt = function(t, e) {
                    if ("string" == typeof t) {
                        if (!e) return this.reporter.error("String int or enum given, but no values map");
                        if (!e.hasOwnProperty(t)) return this.reporter.error("Values map doesn't contain: " + JSON.stringify(t));
                        t = e[t];
                    }
                    if ("number" != typeof t && !i.isBuffer(t)) {
                        var r = t.toArray();
                        !t.sign && 128 & r[0] && r.unshift(0), t = new i(r);
                    }
                    if (i.isBuffer(t)) {
                        var n = t.length;
                        0 === t.length && n++;
                        var o = new i(n);
                        return t.copy(o), 0 === t.length && (o[0] = 0), this._createEncoderBuffer(o);
                    }
                    if (t < 128) return this._createEncoderBuffer(t);
                    if (t < 256) return this._createEncoderBuffer([
                        0,
                        t
                    ]);
                    n = 1;
                    for(var a = t; a >= 256; a >>= 8)n++;
                    for(a = (o = new Array(n)).length - 1; a >= 0; a--)o[a] = 255 & t, t >>= 8;
                    return 128 & o[0] && o.unshift(0), this._createEncoderBuffer(new i(o));
                }, c.prototype._encodeBool = function(t) {
                    return this._createEncoderBuffer(t ? 255 : 0);
                }, c.prototype._use = function(t, e) {
                    return "function" == typeof t && (t = t(e)), t._getEncoder("der").tree;
                }, c.prototype._skipDefault = function(t, e, r) {
                    var n, i = this._baseState;
                    if (null === i.default) return !1;
                    var o = t.join();
                    if (void 0 === i.defaultBuffer && (i.defaultBuffer = this._encodeValue(i.default, e, r).join()), o.length !== i.defaultBuffer.length) return !1;
                    for(n = 0; n < o.length; n++)if (o[n] !== i.defaultBuffer[n]) return !1;
                    return !0;
                };
            },
            9176: (t, e, r)=>{
                var n = e;
                n.der = r(2655), n.pem = r(8418);
            },
            8418: (t, e, r)=>{
                var n = r(1679), i = r(2655);
                function o(t) {
                    i.call(this, t), this.enc = "pem";
                }
                n(o, i), t.exports = o, o.prototype.encode = function(t, e) {
                    for(var r = i.prototype.encode.call(this, t).toString("base64"), n = [
                        "-----BEGIN " + e.label + "-----"
                    ], o = 0; o < r.length; o += 64)n.push(r.slice(o, o + 64));
                    return n.push("-----END " + e.label + "-----"), n.join("\n");
                };
            },
            2402: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i(t) {
                    return i = "function" == typeof Symbol && "symbol" === n(Symbol.iterator) ? function(t) {
                        return n(t);
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : n(t);
                    }, i(t);
                }
                var o, a, s = r(3743).codes, u = s.ERR_AMBIGUOUS_ARGUMENT, c = s.ERR_INVALID_ARG_TYPE, f = s.ERR_INVALID_ARG_VALUE, l = s.ERR_INVALID_RETURN_VALUE, h = s.ERR_MISSING_ARGS, p = r(9068), d = r(7352).inspect, y = r(7352).types, b = y.isPromise, m = y.isRegExp, v = Object.assign ? Object.assign : r(6182).assign, g = Object.is ? Object.is : r(2064);
                function _() {
                    var t = r(6193);
                    o = t.isDeepEqual, a = t.isDeepStrictEqual;
                }
                new Map;
                var w = !1, S = t.exports = E, O = {};
                function j(t) {
                    if (t.message instanceof Error) throw t.message;
                    throw new p(t);
                }
                function $(t, e, r, n) {
                    if (!r) {
                        var i = !1;
                        if (0 === e) i = !0, n = "No value argument passed to `assert.ok()`";
                        else if (n instanceof Error) throw n;
                        var o = new p({
                            actual: r,
                            expected: !0,
                            message: n,
                            operator: "==",
                            stackStartFn: t
                        });
                        throw o.generatedMessage = i, o;
                    }
                }
                function E() {
                    for(var t = arguments.length, e = new Array(t), r = 0; r < t; r++)e[r] = arguments[r];
                    $.apply(void 0, [
                        E,
                        e.length
                    ].concat(e));
                }
                S.fail = function t(e, r, n, i, o) {
                    var a, s = arguments.length;
                    if (0 === s ? a = "Failed" : 1 === s ? (n = e, e = void 0) : (!1 === w && (w = !0, (({
                        env: {}
                    }).emitWarning ? ({
                        env: {}
                    }).emitWarning : console.warn.bind(console))("assert.fail() with more than one argument is deprecated. Please use assert.strictEqual() instead or only pass a message.", "DeprecationWarning", "DEP0094")), 2 === s && (i = "!=")), n instanceof Error) throw n;
                    var u = {
                        actual: e,
                        expected: r,
                        operator: void 0 === i ? "fail" : i,
                        stackStartFn: o || t
                    };
                    void 0 !== n && (u.message = n);
                    var c = new p(u);
                    throw a && (c.message = a, c.generatedMessage = !0), c;
                }, S.AssertionError = p, S.ok = E, S.equal = function t(e, r, n) {
                    if (arguments.length < 2) throw new h("actual", "expected");
                    e != r && j({
                        actual: e,
                        expected: r,
                        message: n,
                        operator: "==",
                        stackStartFn: t
                    });
                }, S.notEqual = function t(e, r, n) {
                    if (arguments.length < 2) throw new h("actual", "expected");
                    e == r && j({
                        actual: e,
                        expected: r,
                        message: n,
                        operator: "!=",
                        stackStartFn: t
                    });
                }, S.deepEqual = function t(e, r, n) {
                    if (arguments.length < 2) throw new h("actual", "expected");
                    void 0 === o && _(), o(e, r) || j({
                        actual: e,
                        expected: r,
                        message: n,
                        operator: "deepEqual",
                        stackStartFn: t
                    });
                }, S.notDeepEqual = function t(e, r, n) {
                    if (arguments.length < 2) throw new h("actual", "expected");
                    void 0 === o && _(), o(e, r) && j({
                        actual: e,
                        expected: r,
                        message: n,
                        operator: "notDeepEqual",
                        stackStartFn: t
                    });
                }, S.deepStrictEqual = function t(e, r, n) {
                    if (arguments.length < 2) throw new h("actual", "expected");
                    void 0 === o && _(), a(e, r) || j({
                        actual: e,
                        expected: r,
                        message: n,
                        operator: "deepStrictEqual",
                        stackStartFn: t
                    });
                }, S.notDeepStrictEqual = function t(e, r, n) {
                    if (arguments.length < 2) throw new h("actual", "expected");
                    void 0 === o && _(), a(e, r) && j({
                        actual: e,
                        expected: r,
                        message: n,
                        operator: "notDeepStrictEqual",
                        stackStartFn: t
                    });
                }, S.strictEqual = function t(e, r, n) {
                    if (arguments.length < 2) throw new h("actual", "expected");
                    g(e, r) || j({
                        actual: e,
                        expected: r,
                        message: n,
                        operator: "strictEqual",
                        stackStartFn: t
                    });
                }, S.notStrictEqual = function t(e, r, n) {
                    if (arguments.length < 2) throw new h("actual", "expected");
                    g(e, r) && j({
                        actual: e,
                        expected: r,
                        message: n,
                        operator: "notStrictEqual",
                        stackStartFn: t
                    });
                };
                var A = function t(e, r, n) {
                    var i = this;
                    !function(t, e) {
                        if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                    }(this, t), r.forEach(function(t) {
                        t in e && (void 0 !== n && "string" == typeof n[t] && m(e[t]) && e[t].test(n[t]) ? i[t] = n[t] : i[t] = e[t]);
                    });
                };
                function P(t, e, r, n) {
                    if ("function" != typeof e) {
                        if (m(e)) return e.test(t);
                        if (2 === arguments.length) throw new c("expected", [
                            "Function",
                            "RegExp"
                        ], e);
                        if ("object" !== i(t) || null === t) {
                            var s = new p({
                                actual: t,
                                expected: e,
                                message: r,
                                operator: "deepStrictEqual",
                                stackStartFn: n
                            });
                            throw s.operator = n.name, s;
                        }
                        var u = Object.keys(e);
                        if (e instanceof Error) u.push("name", "message");
                        else if (0 === u.length) throw new f("error", e, "may not be an empty object");
                        return void 0 === o && _(), u.forEach(function(i) {
                            "string" == typeof t[i] && m(e[i]) && e[i].test(t[i]) || function(t, e, r, n, i, o) {
                                if (!(r in t) || !a(t[r], e[r])) {
                                    if (!n) {
                                        var s = new A(t, i), u = new A(e, i, t), c = new p({
                                            actual: s,
                                            expected: u,
                                            operator: "deepStrictEqual",
                                            stackStartFn: o
                                        });
                                        throw c.actual = t, c.expected = e, c.operator = o.name, c;
                                    }
                                    j({
                                        actual: t,
                                        expected: e,
                                        message: n,
                                        operator: o.name,
                                        stackStartFn: o
                                    });
                                }
                            }(t, e, i, r, u, n);
                        }), !0;
                    }
                    return void 0 !== e.prototype && t instanceof e || !Error.isPrototypeOf(e) && !0 === e.call({}, t);
                }
                function x(t) {
                    if ("function" != typeof t) throw new c("fn", "Function", t);
                    try {
                        t();
                    } catch (t) {
                        return t;
                    }
                    return O;
                }
                function k(t) {
                    return b(t) || null !== t && "object" === i(t) && "function" == typeof t.then && "function" == typeof t.catch;
                }
                function M(t) {
                    return Promise.resolve().then(function() {
                        var e;
                        if ("function" == typeof t) {
                            if (!k(e = t())) throw new l("instance of Promise", "promiseFn", e);
                        } else {
                            if (!k(t)) throw new c("promiseFn", [
                                "Function",
                                "Promise"
                            ], t);
                            e = t;
                        }
                        return Promise.resolve().then(function() {
                            return e;
                        }).then(function() {
                            return O;
                        }).catch(function(t) {
                            return t;
                        });
                    });
                }
                function T(t, e, r, n) {
                    if ("string" == typeof r) {
                        if (4 === arguments.length) throw new c("error", [
                            "Object",
                            "Error",
                            "Function",
                            "RegExp"
                        ], r);
                        if ("object" === i(e) && null !== e) {
                            if (e.message === r) throw new u("error/message", 'The error message "'.concat(e.message, '" is identical to the message.'));
                        } else if (e === r) throw new u("error/message", 'The error "'.concat(e, '" is identical to the message.'));
                        n = r, r = void 0;
                    } else if (null != r && "object" !== i(r) && "function" != typeof r) throw new c("error", [
                        "Object",
                        "Error",
                        "Function",
                        "RegExp"
                    ], r);
                    if (e === O) {
                        var o = "";
                        r && r.name && (o += " (".concat(r.name, ")")), o += n ? ": ".concat(n) : ".";
                        var a = "rejects" === t.name ? "rejection" : "exception";
                        j({
                            actual: void 0,
                            expected: r,
                            operator: t.name,
                            message: "Missing expected ".concat(a).concat(o),
                            stackStartFn: t
                        });
                    }
                    if (r && !P(e, r, n, t)) throw e;
                }
                function B(t, e, r, n) {
                    if (e !== O) {
                        if ("string" == typeof r && (n = r, r = void 0), !r || P(e, r)) {
                            var i = n ? ": ".concat(n) : ".", o = "doesNotReject" === t.name ? "rejection" : "exception";
                            j({
                                actual: e,
                                expected: r,
                                operator: t.name,
                                message: "Got unwanted ".concat(o).concat(i, "\n") + 'Actual message: "'.concat(e && e.message, '"'),
                                stackStartFn: t
                            });
                        }
                        throw e;
                    }
                }
                function I() {
                    for(var t = arguments.length, e = new Array(t), r = 0; r < t; r++)e[r] = arguments[r];
                    $.apply(void 0, [
                        I,
                        e.length
                    ].concat(e));
                }
                S.throws = function t(e) {
                    for(var r = arguments.length, n = new Array(r > 1 ? r - 1 : 0), i = 1; i < r; i++)n[i - 1] = arguments[i];
                    T.apply(void 0, [
                        t,
                        x(e)
                    ].concat(n));
                }, S.rejects = function t(e) {
                    for(var r = arguments.length, n = new Array(r > 1 ? r - 1 : 0), i = 1; i < r; i++)n[i - 1] = arguments[i];
                    return M(e).then(function(e) {
                        return T.apply(void 0, [
                            t,
                            e
                        ].concat(n));
                    });
                }, S.doesNotThrow = function t(e) {
                    for(var r = arguments.length, n = new Array(r > 1 ? r - 1 : 0), i = 1; i < r; i++)n[i - 1] = arguments[i];
                    B.apply(void 0, [
                        t,
                        x(e)
                    ].concat(n));
                }, S.doesNotReject = function t(e) {
                    for(var r = arguments.length, n = new Array(r > 1 ? r - 1 : 0), i = 1; i < r; i++)n[i - 1] = arguments[i];
                    return M(e).then(function(e) {
                        return B.apply(void 0, [
                            t,
                            e
                        ].concat(n));
                    });
                }, S.ifError = function t(e) {
                    if (null != e) {
                        var r = "ifError got unwanted exception: ";
                        "object" === i(e) && "string" == typeof e.message ? 0 === e.message.length && e.constructor ? r += e.constructor.name : r += e.message : r += d(e);
                        var n = new p({
                            actual: e,
                            expected: null,
                            operator: "ifError",
                            message: r,
                            stackStartFn: t
                        }), o = e.stack;
                        if ("string" == typeof o) {
                            var a = o.split("\n");
                            a.shift();
                            for(var s = n.stack.split("\n"), u = 0; u < a.length; u++){
                                var c = s.indexOf(a[u]);
                                if (-1 !== c) {
                                    s = s.slice(0, c);
                                    break;
                                }
                            }
                            n.stack = "".concat(s.join("\n"), "\n").concat(a.join("\n"));
                        }
                        throw n;
                    }
                }, S.strict = v(I, S, {
                    equal: S.strictEqual,
                    deepEqual: S.deepStrictEqual,
                    notEqual: S.notStrictEqual,
                    notDeepEqual: S.notDeepStrictEqual
                }), S.strict.strict = S.strict;
            },
            9068: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i(t, e, r) {
                    return e in t ? Object.defineProperty(t, e, {
                        value: r,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0
                    }) : t[e] = r, t;
                }
                function o(t, e) {
                    for(var r = 0; r < e.length; r++){
                        var n = e[r];
                        n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
                    }
                }
                function a(t, e) {
                    return !e || "object" !== h(e) && "function" != typeof e ? s(t) : e;
                }
                function s(t) {
                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t;
                }
                function u(t) {
                    var e = "function" == typeof Map ? new Map : void 0;
                    return u = function(t) {
                        if (null === t || (r = t, -1 === Function.toString.call(r).indexOf("[native code]"))) return t;
                        var r;
                        if ("function" != typeof t) throw new TypeError("Super expression must either be null or a function");
                        if (void 0 !== e) {
                            if (e.has(t)) return e.get(t);
                            e.set(t, n);
                        }
                        function n() {
                            return c(t, arguments, l(this).constructor);
                        }
                        return n.prototype = Object.create(t.prototype, {
                            constructor: {
                                value: n,
                                enumerable: !1,
                                writable: !0,
                                configurable: !0
                            }
                        }), f(n, t);
                    }, u(t);
                }
                function c(t, e, r) {
                    return c = function() {
                        if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                        if (Reflect.construct.sham) return !1;
                        if ("function" == typeof Proxy) return !0;
                        try {
                            return Date.prototype.toString.call(Reflect.construct(Date, [], function() {})), !0;
                        } catch (t) {
                            return !1;
                        }
                    }() ? Reflect.construct : function(t, e, r) {
                        var n = [
                            null
                        ];
                        n.push.apply(n, e);
                        var i = new (Function.bind.apply(t, n));
                        return r && f(i, r.prototype), i;
                    }, c.apply(null, arguments);
                }
                function f(t, e) {
                    return f = Object.setPrototypeOf || function(t, e) {
                        return t.__proto__ = e, t;
                    }, f(t, e);
                }
                function l(t) {
                    return l = Object.setPrototypeOf ? Object.getPrototypeOf : function(t) {
                        return t.__proto__ || Object.getPrototypeOf(t);
                    }, l(t);
                }
                function h(t) {
                    return h = "function" == typeof Symbol && "symbol" === n(Symbol.iterator) ? function(t) {
                        return n(t);
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : n(t);
                    }, h(t);
                }
                var p = r(7352).inspect, d = r(3743).codes.ERR_INVALID_ARG_TYPE;
                function y(t, e, r) {
                    return (void 0 === r || r > t.length) && (r = t.length), t.substring(r - e.length, r) === e;
                }
                var b = "", m = "", v = "", g = "", _ = {
                    deepStrictEqual: "Expected values to be strictly deep-equal:",
                    strictEqual: "Expected values to be strictly equal:",
                    strictEqualObject: 'Expected "actual" to be reference-equal to "expected":',
                    deepEqual: "Expected values to be loosely deep-equal:",
                    equal: "Expected values to be loosely equal:",
                    notDeepStrictEqual: 'Expected "actual" not to be strictly deep-equal to:',
                    notStrictEqual: 'Expected "actual" to be strictly unequal to:',
                    notStrictEqualObject: 'Expected "actual" not to be reference-equal to "expected":',
                    notDeepEqual: 'Expected "actual" not to be loosely deep-equal to:',
                    notEqual: 'Expected "actual" to be loosely unequal to:',
                    notIdentical: "Values identical but not reference-equal:"
                };
                function w(t) {
                    var e = Object.keys(t), r = Object.create(Object.getPrototypeOf(t));
                    return e.forEach(function(e) {
                        r[e] = t[e];
                    }), Object.defineProperty(r, "message", {
                        value: t.message
                    }), r;
                }
                function S(t) {
                    return p(t, {
                        compact: !1,
                        customInspect: !1,
                        depth: 1e3,
                        maxArrayLength: 1 / 0,
                        showHidden: !1,
                        breakLength: 1 / 0,
                        showProxy: !1,
                        sorted: !0,
                        getters: !0
                    });
                }
                var O = function(t) {
                    function e(t) {
                        var r;
                        if (function(t, e) {
                            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                        }(this, e), "object" !== h(t) || null === t) throw new d("options", "Object", t);
                        var n = t.message, i = t.operator, o = t.stackStartFn, u = t.actual, c = t.expected, f = Error.stackTraceLimit;
                        if (Error.stackTraceLimit = 0, null != n) r = a(this, l(e).call(this, String(n)));
                        else if (({
                            env: {}
                        }).stderr && ({
                            env: {}
                        }).stderr.isTTY && (({
                            env: {}
                        }).stderr && ({
                            env: {}
                        }).stderr.getColorDepth && 1 !== ({
                            env: {}
                        }).stderr.getColorDepth() ? (b = "[34m", m = "[32m", g = "[39m", v = "[31m") : (b = "", m = "", g = "", v = "")), "object" === h(u) && null !== u && "object" === h(c) && null !== c && "stack" in u && u instanceof Error && "stack" in c && c instanceof Error && (u = w(u), c = w(c)), "deepStrictEqual" === i || "strictEqual" === i) r = a(this, l(e).call(this, function(t, e, r) {
                            var n = "", i = "", o = 0, a = "", s = !1, u = S(t), c = u.split("\n"), f = S(e).split("\n"), l = 0, p = "";
                            if ("strictEqual" === r && "object" === h(t) && "object" === h(e) && null !== t && null !== e && (r = "strictEqualObject"), 1 === c.length && 1 === f.length && c[0] !== f[0]) {
                                var d = c[0].length + f[0].length;
                                if (d <= 10) {
                                    if (!("object" === h(t) && null !== t || "object" === h(e) && null !== e || 0 === t && 0 === e)) return "".concat(_[r], "\n\n") + "".concat(c[0], " !== ").concat(f[0], "\n");
                                } else if ("strictEqualObject" !== r && d < (({
                                    env: {}
                                }).stderr && ({
                                    env: {}
                                }).stderr.isTTY ? ({
                                    env: {}
                                }).stderr.columns : 80)) {
                                    for(; c[0][l] === f[0][l];)l++;
                                    l > 2 && (p = "\n  ".concat(function(t, e) {
                                        if (e = Math.floor(e), 0 == t.length || 0 == e) return "";
                                        var r = t.length * e;
                                        for(e = Math.floor(Math.log(e) / Math.log(2)); e;)t += t, e--;
                                        return t + t.substring(0, r - t.length);
                                    }(" ", l), "^"), l = 0);
                                }
                            }
                            for(var w = c[c.length - 1], O = f[f.length - 1]; w === O && (l++ < 2 ? a = "\n  ".concat(w).concat(a) : n = w, c.pop(), f.pop(), 0 !== c.length && 0 !== f.length);)w = c[c.length - 1], O = f[f.length - 1];
                            var j = Math.max(c.length, f.length);
                            if (0 === j) {
                                var $ = u.split("\n");
                                if ($.length > 30) for($[26] = "".concat(b, "...").concat(g); $.length > 27;)$.pop();
                                return "".concat(_.notIdentical, "\n\n").concat($.join("\n"), "\n");
                            }
                            l > 3 && (a = "\n".concat(b, "...").concat(g).concat(a), s = !0), "" !== n && (a = "\n  ".concat(n).concat(a), n = "");
                            var E = 0, A = _[r] + "\n".concat(m, "+ actual").concat(g, " ").concat(v, "- expected").concat(g), P = " ".concat(b, "...").concat(g, " Lines skipped");
                            for(l = 0; l < j; l++){
                                var x = l - o;
                                if (c.length < l + 1) x > 1 && l > 2 && (x > 4 ? (i += "\n".concat(b, "...").concat(g), s = !0) : x > 3 && (i += "\n  ".concat(f[l - 2]), E++), i += "\n  ".concat(f[l - 1]), E++), o = l, n += "\n".concat(v, "-").concat(g, " ").concat(f[l]), E++;
                                else if (f.length < l + 1) x > 1 && l > 2 && (x > 4 ? (i += "\n".concat(b, "...").concat(g), s = !0) : x > 3 && (i += "\n  ".concat(c[l - 2]), E++), i += "\n  ".concat(c[l - 1]), E++), o = l, i += "\n".concat(m, "+").concat(g, " ").concat(c[l]), E++;
                                else {
                                    var k = f[l], M = c[l], T = M !== k && (!y(M, ",") || M.slice(0, -1) !== k);
                                    T && y(k, ",") && k.slice(0, -1) === M && (T = !1, M += ","), T ? (x > 1 && l > 2 && (x > 4 ? (i += "\n".concat(b, "...").concat(g), s = !0) : x > 3 && (i += "\n  ".concat(c[l - 2]), E++), i += "\n  ".concat(c[l - 1]), E++), o = l, i += "\n".concat(m, "+").concat(g, " ").concat(M), n += "\n".concat(v, "-").concat(g, " ").concat(k), E += 2) : (i += n, n = "", 1 !== x && 0 !== l || (i += "\n  ".concat(M), E++));
                                }
                                if (E > 20 && l < j - 2) return "".concat(A).concat(P, "\n").concat(i, "\n").concat(b, "...").concat(g).concat(n, "\n") + "".concat(b, "...").concat(g);
                            }
                            return "".concat(A).concat(s ? P : "", "\n").concat(i).concat(n).concat(a).concat(p);
                        }(u, c, i)));
                        else if ("notDeepStrictEqual" === i || "notStrictEqual" === i) {
                            var p = _[i], O = S(u).split("\n");
                            if ("notStrictEqual" === i && "object" === h(u) && null !== u && (p = _.notStrictEqualObject), O.length > 30) for(O[26] = "".concat(b, "...").concat(g); O.length > 27;)O.pop();
                            r = 1 === O.length ? a(this, l(e).call(this, "".concat(p, " ").concat(O[0]))) : a(this, l(e).call(this, "".concat(p, "\n\n").concat(O.join("\n"), "\n")));
                        } else {
                            var j = S(u), $ = "", E = _[i];
                            "notDeepEqual" === i || "notEqual" === i ? (j = "".concat(_[i], "\n\n").concat(j)).length > 1024 && (j = "".concat(j.slice(0, 1021), "...")) : ($ = "".concat(S(c)), j.length > 512 && (j = "".concat(j.slice(0, 509), "...")), $.length > 512 && ($ = "".concat($.slice(0, 509), "...")), "deepEqual" === i || "equal" === i ? j = "".concat(E, "\n\n").concat(j, "\n\nshould equal\n\n") : $ = " ".concat(i, " ").concat($)), r = a(this, l(e).call(this, "".concat(j).concat($)));
                        }
                        return Error.stackTraceLimit = f, r.generatedMessage = !n, Object.defineProperty(s(r), "name", {
                            value: "AssertionError [ERR_ASSERTION]",
                            enumerable: !1,
                            writable: !0,
                            configurable: !0
                        }), r.code = "ERR_ASSERTION", r.actual = u, r.expected = c, r.operator = i, Error.captureStackTrace && Error.captureStackTrace(s(r), o), r.stack, r.name = "AssertionError", a(r);
                    }
                    var r, n;
                    return function(t, e) {
                        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                        t.prototype = Object.create(e && e.prototype, {
                            constructor: {
                                value: t,
                                writable: !0,
                                configurable: !0
                            }
                        }), e && f(t, e);
                    }(e, t), r = e, n = [
                        {
                            key: "toString",
                            value: function() {
                                return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
                            }
                        },
                        {
                            key: p.custom,
                            value: function(t, e) {
                                return p(this, function(t) {
                                    for(var e = 1; e < arguments.length; e++){
                                        var r = null != arguments[e] ? arguments[e] : {}, n = Object.keys(r);
                                        "function" == typeof Object.getOwnPropertySymbols && (n = n.concat(Object.getOwnPropertySymbols(r).filter(function(t) {
                                            return Object.getOwnPropertyDescriptor(r, t).enumerable;
                                        }))), n.forEach(function(e) {
                                            i(t, e, r[e]);
                                        });
                                    }
                                    return t;
                                }({}, e, {
                                    customInspect: !1,
                                    depth: 0
                                }));
                            }
                        }
                    ], n && o(r.prototype, n), e;
                }(u(Error));
                t.exports = O;
            },
            3743: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i(t) {
                    return i = "function" == typeof Symbol && "symbol" === n(Symbol.iterator) ? function(t) {
                        return n(t);
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : n(t);
                    }, i(t);
                }
                function o(t) {
                    return o = Object.setPrototypeOf ? Object.getPrototypeOf : function(t) {
                        return t.__proto__ || Object.getPrototypeOf(t);
                    }, o(t);
                }
                function a(t, e) {
                    return a = Object.setPrototypeOf || function(t, e) {
                        return t.__proto__ = e, t;
                    }, a(t, e);
                }
                var s, u, c = {};
                function f(t, e, r) {
                    r || (r = Error);
                    var n = function(r) {
                        function n(r, a, s) {
                            var u;
                            return function(t, e) {
                                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                            }(this, n), u = function(t, e) {
                                return !e || "object" !== i(e) && "function" != typeof e ? function(t) {
                                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                                    return t;
                                }(t) : e;
                            }(this, o(n).call(this, function(t, r, n) {
                                return "string" == typeof e ? e : e(t, r, n);
                            }(r, a, s))), u.code = t, u;
                        }
                        return function(t, e) {
                            if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                            t.prototype = Object.create(e && e.prototype, {
                                constructor: {
                                    value: t,
                                    writable: !0,
                                    configurable: !0
                                }
                            }), e && a(t, e);
                        }(n, r), n;
                    }(r);
                    c[t] = n;
                }
                function l(t, e) {
                    if (Array.isArray(t)) {
                        var r = t.length;
                        return t = t.map(function(t) {
                            return String(t);
                        }), r > 2 ? "one of ".concat(e, " ").concat(t.slice(0, r - 1).join(", "), ", or ") + t[r - 1] : 2 === r ? "one of ".concat(e, " ").concat(t[0], " or ").concat(t[1]) : "of ".concat(e, " ").concat(t[0]);
                    }
                    return "of ".concat(e, " ").concat(String(t));
                }
                f("ERR_AMBIGUOUS_ARGUMENT", 'The "%s" argument is ambiguous. %s', TypeError), f("ERR_INVALID_ARG_TYPE", function(t, e, n) {
                    var o, a, u, c, f;
                    if (void 0 === s && (s = r(2402)), s("string" == typeof t, "'name' must be a string"), "string" == typeof e && (a = "not ", e.substr(0, 4) === a) ? (o = "must not be", e = e.replace(/^not /, "")) : o = "must be", function(t, e, r) {
                        return (void 0 === r || r > t.length) && (r = t.length), t.substring(r - 9, r) === e;
                    }(t, " argument")) u = "The ".concat(t, " ").concat(o, " ").concat(l(e, "type"));
                    else {
                        var h = ("number" != typeof f && (f = 0), f + 1 > (c = t).length || -1 === c.indexOf(".", f) ? "argument" : "property");
                        u = 'The "'.concat(t, '" ').concat(h, " ").concat(o, " ").concat(l(e, "type"));
                    }
                    return u + ". Received type ".concat(i(n));
                }, TypeError), f("ERR_INVALID_ARG_VALUE", function(t, e) {
                    var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "is invalid";
                    void 0 === u && (u = r(7352));
                    var i = u.inspect(e);
                    return i.length > 128 && (i = "".concat(i.slice(0, 128), "...")), "The argument '".concat(t, "' ").concat(n, ". Received ").concat(i);
                }, TypeError, RangeError), f("ERR_INVALID_RETURN_VALUE", function(t, e, r) {
                    var n;
                    return n = r && r.constructor && r.constructor.name ? "instance of ".concat(r.constructor.name) : "type ".concat(i(r)), "Expected ".concat(t, ' to be returned from the "').concat(e, '"') + " function but got ".concat(n, ".");
                }, TypeError), f("ERR_MISSING_ARGS", function() {
                    for(var t = arguments.length, e = new Array(t), n = 0; n < t; n++)e[n] = arguments[n];
                    void 0 === s && (s = r(2402)), s(e.length > 0, "At least one arg needs to be specified");
                    var i = "The ", o = e.length;
                    switch(e = e.map(function(t) {
                        return '"'.concat(t, '"');
                    }), o){
                        case 1:
                            i += "".concat(e[0], " argument");
                            break;
                        case 2:
                            i += "".concat(e[0], " and ").concat(e[1], " arguments");
                            break;
                        default:
                            i += e.slice(0, o - 1).join(", "), i += ", and ".concat(e[o - 1], " arguments");
                    }
                    return "".concat(i, " must be specified");
                }, TypeError), t.exports.codes = c;
            },
            6193: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i(t, e) {
                    return function(t) {
                        if (Array.isArray(t)) return t;
                    }(t) || function(t, e) {
                        var r = [], n = !0, i = !1, o = void 0;
                        try {
                            for(var a, s = t[Symbol.iterator](); !(n = (a = s.next()).done) && (r.push(a.value), !e || r.length !== e); n = !0);
                        } catch (t) {
                            i = !0, o = t;
                        } finally{
                            try {
                                n || null == s.return || s.return();
                            } finally{
                                if (i) throw o;
                            }
                        }
                        return r;
                    }(t, e) || function() {
                        throw new TypeError("Invalid attempt to destructure non-iterable instance");
                    }();
                }
                function o(t) {
                    return o = "function" == typeof Symbol && "symbol" === n(Symbol.iterator) ? function(t) {
                        return n(t);
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : n(t);
                    }, o(t);
                }
                var a = void 0 !== /a/g.flags, s = function(t) {
                    var e = [];
                    return t.forEach(function(t) {
                        return e.push(t);
                    }), e;
                }, u = function(t) {
                    var e = [];
                    return t.forEach(function(t, r) {
                        return e.push([
                            r,
                            t
                        ]);
                    }), e;
                }, c = Object.is ? Object.is : r(2064), f = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function() {
                    return [];
                }, l = Number.isNaN ? Number.isNaN : r(6062);
                function h(t) {
                    return t.call.bind(t);
                }
                var p = h(Object.prototype.hasOwnProperty), d = h(Object.prototype.propertyIsEnumerable), y = h(Object.prototype.toString), b = r(7352).types, m = b.isAnyArrayBuffer, v = b.isArrayBufferView, g = b.isDate, _ = b.isMap, w = b.isRegExp, S = b.isSet, O = b.isNativeError, j = b.isBoxedPrimitive, $ = b.isNumberObject, E = b.isStringObject, A = b.isBooleanObject, P = b.isBigIntObject, x = b.isSymbolObject, k = b.isFloat32Array, M = b.isFloat64Array;
                function T(t) {
                    if (0 === t.length || t.length > 10) return !0;
                    for(var e = 0; e < t.length; e++){
                        var r = t.charCodeAt(e);
                        if (r < 48 || r > 57) return !0;
                    }
                    return 10 === t.length && t >= Math.pow(2, 32);
                }
                function B(t) {
                    return Object.keys(t).filter(T).concat(f(t).filter(Object.prototype.propertyIsEnumerable.bind(t)));
                }
                function I(t, e) {
                    if (t === e) return 0;
                    for(var r = t.length, n = e.length, i = 0, o = Math.min(r, n); i < o; ++i)if (t[i] !== e[i]) {
                        r = t[i], n = e[i];
                        break;
                    }
                    return r < n ? -1 : n < r ? 1 : 0;
                }
                function R(t, e, r, n) {
                    if (t === e) return 0 !== t || !r || c(t, e);
                    if (r) {
                        if ("object" !== o(t)) return "number" == typeof t && l(t) && l(e);
                        if ("object" !== o(e) || null === t || null === e) return !1;
                        if (Object.getPrototypeOf(t) !== Object.getPrototypeOf(e)) return !1;
                    } else {
                        if (null === t || "object" !== o(t)) return (null === e || "object" !== o(e)) && t == e;
                        if (null === e || "object" !== o(e)) return !1;
                    }
                    var i, s, u, f, h = y(t);
                    if (h !== y(e)) return !1;
                    if (Array.isArray(t)) {
                        if (t.length !== e.length) return !1;
                        var p = B(t), d = B(e);
                        return p.length === d.length && D(t, e, r, n, 1, p);
                    }
                    if ("[object Object]" === h && (!_(t) && _(e) || !S(t) && S(e))) return !1;
                    if (g(t)) {
                        if (!g(e) || Date.prototype.getTime.call(t) !== Date.prototype.getTime.call(e)) return !1;
                    } else if (w(t)) {
                        if (!w(e) || (u = t, f = e, !(a ? u.source === f.source && u.flags === f.flags : RegExp.prototype.toString.call(u) === RegExp.prototype.toString.call(f)))) return !1;
                    } else if (O(t) || t instanceof Error) {
                        if (t.message !== e.message || t.name !== e.name) return !1;
                    } else {
                        if (v(t)) {
                            if (r || !k(t) && !M(t)) {
                                if (!function(t, e) {
                                    return t.byteLength === e.byteLength && 0 === I(new Uint8Array(t.buffer, t.byteOffset, t.byteLength), new Uint8Array(e.buffer, e.byteOffset, e.byteLength));
                                }(t, e)) return !1;
                            } else if (!function(t, e) {
                                if (t.byteLength !== e.byteLength) return !1;
                                for(var r = 0; r < t.byteLength; r++)if (t[r] !== e[r]) return !1;
                                return !0;
                            }(t, e)) return !1;
                            var b = B(t), T = B(e);
                            return b.length === T.length && D(t, e, r, n, 0, b);
                        }
                        if (S(t)) return !(!S(e) || t.size !== e.size) && D(t, e, r, n, 2);
                        if (_(t)) return !(!_(e) || t.size !== e.size) && D(t, e, r, n, 3);
                        if (m(t)) {
                            if (s = e, (i = t).byteLength !== s.byteLength || 0 !== I(new Uint8Array(i), new Uint8Array(s))) return !1;
                        } else if (j(t) && !function(t, e) {
                            return $(t) ? $(e) && c(Number.prototype.valueOf.call(t), Number.prototype.valueOf.call(e)) : E(t) ? E(e) && String.prototype.valueOf.call(t) === String.prototype.valueOf.call(e) : A(t) ? A(e) && Boolean.prototype.valueOf.call(t) === Boolean.prototype.valueOf.call(e) : P(t) ? P(e) && BigInt.prototype.valueOf.call(t) === BigInt.prototype.valueOf.call(e) : x(e) && Symbol.prototype.valueOf.call(t) === Symbol.prototype.valueOf.call(e);
                        }(t, e)) return !1;
                    }
                    return D(t, e, r, n, 0);
                }
                function N(t, e) {
                    return e.filter(function(e) {
                        return d(t, e);
                    });
                }
                function D(t, e, r, n, a, c) {
                    if (5 === arguments.length) {
                        c = Object.keys(t);
                        var l = Object.keys(e);
                        if (c.length !== l.length) return !1;
                    }
                    for(var h = 0; h < c.length; h++)if (!p(e, c[h])) return !1;
                    if (r && 5 === arguments.length) {
                        var y = f(t);
                        if (0 !== y.length) {
                            var b = 0;
                            for(h = 0; h < y.length; h++){
                                var m = y[h];
                                if (d(t, m)) {
                                    if (!d(e, m)) return !1;
                                    c.push(m), b++;
                                } else if (d(e, m)) return !1;
                            }
                            var v = f(e);
                            if (y.length !== v.length && N(e, v).length !== b) return !1;
                        } else {
                            var g = f(e);
                            if (0 !== g.length && 0 !== N(e, g).length) return !1;
                        }
                    }
                    if (0 === c.length && (0 === a || 1 === a && 0 === t.length || 0 === t.size)) return !0;
                    if (void 0 === n) n = {
                        val1: new Map,
                        val2: new Map,
                        position: 0
                    };
                    else {
                        var _ = n.val1.get(t);
                        if (void 0 !== _) {
                            var w = n.val2.get(e);
                            if (void 0 !== w) return _ === w;
                        }
                        n.position++;
                    }
                    n.val1.set(t, n.position), n.val2.set(e, n.position);
                    var S = function(t, e, r, n, a, c) {
                        var f = 0;
                        if (2 === c) {
                            if (!function(t, e, r, n) {
                                for(var i = null, a = s(t), u = 0; u < a.length; u++){
                                    var c = a[u];
                                    if ("object" === o(c) && null !== c) null === i && (i = new Set), i.add(c);
                                    else if (!e.has(c)) {
                                        if (r) return !1;
                                        if (!U(t, e, c)) return !1;
                                        null === i && (i = new Set), i.add(c);
                                    }
                                }
                                if (null !== i) {
                                    for(var f = s(e), l = 0; l < f.length; l++){
                                        var h = f[l];
                                        if ("object" === o(h) && null !== h) {
                                            if (!L(i, h, r, n)) return !1;
                                        } else if (!r && !t.has(h) && !L(i, h, r, n)) return !1;
                                    }
                                    return 0 === i.size;
                                }
                                return !0;
                            }(t, e, r, a)) return !1;
                        } else if (3 === c) {
                            if (!function(t, e, r, n) {
                                for(var a = null, s = u(t), c = 0; c < s.length; c++){
                                    var f = i(s[c], 2), l = f[0], h = f[1];
                                    if ("object" === o(l) && null !== l) null === a && (a = new Set), a.add(l);
                                    else {
                                        var p = e.get(l);
                                        if (void 0 === p && !e.has(l) || !R(h, p, r, n)) {
                                            if (r) return !1;
                                            if (!q(t, e, l, h, n)) return !1;
                                            null === a && (a = new Set), a.add(l);
                                        }
                                    }
                                }
                                if (null !== a) {
                                    for(var d = u(e), y = 0; y < d.length; y++){
                                        var b = i(d[y], 2), m = (l = b[0], b[1]);
                                        if ("object" === o(l) && null !== l) {
                                            if (!F(a, t, l, m, r, n)) return !1;
                                        } else if (!(r || t.has(l) && R(t.get(l), m, !1, n) || F(a, t, l, m, !1, n))) return !1;
                                    }
                                    return 0 === a.size;
                                }
                                return !0;
                            }(t, e, r, a)) return !1;
                        } else if (1 === c) for(; f < t.length; f++){
                            if (!p(t, f)) {
                                if (p(e, f)) return !1;
                                for(var l = Object.keys(t); f < l.length; f++){
                                    var h = l[f];
                                    if (!p(e, h) || !R(t[h], e[h], r, a)) return !1;
                                }
                                return l.length === Object.keys(e).length;
                            }
                            if (!p(e, f) || !R(t[f], e[f], r, a)) return !1;
                        }
                        for(f = 0; f < n.length; f++){
                            var d = n[f];
                            if (!R(t[d], e[d], r, a)) return !1;
                        }
                        return !0;
                    }(t, e, r, c, n, a);
                    return n.val1.delete(t), n.val2.delete(e), S;
                }
                function L(t, e, r, n) {
                    for(var i = s(t), o = 0; o < i.length; o++){
                        var a = i[o];
                        if (R(e, a, r, n)) return t.delete(a), !0;
                    }
                    return !1;
                }
                function C(t) {
                    switch(o(t)){
                        case "undefined":
                            return null;
                        case "object":
                            return;
                        case "symbol":
                            return !1;
                        case "string":
                            t = +t;
                        case "number":
                            if (l(t)) return !1;
                    }
                    return !0;
                }
                function U(t, e, r) {
                    var n = C(r);
                    return null != n ? n : e.has(n) && !t.has(n);
                }
                function q(t, e, r, n, i) {
                    var o = C(r);
                    if (null != o) return o;
                    var a = e.get(o);
                    return !(void 0 === a && !e.has(o) || !R(n, a, !1, i)) && !t.has(o) && R(n, a, !1, i);
                }
                function F(t, e, r, n, i, o) {
                    for(var a = s(t), u = 0; u < a.length; u++){
                        var c = a[u];
                        if (R(r, c, i, o) && R(n, e.get(c), i, o)) return t.delete(c), !0;
                    }
                    return !1;
                }
                t.exports = {
                    isDeepEqual: function(t, e) {
                        return R(t, e, !1);
                    },
                    isDeepStrictEqual: function(t, e) {
                        return R(t, e, !0);
                    }
                };
            },
            6775: (t, e)=>{
                "use strict";
                e.byteLength = function(t) {
                    var e = s(t), r = e[0], n = e[1];
                    return 3 * (r + n) / 4 - n;
                }, e.toByteArray = function(t) {
                    var e, r, o = s(t), a = o[0], u = o[1], c = new i(function(t, e, r) {
                        return 3 * (e + r) / 4 - r;
                    }(0, a, u)), f = 0, l = u > 0 ? a - 4 : a;
                    for(r = 0; r < l; r += 4)e = n[t.charCodeAt(r)] << 18 | n[t.charCodeAt(r + 1)] << 12 | n[t.charCodeAt(r + 2)] << 6 | n[t.charCodeAt(r + 3)], c[f++] = e >> 16 & 255, c[f++] = e >> 8 & 255, c[f++] = 255 & e;
                    return 2 === u && (e = n[t.charCodeAt(r)] << 2 | n[t.charCodeAt(r + 1)] >> 4, c[f++] = 255 & e), 1 === u && (e = n[t.charCodeAt(r)] << 10 | n[t.charCodeAt(r + 1)] << 4 | n[t.charCodeAt(r + 2)] >> 2, c[f++] = e >> 8 & 255, c[f++] = 255 & e), c;
                }, e.fromByteArray = function(t) {
                    for(var e, n = t.length, i = n % 3, o = [], a = 16383, s = 0, c = n - i; s < c; s += a)o.push(u(t, s, s + a > c ? c : s + a));
                    return 1 === i ? (e = t[n - 1], o.push(r[e >> 2] + r[e << 4 & 63] + "==")) : 2 === i && (e = (t[n - 2] << 8) + t[n - 1], o.push(r[e >> 10] + r[e >> 4 & 63] + r[e << 2 & 63] + "=")), o.join("");
                };
                for(var r = [], n = [], i = "undefined" != typeof Uint8Array ? Uint8Array : Array, o = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", a = 0; a < 64; ++a)r[a] = o[a], n[o.charCodeAt(a)] = a;
                function s(t) {
                    var e = t.length;
                    if (e % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
                    var r = t.indexOf("=");
                    return -1 === r && (r = e), [
                        r,
                        r === e ? 0 : 4 - r % 4
                    ];
                }
                function u(t, e, n) {
                    for(var i, o, a = [], s = e; s < n; s += 3)i = (t[s] << 16 & 16711680) + (t[s + 1] << 8 & 65280) + (255 & t[s + 2]), a.push(r[(o = i) >> 18 & 63] + r[o >> 12 & 63] + r[o >> 6 & 63] + r[63 & o]);
                    return a.join("");
                }
                n["-".charCodeAt(0)] = 62, n["_".charCodeAt(0)] = 63;
            },
            7799: function(t, e, r) {
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                !function(t, e) {
                    "use strict";
                    function i(t, e) {
                        if (!t) throw new Error(e || "Assertion failed");
                    }
                    function o(t, e) {
                        t.super_ = e;
                        var r = function() {};
                        r.prototype = e.prototype, t.prototype = new r, t.prototype.constructor = t;
                    }
                    function a(t, e, r) {
                        if (a.isBN(t)) return t;
                        this.negative = 0, this.words = null, this.length = 0, this.red = null, null !== t && ("le" !== e && "be" !== e || (r = e, e = 10), this._init(t || 0, e || 10, r || "be"));
                    }
                    var s;
                    "object" === n(t) ? t.exports = a : e.BN = a, a.BN = a, a.wordSize = 26;
                    try {
                        s = "undefined" != typeof window && void 0 !== window.Buffer ? window.Buffer : r(7790).Buffer;
                    } catch (t) {}
                    function u(t, e) {
                        var r = t.charCodeAt(e);
                        return r >= 48 && r <= 57 ? r - 48 : r >= 65 && r <= 70 ? r - 55 : r >= 97 && r <= 102 ? r - 87 : void i(!1, "Invalid character in " + t);
                    }
                    function c(t, e, r) {
                        var n = u(t, r);
                        return r - 1 >= e && (n |= u(t, r - 1) << 4), n;
                    }
                    function f(t, e, r, n) {
                        for(var o = 0, a = 0, s = Math.min(t.length, r), u = e; u < s; u++){
                            var c = t.charCodeAt(u) - 48;
                            o *= n, a = c >= 49 ? c - 49 + 10 : c >= 17 ? c - 17 + 10 : c, i(c >= 0 && a < n, "Invalid character"), o += a;
                        }
                        return o;
                    }
                    function l(t, e) {
                        t.words = e.words, t.length = e.length, t.negative = e.negative, t.red = e.red;
                    }
                    if (a.isBN = function(t) {
                        return t instanceof a || null !== t && "object" === n(t) && t.constructor.wordSize === a.wordSize && Array.isArray(t.words);
                    }, a.max = function(t, e) {
                        return t.cmp(e) > 0 ? t : e;
                    }, a.min = function(t, e) {
                        return t.cmp(e) < 0 ? t : e;
                    }, a.prototype._init = function(t, e, r) {
                        if ("number" == typeof t) return this._initNumber(t, e, r);
                        if ("object" === n(t)) return this._initArray(t, e, r);
                        "hex" === e && (e = 16), i(e === (0 | e) && e >= 2 && e <= 36);
                        var o = 0;
                        "-" === (t = t.toString().replace(/\s+/g, ""))[0] && (o++, this.negative = 1), o < t.length && (16 === e ? this._parseHex(t, o, r) : (this._parseBase(t, e, o), "le" === r && this._initArray(this.toArray(), e, r)));
                    }, a.prototype._initNumber = function(t, e, r) {
                        t < 0 && (this.negative = 1, t = -t), t < 67108864 ? (this.words = [
                            67108863 & t
                        ], this.length = 1) : t < 4503599627370496 ? (this.words = [
                            67108863 & t,
                            t / 67108864 & 67108863
                        ], this.length = 2) : (i(t < 9007199254740992), this.words = [
                            67108863 & t,
                            t / 67108864 & 67108863,
                            1
                        ], this.length = 3), "le" === r && this._initArray(this.toArray(), e, r);
                    }, a.prototype._initArray = function(t, e, r) {
                        if (i("number" == typeof t.length), t.length <= 0) return this.words = [
                            0
                        ], this.length = 1, this;
                        this.length = Math.ceil(t.length / 3), this.words = new Array(this.length);
                        for(var n = 0; n < this.length; n++)this.words[n] = 0;
                        var o, a, s = 0;
                        if ("be" === r) for(n = t.length - 1, o = 0; n >= 0; n -= 3)a = t[n] | t[n - 1] << 8 | t[n - 2] << 16, this.words[o] |= a << s & 67108863, this.words[o + 1] = a >>> 26 - s & 67108863, (s += 24) >= 26 && (s -= 26, o++);
                        else if ("le" === r) for(n = 0, o = 0; n < t.length; n += 3)a = t[n] | t[n + 1] << 8 | t[n + 2] << 16, this.words[o] |= a << s & 67108863, this.words[o + 1] = a >>> 26 - s & 67108863, (s += 24) >= 26 && (s -= 26, o++);
                        return this._strip();
                    }, a.prototype._parseHex = function(t, e, r) {
                        this.length = Math.ceil((t.length - e) / 6), this.words = new Array(this.length);
                        for(var n = 0; n < this.length; n++)this.words[n] = 0;
                        var i, o = 0, a = 0;
                        if ("be" === r) for(n = t.length - 1; n >= e; n -= 2)i = c(t, e, n) << o, this.words[a] |= 67108863 & i, o >= 18 ? (o -= 18, a += 1, this.words[a] |= i >>> 26) : o += 8;
                        else for(n = (t.length - e) % 2 == 0 ? e + 1 : e; n < t.length; n += 2)i = c(t, e, n) << o, this.words[a] |= 67108863 & i, o >= 18 ? (o -= 18, a += 1, this.words[a] |= i >>> 26) : o += 8;
                        this._strip();
                    }, a.prototype._parseBase = function(t, e, r) {
                        this.words = [
                            0
                        ], this.length = 1;
                        for(var n = 0, i = 1; i <= 67108863; i *= e)n++;
                        n--, i = i / e | 0;
                        for(var o = t.length - r, a = o % n, s = Math.min(o, o - a) + r, u = 0, c = r; c < s; c += n)u = f(t, c, c + n, e), this.imuln(i), this.words[0] + u < 67108864 ? this.words[0] += u : this._iaddn(u);
                        if (0 !== a) {
                            var l = 1;
                            for(u = f(t, c, t.length, e), c = 0; c < a; c++)l *= e;
                            this.imuln(l), this.words[0] + u < 67108864 ? this.words[0] += u : this._iaddn(u);
                        }
                        this._strip();
                    }, a.prototype.copy = function(t) {
                        t.words = new Array(this.length);
                        for(var e = 0; e < this.length; e++)t.words[e] = this.words[e];
                        t.length = this.length, t.negative = this.negative, t.red = this.red;
                    }, a.prototype._move = function(t) {
                        l(t, this);
                    }, a.prototype.clone = function() {
                        var t = new a(null);
                        return this.copy(t), t;
                    }, a.prototype._expand = function(t) {
                        for(; this.length < t;)this.words[this.length++] = 0;
                        return this;
                    }, a.prototype._strip = function() {
                        for(; this.length > 1 && 0 === this.words[this.length - 1];)this.length--;
                        return this._normSign();
                    }, a.prototype._normSign = function() {
                        return 1 === this.length && 0 === this.words[0] && (this.negative = 0), this;
                    }, "undefined" != typeof Symbol && "function" == typeof Symbol.for) try {
                        a.prototype[Symbol.for("nodejs.util.inspect.custom")] = h;
                    } catch (t) {
                        a.prototype.inspect = h;
                    }
                    else a.prototype.inspect = h;
                    function h() {
                        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
                    }
                    var p = [
                        "",
                        "0",
                        "00",
                        "000",
                        "0000",
                        "00000",
                        "000000",
                        "0000000",
                        "00000000",
                        "000000000",
                        "0000000000",
                        "00000000000",
                        "000000000000",
                        "0000000000000",
                        "00000000000000",
                        "000000000000000",
                        "0000000000000000",
                        "00000000000000000",
                        "000000000000000000",
                        "0000000000000000000",
                        "00000000000000000000",
                        "000000000000000000000",
                        "0000000000000000000000",
                        "00000000000000000000000",
                        "000000000000000000000000",
                        "0000000000000000000000000"
                    ], d = [
                        0,
                        0,
                        25,
                        16,
                        12,
                        11,
                        10,
                        9,
                        8,
                        8,
                        7,
                        7,
                        7,
                        7,
                        6,
                        6,
                        6,
                        6,
                        6,
                        6,
                        6,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5
                    ], y = [
                        0,
                        0,
                        33554432,
                        43046721,
                        16777216,
                        48828125,
                        60466176,
                        40353607,
                        16777216,
                        43046721,
                        1e7,
                        19487171,
                        35831808,
                        62748517,
                        7529536,
                        11390625,
                        16777216,
                        24137569,
                        34012224,
                        47045881,
                        64e6,
                        4084101,
                        5153632,
                        6436343,
                        7962624,
                        9765625,
                        11881376,
                        14348907,
                        17210368,
                        20511149,
                        243e5,
                        28629151,
                        33554432,
                        39135393,
                        45435424,
                        52521875,
                        60466176
                    ];
                    function b(t, e, r) {
                        r.negative = e.negative ^ t.negative;
                        var n = t.length + e.length | 0;
                        r.length = n, n = n - 1 | 0;
                        var i = 0 | t.words[0], o = 0 | e.words[0], a = i * o, s = 67108863 & a, u = a / 67108864 | 0;
                        r.words[0] = s;
                        for(var c = 1; c < n; c++){
                            for(var f = u >>> 26, l = 67108863 & u, h = Math.min(c, e.length - 1), p = Math.max(0, c - t.length + 1); p <= h; p++){
                                var d = c - p | 0;
                                f += (a = (i = 0 | t.words[d]) * (o = 0 | e.words[p]) + l) / 67108864 | 0, l = 67108863 & a;
                            }
                            r.words[c] = 0 | l, u = 0 | f;
                        }
                        return 0 !== u ? r.words[c] = 0 | u : r.length--, r._strip();
                    }
                    a.prototype.toString = function(t, e) {
                        var r;
                        if (e = 0 | e || 1, 16 === (t = t || 10) || "hex" === t) {
                            r = "";
                            for(var n = 0, o = 0, a = 0; a < this.length; a++){
                                var s = this.words[a], u = (16777215 & (s << n | o)).toString(16);
                                o = s >>> 24 - n & 16777215, (n += 2) >= 26 && (n -= 26, a--), r = 0 !== o || a !== this.length - 1 ? p[6 - u.length] + u + r : u + r;
                            }
                            for(0 !== o && (r = o.toString(16) + r); r.length % e != 0;)r = "0" + r;
                            return 0 !== this.negative && (r = "-" + r), r;
                        }
                        if (t === (0 | t) && t >= 2 && t <= 36) {
                            var c = d[t], f = y[t];
                            r = "";
                            var l = this.clone();
                            for(l.negative = 0; !l.isZero();){
                                var h = l.modrn(f).toString(t);
                                r = (l = l.idivn(f)).isZero() ? h + r : p[c - h.length] + h + r;
                            }
                            for(this.isZero() && (r = "0" + r); r.length % e != 0;)r = "0" + r;
                            return 0 !== this.negative && (r = "-" + r), r;
                        }
                        i(!1, "Base should be between 2 and 36");
                    }, a.prototype.toNumber = function() {
                        var t = this.words[0];
                        return 2 === this.length ? t += 67108864 * this.words[1] : 3 === this.length && 1 === this.words[2] ? t += 4503599627370496 + 67108864 * this.words[1] : this.length > 2 && i(!1, "Number can only safely store up to 53 bits"), 0 !== this.negative ? -t : t;
                    }, a.prototype.toJSON = function() {
                        return this.toString(16, 2);
                    }, s && (a.prototype.toBuffer = function(t, e) {
                        return this.toArrayLike(s, t, e);
                    }), a.prototype.toArray = function(t, e) {
                        return this.toArrayLike(Array, t, e);
                    }, a.prototype.toArrayLike = function(t, e, r) {
                        this._strip();
                        var n = this.byteLength(), o = r || Math.max(1, n);
                        i(n <= o, "byte array longer than desired length"), i(o > 0, "Requested array length <= 0");
                        var a = function(t, e) {
                            return t.allocUnsafe ? t.allocUnsafe(e) : new t(e);
                        }(t, o);
                        return this["_toArrayLike" + ("le" === e ? "LE" : "BE")](a, n), a;
                    }, a.prototype._toArrayLikeLE = function(t, e) {
                        for(var r = 0, n = 0, i = 0, o = 0; i < this.length; i++){
                            var a = this.words[i] << o | n;
                            t[r++] = 255 & a, r < t.length && (t[r++] = a >> 8 & 255), r < t.length && (t[r++] = a >> 16 & 255), 6 === o ? (r < t.length && (t[r++] = a >> 24 & 255), n = 0, o = 0) : (n = a >>> 24, o += 2);
                        }
                        if (r < t.length) for(t[r++] = n; r < t.length;)t[r++] = 0;
                    }, a.prototype._toArrayLikeBE = function(t, e) {
                        for(var r = t.length - 1, n = 0, i = 0, o = 0; i < this.length; i++){
                            var a = this.words[i] << o | n;
                            t[r--] = 255 & a, r >= 0 && (t[r--] = a >> 8 & 255), r >= 0 && (t[r--] = a >> 16 & 255), 6 === o ? (r >= 0 && (t[r--] = a >> 24 & 255), n = 0, o = 0) : (n = a >>> 24, o += 2);
                        }
                        if (r >= 0) for(t[r--] = n; r >= 0;)t[r--] = 0;
                    }, Math.clz32 ? a.prototype._countBits = function(t) {
                        return 32 - Math.clz32(t);
                    } : a.prototype._countBits = function(t) {
                        var e = t, r = 0;
                        return e >= 4096 && (r += 13, e >>>= 13), e >= 64 && (r += 7, e >>>= 7), e >= 8 && (r += 4, e >>>= 4), e >= 2 && (r += 2, e >>>= 2), r + e;
                    }, a.prototype._zeroBits = function(t) {
                        if (0 === t) return 26;
                        var e = t, r = 0;
                        return 8191 & e || (r += 13, e >>>= 13), 127 & e || (r += 7, e >>>= 7), 15 & e || (r += 4, e >>>= 4), 3 & e || (r += 2, e >>>= 2), 1 & e || r++, r;
                    }, a.prototype.bitLength = function() {
                        var t = this.words[this.length - 1], e = this._countBits(t);
                        return 26 * (this.length - 1) + e;
                    }, a.prototype.zeroBits = function() {
                        if (this.isZero()) return 0;
                        for(var t = 0, e = 0; e < this.length; e++){
                            var r = this._zeroBits(this.words[e]);
                            if (t += r, 26 !== r) break;
                        }
                        return t;
                    }, a.prototype.byteLength = function() {
                        return Math.ceil(this.bitLength() / 8);
                    }, a.prototype.toTwos = function(t) {
                        return 0 !== this.negative ? this.abs().inotn(t).iaddn(1) : this.clone();
                    }, a.prototype.fromTwos = function(t) {
                        return this.testn(t - 1) ? this.notn(t).iaddn(1).ineg() : this.clone();
                    }, a.prototype.isNeg = function() {
                        return 0 !== this.negative;
                    }, a.prototype.neg = function() {
                        return this.clone().ineg();
                    }, a.prototype.ineg = function() {
                        return this.isZero() || (this.negative ^= 1), this;
                    }, a.prototype.iuor = function(t) {
                        for(; this.length < t.length;)this.words[this.length++] = 0;
                        for(var e = 0; e < t.length; e++)this.words[e] = this.words[e] | t.words[e];
                        return this._strip();
                    }, a.prototype.ior = function(t) {
                        return i(!(this.negative | t.negative)), this.iuor(t);
                    }, a.prototype.or = function(t) {
                        return this.length > t.length ? this.clone().ior(t) : t.clone().ior(this);
                    }, a.prototype.uor = function(t) {
                        return this.length > t.length ? this.clone().iuor(t) : t.clone().iuor(this);
                    }, a.prototype.iuand = function(t) {
                        var e;
                        e = this.length > t.length ? t : this;
                        for(var r = 0; r < e.length; r++)this.words[r] = this.words[r] & t.words[r];
                        return this.length = e.length, this._strip();
                    }, a.prototype.iand = function(t) {
                        return i(!(this.negative | t.negative)), this.iuand(t);
                    }, a.prototype.and = function(t) {
                        return this.length > t.length ? this.clone().iand(t) : t.clone().iand(this);
                    }, a.prototype.uand = function(t) {
                        return this.length > t.length ? this.clone().iuand(t) : t.clone().iuand(this);
                    }, a.prototype.iuxor = function(t) {
                        var e, r;
                        this.length > t.length ? (e = this, r = t) : (e = t, r = this);
                        for(var n = 0; n < r.length; n++)this.words[n] = e.words[n] ^ r.words[n];
                        if (this !== e) for(; n < e.length; n++)this.words[n] = e.words[n];
                        return this.length = e.length, this._strip();
                    }, a.prototype.ixor = function(t) {
                        return i(!(this.negative | t.negative)), this.iuxor(t);
                    }, a.prototype.xor = function(t) {
                        return this.length > t.length ? this.clone().ixor(t) : t.clone().ixor(this);
                    }, a.prototype.uxor = function(t) {
                        return this.length > t.length ? this.clone().iuxor(t) : t.clone().iuxor(this);
                    }, a.prototype.inotn = function(t) {
                        i("number" == typeof t && t >= 0);
                        var e = 0 | Math.ceil(t / 26), r = t % 26;
                        this._expand(e), r > 0 && e--;
                        for(var n = 0; n < e; n++)this.words[n] = 67108863 & ~this.words[n];
                        return r > 0 && (this.words[n] = ~this.words[n] & 67108863 >> 26 - r), this._strip();
                    }, a.prototype.notn = function(t) {
                        return this.clone().inotn(t);
                    }, a.prototype.setn = function(t, e) {
                        i("number" == typeof t && t >= 0);
                        var r = t / 26 | 0, n = t % 26;
                        return this._expand(r + 1), this.words[r] = e ? this.words[r] | 1 << n : this.words[r] & ~(1 << n), this._strip();
                    }, a.prototype.iadd = function(t) {
                        var e, r, n;
                        if (0 !== this.negative && 0 === t.negative) return this.negative = 0, e = this.isub(t), this.negative ^= 1, this._normSign();
                        if (0 === this.negative && 0 !== t.negative) return t.negative = 0, e = this.isub(t), t.negative = 1, e._normSign();
                        this.length > t.length ? (r = this, n = t) : (r = t, n = this);
                        for(var i = 0, o = 0; o < n.length; o++)e = (0 | r.words[o]) + (0 | n.words[o]) + i, this.words[o] = 67108863 & e, i = e >>> 26;
                        for(; 0 !== i && o < r.length; o++)e = (0 | r.words[o]) + i, this.words[o] = 67108863 & e, i = e >>> 26;
                        if (this.length = r.length, 0 !== i) this.words[this.length] = i, this.length++;
                        else if (r !== this) for(; o < r.length; o++)this.words[o] = r.words[o];
                        return this;
                    }, a.prototype.add = function(t) {
                        var e;
                        return 0 !== t.negative && 0 === this.negative ? (t.negative = 0, e = this.sub(t), t.negative ^= 1, e) : 0 === t.negative && 0 !== this.negative ? (this.negative = 0, e = t.sub(this), this.negative = 1, e) : this.length > t.length ? this.clone().iadd(t) : t.clone().iadd(this);
                    }, a.prototype.isub = function(t) {
                        if (0 !== t.negative) {
                            t.negative = 0;
                            var e = this.iadd(t);
                            return t.negative = 1, e._normSign();
                        }
                        if (0 !== this.negative) return this.negative = 0, this.iadd(t), this.negative = 1, this._normSign();
                        var r, n, i = this.cmp(t);
                        if (0 === i) return this.negative = 0, this.length = 1, this.words[0] = 0, this;
                        i > 0 ? (r = this, n = t) : (r = t, n = this);
                        for(var o = 0, a = 0; a < n.length; a++)o = (e = (0 | r.words[a]) - (0 | n.words[a]) + o) >> 26, this.words[a] = 67108863 & e;
                        for(; 0 !== o && a < r.length; a++)o = (e = (0 | r.words[a]) + o) >> 26, this.words[a] = 67108863 & e;
                        if (0 === o && a < r.length && r !== this) for(; a < r.length; a++)this.words[a] = r.words[a];
                        return this.length = Math.max(this.length, a), r !== this && (this.negative = 1), this._strip();
                    }, a.prototype.sub = function(t) {
                        return this.clone().isub(t);
                    };
                    var m = function(t, e, r) {
                        var n, i, o, a = t.words, s = e.words, u = r.words, c = 0, f = 0 | a[0], l = 8191 & f, h = f >>> 13, p = 0 | a[1], d = 8191 & p, y = p >>> 13, b = 0 | a[2], m = 8191 & b, v = b >>> 13, g = 0 | a[3], _ = 8191 & g, w = g >>> 13, S = 0 | a[4], O = 8191 & S, j = S >>> 13, $ = 0 | a[5], E = 8191 & $, A = $ >>> 13, P = 0 | a[6], x = 8191 & P, k = P >>> 13, M = 0 | a[7], T = 8191 & M, B = M >>> 13, I = 0 | a[8], R = 8191 & I, N = I >>> 13, D = 0 | a[9], L = 8191 & D, C = D >>> 13, U = 0 | s[0], q = 8191 & U, F = U >>> 13, V = 0 | s[1], z = 8191 & V, K = V >>> 13, H = 0 | s[2], W = 8191 & H, J = H >>> 13, G = 0 | s[3], Y = 8191 & G, Q = G >>> 13, X = 0 | s[4], Z = 8191 & X, tt = X >>> 13, et = 0 | s[5], rt = 8191 & et, nt = et >>> 13, it = 0 | s[6], ot = 8191 & it, at = it >>> 13, st = 0 | s[7], ut = 8191 & st, ct = st >>> 13, ft = 0 | s[8], lt = 8191 & ft, ht = ft >>> 13, pt = 0 | s[9], dt = 8191 & pt, yt = pt >>> 13;
                        r.negative = t.negative ^ e.negative, r.length = 19;
                        var bt = (c + (n = Math.imul(l, q)) | 0) + ((8191 & (i = (i = Math.imul(l, F)) + Math.imul(h, q) | 0)) << 13) | 0;
                        c = ((o = Math.imul(h, F)) + (i >>> 13) | 0) + (bt >>> 26) | 0, bt &= 67108863, n = Math.imul(d, q), i = (i = Math.imul(d, F)) + Math.imul(y, q) | 0, o = Math.imul(y, F);
                        var mt = (c + (n = n + Math.imul(l, z) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(l, K) | 0) + Math.imul(h, z) | 0)) << 13) | 0;
                        c = ((o = o + Math.imul(h, K) | 0) + (i >>> 13) | 0) + (mt >>> 26) | 0, mt &= 67108863, n = Math.imul(m, q), i = (i = Math.imul(m, F)) + Math.imul(v, q) | 0, o = Math.imul(v, F), n = n + Math.imul(d, z) | 0, i = (i = i + Math.imul(d, K) | 0) + Math.imul(y, z) | 0, o = o + Math.imul(y, K) | 0;
                        var vt = (c + (n = n + Math.imul(l, W) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(l, J) | 0) + Math.imul(h, W) | 0)) << 13) | 0;
                        c = ((o = o + Math.imul(h, J) | 0) + (i >>> 13) | 0) + (vt >>> 26) | 0, vt &= 67108863, n = Math.imul(_, q), i = (i = Math.imul(_, F)) + Math.imul(w, q) | 0, o = Math.imul(w, F), n = n + Math.imul(m, z) | 0, i = (i = i + Math.imul(m, K) | 0) + Math.imul(v, z) | 0, o = o + Math.imul(v, K) | 0, n = n + Math.imul(d, W) | 0, i = (i = i + Math.imul(d, J) | 0) + Math.imul(y, W) | 0, o = o + Math.imul(y, J) | 0;
                        var gt = (c + (n = n + Math.imul(l, Y) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(l, Q) | 0) + Math.imul(h, Y) | 0)) << 13) | 0;
                        c = ((o = o + Math.imul(h, Q) | 0) + (i >>> 13) | 0) + (gt >>> 26) | 0, gt &= 67108863, n = Math.imul(O, q), i = (i = Math.imul(O, F)) + Math.imul(j, q) | 0, o = Math.imul(j, F), n = n + Math.imul(_, z) | 0, i = (i = i + Math.imul(_, K) | 0) + Math.imul(w, z) | 0, o = o + Math.imul(w, K) | 0, n = n + Math.imul(m, W) | 0, i = (i = i + Math.imul(m, J) | 0) + Math.imul(v, W) | 0, o = o + Math.imul(v, J) | 0, n = n + Math.imul(d, Y) | 0, i = (i = i + Math.imul(d, Q) | 0) + Math.imul(y, Y) | 0, o = o + Math.imul(y, Q) | 0;
                        var _t = (c + (n = n + Math.imul(l, Z) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(l, tt) | 0) + Math.imul(h, Z) | 0)) << 13) | 0;
                        c = ((o = o + Math.imul(h, tt) | 0) + (i >>> 13) | 0) + (_t >>> 26) | 0, _t &= 67108863, n = Math.imul(E, q), i = (i = Math.imul(E, F)) + Math.imul(A, q) | 0, o = Math.imul(A, F), n = n + Math.imul(O, z) | 0, i = (i = i + Math.imul(O, K) | 0) + Math.imul(j, z) | 0, o = o + Math.imul(j, K) | 0, n = n + Math.imul(_, W) | 0, i = (i = i + Math.imul(_, J) | 0) + Math.imul(w, W) | 0, o = o + Math.imul(w, J) | 0, n = n + Math.imul(m, Y) | 0, i = (i = i + Math.imul(m, Q) | 0) + Math.imul(v, Y) | 0, o = o + Math.imul(v, Q) | 0, n = n + Math.imul(d, Z) | 0, i = (i = i + Math.imul(d, tt) | 0) + Math.imul(y, Z) | 0, o = o + Math.imul(y, tt) | 0;
                        var wt = (c + (n = n + Math.imul(l, rt) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(l, nt) | 0) + Math.imul(h, rt) | 0)) << 13) | 0;
                        c = ((o = o + Math.imul(h, nt) | 0) + (i >>> 13) | 0) + (wt >>> 26) | 0, wt &= 67108863, n = Math.imul(x, q), i = (i = Math.imul(x, F)) + Math.imul(k, q) | 0, o = Math.imul(k, F), n = n + Math.imul(E, z) | 0, i = (i = i + Math.imul(E, K) | 0) + Math.imul(A, z) | 0, o = o + Math.imul(A, K) | 0, n = n + Math.imul(O, W) | 0, i = (i = i + Math.imul(O, J) | 0) + Math.imul(j, W) | 0, o = o + Math.imul(j, J) | 0, n = n + Math.imul(_, Y) | 0, i = (i = i + Math.imul(_, Q) | 0) + Math.imul(w, Y) | 0, o = o + Math.imul(w, Q) | 0, n = n + Math.imul(m, Z) | 0, i = (i = i + Math.imul(m, tt) | 0) + Math.imul(v, Z) | 0, o = o + Math.imul(v, tt) | 0, n = n + Math.imul(d, rt) | 0, i = (i = i + Math.imul(d, nt) | 0) + Math.imul(y, rt) | 0, o = o + Math.imul(y, nt) | 0;
                        var St = (c + (n = n + Math.imul(l, ot) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(l, at) | 0) + Math.imul(h, ot) | 0)) << 13) | 0;
                        c = ((o = o + Math.imul(h, at) | 0) + (i >>> 13) | 0) + (St >>> 26) | 0, St &= 67108863, n = Math.imul(T, q), i = (i = Math.imul(T, F)) + Math.imul(B, q) | 0, o = Math.imul(B, F), n = n + Math.imul(x, z) | 0, i = (i = i + Math.imul(x, K) | 0) + Math.imul(k, z) | 0, o = o + Math.imul(k, K) | 0, n = n + Math.imul(E, W) | 0, i = (i = i + Math.imul(E, J) | 0) + Math.imul(A, W) | 0, o = o + Math.imul(A, J) | 0, n = n + Math.imul(O, Y) | 0, i = (i = i + Math.imul(O, Q) | 0) + Math.imul(j, Y) | 0, o = o + Math.imul(j, Q) | 0, n = n + Math.imul(_, Z) | 0, i = (i = i + Math.imul(_, tt) | 0) + Math.imul(w, Z) | 0, o = o + Math.imul(w, tt) | 0, n = n + Math.imul(m, rt) | 0, i = (i = i + Math.imul(m, nt) | 0) + Math.imul(v, rt) | 0, o = o + Math.imul(v, nt) | 0, n = n + Math.imul(d, ot) | 0, i = (i = i + Math.imul(d, at) | 0) + Math.imul(y, ot) | 0, o = o + Math.imul(y, at) | 0;
                        var Ot = (c + (n = n + Math.imul(l, ut) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(l, ct) | 0) + Math.imul(h, ut) | 0)) << 13) | 0;
                        c = ((o = o + Math.imul(h, ct) | 0) + (i >>> 13) | 0) + (Ot >>> 26) | 0, Ot &= 67108863, n = Math.imul(R, q), i = (i = Math.imul(R, F)) + Math.imul(N, q) | 0, o = Math.imul(N, F), n = n + Math.imul(T, z) | 0, i = (i = i + Math.imul(T, K) | 0) + Math.imul(B, z) | 0, o = o + Math.imul(B, K) | 0, n = n + Math.imul(x, W) | 0, i = (i = i + Math.imul(x, J) | 0) + Math.imul(k, W) | 0, o = o + Math.imul(k, J) | 0, n = n + Math.imul(E, Y) | 0, i = (i = i + Math.imul(E, Q) | 0) + Math.imul(A, Y) | 0, o = o + Math.imul(A, Q) | 0, n = n + Math.imul(O, Z) | 0, i = (i = i + Math.imul(O, tt) | 0) + Math.imul(j, Z) | 0, o = o + Math.imul(j, tt) | 0, n = n + Math.imul(_, rt) | 0, i = (i = i + Math.imul(_, nt) | 0) + Math.imul(w, rt) | 0, o = o + Math.imul(w, nt) | 0, n = n + Math.imul(m, ot) | 0, i = (i = i + Math.imul(m, at) | 0) + Math.imul(v, ot) | 0, o = o + Math.imul(v, at) | 0, n = n + Math.imul(d, ut) | 0, i = (i = i + Math.imul(d, ct) | 0) + Math.imul(y, ut) | 0, o = o + Math.imul(y, ct) | 0;
                        var jt = (c + (n = n + Math.imul(l, lt) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(l, ht) | 0) + Math.imul(h, lt) | 0)) << 13) | 0;
                        c = ((o = o + Math.imul(h, ht) | 0) + (i >>> 13) | 0) + (jt >>> 26) | 0, jt &= 67108863, n = Math.imul(L, q), i = (i = Math.imul(L, F)) + Math.imul(C, q) | 0, o = Math.imul(C, F), n = n + Math.imul(R, z) | 0, i = (i = i + Math.imul(R, K) | 0) + Math.imul(N, z) | 0, o = o + Math.imul(N, K) | 0, n = n + Math.imul(T, W) | 0, i = (i = i + Math.imul(T, J) | 0) + Math.imul(B, W) | 0, o = o + Math.imul(B, J) | 0, n = n + Math.imul(x, Y) | 0, i = (i = i + Math.imul(x, Q) | 0) + Math.imul(k, Y) | 0, o = o + Math.imul(k, Q) | 0, n = n + Math.imul(E, Z) | 0, i = (i = i + Math.imul(E, tt) | 0) + Math.imul(A, Z) | 0, o = o + Math.imul(A, tt) | 0, n = n + Math.imul(O, rt) | 0, i = (i = i + Math.imul(O, nt) | 0) + Math.imul(j, rt) | 0, o = o + Math.imul(j, nt) | 0, n = n + Math.imul(_, ot) | 0, i = (i = i + Math.imul(_, at) | 0) + Math.imul(w, ot) | 0, o = o + Math.imul(w, at) | 0, n = n + Math.imul(m, ut) | 0, i = (i = i + Math.imul(m, ct) | 0) + Math.imul(v, ut) | 0, o = o + Math.imul(v, ct) | 0, n = n + Math.imul(d, lt) | 0, i = (i = i + Math.imul(d, ht) | 0) + Math.imul(y, lt) | 0, o = o + Math.imul(y, ht) | 0;
                        var $t = (c + (n = n + Math.imul(l, dt) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(l, yt) | 0) + Math.imul(h, dt) | 0)) << 13) | 0;
                        c = ((o = o + Math.imul(h, yt) | 0) + (i >>> 13) | 0) + ($t >>> 26) | 0, $t &= 67108863, n = Math.imul(L, z), i = (i = Math.imul(L, K)) + Math.imul(C, z) | 0, o = Math.imul(C, K), n = n + Math.imul(R, W) | 0, i = (i = i + Math.imul(R, J) | 0) + Math.imul(N, W) | 0, o = o + Math.imul(N, J) | 0, n = n + Math.imul(T, Y) | 0, i = (i = i + Math.imul(T, Q) | 0) + Math.imul(B, Y) | 0, o = o + Math.imul(B, Q) | 0, n = n + Math.imul(x, Z) | 0, i = (i = i + Math.imul(x, tt) | 0) + Math.imul(k, Z) | 0, o = o + Math.imul(k, tt) | 0, n = n + Math.imul(E, rt) | 0, i = (i = i + Math.imul(E, nt) | 0) + Math.imul(A, rt) | 0, o = o + Math.imul(A, nt) | 0, n = n + Math.imul(O, ot) | 0, i = (i = i + Math.imul(O, at) | 0) + Math.imul(j, ot) | 0, o = o + Math.imul(j, at) | 0, n = n + Math.imul(_, ut) | 0, i = (i = i + Math.imul(_, ct) | 0) + Math.imul(w, ut) | 0, o = o + Math.imul(w, ct) | 0, n = n + Math.imul(m, lt) | 0, i = (i = i + Math.imul(m, ht) | 0) + Math.imul(v, lt) | 0, o = o + Math.imul(v, ht) | 0;
                        var Et = (c + (n = n + Math.imul(d, dt) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(d, yt) | 0) + Math.imul(y, dt) | 0)) << 13) | 0;
                        c = ((o = o + Math.imul(y, yt) | 0) + (i >>> 13) | 0) + (Et >>> 26) | 0, Et &= 67108863, n = Math.imul(L, W), i = (i = Math.imul(L, J)) + Math.imul(C, W) | 0, o = Math.imul(C, J), n = n + Math.imul(R, Y) | 0, i = (i = i + Math.imul(R, Q) | 0) + Math.imul(N, Y) | 0, o = o + Math.imul(N, Q) | 0, n = n + Math.imul(T, Z) | 0, i = (i = i + Math.imul(T, tt) | 0) + Math.imul(B, Z) | 0, o = o + Math.imul(B, tt) | 0, n = n + Math.imul(x, rt) | 0, i = (i = i + Math.imul(x, nt) | 0) + Math.imul(k, rt) | 0, o = o + Math.imul(k, nt) | 0, n = n + Math.imul(E, ot) | 0, i = (i = i + Math.imul(E, at) | 0) + Math.imul(A, ot) | 0, o = o + Math.imul(A, at) | 0, n = n + Math.imul(O, ut) | 0, i = (i = i + Math.imul(O, ct) | 0) + Math.imul(j, ut) | 0, o = o + Math.imul(j, ct) | 0, n = n + Math.imul(_, lt) | 0, i = (i = i + Math.imul(_, ht) | 0) + Math.imul(w, lt) | 0, o = o + Math.imul(w, ht) | 0;
                        var At = (c + (n = n + Math.imul(m, dt) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(m, yt) | 0) + Math.imul(v, dt) | 0)) << 13) | 0;
                        c = ((o = o + Math.imul(v, yt) | 0) + (i >>> 13) | 0) + (At >>> 26) | 0, At &= 67108863, n = Math.imul(L, Y), i = (i = Math.imul(L, Q)) + Math.imul(C, Y) | 0, o = Math.imul(C, Q), n = n + Math.imul(R, Z) | 0, i = (i = i + Math.imul(R, tt) | 0) + Math.imul(N, Z) | 0, o = o + Math.imul(N, tt) | 0, n = n + Math.imul(T, rt) | 0, i = (i = i + Math.imul(T, nt) | 0) + Math.imul(B, rt) | 0, o = o + Math.imul(B, nt) | 0, n = n + Math.imul(x, ot) | 0, i = (i = i + Math.imul(x, at) | 0) + Math.imul(k, ot) | 0, o = o + Math.imul(k, at) | 0, n = n + Math.imul(E, ut) | 0, i = (i = i + Math.imul(E, ct) | 0) + Math.imul(A, ut) | 0, o = o + Math.imul(A, ct) | 0, n = n + Math.imul(O, lt) | 0, i = (i = i + Math.imul(O, ht) | 0) + Math.imul(j, lt) | 0, o = o + Math.imul(j, ht) | 0;
                        var Pt = (c + (n = n + Math.imul(_, dt) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(_, yt) | 0) + Math.imul(w, dt) | 0)) << 13) | 0;
                        c = ((o = o + Math.imul(w, yt) | 0) + (i >>> 13) | 0) + (Pt >>> 26) | 0, Pt &= 67108863, n = Math.imul(L, Z), i = (i = Math.imul(L, tt)) + Math.imul(C, Z) | 0, o = Math.imul(C, tt), n = n + Math.imul(R, rt) | 0, i = (i = i + Math.imul(R, nt) | 0) + Math.imul(N, rt) | 0, o = o + Math.imul(N, nt) | 0, n = n + Math.imul(T, ot) | 0, i = (i = i + Math.imul(T, at) | 0) + Math.imul(B, ot) | 0, o = o + Math.imul(B, at) | 0, n = n + Math.imul(x, ut) | 0, i = (i = i + Math.imul(x, ct) | 0) + Math.imul(k, ut) | 0, o = o + Math.imul(k, ct) | 0, n = n + Math.imul(E, lt) | 0, i = (i = i + Math.imul(E, ht) | 0) + Math.imul(A, lt) | 0, o = o + Math.imul(A, ht) | 0;
                        var xt = (c + (n = n + Math.imul(O, dt) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(O, yt) | 0) + Math.imul(j, dt) | 0)) << 13) | 0;
                        c = ((o = o + Math.imul(j, yt) | 0) + (i >>> 13) | 0) + (xt >>> 26) | 0, xt &= 67108863, n = Math.imul(L, rt), i = (i = Math.imul(L, nt)) + Math.imul(C, rt) | 0, o = Math.imul(C, nt), n = n + Math.imul(R, ot) | 0, i = (i = i + Math.imul(R, at) | 0) + Math.imul(N, ot) | 0, o = o + Math.imul(N, at) | 0, n = n + Math.imul(T, ut) | 0, i = (i = i + Math.imul(T, ct) | 0) + Math.imul(B, ut) | 0, o = o + Math.imul(B, ct) | 0, n = n + Math.imul(x, lt) | 0, i = (i = i + Math.imul(x, ht) | 0) + Math.imul(k, lt) | 0, o = o + Math.imul(k, ht) | 0;
                        var kt = (c + (n = n + Math.imul(E, dt) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(E, yt) | 0) + Math.imul(A, dt) | 0)) << 13) | 0;
                        c = ((o = o + Math.imul(A, yt) | 0) + (i >>> 13) | 0) + (kt >>> 26) | 0, kt &= 67108863, n = Math.imul(L, ot), i = (i = Math.imul(L, at)) + Math.imul(C, ot) | 0, o = Math.imul(C, at), n = n + Math.imul(R, ut) | 0, i = (i = i + Math.imul(R, ct) | 0) + Math.imul(N, ut) | 0, o = o + Math.imul(N, ct) | 0, n = n + Math.imul(T, lt) | 0, i = (i = i + Math.imul(T, ht) | 0) + Math.imul(B, lt) | 0, o = o + Math.imul(B, ht) | 0;
                        var Mt = (c + (n = n + Math.imul(x, dt) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(x, yt) | 0) + Math.imul(k, dt) | 0)) << 13) | 0;
                        c = ((o = o + Math.imul(k, yt) | 0) + (i >>> 13) | 0) + (Mt >>> 26) | 0, Mt &= 67108863, n = Math.imul(L, ut), i = (i = Math.imul(L, ct)) + Math.imul(C, ut) | 0, o = Math.imul(C, ct), n = n + Math.imul(R, lt) | 0, i = (i = i + Math.imul(R, ht) | 0) + Math.imul(N, lt) | 0, o = o + Math.imul(N, ht) | 0;
                        var Tt = (c + (n = n + Math.imul(T, dt) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(T, yt) | 0) + Math.imul(B, dt) | 0)) << 13) | 0;
                        c = ((o = o + Math.imul(B, yt) | 0) + (i >>> 13) | 0) + (Tt >>> 26) | 0, Tt &= 67108863, n = Math.imul(L, lt), i = (i = Math.imul(L, ht)) + Math.imul(C, lt) | 0, o = Math.imul(C, ht);
                        var Bt = (c + (n = n + Math.imul(R, dt) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(R, yt) | 0) + Math.imul(N, dt) | 0)) << 13) | 0;
                        c = ((o = o + Math.imul(N, yt) | 0) + (i >>> 13) | 0) + (Bt >>> 26) | 0, Bt &= 67108863;
                        var It = (c + (n = Math.imul(L, dt)) | 0) + ((8191 & (i = (i = Math.imul(L, yt)) + Math.imul(C, dt) | 0)) << 13) | 0;
                        return c = ((o = Math.imul(C, yt)) + (i >>> 13) | 0) + (It >>> 26) | 0, It &= 67108863, u[0] = bt, u[1] = mt, u[2] = vt, u[3] = gt, u[4] = _t, u[5] = wt, u[6] = St, u[7] = Ot, u[8] = jt, u[9] = $t, u[10] = Et, u[11] = At, u[12] = Pt, u[13] = xt, u[14] = kt, u[15] = Mt, u[16] = Tt, u[17] = Bt, u[18] = It, 0 !== c && (u[19] = c, r.length++), r;
                    };
                    function v(t, e, r) {
                        r.negative = e.negative ^ t.negative, r.length = t.length + e.length;
                        for(var n = 0, i = 0, o = 0; o < r.length - 1; o++){
                            var a = i;
                            i = 0;
                            for(var s = 67108863 & n, u = Math.min(o, e.length - 1), c = Math.max(0, o - t.length + 1); c <= u; c++){
                                var f = o - c, l = (0 | t.words[f]) * (0 | e.words[c]), h = 67108863 & l;
                                s = 67108863 & (h = h + s | 0), i += (a = (a = a + (l / 67108864 | 0) | 0) + (h >>> 26) | 0) >>> 26, a &= 67108863;
                            }
                            r.words[o] = s, n = a, a = i;
                        }
                        return 0 !== n ? r.words[o] = n : r.length--, r._strip();
                    }
                    function g(t, e, r) {
                        return v(t, e, r);
                    }
                    function _(t, e) {
                        this.x = t, this.y = e;
                    }
                    Math.imul || (m = b), a.prototype.mulTo = function(t, e) {
                        var r = this.length + t.length;
                        return 10 === this.length && 10 === t.length ? m(this, t, e) : r < 63 ? b(this, t, e) : r < 1024 ? v(this, t, e) : g(this, t, e);
                    }, _.prototype.makeRBT = function(t) {
                        for(var e = new Array(t), r = a.prototype._countBits(t) - 1, n = 0; n < t; n++)e[n] = this.revBin(n, r, t);
                        return e;
                    }, _.prototype.revBin = function(t, e, r) {
                        if (0 === t || t === r - 1) return t;
                        for(var n = 0, i = 0; i < e; i++)n |= (1 & t) << e - i - 1, t >>= 1;
                        return n;
                    }, _.prototype.permute = function(t, e, r, n, i, o) {
                        for(var a = 0; a < o; a++)n[a] = e[t[a]], i[a] = r[t[a]];
                    }, _.prototype.transform = function(t, e, r, n, i, o) {
                        this.permute(o, t, e, r, n, i);
                        for(var a = 1; a < i; a <<= 1)for(var s = a << 1, u = Math.cos(2 * Math.PI / s), c = Math.sin(2 * Math.PI / s), f = 0; f < i; f += s)for(var l = u, h = c, p = 0; p < a; p++){
                            var d = r[f + p], y = n[f + p], b = r[f + p + a], m = n[f + p + a], v = l * b - h * m;
                            m = l * m + h * b, b = v, r[f + p] = d + b, n[f + p] = y + m, r[f + p + a] = d - b, n[f + p + a] = y - m, p !== s && (v = u * l - c * h, h = u * h + c * l, l = v);
                        }
                    }, _.prototype.guessLen13b = function(t, e) {
                        var r = 1 | Math.max(e, t), n = 1 & r, i = 0;
                        for(r = r / 2 | 0; r; r >>>= 1)i++;
                        return 1 << i + 1 + n;
                    }, _.prototype.conjugate = function(t, e, r) {
                        if (!(r <= 1)) for(var n = 0; n < r / 2; n++){
                            var i = t[n];
                            t[n] = t[r - n - 1], t[r - n - 1] = i, i = e[n], e[n] = -e[r - n - 1], e[r - n - 1] = -i;
                        }
                    }, _.prototype.normalize13b = function(t, e) {
                        for(var r = 0, n = 0; n < e / 2; n++){
                            var i = 8192 * Math.round(t[2 * n + 1] / e) + Math.round(t[2 * n] / e) + r;
                            t[n] = 67108863 & i, r = i < 67108864 ? 0 : i / 67108864 | 0;
                        }
                        return t;
                    }, _.prototype.convert13b = function(t, e, r, n) {
                        for(var o = 0, a = 0; a < e; a++)o += 0 | t[a], r[2 * a] = 8191 & o, o >>>= 13, r[2 * a + 1] = 8191 & o, o >>>= 13;
                        for(a = 2 * e; a < n; ++a)r[a] = 0;
                        i(0 === o), i(!(-8192 & o));
                    }, _.prototype.stub = function(t) {
                        for(var e = new Array(t), r = 0; r < t; r++)e[r] = 0;
                        return e;
                    }, _.prototype.mulp = function(t, e, r) {
                        var n = 2 * this.guessLen13b(t.length, e.length), i = this.makeRBT(n), o = this.stub(n), a = new Array(n), s = new Array(n), u = new Array(n), c = new Array(n), f = new Array(n), l = new Array(n), h = r.words;
                        h.length = n, this.convert13b(t.words, t.length, a, n), this.convert13b(e.words, e.length, c, n), this.transform(a, o, s, u, n, i), this.transform(c, o, f, l, n, i);
                        for(var p = 0; p < n; p++){
                            var d = s[p] * f[p] - u[p] * l[p];
                            u[p] = s[p] * l[p] + u[p] * f[p], s[p] = d;
                        }
                        return this.conjugate(s, u, n), this.transform(s, u, h, o, n, i), this.conjugate(h, o, n), this.normalize13b(h, n), r.negative = t.negative ^ e.negative, r.length = t.length + e.length, r._strip();
                    }, a.prototype.mul = function(t) {
                        var e = new a(null);
                        return e.words = new Array(this.length + t.length), this.mulTo(t, e);
                    }, a.prototype.mulf = function(t) {
                        var e = new a(null);
                        return e.words = new Array(this.length + t.length), g(this, t, e);
                    }, a.prototype.imul = function(t) {
                        return this.clone().mulTo(t, this);
                    }, a.prototype.imuln = function(t) {
                        var e = t < 0;
                        e && (t = -t), i("number" == typeof t), i(t < 67108864);
                        for(var r = 0, n = 0; n < this.length; n++){
                            var o = (0 | this.words[n]) * t, a = (67108863 & o) + (67108863 & r);
                            r >>= 26, r += o / 67108864 | 0, r += a >>> 26, this.words[n] = 67108863 & a;
                        }
                        return 0 !== r && (this.words[n] = r, this.length++), e ? this.ineg() : this;
                    }, a.prototype.muln = function(t) {
                        return this.clone().imuln(t);
                    }, a.prototype.sqr = function() {
                        return this.mul(this);
                    }, a.prototype.isqr = function() {
                        return this.imul(this.clone());
                    }, a.prototype.pow = function(t) {
                        var e = function(t) {
                            for(var e = new Array(t.bitLength()), r = 0; r < e.length; r++){
                                var n = r / 26 | 0, i = r % 26;
                                e[r] = t.words[n] >>> i & 1;
                            }
                            return e;
                        }(t);
                        if (0 === e.length) return new a(1);
                        for(var r = this, n = 0; n < e.length && 0 === e[n]; n++, r = r.sqr());
                        if (++n < e.length) for(var i = r.sqr(); n < e.length; n++, i = i.sqr())0 !== e[n] && (r = r.mul(i));
                        return r;
                    }, a.prototype.iushln = function(t) {
                        i("number" == typeof t && t >= 0);
                        var e, r = t % 26, n = (t - r) / 26, o = 67108863 >>> 26 - r << 26 - r;
                        if (0 !== r) {
                            var a = 0;
                            for(e = 0; e < this.length; e++){
                                var s = this.words[e] & o, u = (0 | this.words[e]) - s << r;
                                this.words[e] = u | a, a = s >>> 26 - r;
                            }
                            a && (this.words[e] = a, this.length++);
                        }
                        if (0 !== n) {
                            for(e = this.length - 1; e >= 0; e--)this.words[e + n] = this.words[e];
                            for(e = 0; e < n; e++)this.words[e] = 0;
                            this.length += n;
                        }
                        return this._strip();
                    }, a.prototype.ishln = function(t) {
                        return i(0 === this.negative), this.iushln(t);
                    }, a.prototype.iushrn = function(t, e, r) {
                        var n;
                        i("number" == typeof t && t >= 0), n = e ? (e - e % 26) / 26 : 0;
                        var o = t % 26, a = Math.min((t - o) / 26, this.length), s = 67108863 ^ 67108863 >>> o << o, u = r;
                        if (n -= a, n = Math.max(0, n), u) {
                            for(var c = 0; c < a; c++)u.words[c] = this.words[c];
                            u.length = a;
                        }
                        if (0 === a) ;
                        else if (this.length > a) for(this.length -= a, c = 0; c < this.length; c++)this.words[c] = this.words[c + a];
                        else this.words[0] = 0, this.length = 1;
                        var f = 0;
                        for(c = this.length - 1; c >= 0 && (0 !== f || c >= n); c--){
                            var l = 0 | this.words[c];
                            this.words[c] = f << 26 - o | l >>> o, f = l & s;
                        }
                        return u && 0 !== f && (u.words[u.length++] = f), 0 === this.length && (this.words[0] = 0, this.length = 1), this._strip();
                    }, a.prototype.ishrn = function(t, e, r) {
                        return i(0 === this.negative), this.iushrn(t, e, r);
                    }, a.prototype.shln = function(t) {
                        return this.clone().ishln(t);
                    }, a.prototype.ushln = function(t) {
                        return this.clone().iushln(t);
                    }, a.prototype.shrn = function(t) {
                        return this.clone().ishrn(t);
                    }, a.prototype.ushrn = function(t) {
                        return this.clone().iushrn(t);
                    }, a.prototype.testn = function(t) {
                        i("number" == typeof t && t >= 0);
                        var e = t % 26, r = (t - e) / 26, n = 1 << e;
                        return !(this.length <= r || !(this.words[r] & n));
                    }, a.prototype.imaskn = function(t) {
                        i("number" == typeof t && t >= 0);
                        var e = t % 26, r = (t - e) / 26;
                        if (i(0 === this.negative, "imaskn works only with positive numbers"), this.length <= r) return this;
                        if (0 !== e && r++, this.length = Math.min(r, this.length), 0 !== e) {
                            var n = 67108863 ^ 67108863 >>> e << e;
                            this.words[this.length - 1] &= n;
                        }
                        return this._strip();
                    }, a.prototype.maskn = function(t) {
                        return this.clone().imaskn(t);
                    }, a.prototype.iaddn = function(t) {
                        return i("number" == typeof t), i(t < 67108864), t < 0 ? this.isubn(-t) : 0 !== this.negative ? 1 === this.length && (0 | this.words[0]) <= t ? (this.words[0] = t - (0 | this.words[0]), this.negative = 0, this) : (this.negative = 0, this.isubn(t), this.negative = 1, this) : this._iaddn(t);
                    }, a.prototype._iaddn = function(t) {
                        this.words[0] += t;
                        for(var e = 0; e < this.length && this.words[e] >= 67108864; e++)this.words[e] -= 67108864, e === this.length - 1 ? this.words[e + 1] = 1 : this.words[e + 1]++;
                        return this.length = Math.max(this.length, e + 1), this;
                    }, a.prototype.isubn = function(t) {
                        if (i("number" == typeof t), i(t < 67108864), t < 0) return this.iaddn(-t);
                        if (0 !== this.negative) return this.negative = 0, this.iaddn(t), this.negative = 1, this;
                        if (this.words[0] -= t, 1 === this.length && this.words[0] < 0) this.words[0] = -this.words[0], this.negative = 1;
                        else for(var e = 0; e < this.length && this.words[e] < 0; e++)this.words[e] += 67108864, this.words[e + 1] -= 1;
                        return this._strip();
                    }, a.prototype.addn = function(t) {
                        return this.clone().iaddn(t);
                    }, a.prototype.subn = function(t) {
                        return this.clone().isubn(t);
                    }, a.prototype.iabs = function() {
                        return this.negative = 0, this;
                    }, a.prototype.abs = function() {
                        return this.clone().iabs();
                    }, a.prototype._ishlnsubmul = function(t, e, r) {
                        var n, o, a = t.length + r;
                        this._expand(a);
                        var s = 0;
                        for(n = 0; n < t.length; n++){
                            o = (0 | this.words[n + r]) + s;
                            var u = (0 | t.words[n]) * e;
                            s = ((o -= 67108863 & u) >> 26) - (u / 67108864 | 0), this.words[n + r] = 67108863 & o;
                        }
                        for(; n < this.length - r; n++)s = (o = (0 | this.words[n + r]) + s) >> 26, this.words[n + r] = 67108863 & o;
                        if (0 === s) return this._strip();
                        for(i(-1 === s), s = 0, n = 0; n < this.length; n++)s = (o = -(0 | this.words[n]) + s) >> 26, this.words[n] = 67108863 & o;
                        return this.negative = 1, this._strip();
                    }, a.prototype._wordDiv = function(t, e) {
                        var r = (this.length, t.length), n = this.clone(), i = t, o = 0 | i.words[i.length - 1];
                        0 != (r = 26 - this._countBits(o)) && (i = i.ushln(r), n.iushln(r), o = 0 | i.words[i.length - 1]);
                        var s, u = n.length - i.length;
                        if ("mod" !== e) {
                            (s = new a(null)).length = u + 1, s.words = new Array(s.length);
                            for(var c = 0; c < s.length; c++)s.words[c] = 0;
                        }
                        var f = n.clone()._ishlnsubmul(i, 1, u);
                        0 === f.negative && (n = f, s && (s.words[u] = 1));
                        for(var l = u - 1; l >= 0; l--){
                            var h = 67108864 * (0 | n.words[i.length + l]) + (0 | n.words[i.length + l - 1]);
                            for(h = Math.min(h / o | 0, 67108863), n._ishlnsubmul(i, h, l); 0 !== n.negative;)h--, n.negative = 0, n._ishlnsubmul(i, 1, l), n.isZero() || (n.negative ^= 1);
                            s && (s.words[l] = h);
                        }
                        return s && s._strip(), n._strip(), "div" !== e && 0 !== r && n.iushrn(r), {
                            div: s || null,
                            mod: n
                        };
                    }, a.prototype.divmod = function(t, e, r) {
                        var n, o, s;
                        return i(!t.isZero()), this.isZero() ? {
                            div: new a(0),
                            mod: new a(0)
                        } : 0 !== this.negative && 0 === t.negative ? (s = this.neg().divmod(t, e), "mod" !== e && (n = s.div.neg()), "div" !== e && (o = s.mod.neg(), r && 0 !== o.negative && o.iadd(t)), {
                            div: n,
                            mod: o
                        }) : 0 === this.negative && 0 !== t.negative ? (s = this.divmod(t.neg(), e), "mod" !== e && (n = s.div.neg()), {
                            div: n,
                            mod: s.mod
                        }) : this.negative & t.negative ? (s = this.neg().divmod(t.neg(), e), "div" !== e && (o = s.mod.neg(), r && 0 !== o.negative && o.isub(t)), {
                            div: s.div,
                            mod: o
                        }) : t.length > this.length || this.cmp(t) < 0 ? {
                            div: new a(0),
                            mod: this
                        } : 1 === t.length ? "div" === e ? {
                            div: this.divn(t.words[0]),
                            mod: null
                        } : "mod" === e ? {
                            div: null,
                            mod: new a(this.modrn(t.words[0]))
                        } : {
                            div: this.divn(t.words[0]),
                            mod: new a(this.modrn(t.words[0]))
                        } : this._wordDiv(t, e);
                    }, a.prototype.div = function(t) {
                        return this.divmod(t, "div", !1).div;
                    }, a.prototype.mod = function(t) {
                        return this.divmod(t, "mod", !1).mod;
                    }, a.prototype.umod = function(t) {
                        return this.divmod(t, "mod", !0).mod;
                    }, a.prototype.divRound = function(t) {
                        var e = this.divmod(t);
                        if (e.mod.isZero()) return e.div;
                        var r = 0 !== e.div.negative ? e.mod.isub(t) : e.mod, n = t.ushrn(1), i = t.andln(1), o = r.cmp(n);
                        return o < 0 || 1 === i && 0 === o ? e.div : 0 !== e.div.negative ? e.div.isubn(1) : e.div.iaddn(1);
                    }, a.prototype.modrn = function(t) {
                        var e = t < 0;
                        e && (t = -t), i(t <= 67108863);
                        for(var r = 67108864 % t, n = 0, o = this.length - 1; o >= 0; o--)n = (r * n + (0 | this.words[o])) % t;
                        return e ? -n : n;
                    }, a.prototype.modn = function(t) {
                        return this.modrn(t);
                    }, a.prototype.idivn = function(t) {
                        var e = t < 0;
                        e && (t = -t), i(t <= 67108863);
                        for(var r = 0, n = this.length - 1; n >= 0; n--){
                            var o = (0 | this.words[n]) + 67108864 * r;
                            this.words[n] = o / t | 0, r = o % t;
                        }
                        return this._strip(), e ? this.ineg() : this;
                    }, a.prototype.divn = function(t) {
                        return this.clone().idivn(t);
                    }, a.prototype.egcd = function(t) {
                        i(0 === t.negative), i(!t.isZero());
                        var e = this, r = t.clone();
                        e = 0 !== e.negative ? e.umod(t) : e.clone();
                        for(var n = new a(1), o = new a(0), s = new a(0), u = new a(1), c = 0; e.isEven() && r.isEven();)e.iushrn(1), r.iushrn(1), ++c;
                        for(var f = r.clone(), l = e.clone(); !e.isZero();){
                            for(var h = 0, p = 1; !(e.words[0] & p) && h < 26; ++h, p <<= 1);
                            if (h > 0) for(e.iushrn(h); h-- > 0;)(n.isOdd() || o.isOdd()) && (n.iadd(f), o.isub(l)), n.iushrn(1), o.iushrn(1);
                            for(var d = 0, y = 1; !(r.words[0] & y) && d < 26; ++d, y <<= 1);
                            if (d > 0) for(r.iushrn(d); d-- > 0;)(s.isOdd() || u.isOdd()) && (s.iadd(f), u.isub(l)), s.iushrn(1), u.iushrn(1);
                            e.cmp(r) >= 0 ? (e.isub(r), n.isub(s), o.isub(u)) : (r.isub(e), s.isub(n), u.isub(o));
                        }
                        return {
                            a: s,
                            b: u,
                            gcd: r.iushln(c)
                        };
                    }, a.prototype._invmp = function(t) {
                        i(0 === t.negative), i(!t.isZero());
                        var e = this, r = t.clone();
                        e = 0 !== e.negative ? e.umod(t) : e.clone();
                        for(var n, o = new a(1), s = new a(0), u = r.clone(); e.cmpn(1) > 0 && r.cmpn(1) > 0;){
                            for(var c = 0, f = 1; !(e.words[0] & f) && c < 26; ++c, f <<= 1);
                            if (c > 0) for(e.iushrn(c); c-- > 0;)o.isOdd() && o.iadd(u), o.iushrn(1);
                            for(var l = 0, h = 1; !(r.words[0] & h) && l < 26; ++l, h <<= 1);
                            if (l > 0) for(r.iushrn(l); l-- > 0;)s.isOdd() && s.iadd(u), s.iushrn(1);
                            e.cmp(r) >= 0 ? (e.isub(r), o.isub(s)) : (r.isub(e), s.isub(o));
                        }
                        return (n = 0 === e.cmpn(1) ? o : s).cmpn(0) < 0 && n.iadd(t), n;
                    }, a.prototype.gcd = function(t) {
                        if (this.isZero()) return t.abs();
                        if (t.isZero()) return this.abs();
                        var e = this.clone(), r = t.clone();
                        e.negative = 0, r.negative = 0;
                        for(var n = 0; e.isEven() && r.isEven(); n++)e.iushrn(1), r.iushrn(1);
                        for(;;){
                            for(; e.isEven();)e.iushrn(1);
                            for(; r.isEven();)r.iushrn(1);
                            var i = e.cmp(r);
                            if (i < 0) {
                                var o = e;
                                e = r, r = o;
                            } else if (0 === i || 0 === r.cmpn(1)) break;
                            e.isub(r);
                        }
                        return r.iushln(n);
                    }, a.prototype.invm = function(t) {
                        return this.egcd(t).a.umod(t);
                    }, a.prototype.isEven = function() {
                        return !(1 & this.words[0]);
                    }, a.prototype.isOdd = function() {
                        return !(1 & ~this.words[0]);
                    }, a.prototype.andln = function(t) {
                        return this.words[0] & t;
                    }, a.prototype.bincn = function(t) {
                        i("number" == typeof t);
                        var e = t % 26, r = (t - e) / 26, n = 1 << e;
                        if (this.length <= r) return this._expand(r + 1), this.words[r] |= n, this;
                        for(var o = n, a = r; 0 !== o && a < this.length; a++){
                            var s = 0 | this.words[a];
                            o = (s += o) >>> 26, s &= 67108863, this.words[a] = s;
                        }
                        return 0 !== o && (this.words[a] = o, this.length++), this;
                    }, a.prototype.isZero = function() {
                        return 1 === this.length && 0 === this.words[0];
                    }, a.prototype.cmpn = function(t) {
                        var e, r = t < 0;
                        if (0 !== this.negative && !r) return -1;
                        if (0 === this.negative && r) return 1;
                        if (this._strip(), this.length > 1) e = 1;
                        else {
                            r && (t = -t), i(t <= 67108863, "Number is too big");
                            var n = 0 | this.words[0];
                            e = n === t ? 0 : n < t ? -1 : 1;
                        }
                        return 0 !== this.negative ? 0 | -e : e;
                    }, a.prototype.cmp = function(t) {
                        if (0 !== this.negative && 0 === t.negative) return -1;
                        if (0 === this.negative && 0 !== t.negative) return 1;
                        var e = this.ucmp(t);
                        return 0 !== this.negative ? 0 | -e : e;
                    }, a.prototype.ucmp = function(t) {
                        if (this.length > t.length) return 1;
                        if (this.length < t.length) return -1;
                        for(var e = 0, r = this.length - 1; r >= 0; r--){
                            var n = 0 | this.words[r], i = 0 | t.words[r];
                            if (n !== i) {
                                n < i ? e = -1 : n > i && (e = 1);
                                break;
                            }
                        }
                        return e;
                    }, a.prototype.gtn = function(t) {
                        return 1 === this.cmpn(t);
                    }, a.prototype.gt = function(t) {
                        return 1 === this.cmp(t);
                    }, a.prototype.gten = function(t) {
                        return this.cmpn(t) >= 0;
                    }, a.prototype.gte = function(t) {
                        return this.cmp(t) >= 0;
                    }, a.prototype.ltn = function(t) {
                        return -1 === this.cmpn(t);
                    }, a.prototype.lt = function(t) {
                        return -1 === this.cmp(t);
                    }, a.prototype.lten = function(t) {
                        return this.cmpn(t) <= 0;
                    }, a.prototype.lte = function(t) {
                        return this.cmp(t) <= 0;
                    }, a.prototype.eqn = function(t) {
                        return 0 === this.cmpn(t);
                    }, a.prototype.eq = function(t) {
                        return 0 === this.cmp(t);
                    }, a.red = function(t) {
                        return new A(t);
                    }, a.prototype.toRed = function(t) {
                        return i(!this.red, "Already a number in reduction context"), i(0 === this.negative, "red works only with positives"), t.convertTo(this)._forceRed(t);
                    }, a.prototype.fromRed = function() {
                        return i(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
                    }, a.prototype._forceRed = function(t) {
                        return this.red = t, this;
                    }, a.prototype.forceRed = function(t) {
                        return i(!this.red, "Already a number in reduction context"), this._forceRed(t);
                    }, a.prototype.redAdd = function(t) {
                        return i(this.red, "redAdd works only with red numbers"), this.red.add(this, t);
                    }, a.prototype.redIAdd = function(t) {
                        return i(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, t);
                    }, a.prototype.redSub = function(t) {
                        return i(this.red, "redSub works only with red numbers"), this.red.sub(this, t);
                    }, a.prototype.redISub = function(t) {
                        return i(this.red, "redISub works only with red numbers"), this.red.isub(this, t);
                    }, a.prototype.redShl = function(t) {
                        return i(this.red, "redShl works only with red numbers"), this.red.shl(this, t);
                    }, a.prototype.redMul = function(t) {
                        return i(this.red, "redMul works only with red numbers"), this.red._verify2(this, t), this.red.mul(this, t);
                    }, a.prototype.redIMul = function(t) {
                        return i(this.red, "redMul works only with red numbers"), this.red._verify2(this, t), this.red.imul(this, t);
                    }, a.prototype.redSqr = function() {
                        return i(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
                    }, a.prototype.redISqr = function() {
                        return i(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
                    }, a.prototype.redSqrt = function() {
                        return i(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
                    }, a.prototype.redInvm = function() {
                        return i(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
                    }, a.prototype.redNeg = function() {
                        return i(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
                    }, a.prototype.redPow = function(t) {
                        return i(this.red && !t.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, t);
                    };
                    var w = {
                        k256: null,
                        p224: null,
                        p192: null,
                        p25519: null
                    };
                    function S(t, e) {
                        this.name = t, this.p = new a(e, 16), this.n = this.p.bitLength(), this.k = new a(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
                    }
                    function O() {
                        S.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
                    }
                    function j() {
                        S.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
                    }
                    function $() {
                        S.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
                    }
                    function E() {
                        S.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
                    }
                    function A(t) {
                        if ("string" == typeof t) {
                            var e = a._prime(t);
                            this.m = e.p, this.prime = e;
                        } else i(t.gtn(1), "modulus must be greater than 1"), this.m = t, this.prime = null;
                    }
                    function P(t) {
                        A.call(this, t), this.shift = this.m.bitLength(), this.shift % 26 != 0 && (this.shift += 26 - this.shift % 26), this.r = new a(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
                    }
                    S.prototype._tmp = function() {
                        var t = new a(null);
                        return t.words = new Array(Math.ceil(this.n / 13)), t;
                    }, S.prototype.ireduce = function(t) {
                        var e, r = t;
                        do this.split(r, this.tmp), e = (r = (r = this.imulK(r)).iadd(this.tmp)).bitLength();
                        while (e > this.n);
                        var n = e < this.n ? -1 : r.ucmp(this.p);
                        return 0 === n ? (r.words[0] = 0, r.length = 1) : n > 0 ? r.isub(this.p) : void 0 !== r.strip ? r.strip() : r._strip(), r;
                    }, S.prototype.split = function(t, e) {
                        t.iushrn(this.n, 0, e);
                    }, S.prototype.imulK = function(t) {
                        return t.imul(this.k);
                    }, o(O, S), O.prototype.split = function(t, e) {
                        for(var r = 4194303, n = Math.min(t.length, 9), i = 0; i < n; i++)e.words[i] = t.words[i];
                        if (e.length = n, t.length <= 9) return t.words[0] = 0, void (t.length = 1);
                        var o = t.words[9];
                        for(e.words[e.length++] = o & r, i = 10; i < t.length; i++){
                            var a = 0 | t.words[i];
                            t.words[i - 10] = (a & r) << 4 | o >>> 22, o = a;
                        }
                        o >>>= 22, t.words[i - 10] = o, 0 === o && t.length > 10 ? t.length -= 10 : t.length -= 9;
                    }, O.prototype.imulK = function(t) {
                        t.words[t.length] = 0, t.words[t.length + 1] = 0, t.length += 2;
                        for(var e = 0, r = 0; r < t.length; r++){
                            var n = 0 | t.words[r];
                            e += 977 * n, t.words[r] = 67108863 & e, e = 64 * n + (e / 67108864 | 0);
                        }
                        return 0 === t.words[t.length - 1] && (t.length--, 0 === t.words[t.length - 1] && t.length--), t;
                    }, o(j, S), o($, S), o(E, S), E.prototype.imulK = function(t) {
                        for(var e = 0, r = 0; r < t.length; r++){
                            var n = 19 * (0 | t.words[r]) + e, i = 67108863 & n;
                            n >>>= 26, t.words[r] = i, e = n;
                        }
                        return 0 !== e && (t.words[t.length++] = e), t;
                    }, a._prime = function(t) {
                        if (w[t]) return w[t];
                        var e;
                        if ("k256" === t) e = new O;
                        else if ("p224" === t) e = new j;
                        else if ("p192" === t) e = new $;
                        else {
                            if ("p25519" !== t) throw new Error("Unknown prime " + t);
                            e = new E;
                        }
                        return w[t] = e, e;
                    }, A.prototype._verify1 = function(t) {
                        i(0 === t.negative, "red works only with positives"), i(t.red, "red works only with red numbers");
                    }, A.prototype._verify2 = function(t, e) {
                        i(!(t.negative | e.negative), "red works only with positives"), i(t.red && t.red === e.red, "red works only with red numbers");
                    }, A.prototype.imod = function(t) {
                        return this.prime ? this.prime.ireduce(t)._forceRed(this) : (l(t, t.umod(this.m)._forceRed(this)), t);
                    }, A.prototype.neg = function(t) {
                        return t.isZero() ? t.clone() : this.m.sub(t)._forceRed(this);
                    }, A.prototype.add = function(t, e) {
                        this._verify2(t, e);
                        var r = t.add(e);
                        return r.cmp(this.m) >= 0 && r.isub(this.m), r._forceRed(this);
                    }, A.prototype.iadd = function(t, e) {
                        this._verify2(t, e);
                        var r = t.iadd(e);
                        return r.cmp(this.m) >= 0 && r.isub(this.m), r;
                    }, A.prototype.sub = function(t, e) {
                        this._verify2(t, e);
                        var r = t.sub(e);
                        return r.cmpn(0) < 0 && r.iadd(this.m), r._forceRed(this);
                    }, A.prototype.isub = function(t, e) {
                        this._verify2(t, e);
                        var r = t.isub(e);
                        return r.cmpn(0) < 0 && r.iadd(this.m), r;
                    }, A.prototype.shl = function(t, e) {
                        return this._verify1(t), this.imod(t.ushln(e));
                    }, A.prototype.imul = function(t, e) {
                        return this._verify2(t, e), this.imod(t.imul(e));
                    }, A.prototype.mul = function(t, e) {
                        return this._verify2(t, e), this.imod(t.mul(e));
                    }, A.prototype.isqr = function(t) {
                        return this.imul(t, t.clone());
                    }, A.prototype.sqr = function(t) {
                        return this.mul(t, t);
                    }, A.prototype.sqrt = function(t) {
                        if (t.isZero()) return t.clone();
                        var e = this.m.andln(3);
                        if (i(e % 2 == 1), 3 === e) {
                            var r = this.m.add(new a(1)).iushrn(2);
                            return this.pow(t, r);
                        }
                        for(var n = this.m.subn(1), o = 0; !n.isZero() && 0 === n.andln(1);)o++, n.iushrn(1);
                        i(!n.isZero());
                        var s = new a(1).toRed(this), u = s.redNeg(), c = this.m.subn(1).iushrn(1), f = this.m.bitLength();
                        for(f = new a(2 * f * f).toRed(this); 0 !== this.pow(f, c).cmp(u);)f.redIAdd(u);
                        for(var l = this.pow(f, n), h = this.pow(t, n.addn(1).iushrn(1)), p = this.pow(t, n), d = o; 0 !== p.cmp(s);){
                            for(var y = p, b = 0; 0 !== y.cmp(s); b++)y = y.redSqr();
                            i(b < d);
                            var m = this.pow(l, new a(1).iushln(d - b - 1));
                            h = h.redMul(m), l = m.redSqr(), p = p.redMul(l), d = b;
                        }
                        return h;
                    }, A.prototype.invm = function(t) {
                        var e = t._invmp(this.m);
                        return 0 !== e.negative ? (e.negative = 0, this.imod(e).redNeg()) : this.imod(e);
                    }, A.prototype.pow = function(t, e) {
                        if (e.isZero()) return new a(1).toRed(this);
                        if (0 === e.cmpn(1)) return t.clone();
                        var r = new Array(16);
                        r[0] = new a(1).toRed(this), r[1] = t;
                        for(var n = 2; n < r.length; n++)r[n] = this.mul(r[n - 1], t);
                        var i = r[0], o = 0, s = 0, u = e.bitLength() % 26;
                        for(0 === u && (u = 26), n = e.length - 1; n >= 0; n--){
                            for(var c = e.words[n], f = u - 1; f >= 0; f--){
                                var l = c >> f & 1;
                                i !== r[0] && (i = this.sqr(i)), 0 !== l || 0 !== o ? (o <<= 1, o |= l, (4 == ++s || 0 === n && 0 === f) && (i = this.mul(i, r[o]), s = 0, o = 0)) : s = 0;
                            }
                            u = 26;
                        }
                        return i;
                    }, A.prototype.convertTo = function(t) {
                        var e = t.umod(this.m);
                        return e === t ? e.clone() : e;
                    }, A.prototype.convertFrom = function(t) {
                        var e = t.clone();
                        return e.red = null, e;
                    }, a.mont = function(t) {
                        return new P(t);
                    }, o(P, A), P.prototype.convertTo = function(t) {
                        return this.imod(t.ushln(this.shift));
                    }, P.prototype.convertFrom = function(t) {
                        var e = this.imod(t.mul(this.rinv));
                        return e.red = null, e;
                    }, P.prototype.imul = function(t, e) {
                        if (t.isZero() || e.isZero()) return t.words[0] = 0, t.length = 1, t;
                        var r = t.imul(e), n = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), i = r.isub(n).iushrn(this.shift), o = i;
                        return i.cmp(this.m) >= 0 ? o = i.isub(this.m) : i.cmpn(0) < 0 && (o = i.iadd(this.m)), o._forceRed(this);
                    }, P.prototype.mul = function(t, e) {
                        if (t.isZero() || e.isZero()) return new a(0)._forceRed(this);
                        var r = t.mul(e), n = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), i = r.isub(n).iushrn(this.shift), o = i;
                        return i.cmp(this.m) >= 0 ? o = i.isub(this.m) : i.cmpn(0) < 0 && (o = i.iadd(this.m)), o._forceRed(this);
                    }, P.prototype.invm = function(t) {
                        return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this);
                    };
                }(t = r.nmd(t), this);
            },
            8904: (t, e, r)=>{
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                var i;
                function o(t) {
                    this.rand = t;
                }
                if (t.exports = function(t) {
                    return i || (i = new o(null)), i.generate(t);
                }, t.exports.Rand = o, o.prototype.generate = function(t) {
                    return this._rand(t);
                }, o.prototype._rand = function(t) {
                    if (this.rand.getBytes) return this.rand.getBytes(t);
                    for(var e = new Uint8Array(t), r = 0; r < e.length; r++)e[r] = this.rand.getByte();
                    return e;
                }, "object" === ("undefined" == typeof self ? "undefined" : n(self))) self.crypto && self.crypto.getRandomValues ? o.prototype._rand = function(t) {
                    var e = new Uint8Array(t);
                    return self.crypto.getRandomValues(e), e;
                } : self.msCrypto && self.msCrypto.getRandomValues ? o.prototype._rand = function(t) {
                    var e = new Uint8Array(t);
                    return self.msCrypto.getRandomValues(e), e;
                } : "object" === ("undefined" == typeof window ? "undefined" : n(window)) && (o.prototype._rand = function() {
                    throw new Error("Not implemented yet");
                });
                else try {
                    var a = r(3776);
                    if ("function" != typeof a.randomBytes) throw new Error("Not supported");
                    o.prototype._rand = function(t) {
                        return a.randomBytes(t);
                    };
                } catch (t) {}
            },
            5401: (t, e, r)=>{
                var n = r(9732).Buffer;
                function i(t) {
                    n.isBuffer(t) || (t = n.from(t));
                    for(var e = t.length / 4 | 0, r = new Array(e), i = 0; i < e; i++)r[i] = t.readUInt32BE(4 * i);
                    return r;
                }
                function o(t) {
                    for(; 0 < t.length; t++)t[0] = 0;
                }
                function a(t, e, r, n, i) {
                    for(var o, a, s, u, c = r[0], f = r[1], l = r[2], h = r[3], p = t[0] ^ e[0], d = t[1] ^ e[1], y = t[2] ^ e[2], b = t[3] ^ e[3], m = 4, v = 1; v < i; v++)o = c[p >>> 24] ^ f[d >>> 16 & 255] ^ l[y >>> 8 & 255] ^ h[255 & b] ^ e[m++], a = c[d >>> 24] ^ f[y >>> 16 & 255] ^ l[b >>> 8 & 255] ^ h[255 & p] ^ e[m++], s = c[y >>> 24] ^ f[b >>> 16 & 255] ^ l[p >>> 8 & 255] ^ h[255 & d] ^ e[m++], u = c[b >>> 24] ^ f[p >>> 16 & 255] ^ l[d >>> 8 & 255] ^ h[255 & y] ^ e[m++], p = o, d = a, y = s, b = u;
                    return o = (n[p >>> 24] << 24 | n[d >>> 16 & 255] << 16 | n[y >>> 8 & 255] << 8 | n[255 & b]) ^ e[m++], a = (n[d >>> 24] << 24 | n[y >>> 16 & 255] << 16 | n[b >>> 8 & 255] << 8 | n[255 & p]) ^ e[m++], s = (n[y >>> 24] << 24 | n[b >>> 16 & 255] << 16 | n[p >>> 8 & 255] << 8 | n[255 & d]) ^ e[m++], u = (n[b >>> 24] << 24 | n[p >>> 16 & 255] << 16 | n[d >>> 8 & 255] << 8 | n[255 & y]) ^ e[m++], [
                        o >>>= 0,
                        a >>>= 0,
                        s >>>= 0,
                        u >>>= 0
                    ];
                }
                var s = [
                    0,
                    1,
                    2,
                    4,
                    8,
                    16,
                    32,
                    64,
                    128,
                    27,
                    54
                ], u = function() {
                    for(var t = new Array(256), e = 0; e < 256; e++)t[e] = e < 128 ? e << 1 : e << 1 ^ 283;
                    for(var r = [], n = [], i = [
                        [],
                        [],
                        [],
                        []
                    ], o = [
                        [],
                        [],
                        [],
                        []
                    ], a = 0, s = 0, u = 0; u < 256; ++u){
                        var c = s ^ s << 1 ^ s << 2 ^ s << 3 ^ s << 4;
                        c = c >>> 8 ^ 255 & c ^ 99, r[a] = c, n[c] = a;
                        var f = t[a], l = t[f], h = t[l], p = 257 * t[c] ^ 16843008 * c;
                        i[0][a] = p << 24 | p >>> 8, i[1][a] = p << 16 | p >>> 16, i[2][a] = p << 8 | p >>> 24, i[3][a] = p, p = 16843009 * h ^ 65537 * l ^ 257 * f ^ 16843008 * a, o[0][c] = p << 24 | p >>> 8, o[1][c] = p << 16 | p >>> 16, o[2][c] = p << 8 | p >>> 24, o[3][c] = p, 0 === a ? a = s = 1 : (a = f ^ t[t[t[h ^ f]]], s ^= t[t[s]]);
                    }
                    return {
                        SBOX: r,
                        INV_SBOX: n,
                        SUB_MIX: i,
                        INV_SUB_MIX: o
                    };
                }();
                function c(t) {
                    this._key = i(t), this._reset();
                }
                c.blockSize = 16, c.keySize = 32, c.prototype.blockSize = c.blockSize, c.prototype.keySize = c.keySize, c.prototype._reset = function() {
                    for(var t = this._key, e = t.length, r = e + 6, n = 4 * (r + 1), i = [], o = 0; o < e; o++)i[o] = t[o];
                    for(o = e; o < n; o++){
                        var a = i[o - 1];
                        o % e == 0 ? (a = a << 8 | a >>> 24, a = u.SBOX[a >>> 24] << 24 | u.SBOX[a >>> 16 & 255] << 16 | u.SBOX[a >>> 8 & 255] << 8 | u.SBOX[255 & a], a ^= s[o / e | 0] << 24) : e > 6 && o % e == 4 && (a = u.SBOX[a >>> 24] << 24 | u.SBOX[a >>> 16 & 255] << 16 | u.SBOX[a >>> 8 & 255] << 8 | u.SBOX[255 & a]), i[o] = i[o - e] ^ a;
                    }
                    for(var c = [], f = 0; f < n; f++){
                        var l = n - f, h = i[l - (f % 4 ? 0 : 4)];
                        c[f] = f < 4 || l <= 4 ? h : u.INV_SUB_MIX[0][u.SBOX[h >>> 24]] ^ u.INV_SUB_MIX[1][u.SBOX[h >>> 16 & 255]] ^ u.INV_SUB_MIX[2][u.SBOX[h >>> 8 & 255]] ^ u.INV_SUB_MIX[3][u.SBOX[255 & h]];
                    }
                    this._nRounds = r, this._keySchedule = i, this._invKeySchedule = c;
                }, c.prototype.encryptBlockRaw = function(t) {
                    return a(t = i(t), this._keySchedule, u.SUB_MIX, u.SBOX, this._nRounds);
                }, c.prototype.encryptBlock = function(t) {
                    var e = this.encryptBlockRaw(t), r = n.allocUnsafe(16);
                    return r.writeUInt32BE(e[0], 0), r.writeUInt32BE(e[1], 4), r.writeUInt32BE(e[2], 8), r.writeUInt32BE(e[3], 12), r;
                }, c.prototype.decryptBlock = function(t) {
                    var e = (t = i(t))[1];
                    t[1] = t[3], t[3] = e;
                    var r = a(t, this._invKeySchedule, u.INV_SUB_MIX, u.INV_SBOX, this._nRounds), o = n.allocUnsafe(16);
                    return o.writeUInt32BE(r[0], 0), o.writeUInt32BE(r[3], 4), o.writeUInt32BE(r[2], 8), o.writeUInt32BE(r[1], 12), o;
                }, c.prototype.scrub = function() {
                    o(this._keySchedule), o(this._invKeySchedule), o(this._key);
                }, t.exports.AES = c;
            },
            1085: (t, e, r)=>{
                var n = r(5401), i = r(9732).Buffer, o = r(2533), a = r(1679), s = r(9363), u = r(6876), c = r(9003);
                function f(t, e, r, a) {
                    o.call(this);
                    var u = i.alloc(4, 0);
                    this._cipher = new n.AES(e);
                    var f = this._cipher.encryptBlock(u);
                    this._ghash = new s(f), r = function(t, e, r) {
                        if (12 === e.length) return t._finID = i.concat([
                            e,
                            i.from([
                                0,
                                0,
                                0,
                                1
                            ])
                        ]), i.concat([
                            e,
                            i.from([
                                0,
                                0,
                                0,
                                2
                            ])
                        ]);
                        var n = new s(r), o = e.length, a = o % 16;
                        n.update(e), a && (a = 16 - a, n.update(i.alloc(a, 0))), n.update(i.alloc(8, 0));
                        var u = 8 * o, f = i.alloc(8);
                        f.writeUIntBE(u, 0, 8), n.update(f), t._finID = n.state;
                        var l = i.from(t._finID);
                        return c(l), l;
                    }(this, r, f), this._prev = i.from(r), this._cache = i.allocUnsafe(0), this._secCache = i.allocUnsafe(0), this._decrypt = a, this._alen = 0, this._len = 0, this._mode = t, this._authTag = null, this._called = !1;
                }
                a(f, o), f.prototype._update = function(t) {
                    if (!this._called && this._alen) {
                        var e = 16 - this._alen % 16;
                        e < 16 && (e = i.alloc(e, 0), this._ghash.update(e));
                    }
                    this._called = !0;
                    var r = this._mode.encrypt(this, t);
                    return this._decrypt ? this._ghash.update(t) : this._ghash.update(r), this._len += t.length, r;
                }, f.prototype._final = function() {
                    if (this._decrypt && !this._authTag) throw new Error("Unsupported state or unable to authenticate data");
                    var t = u(this._ghash.final(8 * this._alen, 8 * this._len), this._cipher.encryptBlock(this._finID));
                    if (this._decrypt && function(t, e) {
                        var r = 0;
                        t.length !== e.length && r++;
                        for(var n = Math.min(t.length, e.length), i = 0; i < n; ++i)r += t[i] ^ e[i];
                        return r;
                    }(t, this._authTag)) throw new Error("Unsupported state or unable to authenticate data");
                    this._authTag = t, this._cipher.scrub();
                }, f.prototype.getAuthTag = function() {
                    if (this._decrypt || !i.isBuffer(this._authTag)) throw new Error("Attempting to get auth tag in unsupported state");
                    return this._authTag;
                }, f.prototype.setAuthTag = function(t) {
                    if (!this._decrypt) throw new Error("Attempting to set auth tag in unsupported state");
                    this._authTag = t;
                }, f.prototype.setAAD = function(t) {
                    if (this._called) throw new Error("Attempting to set AAD in unsupported state");
                    this._ghash.update(t), this._alen += t.length;
                }, t.exports = f;
            },
            2098: (t, e, r)=>{
                var n = r(3604), i = r(1808), o = r(3219);
                e.createCipher = e.Cipher = n.createCipher, e.createCipheriv = e.Cipheriv = n.createCipheriv, e.createDecipher = e.Decipher = i.createDecipher, e.createDecipheriv = e.Decipheriv = i.createDecipheriv, e.listCiphers = e.getCiphers = function() {
                    return Object.keys(o);
                };
            },
            1808: (t, e, r)=>{
                var n = r(1085), i = r(9732).Buffer, o = r(8629), a = r(5407), s = r(2533), u = r(5401), c = r(1685);
                function f(t, e, r) {
                    s.call(this), this._cache = new l, this._last = void 0, this._cipher = new u.AES(e), this._prev = i.from(r), this._mode = t, this._autopadding = !0;
                }
                function l() {
                    this.cache = i.allocUnsafe(0);
                }
                function h(t, e, r) {
                    var s = o[t.toLowerCase()];
                    if (!s) throw new TypeError("invalid suite type");
                    if ("string" == typeof r && (r = i.from(r)), "GCM" !== s.mode && r.length !== s.iv) throw new TypeError("invalid iv length " + r.length);
                    if ("string" == typeof e && (e = i.from(e)), e.length !== s.key / 8) throw new TypeError("invalid key length " + e.length);
                    return "stream" === s.type ? new a(s.module, e, r, !0) : "auth" === s.type ? new n(s.module, e, r, !0) : new f(s.module, e, r);
                }
                r(1679)(f, s), f.prototype._update = function(t) {
                    var e, r;
                    this._cache.add(t);
                    for(var n = []; e = this._cache.get(this._autopadding);)r = this._mode.decrypt(this, e), n.push(r);
                    return i.concat(n);
                }, f.prototype._final = function() {
                    var t = this._cache.flush();
                    if (this._autopadding) return function(t) {
                        var e = t[15];
                        if (e < 1 || e > 16) throw new Error("unable to decrypt data");
                        for(var r = -1; ++r < e;)if (t[r + (16 - e)] !== e) throw new Error("unable to decrypt data");
                        if (16 !== e) return t.slice(0, 16 - e);
                    }(this._mode.decrypt(this, t));
                    if (t) throw new Error("data not multiple of block length");
                }, f.prototype.setAutoPadding = function(t) {
                    return this._autopadding = !!t, this;
                }, l.prototype.add = function(t) {
                    this.cache = i.concat([
                        this.cache,
                        t
                    ]);
                }, l.prototype.get = function(t) {
                    var e;
                    if (t) {
                        if (this.cache.length > 16) return e = this.cache.slice(0, 16), this.cache = this.cache.slice(16), e;
                    } else if (this.cache.length >= 16) return e = this.cache.slice(0, 16), this.cache = this.cache.slice(16), e;
                    return null;
                }, l.prototype.flush = function() {
                    if (this.cache.length) return this.cache;
                }, e.createDecipher = function(t, e) {
                    var r = o[t.toLowerCase()];
                    if (!r) throw new TypeError("invalid suite type");
                    var n = c(e, !1, r.key, r.iv);
                    return h(t, n.key, n.iv);
                }, e.createDecipheriv = h;
            },
            3604: (t, e, r)=>{
                var n = r(8629), i = r(1085), o = r(9732).Buffer, a = r(5407), s = r(2533), u = r(5401), c = r(1685);
                function f(t, e, r) {
                    s.call(this), this._cache = new h, this._cipher = new u.AES(e), this._prev = o.from(r), this._mode = t, this._autopadding = !0;
                }
                r(1679)(f, s), f.prototype._update = function(t) {
                    var e, r;
                    this._cache.add(t);
                    for(var n = []; e = this._cache.get();)r = this._mode.encrypt(this, e), n.push(r);
                    return o.concat(n);
                };
                var l = o.alloc(16, 16);
                function h() {
                    this.cache = o.allocUnsafe(0);
                }
                function p(t, e, r) {
                    var s = n[t.toLowerCase()];
                    if (!s) throw new TypeError("invalid suite type");
                    if ("string" == typeof e && (e = o.from(e)), e.length !== s.key / 8) throw new TypeError("invalid key length " + e.length);
                    if ("string" == typeof r && (r = o.from(r)), "GCM" !== s.mode && r.length !== s.iv) throw new TypeError("invalid iv length " + r.length);
                    return "stream" === s.type ? new a(s.module, e, r) : "auth" === s.type ? new i(s.module, e, r) : new f(s.module, e, r);
                }
                f.prototype._final = function() {
                    var t = this._cache.flush();
                    if (this._autopadding) return t = this._mode.encrypt(this, t), this._cipher.scrub(), t;
                    if (!t.equals(l)) throw this._cipher.scrub(), new Error("data not multiple of block length");
                }, f.prototype.setAutoPadding = function(t) {
                    return this._autopadding = !!t, this;
                }, h.prototype.add = function(t) {
                    this.cache = o.concat([
                        this.cache,
                        t
                    ]);
                }, h.prototype.get = function() {
                    if (this.cache.length > 15) {
                        var t = this.cache.slice(0, 16);
                        return this.cache = this.cache.slice(16), t;
                    }
                    return null;
                }, h.prototype.flush = function() {
                    for(var t = 16 - this.cache.length, e = o.allocUnsafe(t), r = -1; ++r < t;)e.writeUInt8(t, r);
                    return o.concat([
                        this.cache,
                        e
                    ]);
                }, e.createCipheriv = p, e.createCipher = function(t, e) {
                    var r = n[t.toLowerCase()];
                    if (!r) throw new TypeError("invalid suite type");
                    var i = c(e, !1, r.key, r.iv);
                    return p(t, i.key, i.iv);
                };
            },
            9363: (t, e, r)=>{
                var n = r(9732).Buffer, i = n.alloc(16, 0);
                function o(t) {
                    var e = n.allocUnsafe(16);
                    return e.writeUInt32BE(t[0] >>> 0, 0), e.writeUInt32BE(t[1] >>> 0, 4), e.writeUInt32BE(t[2] >>> 0, 8), e.writeUInt32BE(t[3] >>> 0, 12), e;
                }
                function a(t) {
                    this.h = t, this.state = n.alloc(16, 0), this.cache = n.allocUnsafe(0);
                }
                a.prototype.ghash = function(t) {
                    for(var e = -1; ++e < t.length;)this.state[e] ^= t[e];
                    this._multiply();
                }, a.prototype._multiply = function() {
                    for(var t, e, r, n = [
                        (t = this.h).readUInt32BE(0),
                        t.readUInt32BE(4),
                        t.readUInt32BE(8),
                        t.readUInt32BE(12)
                    ], i = [
                        0,
                        0,
                        0,
                        0
                    ], a = -1; ++a < 128;){
                        for(!!(this.state[~~(a / 8)] & 1 << 7 - a % 8) && (i[0] ^= n[0], i[1] ^= n[1], i[2] ^= n[2], i[3] ^= n[3]), r = !!(1 & n[3]), e = 3; e > 0; e--)n[e] = n[e] >>> 1 | (1 & n[e - 1]) << 31;
                        n[0] = n[0] >>> 1, r && (n[0] = n[0] ^ -520093696);
                    }
                    this.state = o(i);
                }, a.prototype.update = function(t) {
                    var e;
                    for(this.cache = n.concat([
                        this.cache,
                        t
                    ]); this.cache.length >= 16;)e = this.cache.slice(0, 16), this.cache = this.cache.slice(16), this.ghash(e);
                }, a.prototype.final = function(t, e) {
                    return this.cache.length && this.ghash(n.concat([
                        this.cache,
                        i
                    ], 16)), this.ghash(o([
                        0,
                        t,
                        0,
                        e
                    ])), this.state;
                }, t.exports = a;
            },
            9003: (t)=>{
                t.exports = function(t) {
                    for(var e, r = t.length; r--;){
                        if (255 !== (e = t.readUInt8(r))) {
                            e++, t.writeUInt8(e, r);
                            break;
                        }
                        t.writeUInt8(0, r);
                    }
                };
            },
            5459: (t, e, r)=>{
                var n = r(6876);
                e.encrypt = function(t, e) {
                    var r = n(e, t._prev);
                    return t._prev = t._cipher.encryptBlock(r), t._prev;
                }, e.decrypt = function(t, e) {
                    var r = t._prev;
                    t._prev = e;
                    var i = t._cipher.decryptBlock(e);
                    return n(i, r);
                };
            },
            4488: (t, e, r)=>{
                var n = r(9732).Buffer, i = r(6876);
                function o(t, e, r) {
                    var o = e.length, a = i(e, t._cache);
                    return t._cache = t._cache.slice(o), t._prev = n.concat([
                        t._prev,
                        r ? e : a
                    ]), a;
                }
                e.encrypt = function(t, e, r) {
                    for(var i, a = n.allocUnsafe(0); e.length;){
                        if (0 === t._cache.length && (t._cache = t._cipher.encryptBlock(t._prev), t._prev = n.allocUnsafe(0)), !(t._cache.length <= e.length)) {
                            a = n.concat([
                                a,
                                o(t, e, r)
                            ]);
                            break;
                        }
                        i = t._cache.length, a = n.concat([
                            a,
                            o(t, e.slice(0, i), r)
                        ]), e = e.slice(i);
                    }
                    return a;
                };
            },
            4937: (t, e, r)=>{
                var n = r(9732).Buffer;
                function i(t, e, r) {
                    for(var n, i, a = -1, s = 0; ++a < 8;)n = e & 1 << 7 - a ? 128 : 0, s += (128 & (i = t._cipher.encryptBlock(t._prev)[0] ^ n)) >> a % 8, t._prev = o(t._prev, r ? n : i);
                    return s;
                }
                function o(t, e) {
                    var r = t.length, i = -1, o = n.allocUnsafe(t.length);
                    for(t = n.concat([
                        t,
                        n.from([
                            e
                        ])
                    ]); ++i < r;)o[i] = t[i] << 1 | t[i + 1] >> 7;
                    return o;
                }
                e.encrypt = function(t, e, r) {
                    for(var o = e.length, a = n.allocUnsafe(o), s = -1; ++s < o;)a[s] = i(t, e[s], r);
                    return a;
                };
            },
            6322: (t, e, r)=>{
                var n = r(9732).Buffer;
                function i(t, e, r) {
                    var i = t._cipher.encryptBlock(t._prev)[0] ^ e;
                    return t._prev = n.concat([
                        t._prev.slice(1),
                        n.from([
                            r ? e : i
                        ])
                    ]), i;
                }
                e.encrypt = function(t, e, r) {
                    for(var o = e.length, a = n.allocUnsafe(o), s = -1; ++s < o;)a[s] = i(t, e[s], r);
                    return a;
                };
            },
            2538: (t, e, r)=>{
                var n = r(6876), i = r(9732).Buffer, o = r(9003);
                function a(t) {
                    var e = t._cipher.encryptBlockRaw(t._prev);
                    return o(t._prev), e;
                }
                e.encrypt = function(t, e) {
                    var r = Math.ceil(e.length / 16), o = t._cache.length;
                    t._cache = i.concat([
                        t._cache,
                        i.allocUnsafe(16 * r)
                    ]);
                    for(var s = 0; s < r; s++){
                        var u = a(t), c = o + 16 * s;
                        t._cache.writeUInt32BE(u[0], c + 0), t._cache.writeUInt32BE(u[1], c + 4), t._cache.writeUInt32BE(u[2], c + 8), t._cache.writeUInt32BE(u[3], c + 12);
                    }
                    var f = t._cache.slice(0, e.length);
                    return t._cache = t._cache.slice(e.length), n(e, f);
                };
            },
            9907: (t, e)=>{
                e.encrypt = function(t, e) {
                    return t._cipher.encryptBlock(e);
                }, e.decrypt = function(t, e) {
                    return t._cipher.decryptBlock(e);
                };
            },
            8629: (t, e, r)=>{
                var n = {
                    ECB: r(9907),
                    CBC: r(5459),
                    CFB: r(4488),
                    CFB8: r(6322),
                    CFB1: r(4937),
                    OFB: r(4252),
                    CTR: r(2538),
                    GCM: r(2538)
                }, i = r(3219);
                for(var o in i)i[o].module = n[i[o].mode];
                t.exports = i;
            },
            4252: (t, e, r)=>{
                var n = r(5832).Buffer, i = r(6876);
                function o(t) {
                    return t._prev = t._cipher.encryptBlock(t._prev), t._prev;
                }
                e.encrypt = function(t, e) {
                    for(; t._cache.length < e.length;)t._cache = n.concat([
                        t._cache,
                        o(t)
                    ]);
                    var r = t._cache.slice(0, e.length);
                    return t._cache = t._cache.slice(e.length), i(e, r);
                };
            },
            5407: (t, e, r)=>{
                var n = r(5401), i = r(9732).Buffer, o = r(2533);
                function a(t, e, r, a) {
                    o.call(this), this._cipher = new n.AES(e), this._prev = i.from(r), this._cache = i.allocUnsafe(0), this._secCache = i.allocUnsafe(0), this._decrypt = a, this._mode = t;
                }
                r(1679)(a, o), a.prototype._update = function(t) {
                    return this._mode.encrypt(this, t, this._decrypt);
                }, a.prototype._final = function() {
                    this._cipher.scrub();
                }, t.exports = a;
            },
            9652: (t, e, r)=>{
                var n = r(8201), i = r(2098), o = r(8629), a = r(3849), s = r(1685);
                function u(t, e, r) {
                    if (t = t.toLowerCase(), o[t]) return i.createCipheriv(t, e, r);
                    if (a[t]) return new n({
                        key: e,
                        iv: r,
                        mode: t
                    });
                    throw new TypeError("invalid suite type");
                }
                function c(t, e, r) {
                    if (t = t.toLowerCase(), o[t]) return i.createDecipheriv(t, e, r);
                    if (a[t]) return new n({
                        key: e,
                        iv: r,
                        mode: t,
                        decrypt: !0
                    });
                    throw new TypeError("invalid suite type");
                }
                e.createCipher = e.Cipher = function(t, e) {
                    var r, n;
                    if (t = t.toLowerCase(), o[t]) r = o[t].key, n = o[t].iv;
                    else {
                        if (!a[t]) throw new TypeError("invalid suite type");
                        r = 8 * a[t].key, n = a[t].iv;
                    }
                    var i = s(e, !1, r, n);
                    return u(t, i.key, i.iv);
                }, e.createCipheriv = e.Cipheriv = u, e.createDecipher = e.Decipher = function(t, e) {
                    var r, n;
                    if (t = t.toLowerCase(), o[t]) r = o[t].key, n = o[t].iv;
                    else {
                        if (!a[t]) throw new TypeError("invalid suite type");
                        r = 8 * a[t].key, n = a[t].iv;
                    }
                    var i = s(e, !1, r, n);
                    return c(t, i.key, i.iv);
                }, e.createDecipheriv = e.Decipheriv = c, e.listCiphers = e.getCiphers = function() {
                    return Object.keys(a).concat(i.getCiphers());
                };
            },
            8201: (t, e, r)=>{
                var n = r(2533), i = r(1471), o = r(1679), a = r(9732).Buffer, s = {
                    "des-ede3-cbc": i.CBC.instantiate(i.EDE),
                    "des-ede3": i.EDE,
                    "des-ede-cbc": i.CBC.instantiate(i.EDE),
                    "des-ede": i.EDE,
                    "des-cbc": i.CBC.instantiate(i.DES),
                    "des-ecb": i.DES
                };
                function u(t) {
                    n.call(this);
                    var e, r = t.mode.toLowerCase(), i = s[r];
                    e = t.decrypt ? "decrypt" : "encrypt";
                    var o = t.key;
                    a.isBuffer(o) || (o = a.from(o)), "des-ede" !== r && "des-ede-cbc" !== r || (o = a.concat([
                        o,
                        o.slice(0, 8)
                    ]));
                    var u = t.iv;
                    a.isBuffer(u) || (u = a.from(u)), this._des = i.create({
                        key: o,
                        iv: u,
                        type: e
                    });
                }
                s.des = s["des-cbc"], s.des3 = s["des-ede3-cbc"], t.exports = u, o(u, n), u.prototype._update = function(t) {
                    return a.from(this._des.update(t));
                }, u.prototype._final = function() {
                    return a.from(this._des.final());
                };
            },
            3849: (t, e)=>{
                e["des-ecb"] = {
                    key: 8,
                    iv: 0
                }, e["des-cbc"] = e.des = {
                    key: 8,
                    iv: 8
                }, e["des-ede3-cbc"] = e.des3 = {
                    key: 24,
                    iv: 8
                }, e["des-ede3"] = {
                    key: 24,
                    iv: 0
                }, e["des-ede-cbc"] = {
                    key: 16,
                    iv: 8
                }, e["des-ede"] = {
                    key: 16,
                    iv: 0
                };
            },
            1095: (t, e, r)=>{
                "use strict";
                var n = r(7799), i = r(4276), o = r(9732).Buffer;
                function a(t) {
                    var e, r = t.modulus.byteLength();
                    do e = new n(i(r));
                    while (e.cmp(t.modulus) >= 0 || !e.umod(t.prime1) || !e.umod(t.prime2));
                    return e;
                }
                function s(t, e) {
                    var r = function(t) {
                        var e = a(t);
                        return {
                            blinder: e.toRed(n.mont(t.modulus)).redPow(new n(t.publicExponent)).fromRed(),
                            unblinder: e.invm(t.modulus)
                        };
                    }(e), i = e.modulus.byteLength(), s = new n(t).mul(r.blinder).umod(e.modulus), u = s.toRed(n.mont(e.prime1)), c = s.toRed(n.mont(e.prime2)), f = e.coefficient, l = e.prime1, h = e.prime2, p = u.redPow(e.exponent1).fromRed(), d = c.redPow(e.exponent2).fromRed(), y = p.isub(d).imul(f).umod(l).imul(h);
                    return d.iadd(y).imul(r.unblinder).umod(e.modulus).toArrayLike(o, "be", i);
                }
                s.getr = a, t.exports = s;
            },
            4606: (t, e, r)=>{
                "use strict";
                t.exports = r(2951);
            },
            7937: (t, e, r)=>{
                "use strict";
                var n = r(9732).Buffer, i = r(5833), o = r(3292), a = r(1679), s = r(6620), u = r(7032), c = r(2951);
                function f(t) {
                    o.Writable.call(this);
                    var e = c[t];
                    if (!e) throw new Error("Unknown message digest");
                    this._hashType = e.hash, this._hash = i(e.hash), this._tag = e.id, this._signType = e.sign;
                }
                function l(t) {
                    o.Writable.call(this);
                    var e = c[t];
                    if (!e) throw new Error("Unknown message digest");
                    this._hash = i(e.hash), this._tag = e.id, this._signType = e.sign;
                }
                function h(t) {
                    return new f(t);
                }
                function p(t) {
                    return new l(t);
                }
                Object.keys(c).forEach(function(t) {
                    c[t].id = n.from(c[t].id, "hex"), c[t.toLowerCase()] = c[t];
                }), a(f, o.Writable), f.prototype._write = function(t, e, r) {
                    this._hash.update(t), r();
                }, f.prototype.update = function(t, e) {
                    return this._hash.update("string" == typeof t ? n.from(t, e) : t), this;
                }, f.prototype.sign = function(t, e) {
                    this.end();
                    var r = this._hash.digest(), n = s(r, t, this._hashType, this._signType, this._tag);
                    return e ? n.toString(e) : n;
                }, a(l, o.Writable), l.prototype._write = function(t, e, r) {
                    this._hash.update(t), r();
                }, l.prototype.update = function(t, e) {
                    return this._hash.update("string" == typeof t ? n.from(t, e) : t), this;
                }, l.prototype.verify = function(t, e, r) {
                    var i = "string" == typeof e ? n.from(e, r) : e;
                    this.end();
                    var o = this._hash.digest();
                    return u(i, o, t, this._signType, this._tag);
                }, t.exports = {
                    Sign: h,
                    Verify: p,
                    createSign: h,
                    createVerify: p
                };
            },
            6620: (t, e, r)=>{
                "use strict";
                var n = r(9732).Buffer, i = r(2046), o = r(1095), a = r(7312).ec, s = r(7799), u = r(5053), c = r(4589);
                function f(t, e, r, o) {
                    if ((t = n.from(t.toArray())).length < e.byteLength()) {
                        var a = n.alloc(e.byteLength() - t.length);
                        t = n.concat([
                            a,
                            t
                        ]);
                    }
                    var s = r.length, u = function(t, e) {
                        t = (t = l(t, e)).mod(e);
                        var r = n.from(t.toArray());
                        if (r.length < e.byteLength()) {
                            var i = n.alloc(e.byteLength() - r.length);
                            r = n.concat([
                                i,
                                r
                            ]);
                        }
                        return r;
                    }(r, e), c = n.alloc(s);
                    c.fill(1);
                    var f = n.alloc(s);
                    return f = i(o, f).update(c).update(n.from([
                        0
                    ])).update(t).update(u).digest(), c = i(o, f).update(c).digest(), {
                        k: f = i(o, f).update(c).update(n.from([
                            1
                        ])).update(t).update(u).digest(),
                        v: c = i(o, f).update(c).digest()
                    };
                }
                function l(t, e) {
                    var r = new s(t), n = (t.length << 3) - e.bitLength();
                    return n > 0 && r.ishrn(n), r;
                }
                function h(t, e, r) {
                    var o, a;
                    do {
                        for(o = n.alloc(0); 8 * o.length < t.bitLength();)e.v = i(r, e.k).update(e.v).digest(), o = n.concat([
                            o,
                            e.v
                        ]);
                        a = l(o, t), e.k = i(r, e.k).update(e.v).update(n.from([
                            0
                        ])).digest(), e.v = i(r, e.k).update(e.v).digest();
                    }while (-1 !== a.cmp(t));
                    return a;
                }
                function p(t, e, r, n) {
                    return t.toRed(s.mont(r)).redPow(e).fromRed().mod(n);
                }
                t.exports = function(t, e, r, i, d) {
                    var y = u(e);
                    if (y.curve) {
                        if ("ecdsa" !== i && "ecdsa/rsa" !== i) throw new Error("wrong private key type");
                        return function(t, e) {
                            var r = c[e.curve.join(".")];
                            if (!r) throw new Error("unknown curve " + e.curve.join("."));
                            var i = new a(r).keyFromPrivate(e.privateKey).sign(t);
                            return n.from(i.toDER());
                        }(t, y);
                    }
                    if ("dsa" === y.type) {
                        if ("dsa" !== i) throw new Error("wrong private key type");
                        return function(t, e, r) {
                            for(var i, o = e.params.priv_key, a = e.params.p, u = e.params.q, c = e.params.g, d = new s(0), y = l(t, u).mod(u), b = !1, m = f(o, u, t, r); !1 === b;)d = p(c, i = h(u, m, r), a, u), 0 === (b = i.invm(u).imul(y.add(o.mul(d))).mod(u)).cmpn(0) && (b = !1, d = new s(0));
                            return function(t, e) {
                                t = t.toArray(), e = e.toArray(), 128 & t[0] && (t = [
                                    0
                                ].concat(t)), 128 & e[0] && (e = [
                                    0
                                ].concat(e));
                                var r = [
                                    48,
                                    t.length + e.length + 4,
                                    2,
                                    t.length
                                ];
                                return r = r.concat(t, [
                                    2,
                                    e.length
                                ], e), n.from(r);
                            }(d, b);
                        }(t, y, r);
                    }
                    if ("rsa" !== i && "ecdsa/rsa" !== i) throw new Error("wrong private key type");
                    if (void 0 !== e.padding && 1 !== e.padding) throw new Error("illegal or unsupported padding mode");
                    t = n.concat([
                        d,
                        t
                    ]);
                    for(var b = y.modulus.byteLength(), m = [
                        0,
                        1
                    ]; t.length + m.length + 1 < b;)m.push(255);
                    m.push(0);
                    for(var v = -1; ++v < t.length;)m.push(t[v]);
                    return o(m, y);
                }, t.exports.getKey = f, t.exports.makeKey = h;
            },
            7032: (t, e, r)=>{
                "use strict";
                var n = r(9732).Buffer, i = r(7799), o = r(7312).ec, a = r(5053), s = r(4589);
                function u(t, e) {
                    if (t.cmpn(0) <= 0) throw new Error("invalid sig");
                    if (t.cmp(e) >= 0) throw new Error("invalid sig");
                }
                t.exports = function(t, e, r, c, f) {
                    var l = a(r);
                    if ("ec" === l.type) {
                        if ("ecdsa" !== c && "ecdsa/rsa" !== c) throw new Error("wrong public key type");
                        return function(t, e, r) {
                            var n = s[r.data.algorithm.curve.join(".")];
                            if (!n) throw new Error("unknown curve " + r.data.algorithm.curve.join("."));
                            var i = new o(n), a = r.data.subjectPrivateKey.data;
                            return i.verify(e, t, a);
                        }(t, e, l);
                    }
                    if ("dsa" === l.type) {
                        if ("dsa" !== c) throw new Error("wrong public key type");
                        return function(t, e, r) {
                            var n = r.data.p, o = r.data.q, s = r.data.g, c = r.data.pub_key, f = a.signature.decode(t, "der"), l = f.s, h = f.r;
                            u(l, o), u(h, o);
                            var p = i.mont(n), d = l.invm(o);
                            return 0 === s.toRed(p).redPow(new i(e).mul(d).mod(o)).fromRed().mul(c.toRed(p).redPow(h.mul(d).mod(o)).fromRed()).mod(n).mod(o).cmp(h);
                        }(t, e, l);
                    }
                    if ("rsa" !== c && "ecdsa/rsa" !== c) throw new Error("wrong public key type");
                    e = n.concat([
                        f,
                        e
                    ]);
                    for(var h = l.modulus.byteLength(), p = [
                        1
                    ], d = 0; e.length + p.length + 2 < h;)p.push(255), d += 1;
                    p.push(0);
                    for(var y = -1; ++y < e.length;)p.push(e[y]);
                    p = n.from(p);
                    var b = i.mont(l.modulus);
                    t = (t = new i(t).toRed(b)).redPow(new i(l.publicExponent)), t = n.from(t.fromRed().toArray());
                    var m = d < 8 ? 1 : 0;
                    for(h = Math.min(t.length, p.length), t.length !== p.length && (m = 1), y = -1; ++y < h;)m |= t[y] ^ p[y];
                    return 0 === m;
                };
            },
            6876: (t, e, r)=>{
                var n = r(5832).Buffer;
                t.exports = function(t, e) {
                    for(var r = Math.min(t.length, e.length), i = new n(r), o = 0; o < r; ++o)i[o] = t[o] ^ e[o];
                    return i;
                };
            },
            5832: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                var i = r(6775), o = r(2486), a = "function" == typeof Symbol && "function" == typeof Symbol.for ? Symbol.for("nodejs.util.inspect.custom") : null;
                e.Buffer = c, e.SlowBuffer = function(t) {
                    return +t != t && (t = 0), c.alloc(+t);
                }, e.INSPECT_MAX_BYTES = 50;
                var s = 2147483647;
                function u(t) {
                    if (t > s) throw new RangeError('The value "' + t + '" is invalid for option "size"');
                    var e = new Uint8Array(t);
                    return Object.setPrototypeOf(e, c.prototype), e;
                }
                function c(t, e, r) {
                    if ("number" == typeof t) {
                        if ("string" == typeof e) throw new TypeError('The "string" argument must be of type string. Received type number');
                        return h(t);
                    }
                    return f(t, e, r);
                }
                function f(t, e, r) {
                    if ("string" == typeof t) return function(t, e) {
                        if ("string" == typeof e && "" !== e || (e = "utf8"), !c.isEncoding(e)) throw new TypeError("Unknown encoding: " + e);
                        var r = 0 | b(t, e), n = u(r), i = n.write(t, e);
                        return i !== r && (n = n.slice(0, i)), n;
                    }(t, e);
                    if (ArrayBuffer.isView(t)) return function(t) {
                        if (F(t, Uint8Array)) {
                            var e = new Uint8Array(t);
                            return d(e.buffer, e.byteOffset, e.byteLength);
                        }
                        return p(t);
                    }(t);
                    if (null == t) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + n(t));
                    if (F(t, ArrayBuffer) || t && F(t.buffer, ArrayBuffer)) return d(t, e, r);
                    if ("undefined" != typeof SharedArrayBuffer && (F(t, SharedArrayBuffer) || t && F(t.buffer, SharedArrayBuffer))) return d(t, e, r);
                    if ("number" == typeof t) throw new TypeError('The "value" argument must not be of type number. Received type number');
                    var i = t.valueOf && t.valueOf();
                    if (null != i && i !== t) return c.from(i, e, r);
                    var o = function(t) {
                        if (c.isBuffer(t)) {
                            var e = 0 | y(t.length), r = u(e);
                            return 0 === r.length || t.copy(r, 0, 0, e), r;
                        }
                        return void 0 !== t.length ? "number" != typeof t.length || V(t.length) ? u(0) : p(t) : "Buffer" === t.type && Array.isArray(t.data) ? p(t.data) : void 0;
                    }(t);
                    if (o) return o;
                    if ("undefined" != typeof Symbol && null != Symbol.toPrimitive && "function" == typeof t[Symbol.toPrimitive]) return c.from(t[Symbol.toPrimitive]("string"), e, r);
                    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + n(t));
                }
                function l(t) {
                    if ("number" != typeof t) throw new TypeError('"size" argument must be of type number');
                    if (t < 0) throw new RangeError('The value "' + t + '" is invalid for option "size"');
                }
                function h(t) {
                    return l(t), u(t < 0 ? 0 : 0 | y(t));
                }
                function p(t) {
                    for(var e = t.length < 0 ? 0 : 0 | y(t.length), r = u(e), n = 0; n < e; n += 1)r[n] = 255 & t[n];
                    return r;
                }
                function d(t, e, r) {
                    if (e < 0 || t.byteLength < e) throw new RangeError('"offset" is outside of buffer bounds');
                    if (t.byteLength < e + (r || 0)) throw new RangeError('"length" is outside of buffer bounds');
                    var n;
                    return n = void 0 === e && void 0 === r ? new Uint8Array(t) : void 0 === r ? new Uint8Array(t, e) : new Uint8Array(t, e, r), Object.setPrototypeOf(n, c.prototype), n;
                }
                function y(t) {
                    if (t >= s) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + s.toString(16) + " bytes");
                    return 0 | t;
                }
                function b(t, e) {
                    if (c.isBuffer(t)) return t.length;
                    if (ArrayBuffer.isView(t) || F(t, ArrayBuffer)) return t.byteLength;
                    if ("string" != typeof t) throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + n(t));
                    var r = t.length, i = arguments.length > 2 && !0 === arguments[2];
                    if (!i && 0 === r) return 0;
                    for(var o = !1;;)switch(e){
                        case "ascii":
                        case "latin1":
                        case "binary":
                            return r;
                        case "utf8":
                        case "utf-8":
                            return C(t).length;
                        case "ucs2":
                        case "ucs-2":
                        case "utf16le":
                        case "utf-16le":
                            return 2 * r;
                        case "hex":
                            return r >>> 1;
                        case "base64":
                            return U(t).length;
                        default:
                            if (o) return i ? -1 : C(t).length;
                            e = ("" + e).toLowerCase(), o = !0;
                    }
                }
                function m(t, e, r) {
                    var n = !1;
                    if ((void 0 === e || e < 0) && (e = 0), e > this.length) return "";
                    if ((void 0 === r || r > this.length) && (r = this.length), r <= 0) return "";
                    if ((r >>>= 0) <= (e >>>= 0)) return "";
                    for(t || (t = "utf8");;)switch(t){
                        case "hex":
                            return M(this, e, r);
                        case "utf8":
                        case "utf-8":
                            return A(this, e, r);
                        case "ascii":
                            return x(this, e, r);
                        case "latin1":
                        case "binary":
                            return k(this, e, r);
                        case "base64":
                            return E(this, e, r);
                        case "ucs2":
                        case "ucs-2":
                        case "utf16le":
                        case "utf-16le":
                            return T(this, e, r);
                        default:
                            if (n) throw new TypeError("Unknown encoding: " + t);
                            t = (t + "").toLowerCase(), n = !0;
                    }
                }
                function v(t, e, r) {
                    var n = t[e];
                    t[e] = t[r], t[r] = n;
                }
                function g(t, e, r, n, i) {
                    if (0 === t.length) return -1;
                    if ("string" == typeof r ? (n = r, r = 0) : r > 2147483647 ? r = 2147483647 : r < -2147483648 && (r = -2147483648), V(r = +r) && (r = i ? 0 : t.length - 1), r < 0 && (r = t.length + r), r >= t.length) {
                        if (i) return -1;
                        r = t.length - 1;
                    } else if (r < 0) {
                        if (!i) return -1;
                        r = 0;
                    }
                    if ("string" == typeof e && (e = c.from(e, n)), c.isBuffer(e)) return 0 === e.length ? -1 : _(t, e, r, n, i);
                    if ("number" == typeof e) return e &= 255, "function" == typeof Uint8Array.prototype.indexOf ? i ? Uint8Array.prototype.indexOf.call(t, e, r) : Uint8Array.prototype.lastIndexOf.call(t, e, r) : _(t, [
                        e
                    ], r, n, i);
                    throw new TypeError("val must be string, number or Buffer");
                }
                function _(t, e, r, n, i) {
                    var o, a = 1, s = t.length, u = e.length;
                    if (void 0 !== n && ("ucs2" === (n = String(n).toLowerCase()) || "ucs-2" === n || "utf16le" === n || "utf-16le" === n)) {
                        if (t.length < 2 || e.length < 2) return -1;
                        a = 2, s /= 2, u /= 2, r /= 2;
                    }
                    function c(t, e) {
                        return 1 === a ? t[e] : t.readUInt16BE(e * a);
                    }
                    if (i) {
                        var f = -1;
                        for(o = r; o < s; o++)if (c(t, o) === c(e, -1 === f ? 0 : o - f)) {
                            if (-1 === f && (f = o), o - f + 1 === u) return f * a;
                        } else -1 !== f && (o -= o - f), f = -1;
                    } else for(r + u > s && (r = s - u), o = r; o >= 0; o--){
                        for(var l = !0, h = 0; h < u; h++)if (c(t, o + h) !== c(e, h)) {
                            l = !1;
                            break;
                        }
                        if (l) return o;
                    }
                    return -1;
                }
                function w(t, e, r, n) {
                    r = Number(r) || 0;
                    var i = t.length - r;
                    n ? (n = Number(n)) > i && (n = i) : n = i;
                    var o = e.length;
                    n > o / 2 && (n = o / 2);
                    for(var a = 0; a < n; ++a){
                        var s = parseInt(e.substr(2 * a, 2), 16);
                        if (V(s)) return a;
                        t[r + a] = s;
                    }
                    return a;
                }
                function S(t, e, r, n) {
                    return q(C(e, t.length - r), t, r, n);
                }
                function O(t, e, r, n) {
                    return q(function(t) {
                        for(var e = [], r = 0; r < t.length; ++r)e.push(255 & t.charCodeAt(r));
                        return e;
                    }(e), t, r, n);
                }
                function j(t, e, r, n) {
                    return q(U(e), t, r, n);
                }
                function $(t, e, r, n) {
                    return q(function(t, e) {
                        for(var r, n, i, o = [], a = 0; a < t.length && !((e -= 2) < 0); ++a)n = (r = t.charCodeAt(a)) >> 8, i = r % 256, o.push(i), o.push(n);
                        return o;
                    }(e, t.length - r), t, r, n);
                }
                function E(t, e, r) {
                    return 0 === e && r === t.length ? i.fromByteArray(t) : i.fromByteArray(t.slice(e, r));
                }
                function A(t, e, r) {
                    r = Math.min(t.length, r);
                    for(var n = [], i = e; i < r;){
                        var o, a, s, u, c = t[i], f = null, l = c > 239 ? 4 : c > 223 ? 3 : c > 191 ? 2 : 1;
                        if (i + l <= r) switch(l){
                            case 1:
                                c < 128 && (f = c);
                                break;
                            case 2:
                                128 == (192 & (o = t[i + 1])) && (u = (31 & c) << 6 | 63 & o) > 127 && (f = u);
                                break;
                            case 3:
                                o = t[i + 1], a = t[i + 2], 128 == (192 & o) && 128 == (192 & a) && (u = (15 & c) << 12 | (63 & o) << 6 | 63 & a) > 2047 && (u < 55296 || u > 57343) && (f = u);
                                break;
                            case 4:
                                o = t[i + 1], a = t[i + 2], s = t[i + 3], 128 == (192 & o) && 128 == (192 & a) && 128 == (192 & s) && (u = (15 & c) << 18 | (63 & o) << 12 | (63 & a) << 6 | 63 & s) > 65535 && u < 1114112 && (f = u);
                        }
                        null === f ? (f = 65533, l = 1) : f > 65535 && (f -= 65536, n.push(f >>> 10 & 1023 | 55296), f = 56320 | 1023 & f), n.push(f), i += l;
                    }
                    return function(t) {
                        var e = t.length;
                        if (e <= P) return String.fromCharCode.apply(String, t);
                        for(var r = "", n = 0; n < e;)r += String.fromCharCode.apply(String, t.slice(n, n += P));
                        return r;
                    }(n);
                }
                e.kMaxLength = s, c.TYPED_ARRAY_SUPPORT = function() {
                    try {
                        var t = new Uint8Array(1), e = {
                            foo: function() {
                                return 42;
                            }
                        };
                        return Object.setPrototypeOf(e, Uint8Array.prototype), Object.setPrototypeOf(t, e), 42 === t.foo();
                    } catch (t) {
                        return !1;
                    }
                }(), c.TYPED_ARRAY_SUPPORT || "undefined" == typeof console || "function" != typeof console.error || console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."), Object.defineProperty(c.prototype, "parent", {
                    enumerable: !0,
                    get: function() {
                        if (c.isBuffer(this)) return this.buffer;
                    }
                }), Object.defineProperty(c.prototype, "offset", {
                    enumerable: !0,
                    get: function() {
                        if (c.isBuffer(this)) return this.byteOffset;
                    }
                }), c.poolSize = 8192, c.from = function(t, e, r) {
                    return f(t, e, r);
                }, Object.setPrototypeOf(c.prototype, Uint8Array.prototype), Object.setPrototypeOf(c, Uint8Array), c.alloc = function(t, e, r) {
                    return function(t, e, r) {
                        return l(t), t <= 0 ? u(t) : void 0 !== e ? "string" == typeof r ? u(t).fill(e, r) : u(t).fill(e) : u(t);
                    }(t, e, r);
                }, c.allocUnsafe = function(t) {
                    return h(t);
                }, c.allocUnsafeSlow = function(t) {
                    return h(t);
                }, c.isBuffer = function(t) {
                    return null != t && !0 === t._isBuffer && t !== c.prototype;
                }, c.compare = function(t, e) {
                    if (F(t, Uint8Array) && (t = c.from(t, t.offset, t.byteLength)), F(e, Uint8Array) && (e = c.from(e, e.offset, e.byteLength)), !c.isBuffer(t) || !c.isBuffer(e)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
                    if (t === e) return 0;
                    for(var r = t.length, n = e.length, i = 0, o = Math.min(r, n); i < o; ++i)if (t[i] !== e[i]) {
                        r = t[i], n = e[i];
                        break;
                    }
                    return r < n ? -1 : n < r ? 1 : 0;
                }, c.isEncoding = function(t) {
                    switch(String(t).toLowerCase()){
                        case "hex":
                        case "utf8":
                        case "utf-8":
                        case "ascii":
                        case "latin1":
                        case "binary":
                        case "base64":
                        case "ucs2":
                        case "ucs-2":
                        case "utf16le":
                        case "utf-16le":
                            return !0;
                        default:
                            return !1;
                    }
                }, c.concat = function(t, e) {
                    if (!Array.isArray(t)) throw new TypeError('"list" argument must be an Array of Buffers');
                    if (0 === t.length) return c.alloc(0);
                    var r;
                    if (void 0 === e) for(e = 0, r = 0; r < t.length; ++r)e += t[r].length;
                    var n = c.allocUnsafe(e), i = 0;
                    for(r = 0; r < t.length; ++r){
                        var o = t[r];
                        if (F(o, Uint8Array)) i + o.length > n.length ? c.from(o).copy(n, i) : Uint8Array.prototype.set.call(n, o, i);
                        else {
                            if (!c.isBuffer(o)) throw new TypeError('"list" argument must be an Array of Buffers');
                            o.copy(n, i);
                        }
                        i += o.length;
                    }
                    return n;
                }, c.byteLength = b, c.prototype._isBuffer = !0, c.prototype.swap16 = function() {
                    var t = this.length;
                    if (t % 2 != 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
                    for(var e = 0; e < t; e += 2)v(this, e, e + 1);
                    return this;
                }, c.prototype.swap32 = function() {
                    var t = this.length;
                    if (t % 4 != 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
                    for(var e = 0; e < t; e += 4)v(this, e, e + 3), v(this, e + 1, e + 2);
                    return this;
                }, c.prototype.swap64 = function() {
                    var t = this.length;
                    if (t % 8 != 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
                    for(var e = 0; e < t; e += 8)v(this, e, e + 7), v(this, e + 1, e + 6), v(this, e + 2, e + 5), v(this, e + 3, e + 4);
                    return this;
                }, c.prototype.toString = function() {
                    var t = this.length;
                    return 0 === t ? "" : 0 === arguments.length ? A(this, 0, t) : m.apply(this, arguments);
                }, c.prototype.toLocaleString = c.prototype.toString, c.prototype.equals = function(t) {
                    if (!c.isBuffer(t)) throw new TypeError("Argument must be a Buffer");
                    return this === t || 0 === c.compare(this, t);
                }, c.prototype.inspect = function() {
                    var t = "", r = e.INSPECT_MAX_BYTES;
                    return t = this.toString("hex", 0, r).replace(/(.{2})/g, "$1 ").trim(), this.length > r && (t += " ... "), "<Buffer " + t + ">";
                }, a && (c.prototype[a] = c.prototype.inspect), c.prototype.compare = function(t, e, r, i, o) {
                    if (F(t, Uint8Array) && (t = c.from(t, t.offset, t.byteLength)), !c.isBuffer(t)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + n(t));
                    if (void 0 === e && (e = 0), void 0 === r && (r = t ? t.length : 0), void 0 === i && (i = 0), void 0 === o && (o = this.length), e < 0 || r > t.length || i < 0 || o > this.length) throw new RangeError("out of range index");
                    if (i >= o && e >= r) return 0;
                    if (i >= o) return -1;
                    if (e >= r) return 1;
                    if (this === t) return 0;
                    for(var a = (o >>>= 0) - (i >>>= 0), s = (r >>>= 0) - (e >>>= 0), u = Math.min(a, s), f = this.slice(i, o), l = t.slice(e, r), h = 0; h < u; ++h)if (f[h] !== l[h]) {
                        a = f[h], s = l[h];
                        break;
                    }
                    return a < s ? -1 : s < a ? 1 : 0;
                }, c.prototype.includes = function(t, e, r) {
                    return -1 !== this.indexOf(t, e, r);
                }, c.prototype.indexOf = function(t, e, r) {
                    return g(this, t, e, r, !0);
                }, c.prototype.lastIndexOf = function(t, e, r) {
                    return g(this, t, e, r, !1);
                }, c.prototype.write = function(t, e, r, n) {
                    if (void 0 === e) n = "utf8", r = this.length, e = 0;
                    else if (void 0 === r && "string" == typeof e) n = e, r = this.length, e = 0;
                    else {
                        if (!isFinite(e)) throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
                        e >>>= 0, isFinite(r) ? (r >>>= 0, void 0 === n && (n = "utf8")) : (n = r, r = void 0);
                    }
                    var i = this.length - e;
                    if ((void 0 === r || r > i) && (r = i), t.length > 0 && (r < 0 || e < 0) || e > this.length) throw new RangeError("Attempt to write outside buffer bounds");
                    n || (n = "utf8");
                    for(var o = !1;;)switch(n){
                        case "hex":
                            return w(this, t, e, r);
                        case "utf8":
                        case "utf-8":
                            return S(this, t, e, r);
                        case "ascii":
                        case "latin1":
                        case "binary":
                            return O(this, t, e, r);
                        case "base64":
                            return j(this, t, e, r);
                        case "ucs2":
                        case "ucs-2":
                        case "utf16le":
                        case "utf-16le":
                            return $(this, t, e, r);
                        default:
                            if (o) throw new TypeError("Unknown encoding: " + n);
                            n = ("" + n).toLowerCase(), o = !0;
                    }
                }, c.prototype.toJSON = function() {
                    return {
                        type: "Buffer",
                        data: Array.prototype.slice.call(this._arr || this, 0)
                    };
                };
                var P = 4096;
                function x(t, e, r) {
                    var n = "";
                    r = Math.min(t.length, r);
                    for(var i = e; i < r; ++i)n += String.fromCharCode(127 & t[i]);
                    return n;
                }
                function k(t, e, r) {
                    var n = "";
                    r = Math.min(t.length, r);
                    for(var i = e; i < r; ++i)n += String.fromCharCode(t[i]);
                    return n;
                }
                function M(t, e, r) {
                    var n = t.length;
                    (!e || e < 0) && (e = 0), (!r || r < 0 || r > n) && (r = n);
                    for(var i = "", o = e; o < r; ++o)i += z[t[o]];
                    return i;
                }
                function T(t, e, r) {
                    for(var n = t.slice(e, r), i = "", o = 0; o < n.length - 1; o += 2)i += String.fromCharCode(n[o] + 256 * n[o + 1]);
                    return i;
                }
                function B(t, e, r) {
                    if (t % 1 != 0 || t < 0) throw new RangeError("offset is not uint");
                    if (t + e > r) throw new RangeError("Trying to access beyond buffer length");
                }
                function I(t, e, r, n, i, o) {
                    if (!c.isBuffer(t)) throw new TypeError('"buffer" argument must be a Buffer instance');
                    if (e > i || e < o) throw new RangeError('"value" argument is out of bounds');
                    if (r + n > t.length) throw new RangeError("Index out of range");
                }
                function R(t, e, r, n, i, o) {
                    if (r + n > t.length) throw new RangeError("Index out of range");
                    if (r < 0) throw new RangeError("Index out of range");
                }
                function N(t, e, r, n, i) {
                    return e = +e, r >>>= 0, i || R(t, 0, r, 4), o.write(t, e, r, n, 23, 4), r + 4;
                }
                function D(t, e, r, n, i) {
                    return e = +e, r >>>= 0, i || R(t, 0, r, 8), o.write(t, e, r, n, 52, 8), r + 8;
                }
                c.prototype.slice = function(t, e) {
                    var r = this.length;
                    (t = ~~t) < 0 ? (t += r) < 0 && (t = 0) : t > r && (t = r), (e = void 0 === e ? r : ~~e) < 0 ? (e += r) < 0 && (e = 0) : e > r && (e = r), e < t && (e = t);
                    var n = this.subarray(t, e);
                    return Object.setPrototypeOf(n, c.prototype), n;
                }, c.prototype.readUintLE = c.prototype.readUIntLE = function(t, e, r) {
                    t >>>= 0, e >>>= 0, r || B(t, e, this.length);
                    for(var n = this[t], i = 1, o = 0; ++o < e && (i *= 256);)n += this[t + o] * i;
                    return n;
                }, c.prototype.readUintBE = c.prototype.readUIntBE = function(t, e, r) {
                    t >>>= 0, e >>>= 0, r || B(t, e, this.length);
                    for(var n = this[t + --e], i = 1; e > 0 && (i *= 256);)n += this[t + --e] * i;
                    return n;
                }, c.prototype.readUint8 = c.prototype.readUInt8 = function(t, e) {
                    return t >>>= 0, e || B(t, 1, this.length), this[t];
                }, c.prototype.readUint16LE = c.prototype.readUInt16LE = function(t, e) {
                    return t >>>= 0, e || B(t, 2, this.length), this[t] | this[t + 1] << 8;
                }, c.prototype.readUint16BE = c.prototype.readUInt16BE = function(t, e) {
                    return t >>>= 0, e || B(t, 2, this.length), this[t] << 8 | this[t + 1];
                }, c.prototype.readUint32LE = c.prototype.readUInt32LE = function(t, e) {
                    return t >>>= 0, e || B(t, 4, this.length), (this[t] | this[t + 1] << 8 | this[t + 2] << 16) + 16777216 * this[t + 3];
                }, c.prototype.readUint32BE = c.prototype.readUInt32BE = function(t, e) {
                    return t >>>= 0, e || B(t, 4, this.length), 16777216 * this[t] + (this[t + 1] << 16 | this[t + 2] << 8 | this[t + 3]);
                }, c.prototype.readIntLE = function(t, e, r) {
                    t >>>= 0, e >>>= 0, r || B(t, e, this.length);
                    for(var n = this[t], i = 1, o = 0; ++o < e && (i *= 256);)n += this[t + o] * i;
                    return n >= (i *= 128) && (n -= Math.pow(2, 8 * e)), n;
                }, c.prototype.readIntBE = function(t, e, r) {
                    t >>>= 0, e >>>= 0, r || B(t, e, this.length);
                    for(var n = e, i = 1, o = this[t + --n]; n > 0 && (i *= 256);)o += this[t + --n] * i;
                    return o >= (i *= 128) && (o -= Math.pow(2, 8 * e)), o;
                }, c.prototype.readInt8 = function(t, e) {
                    return t >>>= 0, e || B(t, 1, this.length), 128 & this[t] ? -1 * (255 - this[t] + 1) : this[t];
                }, c.prototype.readInt16LE = function(t, e) {
                    t >>>= 0, e || B(t, 2, this.length);
                    var r = this[t] | this[t + 1] << 8;
                    return 32768 & r ? 4294901760 | r : r;
                }, c.prototype.readInt16BE = function(t, e) {
                    t >>>= 0, e || B(t, 2, this.length);
                    var r = this[t + 1] | this[t] << 8;
                    return 32768 & r ? 4294901760 | r : r;
                }, c.prototype.readInt32LE = function(t, e) {
                    return t >>>= 0, e || B(t, 4, this.length), this[t] | this[t + 1] << 8 | this[t + 2] << 16 | this[t + 3] << 24;
                }, c.prototype.readInt32BE = function(t, e) {
                    return t >>>= 0, e || B(t, 4, this.length), this[t] << 24 | this[t + 1] << 16 | this[t + 2] << 8 | this[t + 3];
                }, c.prototype.readFloatLE = function(t, e) {
                    return t >>>= 0, e || B(t, 4, this.length), o.read(this, t, !0, 23, 4);
                }, c.prototype.readFloatBE = function(t, e) {
                    return t >>>= 0, e || B(t, 4, this.length), o.read(this, t, !1, 23, 4);
                }, c.prototype.readDoubleLE = function(t, e) {
                    return t >>>= 0, e || B(t, 8, this.length), o.read(this, t, !0, 52, 8);
                }, c.prototype.readDoubleBE = function(t, e) {
                    return t >>>= 0, e || B(t, 8, this.length), o.read(this, t, !1, 52, 8);
                }, c.prototype.writeUintLE = c.prototype.writeUIntLE = function(t, e, r, n) {
                    t = +t, e >>>= 0, r >>>= 0, n || I(this, t, e, r, Math.pow(2, 8 * r) - 1, 0);
                    var i = 1, o = 0;
                    for(this[e] = 255 & t; ++o < r && (i *= 256);)this[e + o] = t / i & 255;
                    return e + r;
                }, c.prototype.writeUintBE = c.prototype.writeUIntBE = function(t, e, r, n) {
                    t = +t, e >>>= 0, r >>>= 0, n || I(this, t, e, r, Math.pow(2, 8 * r) - 1, 0);
                    var i = r - 1, o = 1;
                    for(this[e + i] = 255 & t; --i >= 0 && (o *= 256);)this[e + i] = t / o & 255;
                    return e + r;
                }, c.prototype.writeUint8 = c.prototype.writeUInt8 = function(t, e, r) {
                    return t = +t, e >>>= 0, r || I(this, t, e, 1, 255, 0), this[e] = 255 & t, e + 1;
                }, c.prototype.writeUint16LE = c.prototype.writeUInt16LE = function(t, e, r) {
                    return t = +t, e >>>= 0, r || I(this, t, e, 2, 65535, 0), this[e] = 255 & t, this[e + 1] = t >>> 8, e + 2;
                }, c.prototype.writeUint16BE = c.prototype.writeUInt16BE = function(t, e, r) {
                    return t = +t, e >>>= 0, r || I(this, t, e, 2, 65535, 0), this[e] = t >>> 8, this[e + 1] = 255 & t, e + 2;
                }, c.prototype.writeUint32LE = c.prototype.writeUInt32LE = function(t, e, r) {
                    return t = +t, e >>>= 0, r || I(this, t, e, 4, 4294967295, 0), this[e + 3] = t >>> 24, this[e + 2] = t >>> 16, this[e + 1] = t >>> 8, this[e] = 255 & t, e + 4;
                }, c.prototype.writeUint32BE = c.prototype.writeUInt32BE = function(t, e, r) {
                    return t = +t, e >>>= 0, r || I(this, t, e, 4, 4294967295, 0), this[e] = t >>> 24, this[e + 1] = t >>> 16, this[e + 2] = t >>> 8, this[e + 3] = 255 & t, e + 4;
                }, c.prototype.writeIntLE = function(t, e, r, n) {
                    if (t = +t, e >>>= 0, !n) {
                        var i = Math.pow(2, 8 * r - 1);
                        I(this, t, e, r, i - 1, -i);
                    }
                    var o = 0, a = 1, s = 0;
                    for(this[e] = 255 & t; ++o < r && (a *= 256);)t < 0 && 0 === s && 0 !== this[e + o - 1] && (s = 1), this[e + o] = (t / a | 0) - s & 255;
                    return e + r;
                }, c.prototype.writeIntBE = function(t, e, r, n) {
                    if (t = +t, e >>>= 0, !n) {
                        var i = Math.pow(2, 8 * r - 1);
                        I(this, t, e, r, i - 1, -i);
                    }
                    var o = r - 1, a = 1, s = 0;
                    for(this[e + o] = 255 & t; --o >= 0 && (a *= 256);)t < 0 && 0 === s && 0 !== this[e + o + 1] && (s = 1), this[e + o] = (t / a | 0) - s & 255;
                    return e + r;
                }, c.prototype.writeInt8 = function(t, e, r) {
                    return t = +t, e >>>= 0, r || I(this, t, e, 1, 127, -128), t < 0 && (t = 255 + t + 1), this[e] = 255 & t, e + 1;
                }, c.prototype.writeInt16LE = function(t, e, r) {
                    return t = +t, e >>>= 0, r || I(this, t, e, 2, 32767, -32768), this[e] = 255 & t, this[e + 1] = t >>> 8, e + 2;
                }, c.prototype.writeInt16BE = function(t, e, r) {
                    return t = +t, e >>>= 0, r || I(this, t, e, 2, 32767, -32768), this[e] = t >>> 8, this[e + 1] = 255 & t, e + 2;
                }, c.prototype.writeInt32LE = function(t, e, r) {
                    return t = +t, e >>>= 0, r || I(this, t, e, 4, 2147483647, -2147483648), this[e] = 255 & t, this[e + 1] = t >>> 8, this[e + 2] = t >>> 16, this[e + 3] = t >>> 24, e + 4;
                }, c.prototype.writeInt32BE = function(t, e, r) {
                    return t = +t, e >>>= 0, r || I(this, t, e, 4, 2147483647, -2147483648), t < 0 && (t = 4294967295 + t + 1), this[e] = t >>> 24, this[e + 1] = t >>> 16, this[e + 2] = t >>> 8, this[e + 3] = 255 & t, e + 4;
                }, c.prototype.writeFloatLE = function(t, e, r) {
                    return N(this, t, e, !0, r);
                }, c.prototype.writeFloatBE = function(t, e, r) {
                    return N(this, t, e, !1, r);
                }, c.prototype.writeDoubleLE = function(t, e, r) {
                    return D(this, t, e, !0, r);
                }, c.prototype.writeDoubleBE = function(t, e, r) {
                    return D(this, t, e, !1, r);
                }, c.prototype.copy = function(t, e, r, n) {
                    if (!c.isBuffer(t)) throw new TypeError("argument should be a Buffer");
                    if (r || (r = 0), n || 0 === n || (n = this.length), e >= t.length && (e = t.length), e || (e = 0), n > 0 && n < r && (n = r), n === r) return 0;
                    if (0 === t.length || 0 === this.length) return 0;
                    if (e < 0) throw new RangeError("targetStart out of bounds");
                    if (r < 0 || r >= this.length) throw new RangeError("Index out of range");
                    if (n < 0) throw new RangeError("sourceEnd out of bounds");
                    n > this.length && (n = this.length), t.length - e < n - r && (n = t.length - e + r);
                    var i = n - r;
                    return this === t && "function" == typeof Uint8Array.prototype.copyWithin ? this.copyWithin(e, r, n) : Uint8Array.prototype.set.call(t, this.subarray(r, n), e), i;
                }, c.prototype.fill = function(t, e, r, n) {
                    if ("string" == typeof t) {
                        if ("string" == typeof e ? (n = e, e = 0, r = this.length) : "string" == typeof r && (n = r, r = this.length), void 0 !== n && "string" != typeof n) throw new TypeError("encoding must be a string");
                        if ("string" == typeof n && !c.isEncoding(n)) throw new TypeError("Unknown encoding: " + n);
                        if (1 === t.length) {
                            var i = t.charCodeAt(0);
                            ("utf8" === n && i < 128 || "latin1" === n) && (t = i);
                        }
                    } else "number" == typeof t ? t &= 255 : "boolean" == typeof t && (t = Number(t));
                    if (e < 0 || this.length < e || this.length < r) throw new RangeError("Out of range index");
                    if (r <= e) return this;
                    var o;
                    if (e >>>= 0, r = void 0 === r ? this.length : r >>> 0, t || (t = 0), "number" == typeof t) for(o = e; o < r; ++o)this[o] = t;
                    else {
                        var a = c.isBuffer(t) ? t : c.from(t, n), s = a.length;
                        if (0 === s) throw new TypeError('The value "' + t + '" is invalid for argument "value"');
                        for(o = 0; o < r - e; ++o)this[o + e] = a[o % s];
                    }
                    return this;
                };
                var L = /[^+/0-9A-Za-z-_]/g;
                function C(t, e) {
                    var r;
                    e = e || 1 / 0;
                    for(var n = t.length, i = null, o = [], a = 0; a < n; ++a){
                        if ((r = t.charCodeAt(a)) > 55295 && r < 57344) {
                            if (!i) {
                                if (r > 56319) {
                                    (e -= 3) > -1 && o.push(239, 191, 189);
                                    continue;
                                }
                                if (a + 1 === n) {
                                    (e -= 3) > -1 && o.push(239, 191, 189);
                                    continue;
                                }
                                i = r;
                                continue;
                            }
                            if (r < 56320) {
                                (e -= 3) > -1 && o.push(239, 191, 189), i = r;
                                continue;
                            }
                            r = 65536 + (i - 55296 << 10 | r - 56320);
                        } else i && (e -= 3) > -1 && o.push(239, 191, 189);
                        if (i = null, r < 128) {
                            if ((e -= 1) < 0) break;
                            o.push(r);
                        } else if (r < 2048) {
                            if ((e -= 2) < 0) break;
                            o.push(r >> 6 | 192, 63 & r | 128);
                        } else if (r < 65536) {
                            if ((e -= 3) < 0) break;
                            o.push(r >> 12 | 224, r >> 6 & 63 | 128, 63 & r | 128);
                        } else {
                            if (!(r < 1114112)) throw new Error("Invalid code point");
                            if ((e -= 4) < 0) break;
                            o.push(r >> 18 | 240, r >> 12 & 63 | 128, r >> 6 & 63 | 128, 63 & r | 128);
                        }
                    }
                    return o;
                }
                function U(t) {
                    return i.toByteArray(function(t) {
                        if ((t = (t = t.split("=")[0]).trim().replace(L, "")).length < 2) return "";
                        for(; t.length % 4 != 0;)t += "=";
                        return t;
                    }(t));
                }
                function q(t, e, r, n) {
                    for(var i = 0; i < n && !(i + r >= e.length || i >= t.length); ++i)e[i + r] = t[i];
                    return i;
                }
                function F(t, e) {
                    return t instanceof e || null != t && null != t.constructor && null != t.constructor.name && t.constructor.name === e.name;
                }
                function V(t) {
                    return t != t;
                }
                var z = function() {
                    for(var t = "0123456789abcdef", e = new Array(256), r = 0; r < 16; ++r)for(var n = 16 * r, i = 0; i < 16; ++i)e[n + i] = t[r] + t[i];
                    return e;
                }();
            },
            5477: (t, e, r)=>{
                "use strict";
                var n = r(2354), i = r(3279), o = r(3123), a = r(3388);
                t.exports = a || n.call(o, i);
            },
            5804: (t, e, r)=>{
                "use strict";
                var n = r(2354), i = r(3279), o = r(5477);
                t.exports = function() {
                    return o(n, i, arguments);
                };
            },
            3279: (t)=>{
                "use strict";
                t.exports = Function.prototype.apply;
            },
            3123: (t)=>{
                "use strict";
                t.exports = Function.prototype.call;
            },
            8863: (t, e, r)=>{
                "use strict";
                var n = r(2354), i = r(2268), o = r(3123), a = r(5477);
                t.exports = function(t) {
                    if (t.length < 1 || "function" != typeof t[0]) throw new i("a function is required");
                    return a(n, o, t);
                };
            },
            3388: (t)=>{
                "use strict";
                t.exports = "undefined" != typeof Reflect && Reflect && Reflect.apply;
            },
            9122: (t, e, r)=>{
                "use strict";
                var n = r(3900), i = r(988), o = r(8863), a = r(5804);
                t.exports = function(t) {
                    var e = o(arguments), r = t.length - (arguments.length - 1);
                    return n(e, 1 + (r > 0 ? r : 0), !0);
                }, i ? i(t.exports, "apply", {
                    value: a
                }) : t.exports.apply = a;
            },
            3071: (t, e, r)=>{
                "use strict";
                var n = r(6400), i = r(8863), o = i([
                    n("%String.prototype.indexOf%")
                ]);
                t.exports = function(t, e) {
                    var r = n(t, !!e);
                    return "function" == typeof r && o(t, ".prototype.") > -1 ? i([
                        r
                    ]) : r;
                };
            },
            2533: (t, e, r)=>{
                "use strict";
                var n = r(9732).Buffer, i = r(7775).Transform, o = r(136).I;
                function a(t) {
                    i.call(this), this.hashMode = "string" == typeof t, this.hashMode ? this[t] = this._finalOrDigest : this.final = this._finalOrDigest, this._final && (this.__final = this._final, this._final = null), this._decoder = null, this._encoding = null;
                }
                r(1679)(a, i);
                var s = "undefined" != typeof Uint8Array, u = "undefined" != typeof ArrayBuffer && "undefined" != typeof Uint8Array && ArrayBuffer.isView && (n.prototype instanceof Uint8Array || n.TYPED_ARRAY_SUPPORT);
                a.prototype.update = function(t, e, r) {
                    var i = function(t, e) {
                        if (t instanceof n) return t;
                        if ("string" == typeof t) return n.from(t, e);
                        if (u && ArrayBuffer.isView(t)) {
                            if (0 === t.byteLength) return n.alloc(0);
                            var r = n.from(t.buffer, t.byteOffset, t.byteLength);
                            if (r.byteLength === t.byteLength) return r;
                        }
                        if (s && t instanceof Uint8Array) return n.from(t);
                        if (n.isBuffer(t) && t.constructor && "function" == typeof t.constructor.isBuffer && t.constructor.isBuffer(t)) return n.from(t);
                        throw new TypeError('The "data" argument must be of type string or an instance of Buffer, TypedArray, or DataView.');
                    }(t, e), o = this._update(i);
                    return this.hashMode ? this : (r && (o = this._toString(o, r)), o);
                }, a.prototype.setAutoPadding = function() {}, a.prototype.getAuthTag = function() {
                    throw new Error("trying to get auth tag in unsupported state");
                }, a.prototype.setAuthTag = function() {
                    throw new Error("trying to set auth tag in unsupported state");
                }, a.prototype.setAAD = function() {
                    throw new Error("trying to set aad in unsupported state");
                }, a.prototype._transform = function(t, e, r) {
                    var n;
                    try {
                        this.hashMode ? this._update(t) : this.push(this._update(t));
                    } catch (t) {
                        n = t;
                    } finally{
                        r(n);
                    }
                }, a.prototype._flush = function(t) {
                    var e;
                    try {
                        this.push(this.__final());
                    } catch (t) {
                        e = t;
                    }
                    t(e);
                }, a.prototype._finalOrDigest = function(t) {
                    var e = this.__final() || n.alloc(0);
                    return t && (e = this._toString(e, t, !0)), e;
                }, a.prototype._toString = function(t, e, r) {
                    if (this._decoder || (this._decoder = new o(e), this._encoding = e), this._encoding !== e) throw new Error("can\u2019t switch encodings");
                    var n = this._decoder.write(t);
                    return r && (n += this._decoder.end()), n;
                }, t.exports = a;
            },
            7919: (t, e, r)=>{
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i(t) {
                    return Object.prototype.toString.call(t);
                }
                e.isArray = function(t) {
                    return Array.isArray ? Array.isArray(t) : "[object Array]" === i(t);
                }, e.isBoolean = function(t) {
                    return "boolean" == typeof t;
                }, e.isNull = function(t) {
                    return null === t;
                }, e.isNullOrUndefined = function(t) {
                    return null == t;
                }, e.isNumber = function(t) {
                    return "number" == typeof t;
                }, e.isString = function(t) {
                    return "string" == typeof t;
                }, e.isSymbol = function(t) {
                    return "symbol" === n(t);
                }, e.isUndefined = function(t) {
                    return void 0 === t;
                }, e.isRegExp = function(t) {
                    return "[object RegExp]" === i(t);
                }, e.isObject = function(t) {
                    return "object" === n(t) && null !== t;
                }, e.isDate = function(t) {
                    return "[object Date]" === i(t);
                }, e.isError = function(t) {
                    return "[object Error]" === i(t) || t instanceof Error;
                }, e.isFunction = function(t) {
                    return "function" == typeof t;
                }, e.isPrimitive = function(t) {
                    return null === t || "boolean" == typeof t || "number" == typeof t || "string" == typeof t || "symbol" === n(t) || void 0 === t;
                }, e.isBuffer = r(5832).Buffer.isBuffer;
            },
            1005: (t, e, r)=>{
                var n = r(5832).Buffer, i = r(7312), o = r(7799);
                t.exports = function(t) {
                    return new s(t);
                };
                var a = {
                    secp256k1: {
                        name: "secp256k1",
                        byteLength: 32
                    },
                    secp224r1: {
                        name: "p224",
                        byteLength: 28
                    },
                    prime256v1: {
                        name: "p256",
                        byteLength: 32
                    },
                    prime192v1: {
                        name: "p192",
                        byteLength: 24
                    },
                    ed25519: {
                        name: "ed25519",
                        byteLength: 32
                    },
                    secp384r1: {
                        name: "p384",
                        byteLength: 48
                    },
                    secp521r1: {
                        name: "p521",
                        byteLength: 66
                    }
                };
                function s(t) {
                    this.curveType = a[t], this.curveType || (this.curveType = {
                        name: t
                    }), this.curve = new i.ec(this.curveType.name), this.keys = void 0;
                }
                function u(t, e, r) {
                    Array.isArray(t) || (t = t.toArray());
                    var i = new n(t);
                    if (r && i.length < r) {
                        var o = new n(r - i.length);
                        o.fill(0), i = n.concat([
                            o,
                            i
                        ]);
                    }
                    return e ? i.toString(e) : i;
                }
                a.p224 = a.secp224r1, a.p256 = a.secp256r1 = a.prime256v1, a.p192 = a.secp192r1 = a.prime192v1, a.p384 = a.secp384r1, a.p521 = a.secp521r1, s.prototype.generateKeys = function(t, e) {
                    return this.keys = this.curve.genKeyPair(), this.getPublicKey(t, e);
                }, s.prototype.computeSecret = function(t, e, r) {
                    return e = e || "utf8", n.isBuffer(t) || (t = new n(t, e)), u(this.curve.keyFromPublic(t).getPublic().mul(this.keys.getPrivate()).getX(), r, this.curveType.byteLength);
                }, s.prototype.getPublicKey = function(t, e) {
                    var r = this.keys.getPublic("compressed" === e, !0);
                    return "hybrid" === e && (r[r.length - 1] % 2 ? r[0] = 7 : r[0] = 6), u(r, t);
                }, s.prototype.getPrivateKey = function(t) {
                    return u(this.keys.getPrivate(), t);
                }, s.prototype.setPublicKey = function(t, e) {
                    return e = e || "utf8", n.isBuffer(t) || (t = new n(t, e)), this.keys._importPublic(t), this;
                }, s.prototype.setPrivateKey = function(t, e) {
                    e = e || "utf8", n.isBuffer(t) || (t = new n(t, e));
                    var r = new o(t);
                    return r = r.toString(16), this.keys = this.curve.genKeyPair(), this.keys._importPrivate(r), this;
                };
            },
            5833: (t, e, r)=>{
                "use strict";
                var n = r(1679), i = r(2635), o = r(1058), a = r(3261), s = r(2533);
                function u(t) {
                    s.call(this, "digest"), this._hash = t;
                }
                n(u, s), u.prototype._update = function(t) {
                    this._hash.update(t);
                }, u.prototype._final = function() {
                    return this._hash.digest();
                }, t.exports = function(t) {
                    return "md5" === (t = t.toLowerCase()) ? new i : "rmd160" === t || "ripemd160" === t ? new o : new u(a(t));
                };
            },
            3989: (t, e, r)=>{
                var n = r(2635);
                t.exports = function(t) {
                    return (new n).update(t).digest();
                };
            },
            2046: (t, e, r)=>{
                "use strict";
                var n = r(1679), i = r(6583), o = r(2533), a = r(9732).Buffer, s = r(3989), u = r(1058), c = r(3261), f = a.alloc(128);
                function l(t, e) {
                    o.call(this, "digest"), "string" == typeof e && (e = a.from(e));
                    var r = "sha512" === t || "sha384" === t ? 128 : 64;
                    this._alg = t, this._key = e, e.length > r ? e = ("rmd160" === t ? new u : c(t)).update(e).digest() : e.length < r && (e = a.concat([
                        e,
                        f
                    ], r));
                    for(var n = this._ipad = a.allocUnsafe(r), i = this._opad = a.allocUnsafe(r), s = 0; s < r; s++)n[s] = 54 ^ e[s], i[s] = 92 ^ e[s];
                    this._hash = "rmd160" === t ? new u : c(t), this._hash.update(n);
                }
                n(l, o), l.prototype._update = function(t) {
                    this._hash.update(t);
                }, l.prototype._final = function() {
                    var t = this._hash.digest();
                    return ("rmd160" === this._alg ? new u : c(this._alg)).update(this._opad).update(t).digest();
                }, t.exports = function(t, e) {
                    return "rmd160" === (t = t.toLowerCase()) || "ripemd160" === t ? new l("rmd160", e) : "md5" === t ? new i(s, e) : new l(t, e);
                };
            },
            6583: (t, e, r)=>{
                "use strict";
                var n = r(1679), i = r(9732).Buffer, o = r(2533), a = i.alloc(128), s = 64;
                function u(t, e) {
                    o.call(this, "digest"), "string" == typeof e && (e = i.from(e)), this._alg = t, this._key = e, e.length > s ? e = t(e) : e.length < s && (e = i.concat([
                        e,
                        a
                    ], s));
                    for(var r = this._ipad = i.allocUnsafe(s), n = this._opad = i.allocUnsafe(s), u = 0; u < s; u++)r[u] = 54 ^ e[u], n[u] = 92 ^ e[u];
                    this._hash = [
                        r
                    ];
                }
                n(u, o), u.prototype._update = function(t) {
                    this._hash.push(t);
                }, u.prototype._final = function() {
                    var t = this._alg(i.concat(this._hash));
                    return this._alg(i.concat([
                        this._opad,
                        t
                    ]));
                }, t.exports = u;
            },
            8872: (t, e, r)=>{
                "use strict";
                e.po = r(4276), r(5833), r(2046);
                var n = r(4606), i = Object.keys(n), o = ([
                    "sha1",
                    "sha224",
                    "sha256",
                    "sha384",
                    "sha512",
                    "md5",
                    "rmd160"
                ].concat(i), r(8699));
                o.pbkdf2, o.pbkdf2Sync;
                var a = r(9652);
                a.Cipher, a.createCipher, a.Cipheriv, a.createCipheriv, a.Decipher, a.createDecipher, a.Decipheriv, a.createDecipheriv, a.getCiphers, a.listCiphers;
                var s = r(9803);
                s.DiffieHellmanGroup, s.createDiffieHellmanGroup, s.getDiffieHellman, s.createDiffieHellman, s.DiffieHellman;
                var u = r(7937);
                u.createSign, u.Sign, u.createVerify, u.Verify, r(1005);
                var c = r(2327);
                c.publicEncrypt, c.privateEncrypt, c.publicDecrypt, c.privateDecrypt;
                var f = r(7952);
                f.randomFill, f.randomFillSync;
            },
            6750: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                var i = r(988), o = r(2288), a = r(2268), s = r(1464);
                t.exports = function(t, e, r) {
                    if (!t || "object" !== n(t) && "function" != typeof t) throw new a("`obj` must be an object or a function`");
                    if ("string" != typeof e && "symbol" !== n(e)) throw new a("`property` must be a string or a symbol`");
                    if (arguments.length > 3 && "boolean" != typeof arguments[3] && null !== arguments[3]) throw new a("`nonEnumerable`, if provided, must be a boolean or null");
                    if (arguments.length > 4 && "boolean" != typeof arguments[4] && null !== arguments[4]) throw new a("`nonWritable`, if provided, must be a boolean or null");
                    if (arguments.length > 5 && "boolean" != typeof arguments[5] && null !== arguments[5]) throw new a("`nonConfigurable`, if provided, must be a boolean or null");
                    if (arguments.length > 6 && "boolean" != typeof arguments[6]) throw new a("`loose`, if provided, must be a boolean");
                    var u = arguments.length > 3 ? arguments[3] : null, c = arguments.length > 4 ? arguments[4] : null, f = arguments.length > 5 ? arguments[5] : null, l = arguments.length > 6 && arguments[6], h = !!s && s(t, e);
                    if (i) i(t, e, {
                        configurable: null === f && h ? h.configurable : !f,
                        enumerable: null === u && h ? h.enumerable : !u,
                        value: r,
                        writable: null === c && h ? h.writable : !c
                    });
                    else {
                        if (!l && (u || c || f)) throw new o("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
                        t[e] = r;
                    }
                };
            },
            2273: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                var i = r(668), o = "function" == typeof Symbol && "symbol" === n(Symbol("foo")), a = Object.prototype.toString, s = Array.prototype.concat, u = r(6750), c = r(3191)(), f = function(t, e, r, n) {
                    if (e in t) {
                        if (!0 === n) {
                            if (t[e] === r) return;
                        } else if ("function" != typeof (i = n) || "[object Function]" !== a.call(i) || !n()) return;
                    }
                    var i;
                    c ? u(t, e, r, !0) : u(t, e, r);
                }, l = function(t, e) {
                    var r = arguments.length > 2 ? arguments[2] : {}, n = i(e);
                    o && (n = s.call(n, Object.getOwnPropertySymbols(e)));
                    for(var a = 0; a < n.length; a += 1)f(t, n[a], e[n[a]], r[n[a]]);
                };
                l.supportsDescriptors = !!c, t.exports = l;
            },
            1471: (t, e, r)=>{
                "use strict";
                e.utils = r(9473), e.Cipher = r(365), e.DES = r(1048), e.CBC = r(6754), e.EDE = r(1368);
            },
            6754: (t, e, r)=>{
                "use strict";
                var n = r(3528), i = r(1679), o = {};
                function a(t) {
                    n.equal(t.length, 8, "Invalid IV length"), this.iv = new Array(8);
                    for(var e = 0; e < this.iv.length; e++)this.iv[e] = t[e];
                }
                e.instantiate = function(t) {
                    function e(e) {
                        t.call(this, e), this._cbcInit();
                    }
                    i(e, t);
                    for(var r = Object.keys(o), n = 0; n < r.length; n++){
                        var a = r[n];
                        e.prototype[a] = o[a];
                    }
                    return e.create = function(t) {
                        return new e(t);
                    }, e;
                }, o._cbcInit = function() {
                    var t = new a(this.options.iv);
                    this._cbcState = t;
                }, o._update = function(t, e, r, n) {
                    var i = this._cbcState, o = this.constructor.super_.prototype, a = i.iv;
                    if ("encrypt" === this.type) {
                        for(var s = 0; s < this.blockSize; s++)a[s] ^= t[e + s];
                        for(o._update.call(this, a, 0, r, n), s = 0; s < this.blockSize; s++)a[s] = r[n + s];
                    } else {
                        for(o._update.call(this, t, e, r, n), s = 0; s < this.blockSize; s++)r[n + s] ^= a[s];
                        for(s = 0; s < this.blockSize; s++)a[s] = t[e + s];
                    }
                };
            },
            365: (t, e, r)=>{
                "use strict";
                var n = r(3528);
                function i(t) {
                    this.options = t, this.type = this.options.type, this.blockSize = 8, this._init(), this.buffer = new Array(this.blockSize), this.bufferOff = 0, this.padding = !1 !== t.padding;
                }
                t.exports = i, i.prototype._init = function() {}, i.prototype.update = function(t) {
                    return 0 === t.length ? [] : "decrypt" === this.type ? this._updateDecrypt(t) : this._updateEncrypt(t);
                }, i.prototype._buffer = function(t, e) {
                    for(var r = Math.min(this.buffer.length - this.bufferOff, t.length - e), n = 0; n < r; n++)this.buffer[this.bufferOff + n] = t[e + n];
                    return this.bufferOff += r, r;
                }, i.prototype._flushBuffer = function(t, e) {
                    return this._update(this.buffer, 0, t, e), this.bufferOff = 0, this.blockSize;
                }, i.prototype._updateEncrypt = function(t) {
                    var e = 0, r = 0, n = (this.bufferOff + t.length) / this.blockSize | 0, i = new Array(n * this.blockSize);
                    0 !== this.bufferOff && (e += this._buffer(t, e), this.bufferOff === this.buffer.length && (r += this._flushBuffer(i, r)));
                    for(var o = t.length - (t.length - e) % this.blockSize; e < o; e += this.blockSize)this._update(t, e, i, r), r += this.blockSize;
                    for(; e < t.length; e++, this.bufferOff++)this.buffer[this.bufferOff] = t[e];
                    return i;
                }, i.prototype._updateDecrypt = function(t) {
                    for(var e = 0, r = 0, n = Math.ceil((this.bufferOff + t.length) / this.blockSize) - 1, i = new Array(n * this.blockSize); n > 0; n--)e += this._buffer(t, e), r += this._flushBuffer(i, r);
                    return e += this._buffer(t, e), i;
                }, i.prototype.final = function(t) {
                    var e, r;
                    return t && (e = this.update(t)), r = "encrypt" === this.type ? this._finalEncrypt() : this._finalDecrypt(), e ? e.concat(r) : r;
                }, i.prototype._pad = function(t, e) {
                    if (0 === e) return !1;
                    for(; e < t.length;)t[e++] = 0;
                    return !0;
                }, i.prototype._finalEncrypt = function() {
                    if (!this._pad(this.buffer, this.bufferOff)) return [];
                    var t = new Array(this.blockSize);
                    return this._update(this.buffer, 0, t, 0), t;
                }, i.prototype._unpad = function(t) {
                    return t;
                }, i.prototype._finalDecrypt = function() {
                    n.equal(this.bufferOff, this.blockSize, "Not enough data to decrypt");
                    var t = new Array(this.blockSize);
                    return this._flushBuffer(t, 0), this._unpad(t);
                };
            },
            1048: (t, e, r)=>{
                "use strict";
                var n = r(3528), i = r(1679), o = r(9473), a = r(365);
                function s() {
                    this.tmp = new Array(2), this.keys = null;
                }
                function u(t) {
                    a.call(this, t);
                    var e = new s;
                    this._desState = e, this.deriveKeys(e, t.key);
                }
                i(u, a), t.exports = u, u.create = function(t) {
                    return new u(t);
                };
                var c = [
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    1
                ];
                u.prototype.deriveKeys = function(t, e) {
                    t.keys = new Array(32), n.equal(e.length, this.blockSize, "Invalid key length");
                    var r = o.readUInt32BE(e, 0), i = o.readUInt32BE(e, 4);
                    o.pc1(r, i, t.tmp, 0), r = t.tmp[0], i = t.tmp[1];
                    for(var a = 0; a < t.keys.length; a += 2){
                        var s = c[a >>> 1];
                        r = o.r28shl(r, s), i = o.r28shl(i, s), o.pc2(r, i, t.keys, a);
                    }
                }, u.prototype._update = function(t, e, r, n) {
                    var i = this._desState, a = o.readUInt32BE(t, e), s = o.readUInt32BE(t, e + 4);
                    o.ip(a, s, i.tmp, 0), a = i.tmp[0], s = i.tmp[1], "encrypt" === this.type ? this._encrypt(i, a, s, i.tmp, 0) : this._decrypt(i, a, s, i.tmp, 0), a = i.tmp[0], s = i.tmp[1], o.writeUInt32BE(r, a, n), o.writeUInt32BE(r, s, n + 4);
                }, u.prototype._pad = function(t, e) {
                    if (!1 === this.padding) return !1;
                    for(var r = t.length - e, n = e; n < t.length; n++)t[n] = r;
                    return !0;
                }, u.prototype._unpad = function(t) {
                    if (!1 === this.padding) return t;
                    for(var e = t[t.length - 1], r = t.length - e; r < t.length; r++)n.equal(t[r], e);
                    return t.slice(0, t.length - e);
                }, u.prototype._encrypt = function(t, e, r, n, i) {
                    for(var a = e, s = r, u = 0; u < t.keys.length; u += 2){
                        var c = t.keys[u], f = t.keys[u + 1];
                        o.expand(s, t.tmp, 0), c ^= t.tmp[0], f ^= t.tmp[1];
                        var l = o.substitute(c, f), h = s;
                        s = (a ^ o.permute(l)) >>> 0, a = h;
                    }
                    o.rip(s, a, n, i);
                }, u.prototype._decrypt = function(t, e, r, n, i) {
                    for(var a = r, s = e, u = t.keys.length - 2; u >= 0; u -= 2){
                        var c = t.keys[u], f = t.keys[u + 1];
                        o.expand(a, t.tmp, 0), c ^= t.tmp[0], f ^= t.tmp[1];
                        var l = o.substitute(c, f), h = a;
                        a = (s ^ o.permute(l)) >>> 0, s = h;
                    }
                    o.rip(a, s, n, i);
                };
            },
            1368: (t, e, r)=>{
                "use strict";
                var n = r(3528), i = r(1679), o = r(365), a = r(1048);
                function s(t, e) {
                    n.equal(e.length, 24, "Invalid key length");
                    var r = e.slice(0, 8), i = e.slice(8, 16), o = e.slice(16, 24);
                    this.ciphers = "encrypt" === t ? [
                        a.create({
                            type: "encrypt",
                            key: r
                        }),
                        a.create({
                            type: "decrypt",
                            key: i
                        }),
                        a.create({
                            type: "encrypt",
                            key: o
                        })
                    ] : [
                        a.create({
                            type: "decrypt",
                            key: o
                        }),
                        a.create({
                            type: "encrypt",
                            key: i
                        }),
                        a.create({
                            type: "decrypt",
                            key: r
                        })
                    ];
                }
                function u(t) {
                    o.call(this, t);
                    var e = new s(this.type, this.options.key);
                    this._edeState = e;
                }
                i(u, o), t.exports = u, u.create = function(t) {
                    return new u(t);
                }, u.prototype._update = function(t, e, r, n) {
                    var i = this._edeState;
                    i.ciphers[0]._update(t, e, r, n), i.ciphers[1]._update(r, n, r, n), i.ciphers[2]._update(r, n, r, n);
                }, u.prototype._pad = a.prototype._pad, u.prototype._unpad = a.prototype._unpad;
            },
            9473: (t, e)=>{
                "use strict";
                e.readUInt32BE = function(t, e) {
                    return (t[0 + e] << 24 | t[1 + e] << 16 | t[2 + e] << 8 | t[3 + e]) >>> 0;
                }, e.writeUInt32BE = function(t, e, r) {
                    t[0 + r] = e >>> 24, t[1 + r] = e >>> 16 & 255, t[2 + r] = e >>> 8 & 255, t[3 + r] = 255 & e;
                }, e.ip = function(t, e, r, n) {
                    for(var i = 0, o = 0, a = 6; a >= 0; a -= 2){
                        for(var s = 0; s <= 24; s += 8)i <<= 1, i |= e >>> s + a & 1;
                        for(s = 0; s <= 24; s += 8)i <<= 1, i |= t >>> s + a & 1;
                    }
                    for(a = 6; a >= 0; a -= 2){
                        for(s = 1; s <= 25; s += 8)o <<= 1, o |= e >>> s + a & 1;
                        for(s = 1; s <= 25; s += 8)o <<= 1, o |= t >>> s + a & 1;
                    }
                    r[n + 0] = i >>> 0, r[n + 1] = o >>> 0;
                }, e.rip = function(t, e, r, n) {
                    for(var i = 0, o = 0, a = 0; a < 4; a++)for(var s = 24; s >= 0; s -= 8)i <<= 1, i |= e >>> s + a & 1, i <<= 1, i |= t >>> s + a & 1;
                    for(a = 4; a < 8; a++)for(s = 24; s >= 0; s -= 8)o <<= 1, o |= e >>> s + a & 1, o <<= 1, o |= t >>> s + a & 1;
                    r[n + 0] = i >>> 0, r[n + 1] = o >>> 0;
                }, e.pc1 = function(t, e, r, n) {
                    for(var i = 0, o = 0, a = 7; a >= 5; a--){
                        for(var s = 0; s <= 24; s += 8)i <<= 1, i |= e >> s + a & 1;
                        for(s = 0; s <= 24; s += 8)i <<= 1, i |= t >> s + a & 1;
                    }
                    for(s = 0; s <= 24; s += 8)i <<= 1, i |= e >> s + a & 1;
                    for(a = 1; a <= 3; a++){
                        for(s = 0; s <= 24; s += 8)o <<= 1, o |= e >> s + a & 1;
                        for(s = 0; s <= 24; s += 8)o <<= 1, o |= t >> s + a & 1;
                    }
                    for(s = 0; s <= 24; s += 8)o <<= 1, o |= t >> s + a & 1;
                    r[n + 0] = i >>> 0, r[n + 1] = o >>> 0;
                }, e.r28shl = function(t, e) {
                    return t << e & 268435455 | t >>> 28 - e;
                };
                var r = [
                    14,
                    11,
                    17,
                    4,
                    27,
                    23,
                    25,
                    0,
                    13,
                    22,
                    7,
                    18,
                    5,
                    9,
                    16,
                    24,
                    2,
                    20,
                    12,
                    21,
                    1,
                    8,
                    15,
                    26,
                    15,
                    4,
                    25,
                    19,
                    9,
                    1,
                    26,
                    16,
                    5,
                    11,
                    23,
                    8,
                    12,
                    7,
                    17,
                    0,
                    22,
                    3,
                    10,
                    14,
                    6,
                    20,
                    27,
                    24
                ];
                e.pc2 = function(t, e, n, i) {
                    for(var o = 0, a = 0, s = r.length >>> 1, u = 0; u < s; u++)o <<= 1, o |= t >>> r[u] & 1;
                    for(u = s; u < r.length; u++)a <<= 1, a |= e >>> r[u] & 1;
                    n[i + 0] = o >>> 0, n[i + 1] = a >>> 0;
                }, e.expand = function(t, e, r) {
                    var n = 0, i = 0;
                    n = (1 & t) << 5 | t >>> 27;
                    for(var o = 23; o >= 15; o -= 4)n <<= 6, n |= t >>> o & 63;
                    for(o = 11; o >= 3; o -= 4)i |= t >>> o & 63, i <<= 6;
                    i |= (31 & t) << 1 | t >>> 31, e[r + 0] = n >>> 0, e[r + 1] = i >>> 0;
                };
                var n = [
                    14,
                    0,
                    4,
                    15,
                    13,
                    7,
                    1,
                    4,
                    2,
                    14,
                    15,
                    2,
                    11,
                    13,
                    8,
                    1,
                    3,
                    10,
                    10,
                    6,
                    6,
                    12,
                    12,
                    11,
                    5,
                    9,
                    9,
                    5,
                    0,
                    3,
                    7,
                    8,
                    4,
                    15,
                    1,
                    12,
                    14,
                    8,
                    8,
                    2,
                    13,
                    4,
                    6,
                    9,
                    2,
                    1,
                    11,
                    7,
                    15,
                    5,
                    12,
                    11,
                    9,
                    3,
                    7,
                    14,
                    3,
                    10,
                    10,
                    0,
                    5,
                    6,
                    0,
                    13,
                    15,
                    3,
                    1,
                    13,
                    8,
                    4,
                    14,
                    7,
                    6,
                    15,
                    11,
                    2,
                    3,
                    8,
                    4,
                    14,
                    9,
                    12,
                    7,
                    0,
                    2,
                    1,
                    13,
                    10,
                    12,
                    6,
                    0,
                    9,
                    5,
                    11,
                    10,
                    5,
                    0,
                    13,
                    14,
                    8,
                    7,
                    10,
                    11,
                    1,
                    10,
                    3,
                    4,
                    15,
                    13,
                    4,
                    1,
                    2,
                    5,
                    11,
                    8,
                    6,
                    12,
                    7,
                    6,
                    12,
                    9,
                    0,
                    3,
                    5,
                    2,
                    14,
                    15,
                    9,
                    10,
                    13,
                    0,
                    7,
                    9,
                    0,
                    14,
                    9,
                    6,
                    3,
                    3,
                    4,
                    15,
                    6,
                    5,
                    10,
                    1,
                    2,
                    13,
                    8,
                    12,
                    5,
                    7,
                    14,
                    11,
                    12,
                    4,
                    11,
                    2,
                    15,
                    8,
                    1,
                    13,
                    1,
                    6,
                    10,
                    4,
                    13,
                    9,
                    0,
                    8,
                    6,
                    15,
                    9,
                    3,
                    8,
                    0,
                    7,
                    11,
                    4,
                    1,
                    15,
                    2,
                    14,
                    12,
                    3,
                    5,
                    11,
                    10,
                    5,
                    14,
                    2,
                    7,
                    12,
                    7,
                    13,
                    13,
                    8,
                    14,
                    11,
                    3,
                    5,
                    0,
                    6,
                    6,
                    15,
                    9,
                    0,
                    10,
                    3,
                    1,
                    4,
                    2,
                    7,
                    8,
                    2,
                    5,
                    12,
                    11,
                    1,
                    12,
                    10,
                    4,
                    14,
                    15,
                    9,
                    10,
                    3,
                    6,
                    15,
                    9,
                    0,
                    0,
                    6,
                    12,
                    10,
                    11,
                    1,
                    7,
                    13,
                    13,
                    8,
                    15,
                    9,
                    1,
                    4,
                    3,
                    5,
                    14,
                    11,
                    5,
                    12,
                    2,
                    7,
                    8,
                    2,
                    4,
                    14,
                    2,
                    14,
                    12,
                    11,
                    4,
                    2,
                    1,
                    12,
                    7,
                    4,
                    10,
                    7,
                    11,
                    13,
                    6,
                    1,
                    8,
                    5,
                    5,
                    0,
                    3,
                    15,
                    15,
                    10,
                    13,
                    3,
                    0,
                    9,
                    14,
                    8,
                    9,
                    6,
                    4,
                    11,
                    2,
                    8,
                    1,
                    12,
                    11,
                    7,
                    10,
                    1,
                    13,
                    14,
                    7,
                    2,
                    8,
                    13,
                    15,
                    6,
                    9,
                    15,
                    12,
                    0,
                    5,
                    9,
                    6,
                    10,
                    3,
                    4,
                    0,
                    5,
                    14,
                    3,
                    12,
                    10,
                    1,
                    15,
                    10,
                    4,
                    15,
                    2,
                    9,
                    7,
                    2,
                    12,
                    6,
                    9,
                    8,
                    5,
                    0,
                    6,
                    13,
                    1,
                    3,
                    13,
                    4,
                    14,
                    14,
                    0,
                    7,
                    11,
                    5,
                    3,
                    11,
                    8,
                    9,
                    4,
                    14,
                    3,
                    15,
                    2,
                    5,
                    12,
                    2,
                    9,
                    8,
                    5,
                    12,
                    15,
                    3,
                    10,
                    7,
                    11,
                    0,
                    14,
                    4,
                    1,
                    10,
                    7,
                    1,
                    6,
                    13,
                    0,
                    11,
                    8,
                    6,
                    13,
                    4,
                    13,
                    11,
                    0,
                    2,
                    11,
                    14,
                    7,
                    15,
                    4,
                    0,
                    9,
                    8,
                    1,
                    13,
                    10,
                    3,
                    14,
                    12,
                    3,
                    9,
                    5,
                    7,
                    12,
                    5,
                    2,
                    10,
                    15,
                    6,
                    8,
                    1,
                    6,
                    1,
                    6,
                    4,
                    11,
                    11,
                    13,
                    13,
                    8,
                    12,
                    1,
                    3,
                    4,
                    7,
                    10,
                    14,
                    7,
                    10,
                    9,
                    15,
                    5,
                    6,
                    0,
                    8,
                    15,
                    0,
                    14,
                    5,
                    2,
                    9,
                    3,
                    2,
                    12,
                    13,
                    1,
                    2,
                    15,
                    8,
                    13,
                    4,
                    8,
                    6,
                    10,
                    15,
                    3,
                    11,
                    7,
                    1,
                    4,
                    10,
                    12,
                    9,
                    5,
                    3,
                    6,
                    14,
                    11,
                    5,
                    0,
                    0,
                    14,
                    12,
                    9,
                    7,
                    2,
                    7,
                    2,
                    11,
                    1,
                    4,
                    14,
                    1,
                    7,
                    9,
                    4,
                    12,
                    10,
                    14,
                    8,
                    2,
                    13,
                    0,
                    15,
                    6,
                    12,
                    10,
                    9,
                    13,
                    0,
                    15,
                    3,
                    3,
                    5,
                    5,
                    6,
                    8,
                    11
                ];
                e.substitute = function(t, e) {
                    for(var r = 0, i = 0; i < 4; i++)r <<= 4, r |= n[64 * i + (t >>> 18 - 6 * i & 63)];
                    for(i = 0; i < 4; i++)r <<= 4, r |= n[256 + 64 * i + (e >>> 18 - 6 * i & 63)];
                    return r >>> 0;
                };
                var i = [
                    16,
                    25,
                    12,
                    11,
                    3,
                    20,
                    4,
                    15,
                    31,
                    17,
                    9,
                    6,
                    27,
                    14,
                    1,
                    22,
                    30,
                    24,
                    8,
                    18,
                    0,
                    5,
                    29,
                    23,
                    13,
                    19,
                    2,
                    26,
                    10,
                    21,
                    28,
                    7
                ];
                e.permute = function(t) {
                    for(var e = 0, r = 0; r < i.length; r++)e <<= 1, e |= t >>> i[r] & 1;
                    return e >>> 0;
                }, e.padSplit = function(t, e, r) {
                    for(var n = t.toString(2); n.length < e;)n = "0" + n;
                    for(var i = [], o = 0; o < e; o += r)i.push(n.slice(o, o + r));
                    return i.join(" ");
                };
            },
            9803: (t, e, r)=>{
                var n = r(5832).Buffer, i = r(1673), o = r(3241), a = r(8151), s = {
                    binary: !0,
                    hex: !0,
                    base64: !0
                };
                e.DiffieHellmanGroup = e.createDiffieHellmanGroup = e.getDiffieHellman = function(t) {
                    var e = new n(o[t].prime, "hex"), r = new n(o[t].gen, "hex");
                    return new a(e, r);
                }, e.createDiffieHellman = e.DiffieHellman = function t(e, r, o, u) {
                    return n.isBuffer(r) || void 0 === s[r] ? t(e, "binary", r, o) : (r = r || "binary", u = u || "binary", o = o || new n([
                        2
                    ]), n.isBuffer(o) || (o = new n(o, u)), "number" == typeof e ? new a(i(e, o), o, !0) : (n.isBuffer(e) || (e = new n(e, r)), new a(e, o, !0)));
                };
            },
            8151: (t, e, r)=>{
                var n = r(5832).Buffer, i = r(7799), o = new (r(1257)), a = new i(24), s = new i(11), u = new i(10), c = new i(3), f = new i(7), l = r(1673), h = r(4276);
                function p(t, e) {
                    return e = e || "utf8", n.isBuffer(t) || (t = new n(t, e)), this._pub = new i(t), this;
                }
                function d(t, e) {
                    return e = e || "utf8", n.isBuffer(t) || (t = new n(t, e)), this._priv = new i(t), this;
                }
                t.exports = b;
                var y = {};
                function b(t, e, r) {
                    this.setGenerator(e), this.__prime = new i(t), this._prime = i.mont(this.__prime), this._primeLen = t.length, this._pub = void 0, this._priv = void 0, this._primeCode = void 0, r ? (this.setPublicKey = p, this.setPrivateKey = d) : this._primeCode = 8;
                }
                function m(t, e) {
                    var r = new n(t.toArray());
                    return e ? r.toString(e) : r;
                }
                Object.defineProperty(b.prototype, "verifyError", {
                    enumerable: !0,
                    get: function() {
                        return "number" != typeof this._primeCode && (this._primeCode = function(t, e) {
                            var r = e.toString("hex"), n = [
                                r,
                                t.toString(16)
                            ].join("_");
                            if (n in y) return y[n];
                            var i, h = 0;
                            if (t.isEven() || !l.simpleSieve || !l.fermatTest(t) || !o.test(t)) return h += 1, h += "02" === r || "05" === r ? 8 : 4, y[n] = h, h;
                            switch(o.test(t.shrn(1)) || (h += 2), r){
                                case "02":
                                    t.mod(a).cmp(s) && (h += 8);
                                    break;
                                case "05":
                                    (i = t.mod(u)).cmp(c) && i.cmp(f) && (h += 8);
                                    break;
                                default:
                                    h += 4;
                            }
                            return y[n] = h, h;
                        }(this.__prime, this.__gen)), this._primeCode;
                    }
                }), b.prototype.generateKeys = function() {
                    return this._priv || (this._priv = new i(h(this._primeLen))), this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed(), this.getPublicKey();
                }, b.prototype.computeSecret = function(t) {
                    var e = (t = (t = new i(t)).toRed(this._prime)).redPow(this._priv).fromRed(), r = new n(e.toArray()), o = this.getPrime();
                    if (r.length < o.length) {
                        var a = new n(o.length - r.length);
                        a.fill(0), r = n.concat([
                            a,
                            r
                        ]);
                    }
                    return r;
                }, b.prototype.getPublicKey = function(t) {
                    return m(this._pub, t);
                }, b.prototype.getPrivateKey = function(t) {
                    return m(this._priv, t);
                }, b.prototype.getPrime = function(t) {
                    return m(this.__prime, t);
                }, b.prototype.getGenerator = function(t) {
                    return m(this._gen, t);
                }, b.prototype.setGenerator = function(t, e) {
                    return e = e || "utf8", n.isBuffer(t) || (t = new n(t, e)), this.__gen = t, this._gen = new i(t), this;
                };
            },
            1673: (t, e, r)=>{
                var n = r(4276);
                t.exports = v, v.simpleSieve = b, v.fermatTest = m;
                var i = r(7799), o = new i(24), a = new (r(1257)), s = new i(1), u = new i(2), c = new i(5), f = (new i(16), new i(8), new i(10)), l = new i(3), h = (new i(7), new i(11)), p = new i(4), d = (new i(12), null);
                function y() {
                    if (null !== d) return d;
                    var t = [];
                    t[0] = 2;
                    for(var e = 1, r = 3; r < 1048576; r += 2){
                        for(var n = Math.ceil(Math.sqrt(r)), i = 0; i < e && t[i] <= n && r % t[i] != 0; i++);
                        e !== i && t[i] <= n || (t[e++] = r);
                    }
                    return d = t, t;
                }
                function b(t) {
                    for(var e = y(), r = 0; r < e.length; r++)if (0 === t.modn(e[r])) return 0 === t.cmpn(e[r]);
                    return !0;
                }
                function m(t) {
                    var e = i.mont(t);
                    return 0 === u.toRed(e).redPow(t.subn(1)).fromRed().cmpn(1);
                }
                function v(t, e) {
                    if (t < 16) return new i(2 === e || 5 === e ? [
                        140,
                        123
                    ] : [
                        140,
                        39
                    ]);
                    var r, d;
                    for(e = new i(e);;){
                        for(r = new i(n(Math.ceil(t / 8))); r.bitLength() > t;)r.ishrn(1);
                        if (r.isEven() && r.iadd(s), r.testn(1) || r.iadd(u), e.cmp(u)) {
                            if (!e.cmp(c)) for(; r.mod(f).cmp(l);)r.iadd(p);
                        } else for(; r.mod(o).cmp(h);)r.iadd(p);
                        if (b(d = r.shrn(1)) && b(r) && m(d) && m(r) && a.test(d) && a.test(r)) return r;
                    }
                }
            },
            8964: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                var i, o = r(8863), a = r(1464);
                try {
                    i = [].__proto__ === Array.prototype;
                } catch (t) {
                    if (!t || "object" !== n(t) || !("code" in t) || "ERR_PROTO_ACCESS" !== t.code) throw t;
                }
                var s = !!i && a && a(Object.prototype, "__proto__"), u = Object, c = u.getPrototypeOf;
                t.exports = s && "function" == typeof s.get ? o([
                    s.get
                ]) : "function" == typeof c && function(t) {
                    return c(null == t ? t : u(t));
                };
            },
            7312: (t, e, r)=>{
                "use strict";
                var n = e;
                n.version = r(1636).rE, n.utils = r(1970), n.rand = r(8904), n.curve = r(5803), n.curves = r(6379), n.ec = r(7416), n.eddsa = r(4919);
            },
            3334: (t, e, r)=>{
                "use strict";
                var n = r(7799), i = r(1970), o = i.getNAF, a = i.getJSF, s = i.assert;
                function u(t, e) {
                    this.type = t, this.p = new n(e.p, 16), this.red = e.prime ? n.red(e.prime) : n.mont(this.p), this.zero = new n(0).toRed(this.red), this.one = new n(1).toRed(this.red), this.two = new n(2).toRed(this.red), this.n = e.n && new n(e.n, 16), this.g = e.g && this.pointFromJSON(e.g, e.gRed), this._wnafT1 = new Array(4), this._wnafT2 = new Array(4), this._wnafT3 = new Array(4), this._wnafT4 = new Array(4), this._bitLength = this.n ? this.n.bitLength() : 0;
                    var r = this.n && this.p.div(this.n);
                    !r || r.cmpn(100) > 0 ? this.redN = null : (this._maxwellTrick = !0, this.redN = this.n.toRed(this.red));
                }
                function c(t, e) {
                    this.curve = t, this.type = e, this.precomputed = null;
                }
                t.exports = u, u.prototype.point = function() {
                    throw new Error("Not implemented");
                }, u.prototype.validate = function() {
                    throw new Error("Not implemented");
                }, u.prototype._fixedNafMul = function(t, e) {
                    s(t.precomputed);
                    var r = t._getDoubles(), n = o(e, 1, this._bitLength), i = (1 << r.step + 1) - (r.step % 2 == 0 ? 2 : 1);
                    i /= 3;
                    var a, u, c = [];
                    for(a = 0; a < n.length; a += r.step){
                        u = 0;
                        for(var f = a + r.step - 1; f >= a; f--)u = (u << 1) + n[f];
                        c.push(u);
                    }
                    for(var l = this.jpoint(null, null, null), h = this.jpoint(null, null, null), p = i; p > 0; p--){
                        for(a = 0; a < c.length; a++)(u = c[a]) === p ? h = h.mixedAdd(r.points[a]) : u === -p && (h = h.mixedAdd(r.points[a].neg()));
                        l = l.add(h);
                    }
                    return l.toP();
                }, u.prototype._wnafMul = function(t, e) {
                    var r = 4, n = t._getNAFPoints(r);
                    r = n.wnd;
                    for(var i = n.points, a = o(e, r, this._bitLength), u = this.jpoint(null, null, null), c = a.length - 1; c >= 0; c--){
                        for(var f = 0; c >= 0 && 0 === a[c]; c--)f++;
                        if (c >= 0 && f++, u = u.dblp(f), c < 0) break;
                        var l = a[c];
                        s(0 !== l), u = "affine" === t.type ? l > 0 ? u.mixedAdd(i[l - 1 >> 1]) : u.mixedAdd(i[-l - 1 >> 1].neg()) : l > 0 ? u.add(i[l - 1 >> 1]) : u.add(i[-l - 1 >> 1].neg());
                    }
                    return "affine" === t.type ? u.toP() : u;
                }, u.prototype._wnafMulAdd = function(t, e, r, n, i) {
                    var s, u, c, f = this._wnafT1, l = this._wnafT2, h = this._wnafT3, p = 0;
                    for(s = 0; s < n; s++){
                        var d = (c = e[s])._getNAFPoints(t);
                        f[s] = d.wnd, l[s] = d.points;
                    }
                    for(s = n - 1; s >= 1; s -= 2){
                        var y = s - 1, b = s;
                        if (1 === f[y] && 1 === f[b]) {
                            var m = [
                                e[y],
                                null,
                                null,
                                e[b]
                            ];
                            0 === e[y].y.cmp(e[b].y) ? (m[1] = e[y].add(e[b]), m[2] = e[y].toJ().mixedAdd(e[b].neg())) : 0 === e[y].y.cmp(e[b].y.redNeg()) ? (m[1] = e[y].toJ().mixedAdd(e[b]), m[2] = e[y].add(e[b].neg())) : (m[1] = e[y].toJ().mixedAdd(e[b]), m[2] = e[y].toJ().mixedAdd(e[b].neg()));
                            var v = [
                                -3,
                                -1,
                                -5,
                                -7,
                                0,
                                7,
                                5,
                                1,
                                3
                            ], g = a(r[y], r[b]);
                            for(p = Math.max(g[0].length, p), h[y] = new Array(p), h[b] = new Array(p), u = 0; u < p; u++){
                                var _ = 0 | g[0][u], w = 0 | g[1][u];
                                h[y][u] = v[3 * (_ + 1) + (w + 1)], h[b][u] = 0, l[y] = m;
                            }
                        } else h[y] = o(r[y], f[y], this._bitLength), h[b] = o(r[b], f[b], this._bitLength), p = Math.max(h[y].length, p), p = Math.max(h[b].length, p);
                    }
                    var S = this.jpoint(null, null, null), O = this._wnafT4;
                    for(s = p; s >= 0; s--){
                        for(var j = 0; s >= 0;){
                            var $ = !0;
                            for(u = 0; u < n; u++)O[u] = 0 | h[u][s], 0 !== O[u] && ($ = !1);
                            if (!$) break;
                            j++, s--;
                        }
                        if (s >= 0 && j++, S = S.dblp(j), s < 0) break;
                        for(u = 0; u < n; u++){
                            var E = O[u];
                            0 !== E && (E > 0 ? c = l[u][E - 1 >> 1] : E < 0 && (c = l[u][-E - 1 >> 1].neg()), S = "affine" === c.type ? S.mixedAdd(c) : S.add(c));
                        }
                    }
                    for(s = 0; s < n; s++)l[s] = null;
                    return i ? S : S.toP();
                }, u.BasePoint = c, c.prototype.eq = function() {
                    throw new Error("Not implemented");
                }, c.prototype.validate = function() {
                    return this.curve.validate(this);
                }, u.prototype.decodePoint = function(t, e) {
                    t = i.toArray(t, e);
                    var r = this.p.byteLength();
                    if ((4 === t[0] || 6 === t[0] || 7 === t[0]) && t.length - 1 == 2 * r) return 6 === t[0] ? s(t[t.length - 1] % 2 == 0) : 7 === t[0] && s(t[t.length - 1] % 2 == 1), this.point(t.slice(1, 1 + r), t.slice(1 + r, 1 + 2 * r));
                    if ((2 === t[0] || 3 === t[0]) && t.length - 1 === r) return this.pointFromX(t.slice(1, 1 + r), 3 === t[0]);
                    throw new Error("Unknown point format");
                }, c.prototype.encodeCompressed = function(t) {
                    return this.encode(t, !0);
                }, c.prototype._encode = function(t) {
                    var e = this.curve.p.byteLength(), r = this.getX().toArray("be", e);
                    return t ? [
                        this.getY().isEven() ? 2 : 3
                    ].concat(r) : [
                        4
                    ].concat(r, this.getY().toArray("be", e));
                }, c.prototype.encode = function(t, e) {
                    return i.encode(this._encode(e), t);
                }, c.prototype.precompute = function(t) {
                    if (this.precomputed) return this;
                    var e = {
                        doubles: null,
                        naf: null,
                        beta: null
                    };
                    return e.naf = this._getNAFPoints(8), e.doubles = this._getDoubles(4, t), e.beta = this._getBeta(), this.precomputed = e, this;
                }, c.prototype._hasDoubles = function(t) {
                    if (!this.precomputed) return !1;
                    var e = this.precomputed.doubles;
                    return !!e && e.points.length >= Math.ceil((t.bitLength() + 1) / e.step);
                }, c.prototype._getDoubles = function(t, e) {
                    if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
                    for(var r = [
                        this
                    ], n = this, i = 0; i < e; i += t){
                        for(var o = 0; o < t; o++)n = n.dbl();
                        r.push(n);
                    }
                    return {
                        step: t,
                        points: r
                    };
                }, c.prototype._getNAFPoints = function(t) {
                    if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
                    for(var e = [
                        this
                    ], r = (1 << t) - 1, n = 1 === r ? null : this.dbl(), i = 1; i < r; i++)e[i] = e[i - 1].add(n);
                    return {
                        wnd: t,
                        points: e
                    };
                }, c.prototype._getBeta = function() {
                    return null;
                }, c.prototype.dblp = function(t) {
                    for(var e = this, r = 0; r < t; r++)e = e.dbl();
                    return e;
                };
            },
            9723: (t, e, r)=>{
                "use strict";
                var n = r(1970), i = r(7799), o = r(1679), a = r(3334), s = n.assert;
                function u(t) {
                    this.twisted = 1 != (0 | t.a), this.mOneA = this.twisted && -1 == (0 | t.a), this.extended = this.mOneA, a.call(this, "edwards", t), this.a = new i(t.a, 16).umod(this.red.m), this.a = this.a.toRed(this.red), this.c = new i(t.c, 16).toRed(this.red), this.c2 = this.c.redSqr(), this.d = new i(t.d, 16).toRed(this.red), this.dd = this.d.redAdd(this.d), s(!this.twisted || 0 === this.c.fromRed().cmpn(1)), this.oneC = 1 == (0 | t.c);
                }
                function c(t, e, r, n, o) {
                    a.BasePoint.call(this, t, "projective"), null === e && null === r && null === n ? (this.x = this.curve.zero, this.y = this.curve.one, this.z = this.curve.one, this.t = this.curve.zero, this.zOne = !0) : (this.x = new i(e, 16), this.y = new i(r, 16), this.z = n ? new i(n, 16) : this.curve.one, this.t = o && new i(o, 16), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.t && !this.t.red && (this.t = this.t.toRed(this.curve.red)), this.zOne = this.z === this.curve.one, this.curve.extended && !this.t && (this.t = this.x.redMul(this.y), this.zOne || (this.t = this.t.redMul(this.z.redInvm()))));
                }
                o(u, a), t.exports = u, u.prototype._mulA = function(t) {
                    return this.mOneA ? t.redNeg() : this.a.redMul(t);
                }, u.prototype._mulC = function(t) {
                    return this.oneC ? t : this.c.redMul(t);
                }, u.prototype.jpoint = function(t, e, r, n) {
                    return this.point(t, e, r, n);
                }, u.prototype.pointFromX = function(t, e) {
                    (t = new i(t, 16)).red || (t = t.toRed(this.red));
                    var r = t.redSqr(), n = this.c2.redSub(this.a.redMul(r)), o = this.one.redSub(this.c2.redMul(this.d).redMul(r)), a = n.redMul(o.redInvm()), s = a.redSqrt();
                    if (0 !== s.redSqr().redSub(a).cmp(this.zero)) throw new Error("invalid point");
                    var u = s.fromRed().isOdd();
                    return (e && !u || !e && u) && (s = s.redNeg()), this.point(t, s);
                }, u.prototype.pointFromY = function(t, e) {
                    (t = new i(t, 16)).red || (t = t.toRed(this.red));
                    var r = t.redSqr(), n = r.redSub(this.c2), o = r.redMul(this.d).redMul(this.c2).redSub(this.a), a = n.redMul(o.redInvm());
                    if (0 === a.cmp(this.zero)) {
                        if (e) throw new Error("invalid point");
                        return this.point(this.zero, t);
                    }
                    var s = a.redSqrt();
                    if (0 !== s.redSqr().redSub(a).cmp(this.zero)) throw new Error("invalid point");
                    return s.fromRed().isOdd() !== e && (s = s.redNeg()), this.point(s, t);
                }, u.prototype.validate = function(t) {
                    if (t.isInfinity()) return !0;
                    t.normalize();
                    var e = t.x.redSqr(), r = t.y.redSqr(), n = e.redMul(this.a).redAdd(r), i = this.c2.redMul(this.one.redAdd(this.d.redMul(e).redMul(r)));
                    return 0 === n.cmp(i);
                }, o(c, a.BasePoint), u.prototype.pointFromJSON = function(t) {
                    return c.fromJSON(this, t);
                }, u.prototype.point = function(t, e, r, n) {
                    return new c(this, t, e, r, n);
                }, c.fromJSON = function(t, e) {
                    return new c(t, e[0], e[1], e[2]);
                }, c.prototype.inspect = function() {
                    return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
                }, c.prototype.isInfinity = function() {
                    return 0 === this.x.cmpn(0) && (0 === this.y.cmp(this.z) || this.zOne && 0 === this.y.cmp(this.curve.c));
                }, c.prototype._extDbl = function() {
                    var t = this.x.redSqr(), e = this.y.redSqr(), r = this.z.redSqr();
                    r = r.redIAdd(r);
                    var n = this.curve._mulA(t), i = this.x.redAdd(this.y).redSqr().redISub(t).redISub(e), o = n.redAdd(e), a = o.redSub(r), s = n.redSub(e), u = i.redMul(a), c = o.redMul(s), f = i.redMul(s), l = a.redMul(o);
                    return this.curve.point(u, c, l, f);
                }, c.prototype._projDbl = function() {
                    var t, e, r, n, i, o, a = this.x.redAdd(this.y).redSqr(), s = this.x.redSqr(), u = this.y.redSqr();
                    if (this.curve.twisted) {
                        var c = (n = this.curve._mulA(s)).redAdd(u);
                        this.zOne ? (t = a.redSub(s).redSub(u).redMul(c.redSub(this.curve.two)), e = c.redMul(n.redSub(u)), r = c.redSqr().redSub(c).redSub(c)) : (i = this.z.redSqr(), o = c.redSub(i).redISub(i), t = a.redSub(s).redISub(u).redMul(o), e = c.redMul(n.redSub(u)), r = c.redMul(o));
                    } else n = s.redAdd(u), i = this.curve._mulC(this.z).redSqr(), o = n.redSub(i).redSub(i), t = this.curve._mulC(a.redISub(n)).redMul(o), e = this.curve._mulC(n).redMul(s.redISub(u)), r = n.redMul(o);
                    return this.curve.point(t, e, r);
                }, c.prototype.dbl = function() {
                    return this.isInfinity() ? this : this.curve.extended ? this._extDbl() : this._projDbl();
                }, c.prototype._extAdd = function(t) {
                    var e = this.y.redSub(this.x).redMul(t.y.redSub(t.x)), r = this.y.redAdd(this.x).redMul(t.y.redAdd(t.x)), n = this.t.redMul(this.curve.dd).redMul(t.t), i = this.z.redMul(t.z.redAdd(t.z)), o = r.redSub(e), a = i.redSub(n), s = i.redAdd(n), u = r.redAdd(e), c = o.redMul(a), f = s.redMul(u), l = o.redMul(u), h = a.redMul(s);
                    return this.curve.point(c, f, h, l);
                }, c.prototype._projAdd = function(t) {
                    var e, r, n = this.z.redMul(t.z), i = n.redSqr(), o = this.x.redMul(t.x), a = this.y.redMul(t.y), s = this.curve.d.redMul(o).redMul(a), u = i.redSub(s), c = i.redAdd(s), f = this.x.redAdd(this.y).redMul(t.x.redAdd(t.y)).redISub(o).redISub(a), l = n.redMul(u).redMul(f);
                    return this.curve.twisted ? (e = n.redMul(c).redMul(a.redSub(this.curve._mulA(o))), r = u.redMul(c)) : (e = n.redMul(c).redMul(a.redSub(o)), r = this.curve._mulC(u).redMul(c)), this.curve.point(l, e, r);
                }, c.prototype.add = function(t) {
                    return this.isInfinity() ? t : t.isInfinity() ? this : this.curve.extended ? this._extAdd(t) : this._projAdd(t);
                }, c.prototype.mul = function(t) {
                    return this._hasDoubles(t) ? this.curve._fixedNafMul(this, t) : this.curve._wnafMul(this, t);
                }, c.prototype.mulAdd = function(t, e, r) {
                    return this.curve._wnafMulAdd(1, [
                        this,
                        e
                    ], [
                        t,
                        r
                    ], 2, !1);
                }, c.prototype.jmulAdd = function(t, e, r) {
                    return this.curve._wnafMulAdd(1, [
                        this,
                        e
                    ], [
                        t,
                        r
                    ], 2, !0);
                }, c.prototype.normalize = function() {
                    if (this.zOne) return this;
                    var t = this.z.redInvm();
                    return this.x = this.x.redMul(t), this.y = this.y.redMul(t), this.t && (this.t = this.t.redMul(t)), this.z = this.curve.one, this.zOne = !0, this;
                }, c.prototype.neg = function() {
                    return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
                }, c.prototype.getX = function() {
                    return this.normalize(), this.x.fromRed();
                }, c.prototype.getY = function() {
                    return this.normalize(), this.y.fromRed();
                }, c.prototype.eq = function(t) {
                    return this === t || 0 === this.getX().cmp(t.getX()) && 0 === this.getY().cmp(t.getY());
                }, c.prototype.eqXToP = function(t) {
                    var e = t.toRed(this.curve.red).redMul(this.z);
                    if (0 === this.x.cmp(e)) return !0;
                    for(var r = t.clone(), n = this.curve.redN.redMul(this.z);;){
                        if (r.iadd(this.curve.n), r.cmp(this.curve.p) >= 0) return !1;
                        if (e.redIAdd(n), 0 === this.x.cmp(e)) return !0;
                    }
                }, c.prototype.toP = c.prototype.normalize, c.prototype.mixedAdd = c.prototype.add;
            },
            5803: (t, e, r)=>{
                "use strict";
                var n = e;
                n.base = r(3334), n.short = r(5045), n.mont = r(3453), n.edwards = r(9723);
            },
            3453: (t, e, r)=>{
                "use strict";
                var n = r(7799), i = r(1679), o = r(3334), a = r(1970);
                function s(t) {
                    o.call(this, "mont", t), this.a = new n(t.a, 16).toRed(this.red), this.b = new n(t.b, 16).toRed(this.red), this.i4 = new n(4).toRed(this.red).redInvm(), this.two = new n(2).toRed(this.red), this.a24 = this.i4.redMul(this.a.redAdd(this.two));
                }
                function u(t, e, r) {
                    o.BasePoint.call(this, t, "projective"), null === e && null === r ? (this.x = this.curve.one, this.z = this.curve.zero) : (this.x = new n(e, 16), this.z = new n(r, 16), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)));
                }
                i(s, o), t.exports = s, s.prototype.validate = function(t) {
                    var e = t.normalize().x, r = e.redSqr(), n = r.redMul(e).redAdd(r.redMul(this.a)).redAdd(e);
                    return 0 === n.redSqrt().redSqr().cmp(n);
                }, i(u, o.BasePoint), s.prototype.decodePoint = function(t, e) {
                    return this.point(a.toArray(t, e), 1);
                }, s.prototype.point = function(t, e) {
                    return new u(this, t, e);
                }, s.prototype.pointFromJSON = function(t) {
                    return u.fromJSON(this, t);
                }, u.prototype.precompute = function() {}, u.prototype._encode = function() {
                    return this.getX().toArray("be", this.curve.p.byteLength());
                }, u.fromJSON = function(t, e) {
                    return new u(t, e[0], e[1] || t.one);
                }, u.prototype.inspect = function() {
                    return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
                }, u.prototype.isInfinity = function() {
                    return 0 === this.z.cmpn(0);
                }, u.prototype.dbl = function() {
                    var t = this.x.redAdd(this.z).redSqr(), e = this.x.redSub(this.z).redSqr(), r = t.redSub(e), n = t.redMul(e), i = r.redMul(e.redAdd(this.curve.a24.redMul(r)));
                    return this.curve.point(n, i);
                }, u.prototype.add = function() {
                    throw new Error("Not supported on Montgomery curve");
                }, u.prototype.diffAdd = function(t, e) {
                    var r = this.x.redAdd(this.z), n = this.x.redSub(this.z), i = t.x.redAdd(t.z), o = t.x.redSub(t.z).redMul(r), a = i.redMul(n), s = e.z.redMul(o.redAdd(a).redSqr()), u = e.x.redMul(o.redISub(a).redSqr());
                    return this.curve.point(s, u);
                }, u.prototype.mul = function(t) {
                    for(var e = t.clone(), r = this, n = this.curve.point(null, null), i = []; 0 !== e.cmpn(0); e.iushrn(1))i.push(e.andln(1));
                    for(var o = i.length - 1; o >= 0; o--)0 === i[o] ? (r = r.diffAdd(n, this), n = n.dbl()) : (n = r.diffAdd(n, this), r = r.dbl());
                    return n;
                }, u.prototype.mulAdd = function() {
                    throw new Error("Not supported on Montgomery curve");
                }, u.prototype.jumlAdd = function() {
                    throw new Error("Not supported on Montgomery curve");
                }, u.prototype.eq = function(t) {
                    return 0 === this.getX().cmp(t.getX());
                }, u.prototype.normalize = function() {
                    return this.x = this.x.redMul(this.z.redInvm()), this.z = this.curve.one, this;
                }, u.prototype.getX = function() {
                    return this.normalize(), this.x.fromRed();
                };
            },
            5045: (t, e, r)=>{
                "use strict";
                var n = r(1970), i = r(7799), o = r(1679), a = r(3334), s = n.assert;
                function u(t) {
                    a.call(this, "short", t), this.a = new i(t.a, 16).toRed(this.red), this.b = new i(t.b, 16).toRed(this.red), this.tinv = this.two.redInvm(), this.zeroA = 0 === this.a.fromRed().cmpn(0), this.threeA = 0 === this.a.fromRed().sub(this.p).cmpn(-3), this.endo = this._getEndomorphism(t), this._endoWnafT1 = new Array(4), this._endoWnafT2 = new Array(4);
                }
                function c(t, e, r, n) {
                    a.BasePoint.call(this, t, "affine"), null === e && null === r ? (this.x = null, this.y = null, this.inf = !0) : (this.x = new i(e, 16), this.y = new i(r, 16), n && (this.x.forceRed(this.curve.red), this.y.forceRed(this.curve.red)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.inf = !1);
                }
                function f(t, e, r, n) {
                    a.BasePoint.call(this, t, "jacobian"), null === e && null === r && null === n ? (this.x = this.curve.one, this.y = this.curve.one, this.z = new i(0)) : (this.x = new i(e, 16), this.y = new i(r, 16), this.z = new i(n, 16)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.zOne = this.z === this.curve.one;
                }
                o(u, a), t.exports = u, u.prototype._getEndomorphism = function(t) {
                    if (this.zeroA && this.g && this.n && 1 === this.p.modn(3)) {
                        var e, r;
                        if (t.beta) e = new i(t.beta, 16).toRed(this.red);
                        else {
                            var n = this._getEndoRoots(this.p);
                            e = (e = n[0].cmp(n[1]) < 0 ? n[0] : n[1]).toRed(this.red);
                        }
                        if (t.lambda) r = new i(t.lambda, 16);
                        else {
                            var o = this._getEndoRoots(this.n);
                            0 === this.g.mul(o[0]).x.cmp(this.g.x.redMul(e)) ? r = o[0] : (r = o[1], s(0 === this.g.mul(r).x.cmp(this.g.x.redMul(e))));
                        }
                        return {
                            beta: e,
                            lambda: r,
                            basis: t.basis ? t.basis.map(function(t) {
                                return {
                                    a: new i(t.a, 16),
                                    b: new i(t.b, 16)
                                };
                            }) : this._getEndoBasis(r)
                        };
                    }
                }, u.prototype._getEndoRoots = function(t) {
                    var e = t === this.p ? this.red : i.mont(t), r = new i(2).toRed(e).redInvm(), n = r.redNeg(), o = new i(3).toRed(e).redNeg().redSqrt().redMul(r);
                    return [
                        n.redAdd(o).fromRed(),
                        n.redSub(o).fromRed()
                    ];
                }, u.prototype._getEndoBasis = function(t) {
                    for(var e, r, n, o, a, s, u, c, f, l = this.n.ushrn(Math.floor(this.n.bitLength() / 2)), h = t, p = this.n.clone(), d = new i(1), y = new i(0), b = new i(0), m = new i(1), v = 0; 0 !== h.cmpn(0);){
                        var g = p.div(h);
                        c = p.sub(g.mul(h)), f = b.sub(g.mul(d));
                        var _ = m.sub(g.mul(y));
                        if (!n && c.cmp(l) < 0) e = u.neg(), r = d, n = c.neg(), o = f;
                        else if (n && 2 == ++v) break;
                        u = c, p = h, h = c, b = d, d = f, m = y, y = _;
                    }
                    a = c.neg(), s = f;
                    var w = n.sqr().add(o.sqr());
                    return a.sqr().add(s.sqr()).cmp(w) >= 0 && (a = e, s = r), n.negative && (n = n.neg(), o = o.neg()), a.negative && (a = a.neg(), s = s.neg()), [
                        {
                            a: n,
                            b: o
                        },
                        {
                            a,
                            b: s
                        }
                    ];
                }, u.prototype._endoSplit = function(t) {
                    var e = this.endo.basis, r = e[0], n = e[1], i = n.b.mul(t).divRound(this.n), o = r.b.neg().mul(t).divRound(this.n), a = i.mul(r.a), s = o.mul(n.a), u = i.mul(r.b), c = o.mul(n.b);
                    return {
                        k1: t.sub(a).sub(s),
                        k2: u.add(c).neg()
                    };
                }, u.prototype.pointFromX = function(t, e) {
                    (t = new i(t, 16)).red || (t = t.toRed(this.red));
                    var r = t.redSqr().redMul(t).redIAdd(t.redMul(this.a)).redIAdd(this.b), n = r.redSqrt();
                    if (0 !== n.redSqr().redSub(r).cmp(this.zero)) throw new Error("invalid point");
                    var o = n.fromRed().isOdd();
                    return (e && !o || !e && o) && (n = n.redNeg()), this.point(t, n);
                }, u.prototype.validate = function(t) {
                    if (t.inf) return !0;
                    var e = t.x, r = t.y, n = this.a.redMul(e), i = e.redSqr().redMul(e).redIAdd(n).redIAdd(this.b);
                    return 0 === r.redSqr().redISub(i).cmpn(0);
                }, u.prototype._endoWnafMulAdd = function(t, e, r) {
                    for(var n = this._endoWnafT1, i = this._endoWnafT2, o = 0; o < t.length; o++){
                        var a = this._endoSplit(e[o]), s = t[o], u = s._getBeta();
                        a.k1.negative && (a.k1.ineg(), s = s.neg(!0)), a.k2.negative && (a.k2.ineg(), u = u.neg(!0)), n[2 * o] = s, n[2 * o + 1] = u, i[2 * o] = a.k1, i[2 * o + 1] = a.k2;
                    }
                    for(var c = this._wnafMulAdd(1, n, i, 2 * o, r), f = 0; f < 2 * o; f++)n[f] = null, i[f] = null;
                    return c;
                }, o(c, a.BasePoint), u.prototype.point = function(t, e, r) {
                    return new c(this, t, e, r);
                }, u.prototype.pointFromJSON = function(t, e) {
                    return c.fromJSON(this, t, e);
                }, c.prototype._getBeta = function() {
                    if (this.curve.endo) {
                        var t = this.precomputed;
                        if (t && t.beta) return t.beta;
                        var e = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
                        if (t) {
                            var r = this.curve, n = function(t) {
                                return r.point(t.x.redMul(r.endo.beta), t.y);
                            };
                            t.beta = e, e.precomputed = {
                                beta: null,
                                naf: t.naf && {
                                    wnd: t.naf.wnd,
                                    points: t.naf.points.map(n)
                                },
                                doubles: t.doubles && {
                                    step: t.doubles.step,
                                    points: t.doubles.points.map(n)
                                }
                            };
                        }
                        return e;
                    }
                }, c.prototype.toJSON = function() {
                    return this.precomputed ? [
                        this.x,
                        this.y,
                        this.precomputed && {
                            doubles: this.precomputed.doubles && {
                                step: this.precomputed.doubles.step,
                                points: this.precomputed.doubles.points.slice(1)
                            },
                            naf: this.precomputed.naf && {
                                wnd: this.precomputed.naf.wnd,
                                points: this.precomputed.naf.points.slice(1)
                            }
                        }
                    ] : [
                        this.x,
                        this.y
                    ];
                }, c.fromJSON = function(t, e, r) {
                    "string" == typeof e && (e = JSON.parse(e));
                    var n = t.point(e[0], e[1], r);
                    if (!e[2]) return n;
                    function i(e) {
                        return t.point(e[0], e[1], r);
                    }
                    var o = e[2];
                    return n.precomputed = {
                        beta: null,
                        doubles: o.doubles && {
                            step: o.doubles.step,
                            points: [
                                n
                            ].concat(o.doubles.points.map(i))
                        },
                        naf: o.naf && {
                            wnd: o.naf.wnd,
                            points: [
                                n
                            ].concat(o.naf.points.map(i))
                        }
                    }, n;
                }, c.prototype.inspect = function() {
                    return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
                }, c.prototype.isInfinity = function() {
                    return this.inf;
                }, c.prototype.add = function(t) {
                    if (this.inf) return t;
                    if (t.inf) return this;
                    if (this.eq(t)) return this.dbl();
                    if (this.neg().eq(t)) return this.curve.point(null, null);
                    if (0 === this.x.cmp(t.x)) return this.curve.point(null, null);
                    var e = this.y.redSub(t.y);
                    0 !== e.cmpn(0) && (e = e.redMul(this.x.redSub(t.x).redInvm()));
                    var r = e.redSqr().redISub(this.x).redISub(t.x), n = e.redMul(this.x.redSub(r)).redISub(this.y);
                    return this.curve.point(r, n);
                }, c.prototype.dbl = function() {
                    if (this.inf) return this;
                    var t = this.y.redAdd(this.y);
                    if (0 === t.cmpn(0)) return this.curve.point(null, null);
                    var e = this.curve.a, r = this.x.redSqr(), n = t.redInvm(), i = r.redAdd(r).redIAdd(r).redIAdd(e).redMul(n), o = i.redSqr().redISub(this.x.redAdd(this.x)), a = i.redMul(this.x.redSub(o)).redISub(this.y);
                    return this.curve.point(o, a);
                }, c.prototype.getX = function() {
                    return this.x.fromRed();
                }, c.prototype.getY = function() {
                    return this.y.fromRed();
                }, c.prototype.mul = function(t) {
                    return t = new i(t, 16), this.isInfinity() ? this : this._hasDoubles(t) ? this.curve._fixedNafMul(this, t) : this.curve.endo ? this.curve._endoWnafMulAdd([
                        this
                    ], [
                        t
                    ]) : this.curve._wnafMul(this, t);
                }, c.prototype.mulAdd = function(t, e, r) {
                    var n = [
                        this,
                        e
                    ], i = [
                        t,
                        r
                    ];
                    return this.curve.endo ? this.curve._endoWnafMulAdd(n, i) : this.curve._wnafMulAdd(1, n, i, 2);
                }, c.prototype.jmulAdd = function(t, e, r) {
                    var n = [
                        this,
                        e
                    ], i = [
                        t,
                        r
                    ];
                    return this.curve.endo ? this.curve._endoWnafMulAdd(n, i, !0) : this.curve._wnafMulAdd(1, n, i, 2, !0);
                }, c.prototype.eq = function(t) {
                    return this === t || this.inf === t.inf && (this.inf || 0 === this.x.cmp(t.x) && 0 === this.y.cmp(t.y));
                }, c.prototype.neg = function(t) {
                    if (this.inf) return this;
                    var e = this.curve.point(this.x, this.y.redNeg());
                    if (t && this.precomputed) {
                        var r = this.precomputed, n = function(t) {
                            return t.neg();
                        };
                        e.precomputed = {
                            naf: r.naf && {
                                wnd: r.naf.wnd,
                                points: r.naf.points.map(n)
                            },
                            doubles: r.doubles && {
                                step: r.doubles.step,
                                points: r.doubles.points.map(n)
                            }
                        };
                    }
                    return e;
                }, c.prototype.toJ = function() {
                    return this.inf ? this.curve.jpoint(null, null, null) : this.curve.jpoint(this.x, this.y, this.curve.one);
                }, o(f, a.BasePoint), u.prototype.jpoint = function(t, e, r) {
                    return new f(this, t, e, r);
                }, f.prototype.toP = function() {
                    if (this.isInfinity()) return this.curve.point(null, null);
                    var t = this.z.redInvm(), e = t.redSqr(), r = this.x.redMul(e), n = this.y.redMul(e).redMul(t);
                    return this.curve.point(r, n);
                }, f.prototype.neg = function() {
                    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
                }, f.prototype.add = function(t) {
                    if (this.isInfinity()) return t;
                    if (t.isInfinity()) return this;
                    var e = t.z.redSqr(), r = this.z.redSqr(), n = this.x.redMul(e), i = t.x.redMul(r), o = this.y.redMul(e.redMul(t.z)), a = t.y.redMul(r.redMul(this.z)), s = n.redSub(i), u = o.redSub(a);
                    if (0 === s.cmpn(0)) return 0 !== u.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
                    var c = s.redSqr(), f = c.redMul(s), l = n.redMul(c), h = u.redSqr().redIAdd(f).redISub(l).redISub(l), p = u.redMul(l.redISub(h)).redISub(o.redMul(f)), d = this.z.redMul(t.z).redMul(s);
                    return this.curve.jpoint(h, p, d);
                }, f.prototype.mixedAdd = function(t) {
                    if (this.isInfinity()) return t.toJ();
                    if (t.isInfinity()) return this;
                    var e = this.z.redSqr(), r = this.x, n = t.x.redMul(e), i = this.y, o = t.y.redMul(e).redMul(this.z), a = r.redSub(n), s = i.redSub(o);
                    if (0 === a.cmpn(0)) return 0 !== s.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
                    var u = a.redSqr(), c = u.redMul(a), f = r.redMul(u), l = s.redSqr().redIAdd(c).redISub(f).redISub(f), h = s.redMul(f.redISub(l)).redISub(i.redMul(c)), p = this.z.redMul(a);
                    return this.curve.jpoint(l, h, p);
                }, f.prototype.dblp = function(t) {
                    if (0 === t) return this;
                    if (this.isInfinity()) return this;
                    if (!t) return this.dbl();
                    var e;
                    if (this.curve.zeroA || this.curve.threeA) {
                        var r = this;
                        for(e = 0; e < t; e++)r = r.dbl();
                        return r;
                    }
                    var n = this.curve.a, i = this.curve.tinv, o = this.x, a = this.y, s = this.z, u = s.redSqr().redSqr(), c = a.redAdd(a);
                    for(e = 0; e < t; e++){
                        var f = o.redSqr(), l = c.redSqr(), h = l.redSqr(), p = f.redAdd(f).redIAdd(f).redIAdd(n.redMul(u)), d = o.redMul(l), y = p.redSqr().redISub(d.redAdd(d)), b = d.redISub(y), m = p.redMul(b);
                        m = m.redIAdd(m).redISub(h);
                        var v = c.redMul(s);
                        e + 1 < t && (u = u.redMul(h)), o = y, s = v, c = m;
                    }
                    return this.curve.jpoint(o, c.redMul(i), s);
                }, f.prototype.dbl = function() {
                    return this.isInfinity() ? this : this.curve.zeroA ? this._zeroDbl() : this.curve.threeA ? this._threeDbl() : this._dbl();
                }, f.prototype._zeroDbl = function() {
                    var t, e, r;
                    if (this.zOne) {
                        var n = this.x.redSqr(), i = this.y.redSqr(), o = i.redSqr(), a = this.x.redAdd(i).redSqr().redISub(n).redISub(o);
                        a = a.redIAdd(a);
                        var s = n.redAdd(n).redIAdd(n), u = s.redSqr().redISub(a).redISub(a), c = o.redIAdd(o);
                        c = (c = c.redIAdd(c)).redIAdd(c), t = u, e = s.redMul(a.redISub(u)).redISub(c), r = this.y.redAdd(this.y);
                    } else {
                        var f = this.x.redSqr(), l = this.y.redSqr(), h = l.redSqr(), p = this.x.redAdd(l).redSqr().redISub(f).redISub(h);
                        p = p.redIAdd(p);
                        var d = f.redAdd(f).redIAdd(f), y = d.redSqr(), b = h.redIAdd(h);
                        b = (b = b.redIAdd(b)).redIAdd(b), t = y.redISub(p).redISub(p), e = d.redMul(p.redISub(t)).redISub(b), r = (r = this.y.redMul(this.z)).redIAdd(r);
                    }
                    return this.curve.jpoint(t, e, r);
                }, f.prototype._threeDbl = function() {
                    var t, e, r;
                    if (this.zOne) {
                        var n = this.x.redSqr(), i = this.y.redSqr(), o = i.redSqr(), a = this.x.redAdd(i).redSqr().redISub(n).redISub(o);
                        a = a.redIAdd(a);
                        var s = n.redAdd(n).redIAdd(n).redIAdd(this.curve.a), u = s.redSqr().redISub(a).redISub(a);
                        t = u;
                        var c = o.redIAdd(o);
                        c = (c = c.redIAdd(c)).redIAdd(c), e = s.redMul(a.redISub(u)).redISub(c), r = this.y.redAdd(this.y);
                    } else {
                        var f = this.z.redSqr(), l = this.y.redSqr(), h = this.x.redMul(l), p = this.x.redSub(f).redMul(this.x.redAdd(f));
                        p = p.redAdd(p).redIAdd(p);
                        var d = h.redIAdd(h), y = (d = d.redIAdd(d)).redAdd(d);
                        t = p.redSqr().redISub(y), r = this.y.redAdd(this.z).redSqr().redISub(l).redISub(f);
                        var b = l.redSqr();
                        b = (b = (b = b.redIAdd(b)).redIAdd(b)).redIAdd(b), e = p.redMul(d.redISub(t)).redISub(b);
                    }
                    return this.curve.jpoint(t, e, r);
                }, f.prototype._dbl = function() {
                    var t = this.curve.a, e = this.x, r = this.y, n = this.z, i = n.redSqr().redSqr(), o = e.redSqr(), a = r.redSqr(), s = o.redAdd(o).redIAdd(o).redIAdd(t.redMul(i)), u = e.redAdd(e), c = (u = u.redIAdd(u)).redMul(a), f = s.redSqr().redISub(c.redAdd(c)), l = c.redISub(f), h = a.redSqr();
                    h = (h = (h = h.redIAdd(h)).redIAdd(h)).redIAdd(h);
                    var p = s.redMul(l).redISub(h), d = r.redAdd(r).redMul(n);
                    return this.curve.jpoint(f, p, d);
                }, f.prototype.trpl = function() {
                    if (!this.curve.zeroA) return this.dbl().add(this);
                    var t = this.x.redSqr(), e = this.y.redSqr(), r = this.z.redSqr(), n = e.redSqr(), i = t.redAdd(t).redIAdd(t), o = i.redSqr(), a = this.x.redAdd(e).redSqr().redISub(t).redISub(n), s = (a = (a = (a = a.redIAdd(a)).redAdd(a).redIAdd(a)).redISub(o)).redSqr(), u = n.redIAdd(n);
                    u = (u = (u = u.redIAdd(u)).redIAdd(u)).redIAdd(u);
                    var c = i.redIAdd(a).redSqr().redISub(o).redISub(s).redISub(u), f = e.redMul(c);
                    f = (f = f.redIAdd(f)).redIAdd(f);
                    var l = this.x.redMul(s).redISub(f);
                    l = (l = l.redIAdd(l)).redIAdd(l);
                    var h = this.y.redMul(c.redMul(u.redISub(c)).redISub(a.redMul(s)));
                    h = (h = (h = h.redIAdd(h)).redIAdd(h)).redIAdd(h);
                    var p = this.z.redAdd(a).redSqr().redISub(r).redISub(s);
                    return this.curve.jpoint(l, h, p);
                }, f.prototype.mul = function(t, e) {
                    return t = new i(t, e), this.curve._wnafMul(this, t);
                }, f.prototype.eq = function(t) {
                    if ("affine" === t.type) return this.eq(t.toJ());
                    if (this === t) return !0;
                    var e = this.z.redSqr(), r = t.z.redSqr();
                    if (0 !== this.x.redMul(r).redISub(t.x.redMul(e)).cmpn(0)) return !1;
                    var n = e.redMul(this.z), i = r.redMul(t.z);
                    return 0 === this.y.redMul(i).redISub(t.y.redMul(n)).cmpn(0);
                }, f.prototype.eqXToP = function(t) {
                    var e = this.z.redSqr(), r = t.toRed(this.curve.red).redMul(e);
                    if (0 === this.x.cmp(r)) return !0;
                    for(var n = t.clone(), i = this.curve.redN.redMul(e);;){
                        if (n.iadd(this.curve.n), n.cmp(this.curve.p) >= 0) return !1;
                        if (r.redIAdd(i), 0 === this.x.cmp(r)) return !0;
                    }
                }, f.prototype.inspect = function() {
                    return this.isInfinity() ? "<EC JPoint Infinity>" : "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
                }, f.prototype.isInfinity = function() {
                    return 0 === this.z.cmpn(0);
                };
            },
            6379: (t, e, r)=>{
                "use strict";
                var n, i = e, o = r(2859), a = r(5803), s = r(1970).assert;
                function u(t) {
                    "short" === t.type ? this.curve = new a.short(t) : "edwards" === t.type ? this.curve = new a.edwards(t) : this.curve = new a.mont(t), this.g = this.curve.g, this.n = this.curve.n, this.hash = t.hash, s(this.g.validate(), "Invalid curve"), s(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
                }
                function c(t, e) {
                    Object.defineProperty(i, t, {
                        configurable: !0,
                        enumerable: !0,
                        get: function() {
                            var r = new u(e);
                            return Object.defineProperty(i, t, {
                                configurable: !0,
                                enumerable: !0,
                                value: r
                            }), r;
                        }
                    });
                }
                i.PresetCurve = u, c("p192", {
                    type: "short",
                    prime: "p192",
                    p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
                    a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
                    b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
                    n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
                    hash: o.sha256,
                    gRed: !1,
                    g: [
                        "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
                        "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
                    ]
                }), c("p224", {
                    type: "short",
                    prime: "p224",
                    p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
                    a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
                    b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
                    n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
                    hash: o.sha256,
                    gRed: !1,
                    g: [
                        "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
                        "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
                    ]
                }), c("p256", {
                    type: "short",
                    prime: null,
                    p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
                    a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
                    b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
                    n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
                    hash: o.sha256,
                    gRed: !1,
                    g: [
                        "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
                        "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
                    ]
                }), c("p384", {
                    type: "short",
                    prime: null,
                    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
                    a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
                    b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
                    n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
                    hash: o.sha384,
                    gRed: !1,
                    g: [
                        "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
                        "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
                    ]
                }), c("p521", {
                    type: "short",
                    prime: null,
                    p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
                    a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
                    b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
                    n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
                    hash: o.sha512,
                    gRed: !1,
                    g: [
                        "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
                        "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
                    ]
                }), c("curve25519", {
                    type: "mont",
                    prime: "p25519",
                    p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
                    a: "76d06",
                    b: "1",
                    n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
                    hash: o.sha256,
                    gRed: !1,
                    g: [
                        "9"
                    ]
                }), c("ed25519", {
                    type: "edwards",
                    prime: "p25519",
                    p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
                    a: "-1",
                    c: "1",
                    d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
                    n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
                    hash: o.sha256,
                    gRed: !1,
                    g: [
                        "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
                        "6666666666666666666666666666666666666666666666666666666666666658"
                    ]
                });
                try {
                    n = r(5586);
                } catch (t) {
                    n = void 0;
                }
                c("secp256k1", {
                    type: "short",
                    prime: "k256",
                    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
                    a: "0",
                    b: "7",
                    n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
                    h: "1",
                    hash: o.sha256,
                    beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
                    lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
                    basis: [
                        {
                            a: "3086d221a7d46bcde86c90e49284eb15",
                            b: "-e4437ed6010e88286f547fa90abfe4c3"
                        },
                        {
                            a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
                            b: "3086d221a7d46bcde86c90e49284eb15"
                        }
                    ],
                    gRed: !1,
                    g: [
                        "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
                        "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
                        n
                    ]
                });
            },
            7416: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                var i = r(7799), o = r(6934), a = r(1970), s = r(6379), u = r(8904), c = a.assert, f = r(3643), l = r(3686);
                function h(t) {
                    if (!(this instanceof h)) return new h(t);
                    "string" == typeof t && (c(Object.prototype.hasOwnProperty.call(s, t), "Unknown curve " + t), t = s[t]), t instanceof s.PresetCurve && (t = {
                        curve: t
                    }), this.curve = t.curve.curve, this.n = this.curve.n, this.nh = this.n.ushrn(1), this.g = this.curve.g, this.g = t.curve.g, this.g.precompute(t.curve.n.bitLength() + 1), this.hash = t.hash || t.curve.hash;
                }
                t.exports = h, h.prototype.keyPair = function(t) {
                    return new f(this, t);
                }, h.prototype.keyFromPrivate = function(t, e) {
                    return f.fromPrivate(this, t, e);
                }, h.prototype.keyFromPublic = function(t, e) {
                    return f.fromPublic(this, t, e);
                }, h.prototype.genKeyPair = function(t) {
                    t || (t = {});
                    for(var e = new o({
                        hash: this.hash,
                        pers: t.pers,
                        persEnc: t.persEnc || "utf8",
                        entropy: t.entropy || u(this.hash.hmacStrength),
                        entropyEnc: t.entropy && t.entropyEnc || "utf8",
                        nonce: this.n.toArray()
                    }), r = this.n.byteLength(), n = this.n.sub(new i(2));;){
                        var a = new i(e.generate(r));
                        if (!(a.cmp(n) > 0)) return a.iaddn(1), this.keyFromPrivate(a);
                    }
                }, h.prototype._truncateToN = function(t, e, r) {
                    var o;
                    if (i.isBN(t) || "number" == typeof t) o = (t = new i(t, 16)).byteLength();
                    else if ("object" === n(t)) o = t.length, t = new i(t, 16);
                    else {
                        var a = t.toString();
                        o = a.length + 1 >>> 1, t = new i(a, 16);
                    }
                    "number" != typeof r && (r = 8 * o);
                    var s = r - this.n.bitLength();
                    return s > 0 && (t = t.ushrn(s)), !e && t.cmp(this.n) >= 0 ? t.sub(this.n) : t;
                }, h.prototype.sign = function(t, e, r, a) {
                    if ("object" === n(r) && (a = r, r = null), a || (a = {}), "string" != typeof t && "number" != typeof t && !i.isBN(t)) {
                        c("object" === n(t) && t && "number" == typeof t.length, "Expected message to be an array-like, a hex string, or a BN instance"), c(t.length >>> 0 === t.length);
                        for(var s = 0; s < t.length; s++)c((255 & t[s]) === t[s]);
                    }
                    e = this.keyFromPrivate(e, r), t = this._truncateToN(t, !1, a.msgBitLength), c(!t.isNeg(), "Can not sign a negative message");
                    var u = this.n.byteLength(), f = e.getPrivate().toArray("be", u), h = t.toArray("be", u);
                    c(new i(h).eq(t), "Can not sign message");
                    for(var p = new o({
                        hash: this.hash,
                        entropy: f,
                        nonce: h,
                        pers: a.pers,
                        persEnc: a.persEnc || "utf8"
                    }), d = this.n.sub(new i(1)), y = 0;; y++){
                        var b = a.k ? a.k(y) : new i(p.generate(this.n.byteLength()));
                        if (!((b = this._truncateToN(b, !0)).cmpn(1) <= 0 || b.cmp(d) >= 0)) {
                            var m = this.g.mul(b);
                            if (!m.isInfinity()) {
                                var v = m.getX(), g = v.umod(this.n);
                                if (0 !== g.cmpn(0)) {
                                    var _ = b.invm(this.n).mul(g.mul(e.getPrivate()).iadd(t));
                                    if (0 !== (_ = _.umod(this.n)).cmpn(0)) {
                                        var w = (m.getY().isOdd() ? 1 : 0) | (0 !== v.cmp(g) ? 2 : 0);
                                        return a.canonical && _.cmp(this.nh) > 0 && (_ = this.n.sub(_), w ^= 1), new l({
                                            r: g,
                                            s: _,
                                            recoveryParam: w
                                        });
                                    }
                                }
                            }
                        }
                    }
                }, h.prototype.verify = function(t, e, r, n, i) {
                    i || (i = {}), t = this._truncateToN(t, !1, i.msgBitLength), r = this.keyFromPublic(r, n);
                    var o = (e = new l(e, "hex")).r, a = e.s;
                    if (o.cmpn(1) < 0 || o.cmp(this.n) >= 0) return !1;
                    if (a.cmpn(1) < 0 || a.cmp(this.n) >= 0) return !1;
                    var s, u = a.invm(this.n), c = u.mul(t).umod(this.n), f = u.mul(o).umod(this.n);
                    return this.curve._maxwellTrick ? !(s = this.g.jmulAdd(c, r.getPublic(), f)).isInfinity() && s.eqXToP(o) : !(s = this.g.mulAdd(c, r.getPublic(), f)).isInfinity() && 0 === s.getX().umod(this.n).cmp(o);
                }, h.prototype.recoverPubKey = function(t, e, r, n) {
                    c((3 & r) === r, "The recovery param is more than two bits"), e = new l(e, n);
                    var o = this.n, a = new i(t), s = e.r, u = e.s, f = 1 & r, h = r >> 1;
                    if (s.cmp(this.curve.p.umod(this.curve.n)) >= 0 && h) throw new Error("Unable to find sencond key candinate");
                    s = h ? this.curve.pointFromX(s.add(this.curve.n), f) : this.curve.pointFromX(s, f);
                    var p = e.r.invm(o), d = o.sub(a).mul(p).umod(o), y = u.mul(p).umod(o);
                    return this.g.mulAdd(d, s, y);
                }, h.prototype.getKeyRecoveryParam = function(t, e, r, n) {
                    if (null !== (e = new l(e, n)).recoveryParam) return e.recoveryParam;
                    for(var i = 0; i < 4; i++){
                        var o;
                        try {
                            o = this.recoverPubKey(t, e, i);
                        } catch (t) {
                            continue;
                        }
                        if (o.eq(r)) return i;
                    }
                    throw new Error("Unable to find valid recovery factor");
                };
            },
            3643: (t, e, r)=>{
                "use strict";
                var n = r(7799), i = r(1970).assert;
                function o(t, e) {
                    this.ec = t, this.priv = null, this.pub = null, e.priv && this._importPrivate(e.priv, e.privEnc), e.pub && this._importPublic(e.pub, e.pubEnc);
                }
                t.exports = o, o.fromPublic = function(t, e, r) {
                    return e instanceof o ? e : new o(t, {
                        pub: e,
                        pubEnc: r
                    });
                }, o.fromPrivate = function(t, e, r) {
                    return e instanceof o ? e : new o(t, {
                        priv: e,
                        privEnc: r
                    });
                }, o.prototype.validate = function() {
                    var t = this.getPublic();
                    return t.isInfinity() ? {
                        result: !1,
                        reason: "Invalid public key"
                    } : t.validate() ? t.mul(this.ec.curve.n).isInfinity() ? {
                        result: !0,
                        reason: null
                    } : {
                        result: !1,
                        reason: "Public key * N != O"
                    } : {
                        result: !1,
                        reason: "Public key is not a point"
                    };
                }, o.prototype.getPublic = function(t, e) {
                    return "string" == typeof t && (e = t, t = null), this.pub || (this.pub = this.ec.g.mul(this.priv)), e ? this.pub.encode(e, t) : this.pub;
                }, o.prototype.getPrivate = function(t) {
                    return "hex" === t ? this.priv.toString(16, 2) : this.priv;
                }, o.prototype._importPrivate = function(t, e) {
                    this.priv = new n(t, e || 16), this.priv = this.priv.umod(this.ec.curve.n);
                }, o.prototype._importPublic = function(t, e) {
                    if (t.x || t.y) return "mont" === this.ec.curve.type ? i(t.x, "Need x coordinate") : "short" !== this.ec.curve.type && "edwards" !== this.ec.curve.type || i(t.x && t.y, "Need both x and y coordinate"), void (this.pub = this.ec.curve.point(t.x, t.y));
                    this.pub = this.ec.curve.decodePoint(t, e);
                }, o.prototype.derive = function(t) {
                    return t.validate() || i(t.validate(), "public point not validated"), t.mul(this.priv).getX();
                }, o.prototype.sign = function(t, e, r) {
                    return this.ec.sign(t, this, e, r);
                }, o.prototype.verify = function(t, e, r) {
                    return this.ec.verify(t, e, this, void 0, r);
                }, o.prototype.inspect = function() {
                    return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
                };
            },
            3686: (t, e, r)=>{
                "use strict";
                var n = r(7799), i = r(1970), o = i.assert;
                function a(t, e) {
                    if (t instanceof a) return t;
                    this._importDER(t, e) || (o(t.r && t.s, "Signature without r or s"), this.r = new n(t.r, 16), this.s = new n(t.s, 16), void 0 === t.recoveryParam ? this.recoveryParam = null : this.recoveryParam = t.recoveryParam);
                }
                function s() {
                    this.place = 0;
                }
                function u(t, e) {
                    var r = t[e.place++];
                    if (!(128 & r)) return r;
                    var n = 15 & r;
                    if (0 === n || n > 4) return !1;
                    if (0 === t[e.place]) return !1;
                    for(var i = 0, o = 0, a = e.place; o < n; o++, a++)i <<= 8, i |= t[a], i >>>= 0;
                    return !(i <= 127) && (e.place = a, i);
                }
                function c(t) {
                    for(var e = 0, r = t.length - 1; !t[e] && !(128 & t[e + 1]) && e < r;)e++;
                    return 0 === e ? t : t.slice(e);
                }
                function f(t, e) {
                    if (e < 128) t.push(e);
                    else {
                        var r = 1 + (Math.log(e) / Math.LN2 >>> 3);
                        for(t.push(128 | r); --r;)t.push(e >>> (r << 3) & 255);
                        t.push(e);
                    }
                }
                t.exports = a, a.prototype._importDER = function(t, e) {
                    t = i.toArray(t, e);
                    var r = new s;
                    if (48 !== t[r.place++]) return !1;
                    var o = u(t, r);
                    if (!1 === o) return !1;
                    if (o + r.place !== t.length) return !1;
                    if (2 !== t[r.place++]) return !1;
                    var a = u(t, r);
                    if (!1 === a) return !1;
                    if (128 & t[r.place]) return !1;
                    var c = t.slice(r.place, a + r.place);
                    if (r.place += a, 2 !== t[r.place++]) return !1;
                    var f = u(t, r);
                    if (!1 === f) return !1;
                    if (t.length !== f + r.place) return !1;
                    if (128 & t[r.place]) return !1;
                    var l = t.slice(r.place, f + r.place);
                    if (0 === c[0]) {
                        if (!(128 & c[1])) return !1;
                        c = c.slice(1);
                    }
                    if (0 === l[0]) {
                        if (!(128 & l[1])) return !1;
                        l = l.slice(1);
                    }
                    return this.r = new n(c), this.s = new n(l), this.recoveryParam = null, !0;
                }, a.prototype.toDER = function(t) {
                    var e = this.r.toArray(), r = this.s.toArray();
                    for(128 & e[0] && (e = [
                        0
                    ].concat(e)), 128 & r[0] && (r = [
                        0
                    ].concat(r)), e = c(e), r = c(r); !(r[0] || 128 & r[1]);)r = r.slice(1);
                    var n = [
                        2
                    ];
                    f(n, e.length), (n = n.concat(e)).push(2), f(n, r.length);
                    var o = n.concat(r), a = [
                        48
                    ];
                    return f(a, o.length), a = a.concat(o), i.encode(a, t);
                };
            },
            4919: (t, e, r)=>{
                "use strict";
                var n = r(2859), i = r(6379), o = r(1970), a = o.assert, s = o.parseBytes, u = r(208), c = r(8433);
                function f(t) {
                    if (a("ed25519" === t, "only tested with ed25519 so far"), !(this instanceof f)) return new f(t);
                    t = i[t].curve, this.curve = t, this.g = t.g, this.g.precompute(t.n.bitLength() + 1), this.pointClass = t.point().constructor, this.encodingLength = Math.ceil(t.n.bitLength() / 8), this.hash = n.sha512;
                }
                t.exports = f, f.prototype.sign = function(t, e) {
                    t = s(t);
                    var r = this.keyFromSecret(e), n = this.hashInt(r.messagePrefix(), t), i = this.g.mul(n), o = this.encodePoint(i), a = this.hashInt(o, r.pubBytes(), t).mul(r.priv()), u = n.add(a).umod(this.curve.n);
                    return this.makeSignature({
                        R: i,
                        S: u,
                        Rencoded: o
                    });
                }, f.prototype.verify = function(t, e, r) {
                    if (t = s(t), (e = this.makeSignature(e)).S().gte(e.eddsa.curve.n) || e.S().isNeg()) return !1;
                    var n = this.keyFromPublic(r), i = this.hashInt(e.Rencoded(), n.pubBytes(), t), o = this.g.mul(e.S());
                    return e.R().add(n.pub().mul(i)).eq(o);
                }, f.prototype.hashInt = function() {
                    for(var t = this.hash(), e = 0; e < arguments.length; e++)t.update(arguments[e]);
                    return o.intFromLE(t.digest()).umod(this.curve.n);
                }, f.prototype.keyFromPublic = function(t) {
                    return u.fromPublic(this, t);
                }, f.prototype.keyFromSecret = function(t) {
                    return u.fromSecret(this, t);
                }, f.prototype.makeSignature = function(t) {
                    return t instanceof c ? t : new c(this, t);
                }, f.prototype.encodePoint = function(t) {
                    var e = t.getY().toArray("le", this.encodingLength);
                    return e[this.encodingLength - 1] |= t.getX().isOdd() ? 128 : 0, e;
                }, f.prototype.decodePoint = function(t) {
                    var e = (t = o.parseBytes(t)).length - 1, r = t.slice(0, e).concat(-129 & t[e]), n = !!(128 & t[e]), i = o.intFromLE(r);
                    return this.curve.pointFromY(i, n);
                }, f.prototype.encodeInt = function(t) {
                    return t.toArray("le", this.encodingLength);
                }, f.prototype.decodeInt = function(t) {
                    return o.intFromLE(t);
                }, f.prototype.isPoint = function(t) {
                    return t instanceof this.pointClass;
                };
            },
            208: (t, e, r)=>{
                "use strict";
                var n = r(1970), i = n.assert, o = n.parseBytes, a = n.cachedProperty;
                function s(t, e) {
                    this.eddsa = t, this._secret = o(e.secret), t.isPoint(e.pub) ? this._pub = e.pub : this._pubBytes = o(e.pub);
                }
                s.fromPublic = function(t, e) {
                    return e instanceof s ? e : new s(t, {
                        pub: e
                    });
                }, s.fromSecret = function(t, e) {
                    return e instanceof s ? e : new s(t, {
                        secret: e
                    });
                }, s.prototype.secret = function() {
                    return this._secret;
                }, a(s, "pubBytes", function() {
                    return this.eddsa.encodePoint(this.pub());
                }), a(s, "pub", function() {
                    return this._pubBytes ? this.eddsa.decodePoint(this._pubBytes) : this.eddsa.g.mul(this.priv());
                }), a(s, "privBytes", function() {
                    var t = this.eddsa, e = this.hash(), r = t.encodingLength - 1, n = e.slice(0, t.encodingLength);
                    return n[0] &= 248, n[r] &= 127, n[r] |= 64, n;
                }), a(s, "priv", function() {
                    return this.eddsa.decodeInt(this.privBytes());
                }), a(s, "hash", function() {
                    return this.eddsa.hash().update(this.secret()).digest();
                }), a(s, "messagePrefix", function() {
                    return this.hash().slice(this.eddsa.encodingLength);
                }), s.prototype.sign = function(t) {
                    return i(this._secret, "KeyPair can only verify"), this.eddsa.sign(t, this);
                }, s.prototype.verify = function(t, e) {
                    return this.eddsa.verify(t, e, this);
                }, s.prototype.getSecret = function(t) {
                    return i(this._secret, "KeyPair is public only"), n.encode(this.secret(), t);
                }, s.prototype.getPublic = function(t) {
                    return n.encode(this.pubBytes(), t);
                }, t.exports = s;
            },
            8433: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                var i = r(7799), o = r(1970), a = o.assert, s = o.cachedProperty, u = o.parseBytes;
                function c(t, e) {
                    this.eddsa = t, "object" !== n(e) && (e = u(e)), Array.isArray(e) && (a(e.length === 2 * t.encodingLength, "Signature has invalid size"), e = {
                        R: e.slice(0, t.encodingLength),
                        S: e.slice(t.encodingLength)
                    }), a(e.R && e.S, "Signature without R or S"), t.isPoint(e.R) && (this._R = e.R), e.S instanceof i && (this._S = e.S), this._Rencoded = Array.isArray(e.R) ? e.R : e.Rencoded, this._Sencoded = Array.isArray(e.S) ? e.S : e.Sencoded;
                }
                s(c, "S", function() {
                    return this.eddsa.decodeInt(this.Sencoded());
                }), s(c, "R", function() {
                    return this.eddsa.decodePoint(this.Rencoded());
                }), s(c, "Rencoded", function() {
                    return this.eddsa.encodePoint(this.R());
                }), s(c, "Sencoded", function() {
                    return this.eddsa.encodeInt(this.S());
                }), c.prototype.toBytes = function() {
                    return this.Rencoded().concat(this.Sencoded());
                }, c.prototype.toHex = function() {
                    return o.encode(this.toBytes(), "hex").toUpperCase();
                }, t.exports = c;
            },
            5586: (t)=>{
                t.exports = {
                    doubles: {
                        step: 4,
                        points: [
                            [
                                "e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a",
                                "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"
                            ],
                            [
                                "8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508",
                                "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"
                            ],
                            [
                                "175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739",
                                "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"
                            ],
                            [
                                "363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640",
                                "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"
                            ],
                            [
                                "8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c",
                                "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"
                            ],
                            [
                                "723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda",
                                "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"
                            ],
                            [
                                "eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa",
                                "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"
                            ],
                            [
                                "100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0",
                                "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"
                            ],
                            [
                                "e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d",
                                "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"
                            ],
                            [
                                "feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d",
                                "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"
                            ],
                            [
                                "da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1",
                                "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"
                            ],
                            [
                                "53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0",
                                "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"
                            ],
                            [
                                "8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047",
                                "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"
                            ],
                            [
                                "385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862",
                                "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"
                            ],
                            [
                                "6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7",
                                "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"
                            ],
                            [
                                "3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd",
                                "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"
                            ],
                            [
                                "85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83",
                                "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"
                            ],
                            [
                                "948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a",
                                "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"
                            ],
                            [
                                "6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8",
                                "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"
                            ],
                            [
                                "e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d",
                                "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"
                            ],
                            [
                                "e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725",
                                "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"
                            ],
                            [
                                "213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754",
                                "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"
                            ],
                            [
                                "4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c",
                                "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"
                            ],
                            [
                                "fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6",
                                "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"
                            ],
                            [
                                "76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39",
                                "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"
                            ],
                            [
                                "c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891",
                                "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"
                            ],
                            [
                                "d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b",
                                "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"
                            ],
                            [
                                "b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03",
                                "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"
                            ],
                            [
                                "e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d",
                                "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"
                            ],
                            [
                                "a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070",
                                "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"
                            ],
                            [
                                "90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4",
                                "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"
                            ],
                            [
                                "8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da",
                                "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"
                            ],
                            [
                                "e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11",
                                "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"
                            ],
                            [
                                "8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e",
                                "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"
                            ],
                            [
                                "e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41",
                                "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"
                            ],
                            [
                                "b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef",
                                "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"
                            ],
                            [
                                "d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8",
                                "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"
                            ],
                            [
                                "324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d",
                                "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"
                            ],
                            [
                                "4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96",
                                "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"
                            ],
                            [
                                "9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd",
                                "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"
                            ],
                            [
                                "6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5",
                                "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"
                            ],
                            [
                                "a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266",
                                "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"
                            ],
                            [
                                "7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71",
                                "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"
                            ],
                            [
                                "928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac",
                                "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"
                            ],
                            [
                                "85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751",
                                "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"
                            ],
                            [
                                "ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e",
                                "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"
                            ],
                            [
                                "827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241",
                                "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"
                            ],
                            [
                                "eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3",
                                "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"
                            ],
                            [
                                "e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f",
                                "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"
                            ],
                            [
                                "1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19",
                                "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"
                            ],
                            [
                                "146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be",
                                "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"
                            ],
                            [
                                "fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9",
                                "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"
                            ],
                            [
                                "da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2",
                                "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"
                            ],
                            [
                                "a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13",
                                "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"
                            ],
                            [
                                "174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c",
                                "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"
                            ],
                            [
                                "959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba",
                                "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"
                            ],
                            [
                                "d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151",
                                "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"
                            ],
                            [
                                "64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073",
                                "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"
                            ],
                            [
                                "8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458",
                                "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"
                            ],
                            [
                                "13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b",
                                "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"
                            ],
                            [
                                "bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366",
                                "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"
                            ],
                            [
                                "8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa",
                                "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"
                            ],
                            [
                                "8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0",
                                "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"
                            ],
                            [
                                "dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787",
                                "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"
                            ],
                            [
                                "f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e",
                                "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"
                            ]
                        ]
                    },
                    naf: {
                        wnd: 7,
                        points: [
                            [
                                "f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9",
                                "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"
                            ],
                            [
                                "2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4",
                                "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"
                            ],
                            [
                                "5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc",
                                "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"
                            ],
                            [
                                "acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe",
                                "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"
                            ],
                            [
                                "774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb",
                                "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"
                            ],
                            [
                                "f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8",
                                "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"
                            ],
                            [
                                "d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e",
                                "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"
                            ],
                            [
                                "defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34",
                                "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"
                            ],
                            [
                                "2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c",
                                "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"
                            ],
                            [
                                "352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5",
                                "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"
                            ],
                            [
                                "2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f",
                                "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"
                            ],
                            [
                                "9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714",
                                "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"
                            ],
                            [
                                "daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729",
                                "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"
                            ],
                            [
                                "c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db",
                                "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"
                            ],
                            [
                                "6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4",
                                "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"
                            ],
                            [
                                "1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5",
                                "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"
                            ],
                            [
                                "605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479",
                                "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"
                            ],
                            [
                                "62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d",
                                "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"
                            ],
                            [
                                "80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f",
                                "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"
                            ],
                            [
                                "7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb",
                                "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"
                            ],
                            [
                                "d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9",
                                "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"
                            ],
                            [
                                "49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963",
                                "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"
                            ],
                            [
                                "77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74",
                                "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"
                            ],
                            [
                                "f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530",
                                "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"
                            ],
                            [
                                "463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b",
                                "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"
                            ],
                            [
                                "f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247",
                                "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"
                            ],
                            [
                                "caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1",
                                "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"
                            ],
                            [
                                "2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120",
                                "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"
                            ],
                            [
                                "7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435",
                                "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"
                            ],
                            [
                                "754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18",
                                "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"
                            ],
                            [
                                "e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8",
                                "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"
                            ],
                            [
                                "186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb",
                                "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"
                            ],
                            [
                                "df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f",
                                "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"
                            ],
                            [
                                "5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143",
                                "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"
                            ],
                            [
                                "290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba",
                                "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"
                            ],
                            [
                                "af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45",
                                "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"
                            ],
                            [
                                "766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a",
                                "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"
                            ],
                            [
                                "59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e",
                                "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"
                            ],
                            [
                                "f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8",
                                "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"
                            ],
                            [
                                "7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c",
                                "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"
                            ],
                            [
                                "948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519",
                                "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"
                            ],
                            [
                                "7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab",
                                "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"
                            ],
                            [
                                "3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca",
                                "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"
                            ],
                            [
                                "d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf",
                                "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"
                            ],
                            [
                                "1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610",
                                "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"
                            ],
                            [
                                "733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4",
                                "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"
                            ],
                            [
                                "15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c",
                                "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"
                            ],
                            [
                                "a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940",
                                "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"
                            ],
                            [
                                "e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980",
                                "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"
                            ],
                            [
                                "311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3",
                                "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"
                            ],
                            [
                                "34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf",
                                "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"
                            ],
                            [
                                "f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63",
                                "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"
                            ],
                            [
                                "d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448",
                                "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"
                            ],
                            [
                                "32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf",
                                "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"
                            ],
                            [
                                "7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5",
                                "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"
                            ],
                            [
                                "ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6",
                                "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"
                            ],
                            [
                                "16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5",
                                "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"
                            ],
                            [
                                "eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99",
                                "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"
                            ],
                            [
                                "78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51",
                                "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"
                            ],
                            [
                                "494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5",
                                "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"
                            ],
                            [
                                "a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5",
                                "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"
                            ],
                            [
                                "c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997",
                                "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"
                            ],
                            [
                                "841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881",
                                "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"
                            ],
                            [
                                "5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5",
                                "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"
                            ],
                            [
                                "36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66",
                                "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"
                            ],
                            [
                                "336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726",
                                "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"
                            ],
                            [
                                "8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede",
                                "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"
                            ],
                            [
                                "1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94",
                                "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"
                            ],
                            [
                                "85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31",
                                "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"
                            ],
                            [
                                "29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51",
                                "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"
                            ],
                            [
                                "a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252",
                                "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"
                            ],
                            [
                                "4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5",
                                "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"
                            ],
                            [
                                "d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b",
                                "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"
                            ],
                            [
                                "ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4",
                                "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"
                            ],
                            [
                                "af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f",
                                "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"
                            ],
                            [
                                "e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889",
                                "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"
                            ],
                            [
                                "591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246",
                                "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"
                            ],
                            [
                                "11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984",
                                "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"
                            ],
                            [
                                "3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a",
                                "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"
                            ],
                            [
                                "cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030",
                                "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"
                            ],
                            [
                                "c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197",
                                "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"
                            ],
                            [
                                "c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593",
                                "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"
                            ],
                            [
                                "a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef",
                                "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"
                            ],
                            [
                                "347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38",
                                "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"
                            ],
                            [
                                "da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a",
                                "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"
                            ],
                            [
                                "c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111",
                                "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"
                            ],
                            [
                                "4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502",
                                "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"
                            ],
                            [
                                "3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea",
                                "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"
                            ],
                            [
                                "cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26",
                                "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"
                            ],
                            [
                                "b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986",
                                "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"
                            ],
                            [
                                "d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e",
                                "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"
                            ],
                            [
                                "48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4",
                                "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"
                            ],
                            [
                                "dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda",
                                "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"
                            ],
                            [
                                "6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859",
                                "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"
                            ],
                            [
                                "e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f",
                                "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"
                            ],
                            [
                                "eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c",
                                "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"
                            ],
                            [
                                "13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942",
                                "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"
                            ],
                            [
                                "ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a",
                                "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"
                            ],
                            [
                                "b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80",
                                "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"
                            ],
                            [
                                "ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d",
                                "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"
                            ],
                            [
                                "8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1",
                                "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"
                            ],
                            [
                                "52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63",
                                "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"
                            ],
                            [
                                "e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352",
                                "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"
                            ],
                            [
                                "7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193",
                                "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"
                            ],
                            [
                                "5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00",
                                "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"
                            ],
                            [
                                "32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58",
                                "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"
                            ],
                            [
                                "e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7",
                                "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"
                            ],
                            [
                                "8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8",
                                "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"
                            ],
                            [
                                "4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e",
                                "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"
                            ],
                            [
                                "3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d",
                                "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"
                            ],
                            [
                                "674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b",
                                "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"
                            ],
                            [
                                "d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f",
                                "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"
                            ],
                            [
                                "30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6",
                                "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"
                            ],
                            [
                                "be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297",
                                "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"
                            ],
                            [
                                "93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a",
                                "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"
                            ],
                            [
                                "b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c",
                                "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"
                            ],
                            [
                                "d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52",
                                "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"
                            ],
                            [
                                "d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb",
                                "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"
                            ],
                            [
                                "463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065",
                                "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"
                            ],
                            [
                                "7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917",
                                "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"
                            ],
                            [
                                "74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9",
                                "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"
                            ],
                            [
                                "30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3",
                                "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"
                            ],
                            [
                                "9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57",
                                "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"
                            ],
                            [
                                "176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66",
                                "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"
                            ],
                            [
                                "75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8",
                                "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"
                            ],
                            [
                                "809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721",
                                "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"
                            ],
                            [
                                "1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180",
                                "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"
                            ]
                        ]
                    }
                };
            },
            1970: (t, e, r)=>{
                "use strict";
                var n = e, i = r(7799), o = r(3528), a = r(6706);
                n.assert = o, n.toArray = a.toArray, n.zero2 = a.zero2, n.toHex = a.toHex, n.encode = a.encode, n.getNAF = function(t, e, r) {
                    var n, i = new Array(Math.max(t.bitLength(), r) + 1);
                    for(n = 0; n < i.length; n += 1)i[n] = 0;
                    var o = 1 << e + 1, a = t.clone();
                    for(n = 0; n < i.length; n++){
                        var s, u = a.andln(o - 1);
                        a.isOdd() ? (s = u > (o >> 1) - 1 ? (o >> 1) - u : u, a.isubn(s)) : s = 0, i[n] = s, a.iushrn(1);
                    }
                    return i;
                }, n.getJSF = function(t, e) {
                    var r = [
                        [],
                        []
                    ];
                    t = t.clone(), e = e.clone();
                    for(var n, i = 0, o = 0; t.cmpn(-i) > 0 || e.cmpn(-o) > 0;){
                        var a, s, u = t.andln(3) + i & 3, c = e.andln(3) + o & 3;
                        3 === u && (u = -1), 3 === c && (c = -1), a = 1 & u ? 3 != (n = t.andln(7) + i & 7) && 5 !== n || 2 !== c ? u : -u : 0, r[0].push(a), s = 1 & c ? 3 != (n = e.andln(7) + o & 7) && 5 !== n || 2 !== u ? c : -c : 0, r[1].push(s), 2 * i === a + 1 && (i = 1 - i), 2 * o === s + 1 && (o = 1 - o), t.iushrn(1), e.iushrn(1);
                    }
                    return r;
                }, n.cachedProperty = function(t, e, r) {
                    var n = "_" + e;
                    t.prototype[e] = function() {
                        return void 0 !== this[n] ? this[n] : this[n] = r.call(this);
                    };
                }, n.parseBytes = function(t) {
                    return "string" == typeof t ? n.toArray(t, "hex") : t;
                }, n.intFromLE = function(t) {
                    return new i(t, "hex", "le");
                };
            },
            988: (t)=>{
                "use strict";
                var e = Object.defineProperty || !1;
                if (e) try {
                    e({}, "a", {
                        value: 1
                    });
                } catch (t) {
                    e = !1;
                }
                t.exports = e;
            },
            9206: (t)=>{
                "use strict";
                t.exports = EvalError;
            },
            9870: (t)=>{
                "use strict";
                t.exports = Error;
            },
            9939: (t)=>{
                "use strict";
                t.exports = RangeError;
            },
            783: (t)=>{
                "use strict";
                t.exports = ReferenceError;
            },
            2288: (t)=>{
                "use strict";
                t.exports = SyntaxError;
            },
            2268: (t)=>{
                "use strict";
                t.exports = TypeError;
            },
            8188: (t)=>{
                "use strict";
                t.exports = URIError;
            },
            8093: (t)=>{
                "use strict";
                t.exports = Object;
            },
            6182: (t)=>{
                "use strict";
                function e(t, e) {
                    if (null == t) throw new TypeError("Cannot convert first argument to object");
                    for(var r = Object(t), n = 1; n < arguments.length; n++){
                        var i = arguments[n];
                        if (null != i) for(var o = Object.keys(Object(i)), a = 0, s = o.length; a < s; a++){
                            var u = o[a], c = Object.getOwnPropertyDescriptor(i, u);
                            void 0 !== c && c.enumerable && (r[u] = i[u]);
                        }
                    }
                    return r;
                }
                t.exports = {
                    assign: e,
                    polyfill: function() {
                        Object.assign || Object.defineProperty(Object, "assign", {
                            enumerable: !1,
                            configurable: !0,
                            writable: !0,
                            value: e
                        });
                    }
                };
            },
            3550: (t)=>{
                "use strict";
                function e(t) {
                    return e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, e(t);
                }
                var r, n = "object" === ("undefined" == typeof Reflect ? "undefined" : e(Reflect)) ? Reflect : null, i = n && "function" == typeof n.apply ? n.apply : function(t, e, r) {
                    return Function.prototype.apply.call(t, e, r);
                };
                r = n && "function" == typeof n.ownKeys ? n.ownKeys : Object.getOwnPropertySymbols ? function(t) {
                    return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t));
                } : function(t) {
                    return Object.getOwnPropertyNames(t);
                };
                var o = Number.isNaN || function(t) {
                    return t != t;
                };
                function a() {
                    a.init.call(this);
                }
                t.exports = a, t.exports.once = function(t, e) {
                    return new Promise(function(r, n) {
                        function i(r) {
                            t.removeListener(e, o), n(r);
                        }
                        function o() {
                            "function" == typeof t.removeListener && t.removeListener("error", i), r([].slice.call(arguments));
                        }
                        b(t, e, o, {
                            once: !0
                        }), "error" !== e && function(t, e) {
                            "function" == typeof t.on && b(t, "error", e, {
                                once: !0
                            });
                        }(t, i);
                    });
                }, a.EventEmitter = a, a.prototype._events = void 0, a.prototype._eventsCount = 0, a.prototype._maxListeners = void 0;
                var s = 10;
                function u(t) {
                    if ("function" != typeof t) throw new TypeError('The "listener" argument must be of type Function. Received type ' + e(t));
                }
                function c(t) {
                    return void 0 === t._maxListeners ? a.defaultMaxListeners : t._maxListeners;
                }
                function f(t, e, r, n) {
                    var i, o, a, s;
                    if (u(r), void 0 === (o = t._events) ? (o = t._events = Object.create(null), t._eventsCount = 0) : (void 0 !== o.newListener && (t.emit("newListener", e, r.listener ? r.listener : r), o = t._events), a = o[e]), void 0 === a) a = o[e] = r, ++t._eventsCount;
                    else if ("function" == typeof a ? a = o[e] = n ? [
                        r,
                        a
                    ] : [
                        a,
                        r
                    ] : n ? a.unshift(r) : a.push(r), (i = c(t)) > 0 && a.length > i && !a.warned) {
                        a.warned = !0;
                        var f = new Error("Possible EventEmitter memory leak detected. " + a.length + " " + String(e) + " listeners added. Use emitter.setMaxListeners() to increase limit");
                        f.name = "MaxListenersExceededWarning", f.emitter = t, f.type = e, f.count = a.length, s = f, console && console.warn && console.warn(s);
                    }
                    return t;
                }
                function l() {
                    if (!this.fired) return this.target.removeListener(this.type, this.wrapFn), this.fired = !0, 0 === arguments.length ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
                }
                function h(t, e, r) {
                    var n = {
                        fired: !1,
                        wrapFn: void 0,
                        target: t,
                        type: e,
                        listener: r
                    }, i = l.bind(n);
                    return i.listener = r, n.wrapFn = i, i;
                }
                function p(t, e, r) {
                    var n = t._events;
                    if (void 0 === n) return [];
                    var i = n[e];
                    return void 0 === i ? [] : "function" == typeof i ? r ? [
                        i.listener || i
                    ] : [
                        i
                    ] : r ? function(t) {
                        for(var e = new Array(t.length), r = 0; r < e.length; ++r)e[r] = t[r].listener || t[r];
                        return e;
                    }(i) : y(i, i.length);
                }
                function d(t) {
                    var e = this._events;
                    if (void 0 !== e) {
                        var r = e[t];
                        if ("function" == typeof r) return 1;
                        if (void 0 !== r) return r.length;
                    }
                    return 0;
                }
                function y(t, e) {
                    for(var r = new Array(e), n = 0; n < e; ++n)r[n] = t[n];
                    return r;
                }
                function b(t, r, n, i) {
                    if ("function" == typeof t.on) i.once ? t.once(r, n) : t.on(r, n);
                    else {
                        if ("function" != typeof t.addEventListener) throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + e(t));
                        t.addEventListener(r, function e(o) {
                            i.once && t.removeEventListener(r, e), n(o);
                        });
                    }
                }
                Object.defineProperty(a, "defaultMaxListeners", {
                    enumerable: !0,
                    get: function() {
                        return s;
                    },
                    set: function(t) {
                        if ("number" != typeof t || t < 0 || o(t)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + t + ".");
                        s = t;
                    }
                }), a.init = function() {
                    void 0 !== this._events && this._events !== Object.getPrototypeOf(this)._events || (this._events = Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
                }, a.prototype.setMaxListeners = function(t) {
                    if ("number" != typeof t || t < 0 || o(t)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + t + ".");
                    return this._maxListeners = t, this;
                }, a.prototype.getMaxListeners = function() {
                    return c(this);
                }, a.prototype.emit = function(t) {
                    for(var e = [], r = 1; r < arguments.length; r++)e.push(arguments[r]);
                    var n = "error" === t, o = this._events;
                    if (void 0 !== o) n = n && void 0 === o.error;
                    else if (!n) return !1;
                    if (n) {
                        var a;
                        if (e.length > 0 && (a = e[0]), a instanceof Error) throw a;
                        var s = new Error("Unhandled error." + (a ? " (" + a.message + ")" : ""));
                        throw s.context = a, s;
                    }
                    var u = o[t];
                    if (void 0 === u) return !1;
                    if ("function" == typeof u) i(u, this, e);
                    else {
                        var c = u.length, f = y(u, c);
                        for(r = 0; r < c; ++r)i(f[r], this, e);
                    }
                    return !0;
                }, a.prototype.addListener = function(t, e) {
                    return f(this, t, e, !1);
                }, a.prototype.on = a.prototype.addListener, a.prototype.prependListener = function(t, e) {
                    return f(this, t, e, !0);
                }, a.prototype.once = function(t, e) {
                    return u(e), this.on(t, h(this, t, e)), this;
                }, a.prototype.prependOnceListener = function(t, e) {
                    return u(e), this.prependListener(t, h(this, t, e)), this;
                }, a.prototype.removeListener = function(t, e) {
                    var r, n, i, o, a;
                    if (u(e), void 0 === (n = this._events)) return this;
                    if (void 0 === (r = n[t])) return this;
                    if (r === e || r.listener === e) 0 == --this._eventsCount ? this._events = Object.create(null) : (delete n[t], n.removeListener && this.emit("removeListener", t, r.listener || e));
                    else if ("function" != typeof r) {
                        for(i = -1, o = r.length - 1; o >= 0; o--)if (r[o] === e || r[o].listener === e) {
                            a = r[o].listener, i = o;
                            break;
                        }
                        if (i < 0) return this;
                        0 === i ? r.shift() : function(t, e) {
                            for(; e + 1 < t.length; e++)t[e] = t[e + 1];
                            t.pop();
                        }(r, i), 1 === r.length && (n[t] = r[0]), void 0 !== n.removeListener && this.emit("removeListener", t, a || e);
                    }
                    return this;
                }, a.prototype.off = a.prototype.removeListener, a.prototype.removeAllListeners = function(t) {
                    var e, r, n;
                    if (void 0 === (r = this._events)) return this;
                    if (void 0 === r.removeListener) return 0 === arguments.length ? (this._events = Object.create(null), this._eventsCount = 0) : void 0 !== r[t] && (0 == --this._eventsCount ? this._events = Object.create(null) : delete r[t]), this;
                    if (0 === arguments.length) {
                        var i, o = Object.keys(r);
                        for(n = 0; n < o.length; ++n)"removeListener" !== (i = o[n]) && this.removeAllListeners(i);
                        return this.removeAllListeners("removeListener"), this._events = Object.create(null), this._eventsCount = 0, this;
                    }
                    if ("function" == typeof (e = r[t])) this.removeListener(t, e);
                    else if (void 0 !== e) for(n = e.length - 1; n >= 0; n--)this.removeListener(t, e[n]);
                    return this;
                }, a.prototype.listeners = function(t) {
                    return p(this, t, !0);
                }, a.prototype.rawListeners = function(t) {
                    return p(this, t, !1);
                }, a.listenerCount = function(t, e) {
                    return "function" == typeof t.listenerCount ? t.listenerCount(e) : d.call(t, e);
                }, a.prototype.listenerCount = d, a.prototype.eventNames = function() {
                    return this._eventsCount > 0 ? r(this._events) : [];
                };
            },
            1685: (t, e, r)=>{
                var n = r(9732).Buffer, i = r(2635);
                t.exports = function(t, e, r, o) {
                    if (n.isBuffer(t) || (t = n.from(t, "binary")), e && (n.isBuffer(e) || (e = n.from(e, "binary")), 8 !== e.length)) throw new RangeError("salt should be Buffer with 8 byte length");
                    for(var a = r / 8, s = n.alloc(a), u = n.alloc(o || 0), c = n.alloc(0); a > 0 || o > 0;){
                        var f = new i;
                        f.update(c), f.update(t), e && f.update(e), c = f.digest();
                        var l = 0;
                        if (a > 0) {
                            var h = s.length - a;
                            l = Math.min(a, c.length), c.copy(s, h, 0, l), a -= l;
                        }
                        if (l < c.length && o > 0) {
                            var p = u.length - o, d = Math.min(o, c.length - l);
                            c.copy(u, p, l, l + d), o -= d;
                        }
                    }
                    return c.fill(0), {
                        key: s,
                        iv: u
                    };
                };
            },
            3777: (t, e, r)=>{
                "use strict";
                var n = r(9809), i = Object.prototype.toString, o = Object.prototype.hasOwnProperty;
                t.exports = function(t, e, r) {
                    if (!n(e)) throw new TypeError("iterator must be a function");
                    var a, s;
                    arguments.length >= 3 && (a = r), s = t, "[object Array]" === i.call(s) ? function(t, e, r) {
                        for(var n = 0, i = t.length; n < i; n++)o.call(t, n) && (null == r ? e(t[n], n, t) : e.call(r, t[n], n, t));
                    }(t, e, a) : "string" == typeof t ? function(t, e, r) {
                        for(var n = 0, i = t.length; n < i; n++)null == r ? e(t.charAt(n), n, t) : e.call(r, t.charAt(n), n, t);
                    }(t, e, a) : function(t, e, r) {
                        for(var n in t)o.call(t, n) && (null == r ? e(t[n], n, t) : e.call(r, t[n], n, t));
                    }(t, e, a);
                };
            },
            6730: (t)=>{
                "use strict";
                var e = Object.prototype.toString, r = Math.max, n = function(t, e) {
                    for(var r = [], n = 0; n < t.length; n += 1)r[n] = t[n];
                    for(var i = 0; i < e.length; i += 1)r[i + t.length] = e[i];
                    return r;
                };
                t.exports = function(t) {
                    var i = this;
                    if ("function" != typeof i || "[object Function]" !== e.apply(i)) throw new TypeError("Function.prototype.bind called on incompatible " + i);
                    for(var o, a = function(t) {
                        for(var e = [], r = 1, n = 0; r < t.length; r += 1, n += 1)e[n] = t[r];
                        return e;
                    }(arguments), s = r(0, i.length - a.length), u = [], c = 0; c < s; c++)u[c] = "$" + c;
                    if (o = Function("binder", "return function (" + function(t) {
                        for(var e = "", r = 0; r < t.length; r += 1)e += t[r], r + 1 < t.length && (e += ",");
                        return e;
                    }(u) + "){ return binder.apply(this,arguments); }")(function() {
                        if (this instanceof o) {
                            var e = i.apply(this, n(a, arguments));
                            return Object(e) === e ? e : this;
                        }
                        return i.apply(t, n(a, arguments));
                    }), i.prototype) {
                        var f = function() {};
                        f.prototype = i.prototype, o.prototype = new f, f.prototype = null;
                    }
                    return o;
                };
            },
            2354: (t, e, r)=>{
                "use strict";
                var n = r(6730);
                t.exports = Function.prototype.bind || n;
            },
            6400: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                var i, o = r(8093), a = r(9870), s = r(9206), u = r(9939), c = r(783), f = r(2288), l = r(2268), h = r(8188), p = r(9471), d = r(2401), y = r(1697), b = r(8435), m = r(8633), v = r(2151), g = r(674), _ = Function, w = function(t) {
                    try {
                        return _('"use strict"; return (' + t + ").constructor;")();
                    } catch (t) {}
                }, S = r(1464), O = r(988), j = function() {
                    throw new l;
                }, $ = S ? function() {
                    try {
                        return j;
                    } catch (t) {
                        try {
                            return S(arguments, "callee").get;
                        } catch (t) {
                            return j;
                        }
                    }
                }() : j, E = r(5510)(), A = r(209), P = r(5825), x = r(2403), k = r(3279), M = r(3123), T = {}, B = "undefined" != typeof Uint8Array && A ? A(Uint8Array) : i, I = {
                    __proto__: null,
                    "%AggregateError%": "undefined" == typeof AggregateError ? i : AggregateError,
                    "%Array%": Array,
                    "%ArrayBuffer%": "undefined" == typeof ArrayBuffer ? i : ArrayBuffer,
                    "%ArrayIteratorPrototype%": E && A ? A([][Symbol.iterator]()) : i,
                    "%AsyncFromSyncIteratorPrototype%": i,
                    "%AsyncFunction%": T,
                    "%AsyncGenerator%": T,
                    "%AsyncGeneratorFunction%": T,
                    "%AsyncIteratorPrototype%": T,
                    "%Atomics%": "undefined" == typeof Atomics ? i : Atomics,
                    "%BigInt%": "undefined" == typeof BigInt ? i : BigInt,
                    "%BigInt64Array%": "undefined" == typeof BigInt64Array ? i : BigInt64Array,
                    "%BigUint64Array%": "undefined" == typeof BigUint64Array ? i : BigUint64Array,
                    "%Boolean%": Boolean,
                    "%DataView%": "undefined" == typeof DataView ? i : DataView,
                    "%Date%": Date,
                    "%decodeURI%": decodeURI,
                    "%decodeURIComponent%": decodeURIComponent,
                    "%encodeURI%": encodeURI,
                    "%encodeURIComponent%": encodeURIComponent,
                    "%Error%": a,
                    "%eval%": eval,
                    "%EvalError%": s,
                    "%Float16Array%": "undefined" == typeof Float16Array ? i : Float16Array,
                    "%Float32Array%": "undefined" == typeof Float32Array ? i : Float32Array,
                    "%Float64Array%": "undefined" == typeof Float64Array ? i : Float64Array,
                    "%FinalizationRegistry%": "undefined" == typeof FinalizationRegistry ? i : FinalizationRegistry,
                    "%Function%": _,
                    "%GeneratorFunction%": T,
                    "%Int8Array%": "undefined" == typeof Int8Array ? i : Int8Array,
                    "%Int16Array%": "undefined" == typeof Int16Array ? i : Int16Array,
                    "%Int32Array%": "undefined" == typeof Int32Array ? i : Int32Array,
                    "%isFinite%": isFinite,
                    "%isNaN%": isNaN,
                    "%IteratorPrototype%": E && A ? A(A([][Symbol.iterator]())) : i,
                    "%JSON%": "object" === ("undefined" == typeof JSON ? "undefined" : n(JSON)) ? JSON : i,
                    "%Map%": "undefined" == typeof Map ? i : Map,
                    "%MapIteratorPrototype%": "undefined" != typeof Map && E && A ? A((new Map)[Symbol.iterator]()) : i,
                    "%Math%": Math,
                    "%Number%": Number,
                    "%Object%": o,
                    "%Object.getOwnPropertyDescriptor%": S,
                    "%parseFloat%": parseFloat,
                    "%parseInt%": parseInt,
                    "%Promise%": "undefined" == typeof Promise ? i : Promise,
                    "%Proxy%": "undefined" == typeof Proxy ? i : Proxy,
                    "%RangeError%": u,
                    "%ReferenceError%": c,
                    "%Reflect%": "undefined" == typeof Reflect ? i : Reflect,
                    "%RegExp%": RegExp,
                    "%Set%": "undefined" == typeof Set ? i : Set,
                    "%SetIteratorPrototype%": "undefined" != typeof Set && E && A ? A((new Set)[Symbol.iterator]()) : i,
                    "%SharedArrayBuffer%": "undefined" == typeof SharedArrayBuffer ? i : SharedArrayBuffer,
                    "%String%": String,
                    "%StringIteratorPrototype%": E && A ? A(""[Symbol.iterator]()) : i,
                    "%Symbol%": E ? Symbol : i,
                    "%SyntaxError%": f,
                    "%ThrowTypeError%": $,
                    "%TypedArray%": B,
                    "%TypeError%": l,
                    "%Uint8Array%": "undefined" == typeof Uint8Array ? i : Uint8Array,
                    "%Uint8ClampedArray%": "undefined" == typeof Uint8ClampedArray ? i : Uint8ClampedArray,
                    "%Uint16Array%": "undefined" == typeof Uint16Array ? i : Uint16Array,
                    "%Uint32Array%": "undefined" == typeof Uint32Array ? i : Uint32Array,
                    "%URIError%": h,
                    "%WeakMap%": "undefined" == typeof WeakMap ? i : WeakMap,
                    "%WeakRef%": "undefined" == typeof WeakRef ? i : WeakRef,
                    "%WeakSet%": "undefined" == typeof WeakSet ? i : WeakSet,
                    "%Function.prototype.call%": M,
                    "%Function.prototype.apply%": k,
                    "%Object.defineProperty%": O,
                    "%Object.getPrototypeOf%": P,
                    "%Math.abs%": p,
                    "%Math.floor%": d,
                    "%Math.max%": y,
                    "%Math.min%": b,
                    "%Math.pow%": m,
                    "%Math.round%": v,
                    "%Math.sign%": g,
                    "%Reflect.getPrototypeOf%": x
                };
                if (A) try {
                    null.error;
                } catch (t) {
                    var R = A(A(t));
                    I["%Error.prototype%"] = R;
                }
                var N = function t(e) {
                    var r;
                    if ("%AsyncFunction%" === e) r = w("async function () {}");
                    else if ("%GeneratorFunction%" === e) r = w("function* () {}");
                    else if ("%AsyncGeneratorFunction%" === e) r = w("async function* () {}");
                    else if ("%AsyncGenerator%" === e) {
                        var n = t("%AsyncGeneratorFunction%");
                        n && (r = n.prototype);
                    } else if ("%AsyncIteratorPrototype%" === e) {
                        var i = t("%AsyncGenerator%");
                        i && A && (r = A(i.prototype));
                    }
                    return I[e] = r, r;
                }, D = {
                    __proto__: null,
                    "%ArrayBufferPrototype%": [
                        "ArrayBuffer",
                        "prototype"
                    ],
                    "%ArrayPrototype%": [
                        "Array",
                        "prototype"
                    ],
                    "%ArrayProto_entries%": [
                        "Array",
                        "prototype",
                        "entries"
                    ],
                    "%ArrayProto_forEach%": [
                        "Array",
                        "prototype",
                        "forEach"
                    ],
                    "%ArrayProto_keys%": [
                        "Array",
                        "prototype",
                        "keys"
                    ],
                    "%ArrayProto_values%": [
                        "Array",
                        "prototype",
                        "values"
                    ],
                    "%AsyncFunctionPrototype%": [
                        "AsyncFunction",
                        "prototype"
                    ],
                    "%AsyncGenerator%": [
                        "AsyncGeneratorFunction",
                        "prototype"
                    ],
                    "%AsyncGeneratorPrototype%": [
                        "AsyncGeneratorFunction",
                        "prototype",
                        "prototype"
                    ],
                    "%BooleanPrototype%": [
                        "Boolean",
                        "prototype"
                    ],
                    "%DataViewPrototype%": [
                        "DataView",
                        "prototype"
                    ],
                    "%DatePrototype%": [
                        "Date",
                        "prototype"
                    ],
                    "%ErrorPrototype%": [
                        "Error",
                        "prototype"
                    ],
                    "%EvalErrorPrototype%": [
                        "EvalError",
                        "prototype"
                    ],
                    "%Float32ArrayPrototype%": [
                        "Float32Array",
                        "prototype"
                    ],
                    "%Float64ArrayPrototype%": [
                        "Float64Array",
                        "prototype"
                    ],
                    "%FunctionPrototype%": [
                        "Function",
                        "prototype"
                    ],
                    "%Generator%": [
                        "GeneratorFunction",
                        "prototype"
                    ],
                    "%GeneratorPrototype%": [
                        "GeneratorFunction",
                        "prototype",
                        "prototype"
                    ],
                    "%Int8ArrayPrototype%": [
                        "Int8Array",
                        "prototype"
                    ],
                    "%Int16ArrayPrototype%": [
                        "Int16Array",
                        "prototype"
                    ],
                    "%Int32ArrayPrototype%": [
                        "Int32Array",
                        "prototype"
                    ],
                    "%JSONParse%": [
                        "JSON",
                        "parse"
                    ],
                    "%JSONStringify%": [
                        "JSON",
                        "stringify"
                    ],
                    "%MapPrototype%": [
                        "Map",
                        "prototype"
                    ],
                    "%NumberPrototype%": [
                        "Number",
                        "prototype"
                    ],
                    "%ObjectPrototype%": [
                        "Object",
                        "prototype"
                    ],
                    "%ObjProto_toString%": [
                        "Object",
                        "prototype",
                        "toString"
                    ],
                    "%ObjProto_valueOf%": [
                        "Object",
                        "prototype",
                        "valueOf"
                    ],
                    "%PromisePrototype%": [
                        "Promise",
                        "prototype"
                    ],
                    "%PromiseProto_then%": [
                        "Promise",
                        "prototype",
                        "then"
                    ],
                    "%Promise_all%": [
                        "Promise",
                        "all"
                    ],
                    "%Promise_reject%": [
                        "Promise",
                        "reject"
                    ],
                    "%Promise_resolve%": [
                        "Promise",
                        "resolve"
                    ],
                    "%RangeErrorPrototype%": [
                        "RangeError",
                        "prototype"
                    ],
                    "%ReferenceErrorPrototype%": [
                        "ReferenceError",
                        "prototype"
                    ],
                    "%RegExpPrototype%": [
                        "RegExp",
                        "prototype"
                    ],
                    "%SetPrototype%": [
                        "Set",
                        "prototype"
                    ],
                    "%SharedArrayBufferPrototype%": [
                        "SharedArrayBuffer",
                        "prototype"
                    ],
                    "%StringPrototype%": [
                        "String",
                        "prototype"
                    ],
                    "%SymbolPrototype%": [
                        "Symbol",
                        "prototype"
                    ],
                    "%SyntaxErrorPrototype%": [
                        "SyntaxError",
                        "prototype"
                    ],
                    "%TypedArrayPrototype%": [
                        "TypedArray",
                        "prototype"
                    ],
                    "%TypeErrorPrototype%": [
                        "TypeError",
                        "prototype"
                    ],
                    "%Uint8ArrayPrototype%": [
                        "Uint8Array",
                        "prototype"
                    ],
                    "%Uint8ClampedArrayPrototype%": [
                        "Uint8ClampedArray",
                        "prototype"
                    ],
                    "%Uint16ArrayPrototype%": [
                        "Uint16Array",
                        "prototype"
                    ],
                    "%Uint32ArrayPrototype%": [
                        "Uint32Array",
                        "prototype"
                    ],
                    "%URIErrorPrototype%": [
                        "URIError",
                        "prototype"
                    ],
                    "%WeakMapPrototype%": [
                        "WeakMap",
                        "prototype"
                    ],
                    "%WeakSetPrototype%": [
                        "WeakSet",
                        "prototype"
                    ]
                }, L = r(2354), C = r(5994), U = L.call(M, Array.prototype.concat), q = L.call(k, Array.prototype.splice), F = L.call(M, String.prototype.replace), V = L.call(M, String.prototype.slice), z = L.call(M, RegExp.prototype.exec), K = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g, H = /\\(\\)?/g, W = function(t, e) {
                    var r, n = t;
                    if (C(D, n) && (n = "%" + (r = D[n])[0] + "%"), C(I, n)) {
                        var i = I[n];
                        if (i === T && (i = N(n)), void 0 === i && !e) throw new l("intrinsic " + t + " exists, but is not available. Please file an issue!");
                        return {
                            alias: r,
                            name: n,
                            value: i
                        };
                    }
                    throw new f("intrinsic " + t + " does not exist!");
                };
                t.exports = function(t, e) {
                    if ("string" != typeof t || 0 === t.length) throw new l("intrinsic name must be a non-empty string");
                    if (arguments.length > 1 && "boolean" != typeof e) throw new l('"allowMissing" argument must be a boolean');
                    if (null === z(/^%?[^%]*%?$/, t)) throw new f("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
                    var r = function(t) {
                        var e = V(t, 0, 1), r = V(t, -1);
                        if ("%" === e && "%" !== r) throw new f("invalid intrinsic syntax, expected closing `%`");
                        if ("%" === r && "%" !== e) throw new f("invalid intrinsic syntax, expected opening `%`");
                        var n = [];
                        return F(t, K, function(t, e, r, i) {
                            n[n.length] = r ? F(i, H, "$1") : e || t;
                        }), n;
                    }(t), n = r.length > 0 ? r[0] : "", i = W("%" + n + "%", e), o = i.name, a = i.value, s = !1, u = i.alias;
                    u && (n = u[0], q(r, U([
                        0,
                        1
                    ], u)));
                    for(var c = 1, h = !0; c < r.length; c += 1){
                        var p = r[c], d = V(p, 0, 1), y = V(p, -1);
                        if (('"' === d || "'" === d || "`" === d || '"' === y || "'" === y || "`" === y) && d !== y) throw new f("property names with quotes must have matching quotes");
                        if ("constructor" !== p && h || (s = !0), C(I, o = "%" + (n += "." + p) + "%")) a = I[o];
                        else if (null != a) {
                            if (!(p in a)) {
                                if (!e) throw new l("base intrinsic for " + t + " exists, but the property is not available.");
                                return;
                            }
                            if (S && c + 1 >= r.length) {
                                var b = S(a, p);
                                a = (h = !!b) && "get" in b && !("originalValue" in b.get) ? b.get : a[p];
                            } else h = C(a, p), a = a[p];
                            h && !s && (I[o] = a);
                        }
                    }
                    return a;
                };
            },
            5825: (t, e, r)=>{
                "use strict";
                var n = r(8093);
                t.exports = n.getPrototypeOf || null;
            },
            2403: (t)=>{
                "use strict";
                t.exports = "undefined" != typeof Reflect && Reflect.getPrototypeOf || null;
            },
            209: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                var i = r(2403), o = r(5825), a = r(8964);
                t.exports = i ? function(t) {
                    return i(t);
                } : o ? function(t) {
                    if (!t || "object" !== n(t) && "function" != typeof t) throw new TypeError("getProto: not an object");
                    return o(t);
                } : a ? function(t) {
                    return a(t);
                } : null;
            },
            5807: (t)=>{
                "use strict";
                t.exports = Object.getOwnPropertyDescriptor;
            },
            1464: (t, e, r)=>{
                "use strict";
                var n = r(5807);
                if (n) try {
                    n([], "length");
                } catch (t) {
                    n = null;
                }
                t.exports = n;
            },
            3191: (t, e, r)=>{
                "use strict";
                var n = r(988), i = function() {
                    return !!n;
                };
                i.hasArrayLengthDefineBug = function() {
                    if (!n) return null;
                    try {
                        return 1 !== n([], "length", {
                            value: 1
                        }).length;
                    } catch (t) {
                        return !0;
                    }
                }, t.exports = i;
            },
            5510: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                var i = "undefined" != typeof Symbol && Symbol, o = r(5484);
                t.exports = function() {
                    return "function" == typeof i && "function" == typeof Symbol && "symbol" === n(i("foo")) && "symbol" === n(Symbol("bar")) && o();
                };
            },
            5484: (t)=>{
                "use strict";
                function e(t) {
                    return e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, e(t);
                }
                t.exports = function() {
                    if ("function" != typeof Symbol || "function" != typeof Object.getOwnPropertySymbols) return !1;
                    if ("symbol" === e(Symbol.iterator)) return !0;
                    var t = {}, r = Symbol("test"), n = Object(r);
                    if ("string" == typeof r) return !1;
                    if ("[object Symbol]" !== Object.prototype.toString.call(r)) return !1;
                    if ("[object Symbol]" !== Object.prototype.toString.call(n)) return !1;
                    for(var i in t[r] = 42, t)return !1;
                    if ("function" == typeof Object.keys && 0 !== Object.keys(t).length) return !1;
                    if ("function" == typeof Object.getOwnPropertyNames && 0 !== Object.getOwnPropertyNames(t).length) return !1;
                    var o = Object.getOwnPropertySymbols(t);
                    if (1 !== o.length || o[0] !== r) return !1;
                    if (!Object.prototype.propertyIsEnumerable.call(t, r)) return !1;
                    if ("function" == typeof Object.getOwnPropertyDescriptor) {
                        var a = Object.getOwnPropertyDescriptor(t, r);
                        if (42 !== a.value || !0 !== a.enumerable) return !1;
                    }
                    return !0;
                };
            },
            953: (t, e, r)=>{
                "use strict";
                var n = r(5484);
                t.exports = function() {
                    return n() && !!Symbol.toStringTag;
                };
            },
            6936: (t, e, r)=>{
                "use strict";
                var n = r(9732).Buffer, i = r(7775).Transform;
                function o(t) {
                    i.call(this), this._block = n.allocUnsafe(t), this._blockSize = t, this._blockOffset = 0, this._length = [
                        0,
                        0,
                        0,
                        0
                    ], this._finalized = !1;
                }
                r(1679)(o, i), o.prototype._transform = function(t, e, r) {
                    var n = null;
                    try {
                        this.update(t, e);
                    } catch (t) {
                        n = t;
                    }
                    r(n);
                }, o.prototype._flush = function(t) {
                    var e = null;
                    try {
                        this.push(this.digest());
                    } catch (t) {
                        e = t;
                    }
                    t(e);
                };
                var a = "undefined" != typeof Uint8Array, s = "undefined" != typeof ArrayBuffer && "undefined" != typeof Uint8Array && ArrayBuffer.isView && (n.prototype instanceof Uint8Array || n.TYPED_ARRAY_SUPPORT);
                o.prototype.update = function(t, e) {
                    if (this._finalized) throw new Error("Digest already called");
                    t = function(t, e) {
                        if (t instanceof n) return t;
                        if ("string" == typeof t) return n.from(t, e);
                        if (s && ArrayBuffer.isView(t)) {
                            if (0 === t.byteLength) return n.alloc(0);
                            var r = n.from(t.buffer, t.byteOffset, t.byteLength);
                            if (r.byteLength === t.byteLength) return r;
                        }
                        if (a && t instanceof Uint8Array) return n.from(t);
                        if (n.isBuffer(t) && t.constructor && "function" == typeof t.constructor.isBuffer && t.constructor.isBuffer(t)) return n.from(t);
                        throw new TypeError('The "data" argument must be of type string or an instance of Buffer, TypedArray, or DataView.');
                    }(t, e);
                    for(var r = this._block, i = 0; this._blockOffset + t.length - i >= this._blockSize;){
                        for(var o = this._blockOffset; o < this._blockSize;)r[o++] = t[i++];
                        this._update(), this._blockOffset = 0;
                    }
                    for(; i < t.length;)r[this._blockOffset++] = t[i++];
                    for(var u = 0, c = 8 * t.length; c > 0; ++u)this._length[u] += c, (c = this._length[u] / 4294967296 | 0) > 0 && (this._length[u] -= 4294967296 * c);
                    return this;
                }, o.prototype._update = function() {
                    throw new Error("_update is not implemented");
                }, o.prototype.digest = function(t) {
                    if (this._finalized) throw new Error("Digest already called");
                    this._finalized = !0;
                    var e = this._digest();
                    void 0 !== t && (e = e.toString(t)), this._block.fill(0), this._blockOffset = 0;
                    for(var r = 0; r < 4; ++r)this._length[r] = 0;
                    return e;
                }, o.prototype._digest = function() {
                    throw new Error("_digest is not implemented");
                }, t.exports = o;
            },
            2859: (t, e, r)=>{
                var n = e;
                n.utils = r(4685), n.common = r(7695), n.sha = r(690), n.ripemd = r(601), n.hmac = r(9313), n.sha1 = n.sha.sha1, n.sha256 = n.sha.sha256, n.sha224 = n.sha.sha224, n.sha384 = n.sha.sha384, n.sha512 = n.sha.sha512, n.ripemd160 = n.ripemd.ripemd160;
            },
            7695: (t, e, r)=>{
                "use strict";
                var n = r(4685), i = r(3528);
                function o() {
                    this.pending = null, this.pendingTotal = 0, this.blockSize = this.constructor.blockSize, this.outSize = this.constructor.outSize, this.hmacStrength = this.constructor.hmacStrength, this.padLength = this.constructor.padLength / 8, this.endian = "big", this._delta8 = this.blockSize / 8, this._delta32 = this.blockSize / 32;
                }
                e.BlockHash = o, o.prototype.update = function(t, e) {
                    if (t = n.toArray(t, e), this.pending ? this.pending = this.pending.concat(t) : this.pending = t, this.pendingTotal += t.length, this.pending.length >= this._delta8) {
                        var r = (t = this.pending).length % this._delta8;
                        this.pending = t.slice(t.length - r, t.length), 0 === this.pending.length && (this.pending = null), t = n.join32(t, 0, t.length - r, this.endian);
                        for(var i = 0; i < t.length; i += this._delta32)this._update(t, i, i + this._delta32);
                    }
                    return this;
                }, o.prototype.digest = function(t) {
                    return this.update(this._pad()), i(null === this.pending), this._digest(t);
                }, o.prototype._pad = function() {
                    var t = this.pendingTotal, e = this._delta8, r = e - (t + this.padLength) % e, n = new Array(r + this.padLength);
                    n[0] = 128;
                    for(var i = 1; i < r; i++)n[i] = 0;
                    if (t <<= 3, "big" === this.endian) {
                        for(var o = 8; o < this.padLength; o++)n[i++] = 0;
                        n[i++] = 0, n[i++] = 0, n[i++] = 0, n[i++] = 0, n[i++] = t >>> 24 & 255, n[i++] = t >>> 16 & 255, n[i++] = t >>> 8 & 255, n[i++] = 255 & t;
                    } else for(n[i++] = 255 & t, n[i++] = t >>> 8 & 255, n[i++] = t >>> 16 & 255, n[i++] = t >>> 24 & 255, n[i++] = 0, n[i++] = 0, n[i++] = 0, n[i++] = 0, o = 8; o < this.padLength; o++)n[i++] = 0;
                    return n;
                };
            },
            9313: (t, e, r)=>{
                "use strict";
                var n = r(4685), i = r(3528);
                function o(t, e, r) {
                    if (!(this instanceof o)) return new o(t, e, r);
                    this.Hash = t, this.blockSize = t.blockSize / 8, this.outSize = t.outSize / 8, this.inner = null, this.outer = null, this._init(n.toArray(e, r));
                }
                t.exports = o, o.prototype._init = function(t) {
                    t.length > this.blockSize && (t = (new this.Hash).update(t).digest()), i(t.length <= this.blockSize);
                    for(var e = t.length; e < this.blockSize; e++)t.push(0);
                    for(e = 0; e < t.length; e++)t[e] ^= 54;
                    for(this.inner = (new this.Hash).update(t), e = 0; e < t.length; e++)t[e] ^= 106;
                    this.outer = (new this.Hash).update(t);
                }, o.prototype.update = function(t, e) {
                    return this.inner.update(t, e), this;
                }, o.prototype.digest = function(t) {
                    return this.outer.update(this.inner.digest()), this.outer.digest(t);
                };
            },
            601: (t, e, r)=>{
                "use strict";
                var n = r(4685), i = r(7695), o = n.rotl32, a = n.sum32, s = n.sum32_3, u = n.sum32_4, c = i.BlockHash;
                function f() {
                    if (!(this instanceof f)) return new f;
                    c.call(this), this.h = [
                        1732584193,
                        4023233417,
                        2562383102,
                        271733878,
                        3285377520
                    ], this.endian = "little";
                }
                function l(t, e, r, n) {
                    return t <= 15 ? e ^ r ^ n : t <= 31 ? e & r | ~e & n : t <= 47 ? (e | ~r) ^ n : t <= 63 ? e & n | r & ~n : e ^ (r | ~n);
                }
                function h(t) {
                    return t <= 15 ? 0 : t <= 31 ? 1518500249 : t <= 47 ? 1859775393 : t <= 63 ? 2400959708 : 2840853838;
                }
                function p(t) {
                    return t <= 15 ? 1352829926 : t <= 31 ? 1548603684 : t <= 47 ? 1836072691 : t <= 63 ? 2053994217 : 0;
                }
                n.inherits(f, c), e.ripemd160 = f, f.blockSize = 512, f.outSize = 160, f.hmacStrength = 192, f.padLength = 64, f.prototype._update = function(t, e) {
                    for(var r = this.h[0], n = this.h[1], i = this.h[2], c = this.h[3], f = this.h[4], v = r, g = n, _ = i, w = c, S = f, O = 0; O < 80; O++){
                        var j = a(o(u(r, l(O, n, i, c), t[d[O] + e], h(O)), b[O]), f);
                        r = f, f = c, c = o(i, 10), i = n, n = j, j = a(o(u(v, l(79 - O, g, _, w), t[y[O] + e], p(O)), m[O]), S), v = S, S = w, w = o(_, 10), _ = g, g = j;
                    }
                    j = s(this.h[1], i, w), this.h[1] = s(this.h[2], c, S), this.h[2] = s(this.h[3], f, v), this.h[3] = s(this.h[4], r, g), this.h[4] = s(this.h[0], n, _), this.h[0] = j;
                }, f.prototype._digest = function(t) {
                    return "hex" === t ? n.toHex32(this.h, "little") : n.split32(this.h, "little");
                };
                var d = [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    7,
                    4,
                    13,
                    1,
                    10,
                    6,
                    15,
                    3,
                    12,
                    0,
                    9,
                    5,
                    2,
                    14,
                    11,
                    8,
                    3,
                    10,
                    14,
                    4,
                    9,
                    15,
                    8,
                    1,
                    2,
                    7,
                    0,
                    6,
                    13,
                    11,
                    5,
                    12,
                    1,
                    9,
                    11,
                    10,
                    0,
                    8,
                    12,
                    4,
                    13,
                    3,
                    7,
                    15,
                    14,
                    5,
                    6,
                    2,
                    4,
                    0,
                    5,
                    9,
                    7,
                    12,
                    2,
                    10,
                    14,
                    1,
                    3,
                    8,
                    11,
                    6,
                    15,
                    13
                ], y = [
                    5,
                    14,
                    7,
                    0,
                    9,
                    2,
                    11,
                    4,
                    13,
                    6,
                    15,
                    8,
                    1,
                    10,
                    3,
                    12,
                    6,
                    11,
                    3,
                    7,
                    0,
                    13,
                    5,
                    10,
                    14,
                    15,
                    8,
                    12,
                    4,
                    9,
                    1,
                    2,
                    15,
                    5,
                    1,
                    3,
                    7,
                    14,
                    6,
                    9,
                    11,
                    8,
                    12,
                    2,
                    10,
                    0,
                    4,
                    13,
                    8,
                    6,
                    4,
                    1,
                    3,
                    11,
                    15,
                    0,
                    5,
                    12,
                    2,
                    13,
                    9,
                    7,
                    10,
                    14,
                    12,
                    15,
                    10,
                    4,
                    1,
                    5,
                    8,
                    7,
                    6,
                    2,
                    13,
                    14,
                    0,
                    3,
                    9,
                    11
                ], b = [
                    11,
                    14,
                    15,
                    12,
                    5,
                    8,
                    7,
                    9,
                    11,
                    13,
                    14,
                    15,
                    6,
                    7,
                    9,
                    8,
                    7,
                    6,
                    8,
                    13,
                    11,
                    9,
                    7,
                    15,
                    7,
                    12,
                    15,
                    9,
                    11,
                    7,
                    13,
                    12,
                    11,
                    13,
                    6,
                    7,
                    14,
                    9,
                    13,
                    15,
                    14,
                    8,
                    13,
                    6,
                    5,
                    12,
                    7,
                    5,
                    11,
                    12,
                    14,
                    15,
                    14,
                    15,
                    9,
                    8,
                    9,
                    14,
                    5,
                    6,
                    8,
                    6,
                    5,
                    12,
                    9,
                    15,
                    5,
                    11,
                    6,
                    8,
                    13,
                    12,
                    5,
                    12,
                    13,
                    14,
                    11,
                    8,
                    5,
                    6
                ], m = [
                    8,
                    9,
                    9,
                    11,
                    13,
                    15,
                    15,
                    5,
                    7,
                    7,
                    8,
                    11,
                    14,
                    14,
                    12,
                    6,
                    9,
                    13,
                    15,
                    7,
                    12,
                    8,
                    9,
                    11,
                    7,
                    7,
                    12,
                    7,
                    6,
                    15,
                    13,
                    11,
                    9,
                    7,
                    15,
                    11,
                    8,
                    6,
                    6,
                    14,
                    12,
                    13,
                    5,
                    14,
                    13,
                    13,
                    7,
                    5,
                    15,
                    5,
                    8,
                    11,
                    14,
                    14,
                    6,
                    14,
                    6,
                    9,
                    12,
                    9,
                    12,
                    5,
                    15,
                    8,
                    8,
                    5,
                    12,
                    9,
                    12,
                    5,
                    14,
                    6,
                    8,
                    13,
                    6,
                    5,
                    15,
                    13,
                    11,
                    11
                ];
            },
            690: (t, e, r)=>{
                "use strict";
                e.sha1 = r(4042), e.sha224 = r(3329), e.sha256 = r(2344), e.sha384 = r(3420), e.sha512 = r(6749);
            },
            4042: (t, e, r)=>{
                "use strict";
                var n = r(4685), i = r(7695), o = r(4104), a = n.rotl32, s = n.sum32, u = n.sum32_5, c = o.ft_1, f = i.BlockHash, l = [
                    1518500249,
                    1859775393,
                    2400959708,
                    3395469782
                ];
                function h() {
                    if (!(this instanceof h)) return new h;
                    f.call(this), this.h = [
                        1732584193,
                        4023233417,
                        2562383102,
                        271733878,
                        3285377520
                    ], this.W = new Array(80);
                }
                n.inherits(h, f), t.exports = h, h.blockSize = 512, h.outSize = 160, h.hmacStrength = 80, h.padLength = 64, h.prototype._update = function(t, e) {
                    for(var r = this.W, n = 0; n < 16; n++)r[n] = t[e + n];
                    for(; n < r.length; n++)r[n] = a(r[n - 3] ^ r[n - 8] ^ r[n - 14] ^ r[n - 16], 1);
                    var i = this.h[0], o = this.h[1], f = this.h[2], h = this.h[3], p = this.h[4];
                    for(n = 0; n < r.length; n++){
                        var d = ~~(n / 20), y = u(a(i, 5), c(d, o, f, h), p, r[n], l[d]);
                        p = h, h = f, f = a(o, 30), o = i, i = y;
                    }
                    this.h[0] = s(this.h[0], i), this.h[1] = s(this.h[1], o), this.h[2] = s(this.h[2], f), this.h[3] = s(this.h[3], h), this.h[4] = s(this.h[4], p);
                }, h.prototype._digest = function(t) {
                    return "hex" === t ? n.toHex32(this.h, "big") : n.split32(this.h, "big");
                };
            },
            3329: (t, e, r)=>{
                "use strict";
                var n = r(4685), i = r(2344);
                function o() {
                    if (!(this instanceof o)) return new o;
                    i.call(this), this.h = [
                        3238371032,
                        914150663,
                        812702999,
                        4144912697,
                        4290775857,
                        1750603025,
                        1694076839,
                        3204075428
                    ];
                }
                n.inherits(o, i), t.exports = o, o.blockSize = 512, o.outSize = 224, o.hmacStrength = 192, o.padLength = 64, o.prototype._digest = function(t) {
                    return "hex" === t ? n.toHex32(this.h.slice(0, 7), "big") : n.split32(this.h.slice(0, 7), "big");
                };
            },
            2344: (t, e, r)=>{
                "use strict";
                var n = r(4685), i = r(7695), o = r(4104), a = r(3528), s = n.sum32, u = n.sum32_4, c = n.sum32_5, f = o.ch32, l = o.maj32, h = o.s0_256, p = o.s1_256, d = o.g0_256, y = o.g1_256, b = i.BlockHash, m = [
                    1116352408,
                    1899447441,
                    3049323471,
                    3921009573,
                    961987163,
                    1508970993,
                    2453635748,
                    2870763221,
                    3624381080,
                    310598401,
                    607225278,
                    1426881987,
                    1925078388,
                    2162078206,
                    2614888103,
                    3248222580,
                    3835390401,
                    4022224774,
                    264347078,
                    604807628,
                    770255983,
                    1249150122,
                    1555081692,
                    1996064986,
                    2554220882,
                    2821834349,
                    2952996808,
                    3210313671,
                    3336571891,
                    3584528711,
                    113926993,
                    338241895,
                    666307205,
                    773529912,
                    1294757372,
                    1396182291,
                    1695183700,
                    1986661051,
                    2177026350,
                    2456956037,
                    2730485921,
                    2820302411,
                    3259730800,
                    3345764771,
                    3516065817,
                    3600352804,
                    4094571909,
                    275423344,
                    430227734,
                    506948616,
                    659060556,
                    883997877,
                    958139571,
                    1322822218,
                    1537002063,
                    1747873779,
                    1955562222,
                    2024104815,
                    2227730452,
                    2361852424,
                    2428436474,
                    2756734187,
                    3204031479,
                    3329325298
                ];
                function v() {
                    if (!(this instanceof v)) return new v;
                    b.call(this), this.h = [
                        1779033703,
                        3144134277,
                        1013904242,
                        2773480762,
                        1359893119,
                        2600822924,
                        528734635,
                        1541459225
                    ], this.k = m, this.W = new Array(64);
                }
                n.inherits(v, b), t.exports = v, v.blockSize = 512, v.outSize = 256, v.hmacStrength = 192, v.padLength = 64, v.prototype._update = function(t, e) {
                    for(var r = this.W, n = 0; n < 16; n++)r[n] = t[e + n];
                    for(; n < r.length; n++)r[n] = u(y(r[n - 2]), r[n - 7], d(r[n - 15]), r[n - 16]);
                    var i = this.h[0], o = this.h[1], b = this.h[2], m = this.h[3], v = this.h[4], g = this.h[5], _ = this.h[6], w = this.h[7];
                    for(a(this.k.length === r.length), n = 0; n < r.length; n++){
                        var S = c(w, p(v), f(v, g, _), this.k[n], r[n]), O = s(h(i), l(i, o, b));
                        w = _, _ = g, g = v, v = s(m, S), m = b, b = o, o = i, i = s(S, O);
                    }
                    this.h[0] = s(this.h[0], i), this.h[1] = s(this.h[1], o), this.h[2] = s(this.h[2], b), this.h[3] = s(this.h[3], m), this.h[4] = s(this.h[4], v), this.h[5] = s(this.h[5], g), this.h[6] = s(this.h[6], _), this.h[7] = s(this.h[7], w);
                }, v.prototype._digest = function(t) {
                    return "hex" === t ? n.toHex32(this.h, "big") : n.split32(this.h, "big");
                };
            },
            3420: (t, e, r)=>{
                "use strict";
                var n = r(4685), i = r(6749);
                function o() {
                    if (!(this instanceof o)) return new o;
                    i.call(this), this.h = [
                        3418070365,
                        3238371032,
                        1654270250,
                        914150663,
                        2438529370,
                        812702999,
                        355462360,
                        4144912697,
                        1731405415,
                        4290775857,
                        2394180231,
                        1750603025,
                        3675008525,
                        1694076839,
                        1203062813,
                        3204075428
                    ];
                }
                n.inherits(o, i), t.exports = o, o.blockSize = 1024, o.outSize = 384, o.hmacStrength = 192, o.padLength = 128, o.prototype._digest = function(t) {
                    return "hex" === t ? n.toHex32(this.h.slice(0, 12), "big") : n.split32(this.h.slice(0, 12), "big");
                };
            },
            6749: (t, e, r)=>{
                "use strict";
                var n = r(4685), i = r(7695), o = r(3528), a = n.rotr64_hi, s = n.rotr64_lo, u = n.shr64_hi, c = n.shr64_lo, f = n.sum64, l = n.sum64_hi, h = n.sum64_lo, p = n.sum64_4_hi, d = n.sum64_4_lo, y = n.sum64_5_hi, b = n.sum64_5_lo, m = i.BlockHash, v = [
                    1116352408,
                    3609767458,
                    1899447441,
                    602891725,
                    3049323471,
                    3964484399,
                    3921009573,
                    2173295548,
                    961987163,
                    4081628472,
                    1508970993,
                    3053834265,
                    2453635748,
                    2937671579,
                    2870763221,
                    3664609560,
                    3624381080,
                    2734883394,
                    310598401,
                    1164996542,
                    607225278,
                    1323610764,
                    1426881987,
                    3590304994,
                    1925078388,
                    4068182383,
                    2162078206,
                    991336113,
                    2614888103,
                    633803317,
                    3248222580,
                    3479774868,
                    3835390401,
                    2666613458,
                    4022224774,
                    944711139,
                    264347078,
                    2341262773,
                    604807628,
                    2007800933,
                    770255983,
                    1495990901,
                    1249150122,
                    1856431235,
                    1555081692,
                    3175218132,
                    1996064986,
                    2198950837,
                    2554220882,
                    3999719339,
                    2821834349,
                    766784016,
                    2952996808,
                    2566594879,
                    3210313671,
                    3203337956,
                    3336571891,
                    1034457026,
                    3584528711,
                    2466948901,
                    113926993,
                    3758326383,
                    338241895,
                    168717936,
                    666307205,
                    1188179964,
                    773529912,
                    1546045734,
                    1294757372,
                    1522805485,
                    1396182291,
                    2643833823,
                    1695183700,
                    2343527390,
                    1986661051,
                    1014477480,
                    2177026350,
                    1206759142,
                    2456956037,
                    344077627,
                    2730485921,
                    1290863460,
                    2820302411,
                    3158454273,
                    3259730800,
                    3505952657,
                    3345764771,
                    106217008,
                    3516065817,
                    3606008344,
                    3600352804,
                    1432725776,
                    4094571909,
                    1467031594,
                    275423344,
                    851169720,
                    430227734,
                    3100823752,
                    506948616,
                    1363258195,
                    659060556,
                    3750685593,
                    883997877,
                    3785050280,
                    958139571,
                    3318307427,
                    1322822218,
                    3812723403,
                    1537002063,
                    2003034995,
                    1747873779,
                    3602036899,
                    1955562222,
                    1575990012,
                    2024104815,
                    1125592928,
                    2227730452,
                    2716904306,
                    2361852424,
                    442776044,
                    2428436474,
                    593698344,
                    2756734187,
                    3733110249,
                    3204031479,
                    2999351573,
                    3329325298,
                    3815920427,
                    3391569614,
                    3928383900,
                    3515267271,
                    566280711,
                    3940187606,
                    3454069534,
                    4118630271,
                    4000239992,
                    116418474,
                    1914138554,
                    174292421,
                    2731055270,
                    289380356,
                    3203993006,
                    460393269,
                    320620315,
                    685471733,
                    587496836,
                    852142971,
                    1086792851,
                    1017036298,
                    365543100,
                    1126000580,
                    2618297676,
                    1288033470,
                    3409855158,
                    1501505948,
                    4234509866,
                    1607167915,
                    987167468,
                    1816402316,
                    1246189591
                ];
                function g() {
                    if (!(this instanceof g)) return new g;
                    m.call(this), this.h = [
                        1779033703,
                        4089235720,
                        3144134277,
                        2227873595,
                        1013904242,
                        4271175723,
                        2773480762,
                        1595750129,
                        1359893119,
                        2917565137,
                        2600822924,
                        725511199,
                        528734635,
                        4215389547,
                        1541459225,
                        327033209
                    ], this.k = v, this.W = new Array(160);
                }
                function _(t, e, r, n, i) {
                    var o = t & r ^ ~t & i;
                    return o < 0 && (o += 4294967296), o;
                }
                function w(t, e, r, n, i, o) {
                    var a = e & n ^ ~e & o;
                    return a < 0 && (a += 4294967296), a;
                }
                function S(t, e, r, n, i) {
                    var o = t & r ^ t & i ^ r & i;
                    return o < 0 && (o += 4294967296), o;
                }
                function O(t, e, r, n, i, o) {
                    var a = e & n ^ e & o ^ n & o;
                    return a < 0 && (a += 4294967296), a;
                }
                function j(t, e) {
                    var r = a(t, e, 28) ^ a(e, t, 2) ^ a(e, t, 7);
                    return r < 0 && (r += 4294967296), r;
                }
                function $(t, e) {
                    var r = s(t, e, 28) ^ s(e, t, 2) ^ s(e, t, 7);
                    return r < 0 && (r += 4294967296), r;
                }
                function E(t, e) {
                    var r = s(t, e, 14) ^ s(t, e, 18) ^ s(e, t, 9);
                    return r < 0 && (r += 4294967296), r;
                }
                function A(t, e) {
                    var r = a(t, e, 1) ^ a(t, e, 8) ^ u(t, e, 7);
                    return r < 0 && (r += 4294967296), r;
                }
                function P(t, e) {
                    var r = s(t, e, 1) ^ s(t, e, 8) ^ c(t, e, 7);
                    return r < 0 && (r += 4294967296), r;
                }
                function x(t, e) {
                    var r = s(t, e, 19) ^ s(e, t, 29) ^ c(t, e, 6);
                    return r < 0 && (r += 4294967296), r;
                }
                n.inherits(g, m), t.exports = g, g.blockSize = 1024, g.outSize = 512, g.hmacStrength = 192, g.padLength = 128, g.prototype._prepareBlock = function(t, e) {
                    for(var r = this.W, n = 0; n < 32; n++)r[n] = t[e + n];
                    for(; n < r.length; n += 2){
                        var i = (b = r[n - 4], m = r[n - 3], v = void 0, (v = a(b, m, 19) ^ a(m, b, 29) ^ u(b, m, 6)) < 0 && (v += 4294967296), v), o = x(r[n - 4], r[n - 3]), s = r[n - 14], c = r[n - 13], f = A(r[n - 30], r[n - 29]), l = P(r[n - 30], r[n - 29]), h = r[n - 32], y = r[n - 31];
                        r[n] = p(i, o, s, c, f, l, h, y), r[n + 1] = d(i, o, s, c, f, l, h, y);
                    }
                    var b, m, v;
                }, g.prototype._update = function(t, e) {
                    this._prepareBlock(t, e);
                    var r, n, i, s = this.W, u = this.h[0], c = this.h[1], p = this.h[2], d = this.h[3], m = this.h[4], v = this.h[5], g = this.h[6], A = this.h[7], P = this.h[8], x = this.h[9], k = this.h[10], M = this.h[11], T = this.h[12], B = this.h[13], I = this.h[14], R = this.h[15];
                    o(this.k.length === s.length);
                    for(var N = 0; N < s.length; N += 2){
                        var D = I, L = R, C = (i = void 0, (i = a(r = P, n = x, 14) ^ a(r, n, 18) ^ a(n, r, 9)) < 0 && (i += 4294967296), i), U = E(P, x), q = _(P, 0, k, 0, T), F = w(0, x, 0, M, 0, B), V = this.k[N], z = this.k[N + 1], K = s[N], H = s[N + 1], W = y(D, L, C, U, q, F, V, z, K, H), J = b(D, L, C, U, q, F, V, z, K, H);
                        D = j(u, c), L = $(u, c), C = S(u, 0, p, 0, m), U = O(0, c, 0, d, 0, v);
                        var G = l(D, L, C, U), Y = h(D, L, C, U);
                        I = T, R = B, T = k, B = M, k = P, M = x, P = l(g, A, W, J), x = h(A, A, W, J), g = m, A = v, m = p, v = d, p = u, d = c, u = l(W, J, G, Y), c = h(W, J, G, Y);
                    }
                    f(this.h, 0, u, c), f(this.h, 2, p, d), f(this.h, 4, m, v), f(this.h, 6, g, A), f(this.h, 8, P, x), f(this.h, 10, k, M), f(this.h, 12, T, B), f(this.h, 14, I, R);
                }, g.prototype._digest = function(t) {
                    return "hex" === t ? n.toHex32(this.h, "big") : n.split32(this.h, "big");
                };
            },
            4104: (t, e, r)=>{
                "use strict";
                var n = r(4685).rotr32;
                function i(t, e, r) {
                    return t & e ^ ~t & r;
                }
                function o(t, e, r) {
                    return t & e ^ t & r ^ e & r;
                }
                function a(t, e, r) {
                    return t ^ e ^ r;
                }
                e.ft_1 = function(t, e, r, n) {
                    return 0 === t ? i(e, r, n) : 1 === t || 3 === t ? a(e, r, n) : 2 === t ? o(e, r, n) : void 0;
                }, e.ch32 = i, e.maj32 = o, e.p32 = a, e.s0_256 = function(t) {
                    return n(t, 2) ^ n(t, 13) ^ n(t, 22);
                }, e.s1_256 = function(t) {
                    return n(t, 6) ^ n(t, 11) ^ n(t, 25);
                }, e.g0_256 = function(t) {
                    return n(t, 7) ^ n(t, 18) ^ t >>> 3;
                }, e.g1_256 = function(t) {
                    return n(t, 17) ^ n(t, 19) ^ t >>> 10;
                };
            },
            4685: (t, e, r)=>{
                "use strict";
                var n = r(3528), i = r(1679);
                function o(t, e) {
                    return 55296 == (64512 & t.charCodeAt(e)) && !(e < 0 || e + 1 >= t.length) && 56320 == (64512 & t.charCodeAt(e + 1));
                }
                function a(t) {
                    return (t >>> 24 | t >>> 8 & 65280 | t << 8 & 16711680 | (255 & t) << 24) >>> 0;
                }
                function s(t) {
                    return 1 === t.length ? "0" + t : t;
                }
                function u(t) {
                    return 7 === t.length ? "0" + t : 6 === t.length ? "00" + t : 5 === t.length ? "000" + t : 4 === t.length ? "0000" + t : 3 === t.length ? "00000" + t : 2 === t.length ? "000000" + t : 1 === t.length ? "0000000" + t : t;
                }
                e.inherits = i, e.toArray = function(t, e) {
                    if (Array.isArray(t)) return t.slice();
                    if (!t) return [];
                    var r = [];
                    if ("string" == typeof t) {
                        if (e) {
                            if ("hex" === e) for((t = t.replace(/[^a-z0-9]+/gi, "")).length % 2 != 0 && (t = "0" + t), i = 0; i < t.length; i += 2)r.push(parseInt(t[i] + t[i + 1], 16));
                        } else for(var n = 0, i = 0; i < t.length; i++){
                            var a = t.charCodeAt(i);
                            a < 128 ? r[n++] = a : a < 2048 ? (r[n++] = a >> 6 | 192, r[n++] = 63 & a | 128) : o(t, i) ? (a = 65536 + ((1023 & a) << 10) + (1023 & t.charCodeAt(++i)), r[n++] = a >> 18 | 240, r[n++] = a >> 12 & 63 | 128, r[n++] = a >> 6 & 63 | 128, r[n++] = 63 & a | 128) : (r[n++] = a >> 12 | 224, r[n++] = a >> 6 & 63 | 128, r[n++] = 63 & a | 128);
                        }
                    } else for(i = 0; i < t.length; i++)r[i] = 0 | t[i];
                    return r;
                }, e.toHex = function(t) {
                    for(var e = "", r = 0; r < t.length; r++)e += s(t[r].toString(16));
                    return e;
                }, e.htonl = a, e.toHex32 = function(t, e) {
                    for(var r = "", n = 0; n < t.length; n++){
                        var i = t[n];
                        "little" === e && (i = a(i)), r += u(i.toString(16));
                    }
                    return r;
                }, e.zero2 = s, e.zero8 = u, e.join32 = function(t, e, r, i) {
                    var o = r - e;
                    n(o % 4 == 0);
                    for(var a = new Array(o / 4), s = 0, u = e; s < a.length; s++, u += 4){
                        var c;
                        c = "big" === i ? t[u] << 24 | t[u + 1] << 16 | t[u + 2] << 8 | t[u + 3] : t[u + 3] << 24 | t[u + 2] << 16 | t[u + 1] << 8 | t[u], a[s] = c >>> 0;
                    }
                    return a;
                }, e.split32 = function(t, e) {
                    for(var r = new Array(4 * t.length), n = 0, i = 0; n < t.length; n++, i += 4){
                        var o = t[n];
                        "big" === e ? (r[i] = o >>> 24, r[i + 1] = o >>> 16 & 255, r[i + 2] = o >>> 8 & 255, r[i + 3] = 255 & o) : (r[i + 3] = o >>> 24, r[i + 2] = o >>> 16 & 255, r[i + 1] = o >>> 8 & 255, r[i] = 255 & o);
                    }
                    return r;
                }, e.rotr32 = function(t, e) {
                    return t >>> e | t << 32 - e;
                }, e.rotl32 = function(t, e) {
                    return t << e | t >>> 32 - e;
                }, e.sum32 = function(t, e) {
                    return t + e >>> 0;
                }, e.sum32_3 = function(t, e, r) {
                    return t + e + r >>> 0;
                }, e.sum32_4 = function(t, e, r, n) {
                    return t + e + r + n >>> 0;
                }, e.sum32_5 = function(t, e, r, n, i) {
                    return t + e + r + n + i >>> 0;
                }, e.sum64 = function(t, e, r, n) {
                    var i = t[e], o = n + t[e + 1] >>> 0, a = (o < n ? 1 : 0) + r + i;
                    t[e] = a >>> 0, t[e + 1] = o;
                }, e.sum64_hi = function(t, e, r, n) {
                    return (e + n >>> 0 < e ? 1 : 0) + t + r >>> 0;
                }, e.sum64_lo = function(t, e, r, n) {
                    return e + n >>> 0;
                }, e.sum64_4_hi = function(t, e, r, n, i, o, a, s) {
                    var u = 0, c = e;
                    return u += (c = c + n >>> 0) < e ? 1 : 0, u += (c = c + o >>> 0) < o ? 1 : 0, t + r + i + a + (u += (c = c + s >>> 0) < s ? 1 : 0) >>> 0;
                }, e.sum64_4_lo = function(t, e, r, n, i, o, a, s) {
                    return e + n + o + s >>> 0;
                }, e.sum64_5_hi = function(t, e, r, n, i, o, a, s, u, c) {
                    var f = 0, l = e;
                    return f += (l = l + n >>> 0) < e ? 1 : 0, f += (l = l + o >>> 0) < o ? 1 : 0, f += (l = l + s >>> 0) < s ? 1 : 0, t + r + i + a + u + (f += (l = l + c >>> 0) < c ? 1 : 0) >>> 0;
                }, e.sum64_5_lo = function(t, e, r, n, i, o, a, s, u, c) {
                    return e + n + o + s + c >>> 0;
                }, e.rotr64_hi = function(t, e, r) {
                    return (e << 32 - r | t >>> r) >>> 0;
                }, e.rotr64_lo = function(t, e, r) {
                    return (t << 32 - r | e >>> r) >>> 0;
                }, e.shr64_hi = function(t, e, r) {
                    return t >>> r;
                }, e.shr64_lo = function(t, e, r) {
                    return (t << 32 - r | e >>> r) >>> 0;
                };
            },
            5994: (t, e, r)=>{
                "use strict";
                var n = Function.prototype.call, i = Object.prototype.hasOwnProperty, o = r(2354);
                t.exports = o.call(n, i);
            },
            6934: (t, e, r)=>{
                "use strict";
                var n = r(2859), i = r(6706), o = r(3528);
                function a(t) {
                    if (!(this instanceof a)) return new a(t);
                    this.hash = t.hash, this.predResist = !!t.predResist, this.outLen = this.hash.outSize, this.minEntropy = t.minEntropy || this.hash.hmacStrength, this._reseed = null, this.reseedInterval = null, this.K = null, this.V = null;
                    var e = i.toArray(t.entropy, t.entropyEnc || "hex"), r = i.toArray(t.nonce, t.nonceEnc || "hex"), n = i.toArray(t.pers, t.persEnc || "hex");
                    o(e.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), this._init(e, r, n);
                }
                t.exports = a, a.prototype._init = function(t, e, r) {
                    var n = t.concat(e).concat(r);
                    this.K = new Array(this.outLen / 8), this.V = new Array(this.outLen / 8);
                    for(var i = 0; i < this.V.length; i++)this.K[i] = 0, this.V[i] = 1;
                    this._update(n), this._reseed = 1, this.reseedInterval = 281474976710656;
                }, a.prototype._hmac = function() {
                    return new n.hmac(this.hash, this.K);
                }, a.prototype._update = function(t) {
                    var e = this._hmac().update(this.V).update([
                        0
                    ]);
                    t && (e = e.update(t)), this.K = e.digest(), this.V = this._hmac().update(this.V).digest(), t && (this.K = this._hmac().update(this.V).update([
                        1
                    ]).update(t).digest(), this.V = this._hmac().update(this.V).digest());
                }, a.prototype.reseed = function(t, e, r, n) {
                    "string" != typeof e && (n = r, r = e, e = null), t = i.toArray(t, e), r = i.toArray(r, n), o(t.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), this._update(t.concat(r || [])), this._reseed = 1;
                }, a.prototype.generate = function(t, e, r, n) {
                    if (this._reseed > this.reseedInterval) throw new Error("Reseed is required");
                    "string" != typeof e && (n = r, r = e, e = null), r && (r = i.toArray(r, n || "hex"), this._update(r));
                    for(var o = []; o.length < t;)this.V = this._hmac().update(this.V).digest(), o = o.concat(this.V);
                    var a = o.slice(0, t);
                    return this._update(r), this._reseed++, i.encode(a, e);
                };
            },
            2486: (t, e)=>{
                e.read = function(t, e, r, n, i) {
                    var o, a, s = 8 * i - n - 1, u = (1 << s) - 1, c = u >> 1, f = -7, l = r ? i - 1 : 0, h = r ? -1 : 1, p = t[e + l];
                    for(l += h, o = p & (1 << -f) - 1, p >>= -f, f += s; f > 0; o = 256 * o + t[e + l], l += h, f -= 8);
                    for(a = o & (1 << -f) - 1, o >>= -f, f += n; f > 0; a = 256 * a + t[e + l], l += h, f -= 8);
                    if (0 === o) o = 1 - c;
                    else {
                        if (o === u) return a ? NaN : 1 / 0 * (p ? -1 : 1);
                        a += Math.pow(2, n), o -= c;
                    }
                    return (p ? -1 : 1) * a * Math.pow(2, o - n);
                }, e.write = function(t, e, r, n, i, o) {
                    var a, s, u, c = 8 * o - i - 1, f = (1 << c) - 1, l = f >> 1, h = 23 === i ? Math.pow(2, -24) - Math.pow(2, -77) : 0, p = n ? 0 : o - 1, d = n ? 1 : -1, y = e < 0 || 0 === e && 1 / e < 0 ? 1 : 0;
                    for(e = Math.abs(e), isNaN(e) || e === 1 / 0 ? (s = isNaN(e) ? 1 : 0, a = f) : (a = Math.floor(Math.log(e) / Math.LN2), e * (u = Math.pow(2, -a)) < 1 && (a--, u *= 2), (e += a + l >= 1 ? h / u : h * Math.pow(2, 1 - l)) * u >= 2 && (a++, u /= 2), a + l >= f ? (s = 0, a = f) : a + l >= 1 ? (s = (e * u - 1) * Math.pow(2, i), a += l) : (s = e * Math.pow(2, l - 1) * Math.pow(2, i), a = 0)); i >= 8; t[r + p] = 255 & s, p += d, s /= 256, i -= 8);
                    for(a = a << i | s, c += i; c > 0; t[r + p] = 255 & a, p += d, a /= 256, c -= 8);
                    t[r + p - d] |= 128 * y;
                };
            },
            1679: (t)=>{
                "function" == typeof Object.create ? t.exports = function(t, e) {
                    e && (t.super_ = e, t.prototype = Object.create(e.prototype, {
                        constructor: {
                            value: t,
                            enumerable: !1,
                            writable: !0,
                            configurable: !0
                        }
                    }));
                } : t.exports = function(t, e) {
                    if (e) {
                        t.super_ = e;
                        var r = function() {};
                        r.prototype = e.prototype, t.prototype = new r, t.prototype.constructor = t;
                    }
                };
            },
            5899: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                var i = r(953)(), o = r(3071)("Object.prototype.toString"), a = function(t) {
                    return !(i && t && "object" === n(t) && Symbol.toStringTag in t) && "[object Arguments]" === o(t);
                }, s = function(t) {
                    return !!a(t) || null !== t && "object" === n(t) && "length" in t && "number" == typeof t.length && t.length >= 0 && "[object Array]" !== o(t) && "callee" in t && "[object Function]" === o(t.callee);
                }, u = function() {
                    return a(arguments);
                }();
                a.isLegacyArguments = s, t.exports = u ? a : s;
            },
            9809: (t)=>{
                "use strict";
                function e(t) {
                    return e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, e(t);
                }
                var r, n, i = Function.prototype.toString, o = "object" === ("undefined" == typeof Reflect ? "undefined" : e(Reflect)) && null !== Reflect && Reflect.apply;
                if ("function" == typeof o && "function" == typeof Object.defineProperty) try {
                    r = Object.defineProperty({}, "length", {
                        get: function() {
                            throw n;
                        }
                    }), n = {}, o(function() {
                        throw 42;
                    }, null, r);
                } catch (t) {
                    t !== n && (o = null);
                }
                else o = null;
                var a = /^\s*class\b/, s = function(t) {
                    try {
                        var e = i.call(t);
                        return a.test(e);
                    } catch (t) {
                        return !1;
                    }
                }, u = function(t) {
                    try {
                        return !s(t) && (i.call(t), !0);
                    } catch (t) {
                        return !1;
                    }
                }, c = Object.prototype.toString, f = "function" == typeof Symbol && !!Symbol.toStringTag, l = !(0 in [
                    , 
                ]), h = function() {
                    return !1;
                };
                if ("object" === ("undefined" == typeof document ? "undefined" : e(document))) {
                    var p = document.all;
                    c.call(p) === c.call(document.all) && (h = function(t) {
                        if ((l || !t) && (void 0 === t || "object" === e(t))) try {
                            var r = c.call(t);
                            return ("[object HTMLAllCollection]" === r || "[object HTML document.all class]" === r || "[object HTMLCollection]" === r || "[object Object]" === r) && null == t("");
                        } catch (t) {}
                        return !1;
                    });
                }
                t.exports = o ? function(t) {
                    if (h(t)) return !0;
                    if (!t) return !1;
                    if ("function" != typeof t && "object" !== e(t)) return !1;
                    try {
                        o(t, null, r);
                    } catch (t) {
                        if (t !== n) return !1;
                    }
                    return !s(t) && u(t);
                } : function(t) {
                    if (h(t)) return !0;
                    if (!t) return !1;
                    if ("function" != typeof t && "object" !== e(t)) return !1;
                    if (f) return u(t);
                    if (s(t)) return !1;
                    var r = c.call(t);
                    return !("[object Function]" !== r && "[object GeneratorFunction]" !== r && !/^\[object HTML/.test(r)) && u(t);
                };
            },
            1905: (t, e, r)=>{
                "use strict";
                var n, i = r(3071), o = r(2724)(/^\s*(?:function)?\*/), a = r(953)(), s = r(209), u = i("Object.prototype.toString"), c = i("Function.prototype.toString");
                t.exports = function(t) {
                    if ("function" != typeof t) return !1;
                    if (o(c(t))) return !0;
                    if (!a) return "[object GeneratorFunction]" === u(t);
                    if (!s) return !1;
                    if (void 0 === n) {
                        var e = function() {
                            if (!a) return !1;
                            try {
                                return Function("return function*() {}")();
                            } catch (t) {}
                        }();
                        n = !!e && s(e);
                    }
                    return s(t) === n;
                };
            },
            118: (t)=>{
                "use strict";
                t.exports = function(t) {
                    return t != t;
                };
            },
            6062: (t, e, r)=>{
                "use strict";
                var n = r(9122), i = r(2273), o = r(118), a = r(4183), s = r(7878), u = n(a(), Number);
                i(u, {
                    getPolyfill: a,
                    implementation: o,
                    shim: s
                }), t.exports = u;
            },
            4183: (t, e, r)=>{
                "use strict";
                var n = r(118);
                t.exports = function() {
                    return Number.isNaN && Number.isNaN(NaN) && !Number.isNaN("a") ? Number.isNaN : n;
                };
            },
            7878: (t, e, r)=>{
                "use strict";
                var n = r(2273), i = r(4183);
                t.exports = function() {
                    var t = i();
                    return n(Number, {
                        isNaN: t
                    }, {
                        isNaN: function() {
                            return Number.isNaN !== t;
                        }
                    }), t;
                };
            },
            9344: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                var i, o = r(3071), a = r(953)(), s = r(5994), u = r(1464);
                if (a) {
                    var c = o("RegExp.prototype.exec"), f = {}, l = function() {
                        throw f;
                    }, h = {
                        toString: l,
                        valueOf: l
                    };
                    "symbol" === n(Symbol.toPrimitive) && (h[Symbol.toPrimitive] = l), i = function(t) {
                        if (!t || "object" !== n(t)) return !1;
                        var e = u(t, "lastIndex");
                        if (!e || !s(e, "value")) return !1;
                        try {
                            c(t, h);
                        } catch (t) {
                            return t === f;
                        }
                    };
                } else {
                    var p = o("Object.prototype.toString");
                    i = function(t) {
                        return !(!t || "object" !== n(t) && "function" != typeof t) && "[object RegExp]" === p(t);
                    };
                }
                t.exports = i;
            },
            7911: (t, e, r)=>{
                "use strict";
                var n = r(9834);
                t.exports = function(t) {
                    return !!n(t);
                };
            },
            5455: (t)=>{
                var e = {}.toString;
                t.exports = Array.isArray || function(t) {
                    return "[object Array]" == e.call(t);
                };
            },
            8297: (t)=>{
                "use strict";
                function e(t, e) {
                    var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                    if (!r) {
                        if (Array.isArray(t) || (r = n(t)) || e && t && "number" == typeof t.length) {
                            r && (t = r);
                            var i = 0, o = function() {};
                            return {
                                s: o,
                                n: function() {
                                    return i >= t.length ? {
                                        done: !0
                                    } : {
                                        done: !1,
                                        value: t[i++]
                                    };
                                },
                                e: function(t) {
                                    throw t;
                                },
                                f: o
                            };
                        }
                        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    }
                    var a, s = !0, u = !1;
                    return {
                        s: function() {
                            r = r.call(t);
                        },
                        n: function() {
                            var t = r.next();
                            return s = t.done, t;
                        },
                        e: function(t) {
                            u = !0, a = t;
                        },
                        f: function() {
                            try {
                                s || null == r.return || r.return();
                            } finally{
                                if (u) throw a;
                            }
                        }
                    };
                }
                function r(t) {
                    return r = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, r(t);
                }
                function n(t, e) {
                    if (t) {
                        if ("string" == typeof t) return i(t, e);
                        var r = ({}).toString.call(t).slice(8, -1);
                        return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? i(t, e) : void 0;
                    }
                }
                function i(t, e) {
                    (null == e || e > t.length) && (e = t.length);
                    for(var r = 0, n = Array(e); r < e; r++)n[r] = t[r];
                    return n;
                }
                function o(t, e, r) {
                    if (s()) return Reflect.construct.apply(null, arguments);
                    var n = [
                        null
                    ];
                    n.push.apply(n, e);
                    var i = new (t.bind.apply(t, n));
                    return r && a(i, r.prototype), i;
                }
                function a(t, e) {
                    return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                        return t.__proto__ = e, t;
                    }, a(t, e);
                }
                function s() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
                    } catch (t) {}
                    return (s = function() {
                        return !!t;
                    })();
                }
                function u() {
                    this._pres = new Map, this._posts = new Map;
                }
                function c(t, e, r, n, i, o, a) {
                    return o.useErrorHandlers ? t.execPost(r, n, i, {
                        error: e
                    }, function(t) {
                        return "function" == typeof a && a(t);
                    }) : "function" == typeof a && a(e);
                }
                function f(t, e, r, n) {
                    var i;
                    try {
                        i = t.apply(e, r);
                    } catch (t) {
                        return n(t);
                    }
                    l(i) && i.then(function() {
                        return n();
                    }, function(t) {
                        return n(t);
                    });
                }
                function l(t) {
                    return "object" === r(t) && null !== t && "function" == typeof t.then;
                }
                function h(t) {
                    var e = !1, r = this;
                    return function() {
                        var n = arguments;
                        if (!e) return e = !0, p(function() {
                            return t.apply(r, n);
                        });
                    };
                }
                u.skipWrappedFunction = function() {
                    if (!(this instanceof u.skipWrappedFunction)) return o(u.skipWrappedFunction, Array.prototype.slice.call(arguments));
                    this.args = Array.prototype.slice.call(arguments);
                }, u.overwriteResult = function() {
                    if (!(this instanceof u.overwriteResult)) return o(u.overwriteResult, Array.prototype.slice.call(arguments));
                    this.args = Array.prototype.slice.call(arguments);
                }, u.prototype.execPre = function(t, e, r, n) {
                    3 === arguments.length && (n = r, r = []);
                    var i = this._pres.get(t) || [], o = i.length, a = i.numAsync || 0, s = 0, c = a, d = !1, y = r, b = null;
                    if (!o) return p(function() {
                        n(null);
                    });
                    function m() {
                        if (!(s >= o)) {
                            var t = i[s];
                            if (t.isAsync) {
                                var r = [
                                    h(v),
                                    h(function(t) {
                                        if (t) {
                                            if (d) return;
                                            if (!(t instanceof u.skipWrappedFunction)) return d = !0, n(t);
                                            b = t;
                                        }
                                        if (0 == --c && s >= o) return n(b);
                                    })
                                ];
                                f(t.fn, e, r, r[0]);
                            } else if (t.fn.length > 0) {
                                for(var a = [
                                    h(v)
                                ], g = arguments.length >= 2 ? arguments : [
                                    null
                                ].concat(y), _ = 1; _ < g.length; ++_)_ === g.length - 1 && "function" == typeof g[_] || a.push(g[_]);
                                f(t.fn, e, a, a[0]);
                            } else {
                                var w = null;
                                try {
                                    w = t.fn.call(e);
                                } catch (t) {
                                    if (null != t) return n(t);
                                }
                                if (l(w)) w.then(function() {
                                    return v();
                                }, function(t) {
                                    return v(t);
                                });
                                else {
                                    if (++s >= o) return c > 0 ? void 0 : p(function() {
                                        n(b);
                                    });
                                    m();
                                }
                            }
                        }
                    }
                    function v(t) {
                        if (t) {
                            if (d) return;
                            if (!(t instanceof u.skipWrappedFunction)) return d = !0, n(t);
                            b = t;
                        }
                        if (++s >= o) return c > 0 ? void 0 : n(b);
                        m.apply(e, arguments);
                    }
                    m.apply(null, [
                        null
                    ].concat(r));
                }, u.prototype.execPreSync = function(t, e, r) {
                    for(var n = this._pres.get(t) || [], i = n.length, o = 0; o < i; ++o)n[o].fn.apply(e, r || []);
                }, u.prototype.execPost = function(t, e, r, n, i) {
                    arguments.length < 5 && (i = n, n = null);
                    var o = this._posts.get(t) || [], a = o.length, s = 0, c = null;
                    if (n && n.error && (c = n.error), !a) return p(function() {
                        i.apply(null, [
                            c
                        ].concat(r));
                    });
                    !function t() {
                        for(var n = o[s].fn, p = 0, y = r.length, b = [], m = 0; m < y; ++m)p += r[m] && r[m]._kareemIgnore ? 0 : 1, r[m] && r[m]._kareemIgnore || b.push(r[m]);
                        if (c) {
                            if (d(o[s], p)) {
                                var v = h(function(e) {
                                    if (e) {
                                        if (e instanceof u.overwriteResult) return r = e.args, ++s >= a ? i.call(null, c) : t();
                                        c = e;
                                    }
                                    if (++s >= a) return i.call(null, c);
                                    t();
                                });
                                f(n, e, [
                                    c
                                ].concat(b).concat([
                                    v
                                ]), v);
                            } else {
                                if (++s >= a) return i.call(null, c);
                                t();
                            }
                        } else {
                            var g = h(function(e) {
                                return e ? e instanceof u.overwriteResult ? (r = e.args, ++s >= a ? i.apply(null, [
                                    null
                                ].concat(r)) : t()) : (c = e, t()) : ++s >= a ? i.apply(null, [
                                    null
                                ].concat(r)) : void t();
                            });
                            if (d(o[s], p)) return ++s >= a ? i.apply(null, [
                                null
                            ].concat(r)) : t();
                            if (n.length === p + 1) f(n, e, b.concat([
                                g
                            ]), g);
                            else {
                                var _, w;
                                try {
                                    w = n.apply(e, b);
                                } catch (t) {
                                    _ = t, c = t;
                                }
                                if (l(w)) return w.then(function(t) {
                                    g(t instanceof u.overwriteResult ? t : null);
                                }, function(t) {
                                    return g(t);
                                });
                                if (w instanceof u.overwriteResult && (r = w.args), ++s >= a) return i.apply(null, [
                                    _
                                ].concat(r));
                                t();
                            }
                        }
                    }();
                }, u.prototype.execPostSync = function(t, e, r) {
                    for(var n = this._posts.get(t) || [], i = n.length, o = 0; o < i; ++o){
                        var a = n[o].fn.apply(e, r || []);
                        a instanceof u.overwriteResult && (r = a.args);
                    }
                    return r;
                }, u.prototype.createWrapperSync = function(t, e) {
                    var r = this;
                    return function() {
                        r.execPreSync(t, this, arguments);
                        var n = e.apply(this, arguments);
                        return r.execPostSync(t, this, [
                            n
                        ])[0];
                    };
                }, u.prototype.wrap = function(t, e, r, o, a) {
                    var s = o.length > 0 ? o[o.length - 1] : null, f = Array.from(o);
                    "function" == typeof s && f.pop();
                    var h = this, p = (a = a || {}).checkForPromise;
                    this.execPre(t, r, o, function(o) {
                        if (o && !(o instanceof u.skipWrappedFunction)) {
                            for(var d = a.numCallbackParams || 0, y = a.contextParameter ? [
                                r
                            ] : [], b = y.length; b < d; ++b)y.push(null);
                            return c(h, o, t, r, y, a, s);
                        }
                        var m, v, g = e.length;
                        if (o instanceof u.skipWrappedFunction) return m = o.args[0], _.apply(void 0, [
                            null
                        ].concat(function(t) {
                            if (Array.isArray(t)) return i(t);
                        }(v = o.args) || function(t) {
                            if ("undefined" != typeof Symbol && null != t[Symbol.iterator] || null != t["@@iterator"]) return Array.from(t);
                        }(v) || n(v) || function() {
                            throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                        }()));
                        try {
                            m = e.apply(r, f.concat(_));
                        } catch (t) {
                            return _(t);
                        }
                        if (p) {
                            if (l(m)) return m.then(function(t) {
                                return _(null, t);
                            }, function(t) {
                                return _(t);
                            });
                            if (g < f.length + 1) return _(null, m);
                        }
                        function _() {
                            var e = Array.from(arguments);
                            if (e.shift(), a.nullResultByDefault && 0 === e.length && e.push(null), arguments[0]) return c(h, arguments[0], t, r, e, a, s);
                            h.execPost(t, r, e, function() {
                                null !== s && (arguments[0] ? s(arguments[0]) : s.apply(r, arguments));
                            });
                        }
                    });
                }, u.prototype.filter = function(t) {
                    for(var e = this, r = this.clone(), n = Array.from(r._pres.keys()), i = function() {
                        var n = a[o], i = e._pres.get(n).map(function(t) {
                            return Object.assign({}, t, {
                                name: n
                            });
                        }).filter(t);
                        if (0 === i.length) return r._pres.delete(n), 1;
                        i.numAsync = i.filter(function(t) {
                            return t.isAsync;
                        }).length, r._pres.set(n, i);
                    }, o = 0, a = n; o < a.length; o++)i();
                    for(var s = Array.from(r._posts.keys()), u = function() {
                        var n = f[c], i = e._posts.get(n).map(function(t) {
                            return Object.assign({}, t, {
                                name: n
                            });
                        }).filter(t);
                        if (0 === i.length) return r._posts.delete(n), 1;
                        r._posts.set(n, i);
                    }, c = 0, f = s; c < f.length; c++)u();
                    return r;
                }, u.prototype.hasHooks = function(t) {
                    return this._pres.has(t) || this._posts.has(t);
                }, u.prototype.createWrapper = function(t, e, r, n) {
                    var i = this;
                    return this.hasHooks(t) ? function() {
                        var o = r || this;
                        i.wrap(t, e, o, Array.from(arguments), n);
                    } : function() {
                        var t = arguments, r = this;
                        p(function() {
                            return e.apply(r, t);
                        });
                    };
                }, u.prototype.pre = function(t, e, n, i, o) {
                    var a = {};
                    "object" === r(e) && null !== e ? e = (a = e).isAsync : "boolean" != typeof arguments[1] && (n = e, e = !1);
                    var s = this._pres.get(t) || [];
                    if (this._pres.set(t, s), e && (s.numAsync = s.numAsync || 0, ++s.numAsync), "function" != typeof n) throw new Error('pre() requires a function, got "' + r(n) + '"');
                    return o ? s.unshift(Object.assign({}, a, {
                        fn: n,
                        isAsync: e
                    })) : s.push(Object.assign({}, a, {
                        fn: n,
                        isAsync: e
                    })), this;
                }, u.prototype.post = function(t, e, n, i) {
                    var o = this._posts.get(t) || [];
                    if ("function" == typeof e && (i = !!n, n = e, e = {}), "function" != typeof n) throw new Error('post() requires a function, got "' + r(n) + '"');
                    return i ? o.unshift(Object.assign({}, e, {
                        fn: n
                    })) : o.push(Object.assign({}, e, {
                        fn: n
                    })), this._posts.set(t, o), this;
                }, u.prototype.clone = function() {
                    var t, r = new u, n = e(this._pres.keys());
                    try {
                        for(n.s(); !(t = n.n()).done;){
                            var i = t.value, o = this._pres.get(i).slice();
                            o.numAsync = this._pres.get(i).numAsync, r._pres.set(i, o);
                        }
                    } catch (t) {
                        n.e(t);
                    } finally{
                        n.f();
                    }
                    var a, s = e(this._posts.keys());
                    try {
                        for(s.s(); !(a = s.n()).done;){
                            var c = a.value;
                            r._posts.set(c, this._posts.get(c).slice());
                        }
                    } catch (t) {
                        s.e(t);
                    } finally{
                        s.f();
                    }
                    return r;
                }, u.prototype.merge = function(t, r) {
                    var n, i = (r = 1 === arguments.length || r) ? this.clone() : this, o = e(t._pres.keys());
                    try {
                        var a = function() {
                            var e = n.value, r = i._pres.get(e) || [], o = t._pres.get(e).filter(function(t) {
                                return -1 === r.map(function(t) {
                                    return t.fn;
                                }).indexOf(t.fn);
                            }), a = r.concat(o);
                            a.numAsync = r.numAsync || 0, a.numAsync += o.filter(function(t) {
                                return t.isAsync;
                            }).length, i._pres.set(e, a);
                        };
                        for(o.s(); !(n = o.n()).done;)a();
                    } catch (t) {
                        o.e(t);
                    } finally{
                        o.f();
                    }
                    var s, u = e(t._posts.keys());
                    try {
                        var c = function() {
                            var e = s.value, r = i._posts.get(e) || [], n = t._posts.get(e).filter(function(t) {
                                return -1 === r.indexOf(t);
                            });
                            i._posts.set(e, r.concat(n));
                        };
                        for(u.s(); !(s = u.n()).done;)c();
                    } catch (t) {
                        u.e(t);
                    } finally{
                        u.f();
                    }
                    return i;
                };
                var p = "object" === r({
                    env: {}
                }) && true && ({
                    env: {}
                }).nextTick || function(t) {
                    setTimeout(t, 0);
                };
                function d(t, e) {
                    return !!t.errorHandler || t.fn.length === e + 2;
                }
                t.exports = u;
            },
            9471: (t)=>{
                "use strict";
                t.exports = Math.abs;
            },
            2401: (t)=>{
                "use strict";
                t.exports = Math.floor;
            },
            3414: (t)=>{
                "use strict";
                t.exports = Number.isNaN || function(t) {
                    return t != t;
                };
            },
            1697: (t)=>{
                "use strict";
                t.exports = Math.max;
            },
            8435: (t)=>{
                "use strict";
                t.exports = Math.min;
            },
            8633: (t)=>{
                "use strict";
                t.exports = Math.pow;
            },
            2151: (t)=>{
                "use strict";
                t.exports = Math.round;
            },
            674: (t, e, r)=>{
                "use strict";
                var n = r(3414);
                t.exports = function(t) {
                    return n(t) || 0 === t ? t : t < 0 ? -1 : 1;
                };
            },
            2635: (t, e, r)=>{
                "use strict";
                var n = r(1679), i = r(6936), o = r(9732).Buffer, a = new Array(16);
                function s() {
                    i.call(this, 64), this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878;
                }
                function u(t, e) {
                    return t << e | t >>> 32 - e;
                }
                function c(t, e, r, n, i, o, a) {
                    return u(t + (e & r | ~e & n) + i + o | 0, a) + e | 0;
                }
                function f(t, e, r, n, i, o, a) {
                    return u(t + (e & n | r & ~n) + i + o | 0, a) + e | 0;
                }
                function l(t, e, r, n, i, o, a) {
                    return u(t + (e ^ r ^ n) + i + o | 0, a) + e | 0;
                }
                function h(t, e, r, n, i, o, a) {
                    return u(t + (r ^ (e | ~n)) + i + o | 0, a) + e | 0;
                }
                n(s, i), s.prototype._update = function() {
                    for(var t = a, e = 0; e < 16; ++e)t[e] = this._block.readInt32LE(4 * e);
                    var r = this._a, n = this._b, i = this._c, o = this._d;
                    r = c(r, n, i, o, t[0], 3614090360, 7), o = c(o, r, n, i, t[1], 3905402710, 12), i = c(i, o, r, n, t[2], 606105819, 17), n = c(n, i, o, r, t[3], 3250441966, 22), r = c(r, n, i, o, t[4], 4118548399, 7), o = c(o, r, n, i, t[5], 1200080426, 12), i = c(i, o, r, n, t[6], 2821735955, 17), n = c(n, i, o, r, t[7], 4249261313, 22), r = c(r, n, i, o, t[8], 1770035416, 7), o = c(o, r, n, i, t[9], 2336552879, 12), i = c(i, o, r, n, t[10], 4294925233, 17), n = c(n, i, o, r, t[11], 2304563134, 22), r = c(r, n, i, o, t[12], 1804603682, 7), o = c(o, r, n, i, t[13], 4254626195, 12), i = c(i, o, r, n, t[14], 2792965006, 17), r = f(r, n = c(n, i, o, r, t[15], 1236535329, 22), i, o, t[1], 4129170786, 5), o = f(o, r, n, i, t[6], 3225465664, 9), i = f(i, o, r, n, t[11], 643717713, 14), n = f(n, i, o, r, t[0], 3921069994, 20), r = f(r, n, i, o, t[5], 3593408605, 5), o = f(o, r, n, i, t[10], 38016083, 9), i = f(i, o, r, n, t[15], 3634488961, 14), n = f(n, i, o, r, t[4], 3889429448, 20), r = f(r, n, i, o, t[9], 568446438, 5), o = f(o, r, n, i, t[14], 3275163606, 9), i = f(i, o, r, n, t[3], 4107603335, 14), n = f(n, i, o, r, t[8], 1163531501, 20), r = f(r, n, i, o, t[13], 2850285829, 5), o = f(o, r, n, i, t[2], 4243563512, 9), i = f(i, o, r, n, t[7], 1735328473, 14), r = l(r, n = f(n, i, o, r, t[12], 2368359562, 20), i, o, t[5], 4294588738, 4), o = l(o, r, n, i, t[8], 2272392833, 11), i = l(i, o, r, n, t[11], 1839030562, 16), n = l(n, i, o, r, t[14], 4259657740, 23), r = l(r, n, i, o, t[1], 2763975236, 4), o = l(o, r, n, i, t[4], 1272893353, 11), i = l(i, o, r, n, t[7], 4139469664, 16), n = l(n, i, o, r, t[10], 3200236656, 23), r = l(r, n, i, o, t[13], 681279174, 4), o = l(o, r, n, i, t[0], 3936430074, 11), i = l(i, o, r, n, t[3], 3572445317, 16), n = l(n, i, o, r, t[6], 76029189, 23), r = l(r, n, i, o, t[9], 3654602809, 4), o = l(o, r, n, i, t[12], 3873151461, 11), i = l(i, o, r, n, t[15], 530742520, 16), r = h(r, n = l(n, i, o, r, t[2], 3299628645, 23), i, o, t[0], 4096336452, 6), o = h(o, r, n, i, t[7], 1126891415, 10), i = h(i, o, r, n, t[14], 2878612391, 15), n = h(n, i, o, r, t[5], 4237533241, 21), r = h(r, n, i, o, t[12], 1700485571, 6), o = h(o, r, n, i, t[3], 2399980690, 10), i = h(i, o, r, n, t[10], 4293915773, 15), n = h(n, i, o, r, t[1], 2240044497, 21), r = h(r, n, i, o, t[8], 1873313359, 6), o = h(o, r, n, i, t[15], 4264355552, 10), i = h(i, o, r, n, t[6], 2734768916, 15), n = h(n, i, o, r, t[13], 1309151649, 21), r = h(r, n, i, o, t[4], 4149444226, 6), o = h(o, r, n, i, t[11], 3174756917, 10), i = h(i, o, r, n, t[2], 718787259, 15), n = h(n, i, o, r, t[9], 3951481745, 21), this._a = this._a + r | 0, this._b = this._b + n | 0, this._c = this._c + i | 0, this._d = this._d + o | 0;
                }, s.prototype._digest = function() {
                    this._block[this._blockOffset++] = 128, this._blockOffset > 56 && (this._block.fill(0, this._blockOffset, 64), this._update(), this._blockOffset = 0), this._block.fill(0, this._blockOffset, 56), this._block.writeUInt32LE(this._length[0], 56), this._block.writeUInt32LE(this._length[1], 60), this._update();
                    var t = o.allocUnsafe(16);
                    return t.writeInt32LE(this._a, 0), t.writeInt32LE(this._b, 4), t.writeInt32LE(this._c, 8), t.writeInt32LE(this._d, 12), t;
                }, t.exports = s;
            },
            1257: (t, e, r)=>{
                var n = r(7799), i = r(8904);
                function o(t) {
                    this.rand = t || new i.Rand;
                }
                t.exports = o, o.create = function(t) {
                    return new o(t);
                }, o.prototype._randbelow = function(t) {
                    var e = t.bitLength(), r = Math.ceil(e / 8);
                    do var i = new n(this.rand.generate(r));
                    while (i.cmp(t) >= 0);
                    return i;
                }, o.prototype._randrange = function(t, e) {
                    var r = e.sub(t);
                    return t.add(this._randbelow(r));
                }, o.prototype.test = function(t, e, r) {
                    var i = t.bitLength(), o = n.mont(t), a = new n(1).toRed(o);
                    e || (e = Math.max(1, i / 48 | 0));
                    for(var s = t.subn(1), u = 0; !s.testn(u); u++);
                    for(var c = t.shrn(u), f = s.toRed(o); e > 0; e--){
                        var l = this._randrange(new n(2), s);
                        r && r(l);
                        var h = l.toRed(o).redPow(c);
                        if (0 !== h.cmp(a) && 0 !== h.cmp(f)) {
                            for(var p = 1; p < u; p++){
                                if (0 === (h = h.redSqr()).cmp(a)) return !1;
                                if (0 === h.cmp(f)) break;
                            }
                            if (p === u) return !1;
                        }
                    }
                    return !0;
                }, o.prototype.getDivisor = function(t, e) {
                    var r = t.bitLength(), i = n.mont(t), o = new n(1).toRed(i);
                    e || (e = Math.max(1, r / 48 | 0));
                    for(var a = t.subn(1), s = 0; !a.testn(s); s++);
                    for(var u = t.shrn(s), c = a.toRed(i); e > 0; e--){
                        var f = this._randrange(new n(2), a), l = t.gcd(f);
                        if (0 !== l.cmpn(1)) return l;
                        var h = f.toRed(i).redPow(u);
                        if (0 !== h.cmp(o) && 0 !== h.cmp(c)) {
                            for(var p = 1; p < s; p++){
                                if (0 === (h = h.redSqr()).cmp(o)) return h.fromRed().subn(1).gcd(t);
                                if (0 === h.cmp(c)) break;
                            }
                            if (p === s) return (h = h.redSqr()).fromRed().subn(1).gcd(t);
                        }
                    }
                    return !1;
                };
            },
            3528: (t)=>{
                function e(t, e) {
                    if (!t) throw new Error(e || "Assertion failed");
                }
                t.exports = e, e.equal = function(t, e, r) {
                    if (t != e) throw new Error(r || "Assertion failed: " + t + " != " + e);
                };
            },
            6706: (t, e)=>{
                "use strict";
                var r = e;
                function n(t) {
                    return 1 === t.length ? "0" + t : t;
                }
                function i(t) {
                    for(var e = "", r = 0; r < t.length; r++)e += n(t[r].toString(16));
                    return e;
                }
                r.toArray = function(t, e) {
                    if (Array.isArray(t)) return t.slice();
                    if (!t) return [];
                    var r = [];
                    if ("string" != typeof t) {
                        for(var n = 0; n < t.length; n++)r[n] = 0 | t[n];
                        return r;
                    }
                    if ("hex" === e) for((t = t.replace(/[^a-z0-9]+/gi, "")).length % 2 != 0 && (t = "0" + t), n = 0; n < t.length; n += 2)r.push(parseInt(t[n] + t[n + 1], 16));
                    else for(n = 0; n < t.length; n++){
                        var i = t.charCodeAt(n), o = i >> 8, a = 255 & i;
                        o ? r.push(o, a) : r.push(a);
                    }
                    return r;
                }, r.zero2 = n, r.toHex = i, r.encode = function(t, e) {
                    return "hex" === e ? i(t) : t;
                };
            },
            5678: (t, e, r)=>{
                "use strict";
                t.exports = r(2914);
            },
            2914: (t, e, r)=>{
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                var i = r(7860), o = [
                    "__proto__",
                    "constructor",
                    "prototype"
                ];
                function a(t, e, r, n, i, o) {
                    for(var s, u = 0; u < t.length && u < e.length; ++u)s = t[u], Array.isArray(s) && Array.isArray(e[u]) ? a(s, e[u], r, n, i, o) : s && (n ? n(s, r, o(e[u])) : (s[i] && (s = s[i]), s[r] = o(e[u])));
                }
                function s(t) {
                    return t;
                }
                e.get = function(t, r, o, a) {
                    var u;
                    "function" == typeof o && (o.length < 2 ? (a = o, o = void 0) : (u = o, o = void 0)), a || (a = s);
                    var c = "string" == typeof t ? i(t) : t;
                    if (!Array.isArray(c)) throw new TypeError("Invalid `path`. Must be either string or array");
                    for(var f, l = r, h = 0; h < c.length; ++h){
                        if (f = c[h], "string" != typeof c[h] && "number" != typeof c[h]) throw new TypeError("Each segment of path to `get()` must be a string or number, got " + n(c[h]));
                        if (Array.isArray(l) && !/^\d+$/.test(f)) {
                            var p = c.slice(h);
                            return [].concat(l).map(function(t) {
                                return t ? e.get(p, t, o || u, a) : a(void 0);
                            });
                        }
                        if (u) l = u(l, f);
                        else {
                            var d = o && l[o] ? l[o] : l;
                            l = d instanceof Map ? d.get(f) : d[f];
                        }
                        if (!l) return a(l);
                    }
                    return a(l);
                }, e.has = function(t, e) {
                    var r = "string" == typeof t ? i(t) : t;
                    if (!Array.isArray(r)) throw new TypeError("Invalid `path`. Must be either string or array");
                    for(var o = r.length, a = e, s = 0; s < o; ++s){
                        if ("string" != typeof r[s] && "number" != typeof r[s]) throw new TypeError("Each segment of path to `has()` must be a string or number, got " + n(r[s]));
                        if (null == a || "object" !== n(a) || !(r[s] in a)) return !1;
                        a = a[r[s]];
                    }
                    return !0;
                }, e.unset = function(t, e) {
                    var r = "string" == typeof t ? i(t) : t;
                    if (!Array.isArray(r)) throw new TypeError("Invalid `path`. Must be either string or array");
                    for(var a = r.length, s = e, u = 0; u < a; ++u){
                        if (null == s || "object" !== n(s) || !(r[u] in s)) return !1;
                        if ("string" != typeof r[u] && "number" != typeof r[u]) throw new TypeError("Each segment of path to `unset()` must be a string or number, got " + n(r[u]));
                        if (-1 !== o.indexOf(r[u])) return !1;
                        if (u === a - 1) return delete s[r[u]], !0;
                        s = s instanceof Map ? s.get(r[u]) : s[r[u]];
                    }
                    return !0;
                }, e.set = function(t, r, u, c, f, l) {
                    var h;
                    "function" == typeof c && (c.length < 2 ? (f = c, c = void 0) : (h = c, c = void 0)), f || (f = s);
                    var p = "string" == typeof t ? i(t) : t;
                    if (!Array.isArray(p)) throw new TypeError("Invalid `path`. Must be either string or array");
                    if (null != u) {
                        for(var d = 0; d < p.length; ++d){
                            if ("string" != typeof p[d] && "number" != typeof p[d]) throw new TypeError("Each segment of path to `set()` must be a string or number, got " + n(p[d]));
                            if (-1 !== o.indexOf(p[d])) return;
                        }
                        for(var y, b = l || /\$/.test(t) && !1 !== l, m = u, v = (d = 0, p.length - 1); d < v; ++d)if ("$" != (y = p[d])) {
                            if (Array.isArray(m) && !/^\d+$/.test(y)) {
                                var g = p.slice(d);
                                if (!b && Array.isArray(r)) for(var _ = 0; _ < m.length && _ < r.length; ++_)e.set(g, r[_], m[_], c || h, f, b);
                                else for(_ = 0; _ < m.length; ++_)e.set(g, r, m[_], c || h, f, b);
                                return;
                            }
                            if (h) m = h(m, y);
                            else {
                                var w = c && m[c] ? m[c] : m;
                                m = w instanceof Map ? w.get(y) : w[y];
                            }
                            if (!m) return;
                        } else if (d == v - 1) break;
                        if (y = p[v], c && m[c] && (m = m[c]), Array.isArray(m) && !/^\d+$/.test(y)) {
                            if (!b && Array.isArray(r)) a(m, r, y, h, c, f);
                            else for(_ = 0; _ < m.length; ++_){
                                var S = m[_];
                                S && (h ? h(S, y, f(r)) : (S[c] && (S = S[c]), S[y] = f(r)));
                            }
                        } else h ? h(m, y, f(r)) : m instanceof Map ? m.set(y, f(r)) : m[y] = f(r);
                    }
                }, e.stringToParts = i;
            },
            7860: (t)=>{
                "use strict";
                t.exports = function(t) {
                    for(var e = [], r = "", n = "DEFAULT", i = 0; i < t.length; ++i)"IN_SQUARE_BRACKETS" !== n || /\d/.test(t[i]) || "]" === t[i] || (n = "DEFAULT", r = e[e.length - 1] + "[" + r, e.splice(e.length - 1, 1)), "[" === t[i] ? ("IMMEDIATELY_AFTER_SQUARE_BRACKETS" !== n && (e.push(r), r = ""), n = "IN_SQUARE_BRACKETS") : "]" === t[i] ? "IN_SQUARE_BRACKETS" === n ? (n = "IMMEDIATELY_AFTER_SQUARE_BRACKETS", e.push(r), r = "") : (n = "DEFAULT", r += t[i]) : "." === t[i] ? ("IMMEDIATELY_AFTER_SQUARE_BRACKETS" !== n && (e.push(r), r = ""), n = "DEFAULT") : r += t[i];
                    return "IMMEDIATELY_AFTER_SQUARE_BRACKETS" !== n && e.push(r), e;
                };
            },
            354: (t)=>{
                function e(t) {
                    return e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, e(t);
                }
                var r = 1e3, n = 60 * r, i = 60 * n, o = 24 * i, a = 7 * o;
                function s(t, e, r, n) {
                    var i = e >= 1.5 * r;
                    return Math.round(t / r) + " " + n + (i ? "s" : "");
                }
                t.exports = function(t, u) {
                    u = u || {};
                    var c, f, l = e(t);
                    if ("string" === l && t.length > 0) return function(t) {
                        if (!((t = String(t)).length > 100)) {
                            var e = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);
                            if (e) {
                                var s = parseFloat(e[1]);
                                switch((e[2] || "ms").toLowerCase()){
                                    case "years":
                                    case "year":
                                    case "yrs":
                                    case "yr":
                                    case "y":
                                        return 315576e5 * s;
                                    case "weeks":
                                    case "week":
                                    case "w":
                                        return s * a;
                                    case "days":
                                    case "day":
                                    case "d":
                                        return s * o;
                                    case "hours":
                                    case "hour":
                                    case "hrs":
                                    case "hr":
                                    case "h":
                                        return s * i;
                                    case "minutes":
                                    case "minute":
                                    case "mins":
                                    case "min":
                                    case "m":
                                        return s * n;
                                    case "seconds":
                                    case "second":
                                    case "secs":
                                    case "sec":
                                    case "s":
                                        return s * r;
                                    case "milliseconds":
                                    case "millisecond":
                                    case "msecs":
                                    case "msec":
                                    case "ms":
                                        return s;
                                    default:
                                        return;
                                }
                            }
                        }
                    }(t);
                    if ("number" === l && isFinite(t)) return u.long ? (c = t, (f = Math.abs(c)) >= o ? s(c, f, o, "day") : f >= i ? s(c, f, i, "hour") : f >= n ? s(c, f, n, "minute") : f >= r ? s(c, f, r, "second") : c + " ms") : function(t) {
                        var e = Math.abs(t);
                        return e >= o ? Math.round(t / o) + "d" : e >= i ? Math.round(t / i) + "h" : e >= n ? Math.round(t / n) + "m" : e >= r ? Math.round(t / r) + "s" : t + "ms";
                    }(t);
                    throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(t));
                };
            },
            4756: (t)=>{
                "use strict";
                var e = function(t) {
                    return t != t;
                };
                t.exports = function(t, r) {
                    return 0 === t && 0 === r ? 1 / t == 1 / r : t === r || !(!e(t) || !e(r));
                };
            },
            2064: (t, e, r)=>{
                "use strict";
                var n = r(2273), i = r(9122), o = r(4756), a = r(2481), s = r(9247), u = i(a(), Object);
                n(u, {
                    getPolyfill: a,
                    implementation: o,
                    shim: s
                }), t.exports = u;
            },
            2481: (t, e, r)=>{
                "use strict";
                var n = r(4756);
                t.exports = function() {
                    return "function" == typeof Object.is ? Object.is : n;
                };
            },
            9247: (t, e, r)=>{
                "use strict";
                var n = r(2481), i = r(2273);
                t.exports = function() {
                    var t = n();
                    return i(Object, {
                        is: t
                    }, {
                        is: function() {
                            return Object.is !== t;
                        }
                    }), t;
                };
            },
            6544: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                var i;
                if (!Object.keys) {
                    var o = Object.prototype.hasOwnProperty, a = Object.prototype.toString, s = r(6312), u = Object.prototype.propertyIsEnumerable, c = !u.call({
                        toString: null
                    }, "toString"), f = u.call(function() {}, "prototype"), l = [
                        "toString",
                        "toLocaleString",
                        "valueOf",
                        "hasOwnProperty",
                        "isPrototypeOf",
                        "propertyIsEnumerable",
                        "constructor"
                    ], h = function(t) {
                        var e = t.constructor;
                        return e && e.prototype === t;
                    }, p = {
                        $applicationCache: !0,
                        $console: !0,
                        $external: !0,
                        $frame: !0,
                        $frameElement: !0,
                        $frames: !0,
                        $innerHeight: !0,
                        $innerWidth: !0,
                        $onmozfullscreenchange: !0,
                        $onmozfullscreenerror: !0,
                        $outerHeight: !0,
                        $outerWidth: !0,
                        $pageXOffset: !0,
                        $pageYOffset: !0,
                        $parent: !0,
                        $scrollLeft: !0,
                        $scrollTop: !0,
                        $scrollX: !0,
                        $scrollY: !0,
                        $self: !0,
                        $webkitIndexedDB: !0,
                        $webkitStorageInfo: !0,
                        $window: !0
                    }, d = function() {
                        if ("undefined" == typeof window) return !1;
                        for(var t in window)try {
                            if (!p["$" + t] && o.call(window, t) && null !== window[t] && "object" === n(window[t])) try {
                                h(window[t]);
                            } catch (t) {
                                return !0;
                            }
                        } catch (t) {
                            return !0;
                        }
                        return !1;
                    }();
                    i = function(t) {
                        var e = null !== t && "object" === n(t), r = "[object Function]" === a.call(t), i = s(t), u = e && "[object String]" === a.call(t), p = [];
                        if (!e && !r && !i) throw new TypeError("Object.keys called on a non-object");
                        var y = f && r;
                        if (u && t.length > 0 && !o.call(t, 0)) for(var b = 0; b < t.length; ++b)p.push(String(b));
                        if (i && t.length > 0) for(var m = 0; m < t.length; ++m)p.push(String(m));
                        else for(var v in t)y && "prototype" === v || !o.call(t, v) || p.push(String(v));
                        if (c) for(var g = function(t) {
                            if ("undefined" == typeof window || !d) return h(t);
                            try {
                                return h(t);
                            } catch (t) {
                                return !1;
                            }
                        }(t), _ = 0; _ < l.length; ++_)g && "constructor" === l[_] || !o.call(t, l[_]) || p.push(l[_]);
                        return p;
                    };
                }
                t.exports = i;
            },
            668: (t, e, r)=>{
                "use strict";
                var n = Array.prototype.slice, i = r(6312), o = Object.keys, a = o ? function(t) {
                    return o(t);
                } : r(6544), s = Object.keys;
                a.shim = function() {
                    if (Object.keys) {
                        var t = function() {
                            var t = Object.keys(arguments);
                            return t && t.length === arguments.length;
                        }(1, 2);
                        t || (Object.keys = function(t) {
                            return i(t) ? s(n.call(t)) : s(t);
                        });
                    } else Object.keys = a;
                    return Object.keys || a;
                }, t.exports = a;
            },
            6312: (t)=>{
                "use strict";
                function e(t) {
                    return e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, e(t);
                }
                var r = Object.prototype.toString;
                t.exports = function(t) {
                    var n = r.call(t), i = "[object Arguments]" === n;
                    return i || (i = "[object Array]" !== n && null !== t && "object" === e(t) && "number" == typeof t.length && t.length >= 0 && "[object Function]" === r.call(t.callee)), i;
                };
            },
            6292: (t, e, r)=>{
                "use strict";
                var n = r(1419);
                e.certificate = r(6170);
                var i = n.define("RSAPrivateKey", function() {
                    this.seq().obj(this.key("version").int(), this.key("modulus").int(), this.key("publicExponent").int(), this.key("privateExponent").int(), this.key("prime1").int(), this.key("prime2").int(), this.key("exponent1").int(), this.key("exponent2").int(), this.key("coefficient").int());
                });
                e.RSAPrivateKey = i;
                var o = n.define("RSAPublicKey", function() {
                    this.seq().obj(this.key("modulus").int(), this.key("publicExponent").int());
                });
                e.RSAPublicKey = o;
                var a = n.define("AlgorithmIdentifier", function() {
                    this.seq().obj(this.key("algorithm").objid(), this.key("none").null_().optional(), this.key("curve").objid().optional(), this.key("params").seq().obj(this.key("p").int(), this.key("q").int(), this.key("g").int()).optional());
                }), s = n.define("SubjectPublicKeyInfo", function() {
                    this.seq().obj(this.key("algorithm").use(a), this.key("subjectPublicKey").bitstr());
                });
                e.PublicKey = s;
                var u = n.define("PrivateKeyInfo", function() {
                    this.seq().obj(this.key("version").int(), this.key("algorithm").use(a), this.key("subjectPrivateKey").octstr());
                });
                e.PrivateKey = u;
                var c = n.define("EncryptedPrivateKeyInfo", function() {
                    this.seq().obj(this.key("algorithm").seq().obj(this.key("id").objid(), this.key("decrypt").seq().obj(this.key("kde").seq().obj(this.key("id").objid(), this.key("kdeparams").seq().obj(this.key("salt").octstr(), this.key("iters").int())), this.key("cipher").seq().obj(this.key("algo").objid(), this.key("iv").octstr()))), this.key("subjectPrivateKey").octstr());
                });
                e.EncryptedPrivateKey = c;
                var f = n.define("DSAPrivateKey", function() {
                    this.seq().obj(this.key("version").int(), this.key("p").int(), this.key("q").int(), this.key("g").int(), this.key("pub_key").int(), this.key("priv_key").int());
                });
                e.DSAPrivateKey = f, e.DSAparam = n.define("DSAparam", function() {
                    this.int();
                });
                var l = n.define("ECParameters", function() {
                    this.choice({
                        namedCurve: this.objid()
                    });
                }), h = n.define("ECPrivateKey", function() {
                    this.seq().obj(this.key("version").int(), this.key("privateKey").octstr(), this.key("parameters").optional().explicit(0).use(l), this.key("publicKey").optional().explicit(1).bitstr());
                });
                e.ECPrivateKey = h, e.signature = n.define("signature", function() {
                    this.seq().obj(this.key("r").int(), this.key("s").int());
                });
            },
            6170: (t, e, r)=>{
                "use strict";
                var n = r(1419), i = n.define("Time", function() {
                    this.choice({
                        utcTime: this.utctime(),
                        generalTime: this.gentime()
                    });
                }), o = n.define("AttributeTypeValue", function() {
                    this.seq().obj(this.key("type").objid(), this.key("value").any());
                }), a = n.define("AlgorithmIdentifier", function() {
                    this.seq().obj(this.key("algorithm").objid(), this.key("parameters").optional(), this.key("curve").objid().optional());
                }), s = n.define("SubjectPublicKeyInfo", function() {
                    this.seq().obj(this.key("algorithm").use(a), this.key("subjectPublicKey").bitstr());
                }), u = n.define("RelativeDistinguishedName", function() {
                    this.setof(o);
                }), c = n.define("RDNSequence", function() {
                    this.seqof(u);
                }), f = n.define("Name", function() {
                    this.choice({
                        rdnSequence: this.use(c)
                    });
                }), l = n.define("Validity", function() {
                    this.seq().obj(this.key("notBefore").use(i), this.key("notAfter").use(i));
                }), h = n.define("Extension", function() {
                    this.seq().obj(this.key("extnID").objid(), this.key("critical").bool().def(!1), this.key("extnValue").octstr());
                }), p = n.define("TBSCertificate", function() {
                    this.seq().obj(this.key("version").explicit(0).int().optional(), this.key("serialNumber").int(), this.key("signature").use(a), this.key("issuer").use(f), this.key("validity").use(l), this.key("subject").use(f), this.key("subjectPublicKeyInfo").use(s), this.key("issuerUniqueID").implicit(1).bitstr().optional(), this.key("subjectUniqueID").implicit(2).bitstr().optional(), this.key("extensions").explicit(3).seqof(h).optional());
                }), d = n.define("X509Certificate", function() {
                    this.seq().obj(this.key("tbsCertificate").use(p), this.key("signatureAlgorithm").use(a), this.key("signatureValue").bitstr());
                });
                t.exports = d;
            },
            3446: (t, e, r)=>{
                "use strict";
                var n = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m, i = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m, o = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m, a = r(1685), s = r(2098), u = r(9732).Buffer;
                t.exports = function(t, e) {
                    var r, c = t.toString(), f = c.match(n);
                    if (f) {
                        var l = "aes" + f[1], h = u.from(f[2], "hex"), p = u.from(f[3].replace(/[\r\n]/g, ""), "base64"), d = a(e, h.slice(0, 8), parseInt(f[1], 10)).key, y = [], b = s.createDecipheriv(l, d, h);
                        y.push(b.update(p)), y.push(b.final()), r = u.concat(y);
                    } else {
                        var m = c.match(o);
                        r = u.from(m[2].replace(/[\r\n]/g, ""), "base64");
                    }
                    return {
                        tag: c.match(i)[1],
                        data: r
                    };
                };
            },
            5053: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                var i = r(6292), o = r(5579), a = r(3446), s = r(2098), u = r(8699), c = r(9732).Buffer;
                function f(t) {
                    var e;
                    "object" !== n(t) || c.isBuffer(t) || (e = t.passphrase, t = t.key), "string" == typeof t && (t = c.from(t));
                    var r, f, l = a(t, e), h = l.tag, p = l.data;
                    switch(h){
                        case "CERTIFICATE":
                            f = i.certificate.decode(p, "der").tbsCertificate.subjectPublicKeyInfo;
                        case "PUBLIC KEY":
                            switch(f || (f = i.PublicKey.decode(p, "der")), r = f.algorithm.algorithm.join(".")){
                                case "1.2.840.113549.1.1.1":
                                    return i.RSAPublicKey.decode(f.subjectPublicKey.data, "der");
                                case "1.2.840.10045.2.1":
                                    return f.subjectPrivateKey = f.subjectPublicKey, {
                                        type: "ec",
                                        data: f
                                    };
                                case "1.2.840.10040.4.1":
                                    return f.algorithm.params.pub_key = i.DSAparam.decode(f.subjectPublicKey.data, "der"), {
                                        type: "dsa",
                                        data: f.algorithm.params
                                    };
                                default:
                                    throw new Error("unknown key id " + r);
                            }
                        case "ENCRYPTED PRIVATE KEY":
                            p = function(t, e) {
                                var r = t.algorithm.decrypt.kde.kdeparams.salt, n = parseInt(t.algorithm.decrypt.kde.kdeparams.iters.toString(), 10), i = o[t.algorithm.decrypt.cipher.algo.join(".")], a = t.algorithm.decrypt.cipher.iv, f = t.subjectPrivateKey, l = parseInt(i.split("-")[1], 10) / 8, h = u.pbkdf2Sync(e, r, n, l, "sha1"), p = s.createDecipheriv(i, h, a), d = [];
                                return d.push(p.update(f)), d.push(p.final()), c.concat(d);
                            }(p = i.EncryptedPrivateKey.decode(p, "der"), e);
                        case "PRIVATE KEY":
                            switch(r = (f = i.PrivateKey.decode(p, "der")).algorithm.algorithm.join(".")){
                                case "1.2.840.113549.1.1.1":
                                    return i.RSAPrivateKey.decode(f.subjectPrivateKey, "der");
                                case "1.2.840.10045.2.1":
                                    return {
                                        curve: f.algorithm.curve,
                                        privateKey: i.ECPrivateKey.decode(f.subjectPrivateKey, "der").privateKey
                                    };
                                case "1.2.840.10040.4.1":
                                    return f.algorithm.params.priv_key = i.DSAparam.decode(f.subjectPrivateKey, "der"), {
                                        type: "dsa",
                                        params: f.algorithm.params
                                    };
                                default:
                                    throw new Error("unknown key id " + r);
                            }
                        case "RSA PUBLIC KEY":
                            return i.RSAPublicKey.decode(p, "der");
                        case "RSA PRIVATE KEY":
                            return i.RSAPrivateKey.decode(p, "der");
                        case "DSA PRIVATE KEY":
                            return {
                                type: "dsa",
                                params: i.DSAPrivateKey.decode(p, "der")
                            };
                        case "EC PRIVATE KEY":
                            return {
                                curve: (p = i.ECPrivateKey.decode(p, "der")).parameters.value,
                                privateKey: p.privateKey
                            };
                        default:
                            throw new Error("unknown key type " + h);
                    }
                }
                f.signature = i.signature, t.exports = f;
            },
            8699: (t, e, r)=>{
                e.pbkdf2 = r(2367), e.pbkdf2Sync = r(245);
            },
            2367: (t, e, r)=>{
                var n, i, o = r(9732).Buffer, a = r(9217), s = r(594), u = r(245), c = r(6661), f = r.g.crypto && r.g.crypto.subtle, l = {
                    sha: "SHA-1",
                    "sha-1": "SHA-1",
                    sha1: "SHA-1",
                    sha256: "SHA-256",
                    "sha-256": "SHA-256",
                    sha384: "SHA-384",
                    "sha-384": "SHA-384",
                    "sha-512": "SHA-512",
                    sha512: "SHA-512"
                }, h = [];
                function p() {
                    return i || (i = r.g.process && r.g.process.nextTick ? r.g.process.nextTick : r.g.queueMicrotask ? r.g.queueMicrotask : r.g.setImmediate ? r.g.setImmediate : r.g.setTimeout);
                }
                function d(t, e, r, n, i) {
                    return f.importKey("raw", t, {
                        name: "PBKDF2"
                    }, !1, [
                        "deriveBits"
                    ]).then(function(t) {
                        return f.deriveBits({
                            name: "PBKDF2",
                            salt: e,
                            iterations: r,
                            hash: {
                                name: i
                            }
                        }, t, n << 3);
                    }).then(function(t) {
                        return o.from(t);
                    });
                }
                t.exports = function(t, e, i, y, b, m) {
                    "function" == typeof b && (m = b, b = void 0);
                    var v = l[(b = b || "sha1").toLowerCase()];
                    if (v && "function" == typeof r.g.Promise) {
                        if (a(i, y), t = c(t, s, "Password"), e = c(e, s, "Salt"), "function" != typeof m) throw new Error("No callback provided to pbkdf2");
                        !function(t, e) {
                            t.then(function(t) {
                                p()(function() {
                                    e(null, t);
                                });
                            }, function(t) {
                                p()(function() {
                                    e(t);
                                });
                            });
                        }((function(t) {
                            if (r.g.process && !r.g.process.browser) return Promise.resolve(!1);
                            if (!f || !f.importKey || !f.deriveBits) return Promise.resolve(!1);
                            if (void 0 !== h[t]) return h[t];
                            var e = d(n = n || o.alloc(8), n, 10, 128, t).then(function() {
                                return !0;
                            }).catch(function() {
                                return !1;
                            });
                            return h[t] = e, e;
                        })(v).then(function(r) {
                            return r ? d(t, e, i, y, v) : u(t, e, i, y, b);
                        }), m);
                    } else p()(function() {
                        var r;
                        try {
                            r = u(t, e, i, y, b);
                        } catch (t) {
                            return m(t);
                        }
                        m(null, r);
                    });
                };
            },
            594: (t, e, r)=>{
                var n;
                n = r.g.process && r.g.process.browser ? "utf-8" : r.g.process && r.g.process.version ? parseInt(({
                    env: {}
                }).version.split(".")[0].slice(1), 10) >= 6 ? "utf-8" : "binary" : "utf-8", t.exports = n;
            },
            9217: (t)=>{
                var e = Math.pow(2, 30) - 1;
                t.exports = function(t, r) {
                    if ("number" != typeof t) throw new TypeError("Iterations not a number");
                    if (t < 0) throw new TypeError("Bad iterations");
                    if ("number" != typeof r) throw new TypeError("Key length not a number");
                    if (r < 0 || r > e || r != r) throw new TypeError("Bad key length");
                };
            },
            245: (t, e, r)=>{
                var n = r(3989), i = r(1058), o = r(3261), a = r(9732).Buffer, s = r(9217), u = r(594), c = r(6661), f = a.alloc(128), l = {
                    md5: 16,
                    sha1: 20,
                    sha224: 28,
                    sha256: 32,
                    sha384: 48,
                    sha512: 64,
                    rmd160: 20,
                    ripemd160: 20
                };
                function h(t, e, r) {
                    var s = function(t) {
                        return "rmd160" === t || "ripemd160" === t ? function(t) {
                            return (new i).update(t).digest();
                        } : "md5" === t ? n : function(e) {
                            return o(t).update(e).digest();
                        };
                    }(t), u = "sha512" === t || "sha384" === t ? 128 : 64;
                    e.length > u ? e = s(e) : e.length < u && (e = a.concat([
                        e,
                        f
                    ], u));
                    for(var c = a.allocUnsafe(u + l[t]), h = a.allocUnsafe(u + l[t]), p = 0; p < u; p++)c[p] = 54 ^ e[p], h[p] = 92 ^ e[p];
                    var d = a.allocUnsafe(u + r + 4);
                    c.copy(d, 0, 0, u), this.ipad1 = d, this.ipad2 = c, this.opad = h, this.alg = t, this.blocksize = u, this.hash = s, this.size = l[t];
                }
                h.prototype.run = function(t, e) {
                    return t.copy(e, this.blocksize), this.hash(e).copy(this.opad, this.blocksize), this.hash(this.opad);
                }, t.exports = function(t, e, r, n, i) {
                    s(r, n);
                    var o = new h(i = i || "sha1", t = c(t, u, "Password"), (e = c(e, u, "Salt")).length), f = a.allocUnsafe(n), p = a.allocUnsafe(e.length + 4);
                    e.copy(p, 0, 0, e.length);
                    for(var d = 0, y = l[i], b = Math.ceil(n / y), m = 1; m <= b; m++){
                        p.writeUInt32BE(m, e.length);
                        for(var v = o.run(p, o.ipad1), g = v, _ = 1; _ < r; _++){
                            g = o.run(g, o.ipad2);
                            for(var w = 0; w < y; w++)v[w] ^= g[w];
                        }
                        v.copy(f, d), d += y;
                    }
                    return f;
                };
            },
            6661: (t, e, r)=>{
                var n = r(9732).Buffer;
                t.exports = function(t, e, r) {
                    if (n.isBuffer(t)) return t;
                    if ("string" == typeof t) return n.from(t, e);
                    if (ArrayBuffer.isView(t)) return n.from(t.buffer);
                    throw new TypeError(r + " must be a string, a Buffer, a typed array or a DataView");
                };
            },
            2653: (t)=>{
                "use strict";
                t.exports = [
                    "Float16Array",
                    "Float32Array",
                    "Float64Array",
                    "Int8Array",
                    "Int16Array",
                    "Int32Array",
                    "Uint8Array",
                    "Uint8ClampedArray",
                    "Uint16Array",
                    "Uint32Array",
                    "BigInt64Array",
                    "BigUint64Array"
                ];
            },
            4758: (t)=>{
                "use strict";
                !({
                    env: {}
                }).version || 0 === ({
                    env: {}
                }).version.indexOf("v0.") || 0 === ({
                    env: {}
                }).version.indexOf("v1.") && 0 !== ({
                    env: {}
                }).version.indexOf("v1.8.") ? t.exports = {
                    nextTick: function(t, e, r, n) {
                        if ("function" != typeof t) throw new TypeError('"callback" argument must be a function');
                        var i, o, a = arguments.length;
                        switch(a){
                            case 0:
                            case 1:
                                return ({
                                    env: {}
                                }).nextTick(t);
                            case 2:
                                return ({
                                    env: {}
                                }).nextTick(function() {
                                    t.call(null, e);
                                });
                            case 3:
                                return ({
                                    env: {}
                                }).nextTick(function() {
                                    t.call(null, e, r);
                                });
                            case 4:
                                return ({
                                    env: {}
                                }).nextTick(function() {
                                    t.call(null, e, r, n);
                                });
                            default:
                                for(i = new Array(a - 1), o = 0; o < i.length;)i[o++] = arguments[o];
                                return ({
                                    env: {}
                                }).nextTick(function() {
                                    t.apply(null, i);
                                });
                        }
                    }
                } : t.exports = {
                    env: {}
                };
            },
            2327: (t, e, r)=>{
                e.publicEncrypt = r(2937), e.privateDecrypt = r(5443), e.privateEncrypt = function(t, r) {
                    return e.publicEncrypt(t, r, !0);
                }, e.publicDecrypt = function(t, r) {
                    return e.privateDecrypt(t, r, !0);
                };
            },
            7797: (t, e, r)=>{
                var n = r(5833), i = r(9732).Buffer;
                function o(t) {
                    var e = i.allocUnsafe(4);
                    return e.writeUInt32BE(t, 0), e;
                }
                t.exports = function(t, e) {
                    for(var r, a = i.alloc(0), s = 0; a.length < e;)r = o(s++), a = i.concat([
                        a,
                        n("sha1").update(t).update(r).digest()
                    ]);
                    return a.slice(0, e);
                };
            },
            5443: (t, e, r)=>{
                var n = r(5053), i = r(7797), o = r(1190), a = r(7799), s = r(1095), u = r(5833), c = r(5218), f = r(9732).Buffer;
                t.exports = function(t, e, r) {
                    var l;
                    l = t.padding ? t.padding : r ? 1 : 4;
                    var h, p = n(t), d = p.modulus.byteLength();
                    if (e.length > d || new a(e).cmp(p.modulus) >= 0) throw new Error("decryption error");
                    h = r ? c(new a(e), p) : s(e, p);
                    var y = f.alloc(d - h.length);
                    if (h = f.concat([
                        y,
                        h
                    ], d), 4 === l) return function(t, e) {
                        var r = t.modulus.byteLength(), n = u("sha1").update(f.alloc(0)).digest(), a = n.length;
                        if (0 !== e[0]) throw new Error("decryption error");
                        var s = e.slice(1, a + 1), c = e.slice(a + 1), l = o(s, i(c, a)), h = o(c, i(l, r - a - 1));
                        if (function(t, e) {
                            t = f.from(t), e = f.from(e);
                            var r = 0, n = t.length;
                            t.length !== e.length && (r++, n = Math.min(t.length, e.length));
                            for(var i = -1; ++i < n;)r += t[i] ^ e[i];
                            return r;
                        }(n, h.slice(0, a))) throw new Error("decryption error");
                        for(var p = a; 0 === h[p];)p++;
                        if (1 !== h[p++]) throw new Error("decryption error");
                        return h.slice(p);
                    }(p, h);
                    if (1 === l) return function(t, e, r) {
                        for(var n = e.slice(0, 2), i = 2, o = 0; 0 !== e[i++];)if (i >= e.length) {
                            o++;
                            break;
                        }
                        var a = e.slice(2, i - 1);
                        if (("0002" !== n.toString("hex") && !r || "0001" !== n.toString("hex") && r) && o++, a.length < 8 && o++, o) throw new Error("decryption error");
                        return e.slice(i);
                    }(0, h, r);
                    if (3 === l) return h;
                    throw new Error("unknown padding");
                };
            },
            2937: (t, e, r)=>{
                var n = r(5053), i = r(4276), o = r(5833), a = r(7797), s = r(1190), u = r(7799), c = r(5218), f = r(1095), l = r(9732).Buffer;
                t.exports = function(t, e, r) {
                    var h;
                    h = t.padding ? t.padding : r ? 1 : 4;
                    var p, d = n(t);
                    if (4 === h) p = function(t, e) {
                        var r = t.modulus.byteLength(), n = e.length, c = o("sha1").update(l.alloc(0)).digest(), f = c.length, h = 2 * f;
                        if (n > r - h - 2) throw new Error("message too long");
                        var p = l.alloc(r - n - h - 2), d = r - f - 1, y = i(f), b = s(l.concat([
                            c,
                            p,
                            l.alloc(1, 1),
                            e
                        ], d), a(y, d)), m = s(y, a(b, f));
                        return new u(l.concat([
                            l.alloc(1),
                            m,
                            b
                        ], r));
                    }(d, e);
                    else if (1 === h) p = function(t, e, r) {
                        var n, o = e.length, a = t.modulus.byteLength();
                        if (o > a - 11) throw new Error("message too long");
                        return n = r ? l.alloc(a - o - 3, 255) : function(t) {
                            for(var e, r = l.allocUnsafe(t), n = 0, o = i(2 * t), a = 0; n < t;)a === o.length && (o = i(2 * t), a = 0), (e = o[a++]) && (r[n++] = e);
                            return r;
                        }(a - o - 3), new u(l.concat([
                            l.from([
                                0,
                                r ? 1 : 2
                            ]),
                            n,
                            l.alloc(1),
                            e
                        ], a));
                    }(d, e, r);
                    else {
                        if (3 !== h) throw new Error("unknown padding");
                        if ((p = new u(e)).cmp(d.modulus) >= 0) throw new Error("data too long for modulus");
                    }
                    return r ? f(p, d) : c(p, d);
                };
            },
            5218: (t, e, r)=>{
                var n = r(7799), i = r(9732).Buffer;
                t.exports = function(t, e) {
                    return i.from(t.toRed(n.mont(e.modulus)).redPow(new n(e.publicExponent)).fromRed().toArray());
                };
            },
            1190: (t)=>{
                t.exports = function(t, e) {
                    for(var r = t.length, n = -1; ++n < r;)t[n] ^= e[n];
                    return t;
                };
            },
            4276: (t, e, r)=>{
                "use strict";
                var n = 65536, i = r(9732).Buffer, o = r.g.crypto || r.g.msCrypto;
                o && o.getRandomValues ? t.exports = function(t, e) {
                    if (t > 4294967295) throw new RangeError("requested too many random bytes");
                    var r = i.allocUnsafe(t);
                    if (t > 0) {
                        if (t > n) for(var a = 0; a < t; a += n)o.getRandomValues(r.slice(a, a + n));
                        else o.getRandomValues(r);
                    }
                    return "function" == typeof e ? ({
                        env: {}
                    }).nextTick(function() {
                        e(null, r);
                    }) : r;
                } : t.exports = function() {
                    throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11");
                };
            },
            7952: (t, e, r)=>{
                "use strict";
                function n() {
                    throw new Error("secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11");
                }
                var i = r(9732), o = r(4276), a = i.Buffer, s = i.kMaxLength, u = r.g.crypto || r.g.msCrypto, c = Math.pow(2, 32) - 1;
                function f(t, e) {
                    if ("number" != typeof t || t != t) throw new TypeError("offset must be a number");
                    if (t > c || t < 0) throw new TypeError("offset must be a uint32");
                    if (t > s || t > e) throw new RangeError("offset out of range");
                }
                function l(t, e, r) {
                    if ("number" != typeof t || t != t) throw new TypeError("size must be a number");
                    if (t > c || t < 0) throw new TypeError("size must be a uint32");
                    if (t + e > r || t > s) throw new RangeError("buffer too small");
                }
                function h(t, e, r, n) {
                    if (({
                        env: {}
                    }).browser) {
                        var i = t.buffer, a = new Uint8Array(i, e, r);
                        return u.getRandomValues(a), n ? void ({
                            env: {}
                        }).nextTick(function() {
                            n(null, t);
                        }) : t;
                    }
                    if (!n) return o(r).copy(t, e), t;
                    o(r, function(r, i) {
                        if (r) return n(r);
                        i.copy(t, e), n(null, t);
                    });
                }
                u && u.getRandomValues || !({
                    env: {}
                }).browser ? (e.randomFill = function(t, e, n, i) {
                    if (!(a.isBuffer(t) || t instanceof r.g.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
                    if ("function" == typeof e) i = e, e = 0, n = t.length;
                    else if ("function" == typeof n) i = n, n = t.length - e;
                    else if ("function" != typeof i) throw new TypeError('"cb" argument must be a function');
                    return f(e, t.length), l(n, e, t.length), h(t, e, n, i);
                }, e.randomFillSync = function(t, e, n) {
                    if (void 0 === e && (e = 0), !(a.isBuffer(t) || t instanceof r.g.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
                    return f(e, t.length), void 0 === n && (n = t.length - e), l(n, e, t.length), h(t, e, n);
                }) : (e.randomFill = n, e.randomFillSync = n);
            },
            1313: (t, e, r)=>{
                "use strict";
                var n = r(4758), i = Object.keys || function(t) {
                    var e = [];
                    for(var r in t)e.push(r);
                    return e;
                };
                t.exports = l;
                var o = Object.create(r(7919));
                o.inherits = r(1679);
                var a = r(7991), s = r(9147);
                o.inherits(l, a);
                for(var u = i(s.prototype), c = 0; c < u.length; c++){
                    var f = u[c];
                    l.prototype[f] || (l.prototype[f] = s.prototype[f]);
                }
                function l(t) {
                    if (!(this instanceof l)) return new l(t);
                    a.call(this, t), s.call(this, t), t && !1 === t.readable && (this.readable = !1), t && !1 === t.writable && (this.writable = !1), this.allowHalfOpen = !0, t && !1 === t.allowHalfOpen && (this.allowHalfOpen = !1), this.once("end", h);
                }
                function h() {
                    this.allowHalfOpen || this._writableState.ended || n.nextTick(p, this);
                }
                function p(t) {
                    t.end();
                }
                Object.defineProperty(l.prototype, "writableHighWaterMark", {
                    enumerable: !1,
                    get: function() {
                        return this._writableState.highWaterMark;
                    }
                }), Object.defineProperty(l.prototype, "destroyed", {
                    get: function() {
                        return void 0 !== this._readableState && void 0 !== this._writableState && this._readableState.destroyed && this._writableState.destroyed;
                    },
                    set: function(t) {
                        void 0 !== this._readableState && void 0 !== this._writableState && (this._readableState.destroyed = t, this._writableState.destroyed = t);
                    }
                }), l.prototype._destroy = function(t, e) {
                    this.push(null), this.end(), n.nextTick(e, t);
                };
            },
            9125: (t, e, r)=>{
                "use strict";
                t.exports = o;
                var n = r(1191), i = Object.create(r(7919));
                function o(t) {
                    if (!(this instanceof o)) return new o(t);
                    n.call(this, t);
                }
                i.inherits = r(1679), i.inherits(o, n), o.prototype._transform = function(t, e, r) {
                    r(null, t);
                };
            },
            7991: (t, e, r)=>{
                "use strict";
                var n = r(4758);
                t.exports = v;
                var i, o = r(5455);
                v.ReadableState = m, r(3550).EventEmitter;
                var a = function(t, e) {
                    return t.listeners(e).length;
                }, s = r(5864), u = r(8317).Buffer, c = (void 0 !== r.g ? r.g : "undefined" != typeof window ? window : "undefined" != typeof self ? self : {}).Uint8Array || function() {}, f = Object.create(r(7919));
                f.inherits = r(1679);
                var l = r(9838), h = void 0;
                h = l && l.debuglog ? l.debuglog("stream") : function() {};
                var p, d = r(6567), y = r(8639);
                f.inherits(v, s);
                var b = [
                    "error",
                    "close",
                    "destroy",
                    "pause",
                    "resume"
                ];
                function m(t, e) {
                    t = t || {};
                    var n = e instanceof (i = i || r(1313));
                    this.objectMode = !!t.objectMode, n && (this.objectMode = this.objectMode || !!t.readableObjectMode);
                    var o = t.highWaterMark, a = t.readableHighWaterMark, s = this.objectMode ? 16 : 16384;
                    this.highWaterMark = o || 0 === o ? o : n && (a || 0 === a) ? a : s, this.highWaterMark = Math.floor(this.highWaterMark), this.buffer = new d, this.length = 0, this.pipes = null, this.pipesCount = 0, this.flowing = null, this.ended = !1, this.endEmitted = !1, this.reading = !1, this.sync = !0, this.needReadable = !1, this.emittedReadable = !1, this.readableListening = !1, this.resumeScheduled = !1, this.destroyed = !1, this.defaultEncoding = t.defaultEncoding || "utf8", this.awaitDrain = 0, this.readingMore = !1, this.decoder = null, this.encoding = null, t.encoding && (p || (p = r(136).I), this.decoder = new p(t.encoding), this.encoding = t.encoding);
                }
                function v(t) {
                    if (i = i || r(1313), !(this instanceof v)) return new v(t);
                    this._readableState = new m(t, this), this.readable = !0, t && ("function" == typeof t.read && (this._read = t.read), "function" == typeof t.destroy && (this._destroy = t.destroy)), s.call(this);
                }
                function g(t, e, r, n, i) {
                    var o, a = t._readableState;
                    return null === e ? (a.reading = !1, function(t, e) {
                        if (!e.ended) {
                            if (e.decoder) {
                                var r = e.decoder.end();
                                r && r.length && (e.buffer.push(r), e.length += e.objectMode ? 1 : r.length);
                            }
                            e.ended = !0, O(t);
                        }
                    }(t, a)) : (i || (o = function(t, e) {
                        var r, n;
                        return n = e, u.isBuffer(n) || n instanceof c || "string" == typeof e || void 0 === e || t.objectMode || (r = new TypeError("Invalid non-string/buffer chunk")), r;
                    }(a, e)), o ? t.emit("error", o) : a.objectMode || e && e.length > 0 ? ("string" == typeof e || a.objectMode || Object.getPrototypeOf(e) === u.prototype || (e = function(t) {
                        return u.from(t);
                    }(e)), n ? a.endEmitted ? t.emit("error", new Error("stream.unshift() after end event")) : _(t, a, e, !0) : a.ended ? t.emit("error", new Error("stream.push() after EOF")) : (a.reading = !1, a.decoder && !r ? (e = a.decoder.write(e), a.objectMode || 0 !== e.length ? _(t, a, e, !1) : $(t, a)) : _(t, a, e, !1))) : n || (a.reading = !1)), function(t) {
                        return !t.ended && (t.needReadable || t.length < t.highWaterMark || 0 === t.length);
                    }(a);
                }
                function _(t, e, r, n) {
                    e.flowing && 0 === e.length && !e.sync ? (t.emit("data", r), t.read(0)) : (e.length += e.objectMode ? 1 : r.length, n ? e.buffer.unshift(r) : e.buffer.push(r), e.needReadable && O(t)), $(t, e);
                }
                Object.defineProperty(v.prototype, "destroyed", {
                    get: function() {
                        return void 0 !== this._readableState && this._readableState.destroyed;
                    },
                    set: function(t) {
                        this._readableState && (this._readableState.destroyed = t);
                    }
                }), v.prototype.destroy = y.destroy, v.prototype._undestroy = y.undestroy, v.prototype._destroy = function(t, e) {
                    this.push(null), e(t);
                }, v.prototype.push = function(t, e) {
                    var r, n = this._readableState;
                    return n.objectMode ? r = !0 : "string" == typeof t && ((e = e || n.defaultEncoding) !== n.encoding && (t = u.from(t, e), e = ""), r = !0), g(this, t, e, !1, r);
                }, v.prototype.unshift = function(t) {
                    return g(this, t, null, !0, !1);
                }, v.prototype.isPaused = function() {
                    return !1 === this._readableState.flowing;
                }, v.prototype.setEncoding = function(t) {
                    return p || (p = r(136).I), this._readableState.decoder = new p(t), this._readableState.encoding = t, this;
                };
                var w = 8388608;
                function S(t, e) {
                    return t <= 0 || 0 === e.length && e.ended ? 0 : e.objectMode ? 1 : t != t ? e.flowing && e.length ? e.buffer.head.data.length : e.length : (t > e.highWaterMark && (e.highWaterMark = function(t) {
                        return t >= w ? t = w : (t--, t |= t >>> 1, t |= t >>> 2, t |= t >>> 4, t |= t >>> 8, t |= t >>> 16, t++), t;
                    }(t)), t <= e.length ? t : e.ended ? e.length : (e.needReadable = !0, 0));
                }
                function O(t) {
                    var e = t._readableState;
                    e.needReadable = !1, e.emittedReadable || (h("emitReadable", e.flowing), e.emittedReadable = !0, e.sync ? n.nextTick(j, t) : j(t));
                }
                function j(t) {
                    h("emit readable"), t.emit("readable"), x(t);
                }
                function $(t, e) {
                    e.readingMore || (e.readingMore = !0, n.nextTick(E, t, e));
                }
                function E(t, e) {
                    for(var r = e.length; !e.reading && !e.flowing && !e.ended && e.length < e.highWaterMark && (h("maybeReadMore read 0"), t.read(0), r !== e.length);)r = e.length;
                    e.readingMore = !1;
                }
                function A(t) {
                    h("readable nexttick read 0"), t.read(0);
                }
                function P(t, e) {
                    e.reading || (h("resume read 0"), t.read(0)), e.resumeScheduled = !1, e.awaitDrain = 0, t.emit("resume"), x(t), e.flowing && !e.reading && t.read(0);
                }
                function x(t) {
                    var e = t._readableState;
                    for(h("flow", e.flowing); e.flowing && null !== t.read(););
                }
                function k(t, e) {
                    var r;
                    return 0 === e.length ? null : (e.objectMode ? r = e.buffer.shift() : !t || t >= e.length ? (r = e.decoder ? e.buffer.join("") : 1 === e.buffer.length ? e.buffer.head.data : e.buffer.concat(e.length), e.buffer.clear()) : r = function(t, e, r) {
                        var n;
                        return t < e.head.data.length ? (n = e.head.data.slice(0, t), e.head.data = e.head.data.slice(t)) : n = t === e.head.data.length ? e.shift() : r ? function(t, e) {
                            var r = e.head, n = 1, i = r.data;
                            for(t -= i.length; r = r.next;){
                                var o = r.data, a = t > o.length ? o.length : t;
                                if (a === o.length ? i += o : i += o.slice(0, t), 0 == (t -= a)) {
                                    a === o.length ? (++n, r.next ? e.head = r.next : e.head = e.tail = null) : (e.head = r, r.data = o.slice(a));
                                    break;
                                }
                                ++n;
                            }
                            return e.length -= n, i;
                        }(t, e) : function(t, e) {
                            var r = u.allocUnsafe(t), n = e.head, i = 1;
                            for(n.data.copy(r), t -= n.data.length; n = n.next;){
                                var o = n.data, a = t > o.length ? o.length : t;
                                if (o.copy(r, r.length - t, 0, a), 0 == (t -= a)) {
                                    a === o.length ? (++i, n.next ? e.head = n.next : e.head = e.tail = null) : (e.head = n, n.data = o.slice(a));
                                    break;
                                }
                                ++i;
                            }
                            return e.length -= i, r;
                        }(t, e), n;
                    }(t, e.buffer, e.decoder), r);
                }
                function M(t) {
                    var e = t._readableState;
                    if (e.length > 0) throw new Error('"endReadable()" called on non-empty stream');
                    e.endEmitted || (e.ended = !0, n.nextTick(T, e, t));
                }
                function T(t, e) {
                    t.endEmitted || 0 !== t.length || (t.endEmitted = !0, e.readable = !1, e.emit("end"));
                }
                function B(t, e) {
                    for(var r = 0, n = t.length; r < n; r++)if (t[r] === e) return r;
                    return -1;
                }
                v.prototype.read = function(t) {
                    h("read", t), t = parseInt(t, 10);
                    var e = this._readableState, r = t;
                    if (0 !== t && (e.emittedReadable = !1), 0 === t && e.needReadable && (e.length >= e.highWaterMark || e.ended)) return h("read: emitReadable", e.length, e.ended), 0 === e.length && e.ended ? M(this) : O(this), null;
                    if (0 === (t = S(t, e)) && e.ended) return 0 === e.length && M(this), null;
                    var n, i = e.needReadable;
                    return h("need readable", i), (0 === e.length || e.length - t < e.highWaterMark) && h("length less than watermark", i = !0), e.ended || e.reading ? h("reading or ended", i = !1) : i && (h("do read"), e.reading = !0, e.sync = !0, 0 === e.length && (e.needReadable = !0), this._read(e.highWaterMark), e.sync = !1, e.reading || (t = S(r, e))), null === (n = t > 0 ? k(t, e) : null) ? (e.needReadable = !0, t = 0) : e.length -= t, 0 === e.length && (e.ended || (e.needReadable = !0), r !== t && e.ended && M(this)), null !== n && this.emit("data", n), n;
                }, v.prototype._read = function(t) {
                    this.emit("error", new Error("_read() is not implemented"));
                }, v.prototype.pipe = function(t, e) {
                    var r = this, i = this._readableState;
                    switch(i.pipesCount){
                        case 0:
                            i.pipes = t;
                            break;
                        case 1:
                            i.pipes = [
                                i.pipes,
                                t
                            ];
                            break;
                        default:
                            i.pipes.push(t);
                    }
                    i.pipesCount += 1, h("pipe count=%d opts=%j", i.pipesCount, e);
                    var s = e && !1 === e.end || t === ({
                        env: {}
                    }).stdout || t === ({
                        env: {}
                    }).stderr ? m : u;
                    function u() {
                        h("onend"), t.end();
                    }
                    i.endEmitted ? n.nextTick(s) : r.once("end", s), t.on("unpipe", function e(n, o) {
                        h("onunpipe"), n === r && o && !1 === o.hasUnpiped && (o.hasUnpiped = !0, h("cleanup"), t.removeListener("close", y), t.removeListener("finish", b), t.removeListener("drain", c), t.removeListener("error", d), t.removeListener("unpipe", e), r.removeListener("end", u), r.removeListener("end", m), r.removeListener("data", p), f = !0, !i.awaitDrain || t._writableState && !t._writableState.needDrain || c());
                    });
                    var c = function(t) {
                        return function() {
                            var e = t._readableState;
                            h("pipeOnDrain", e.awaitDrain), e.awaitDrain && e.awaitDrain--, 0 === e.awaitDrain && a(t, "data") && (e.flowing = !0, x(t));
                        };
                    }(r);
                    t.on("drain", c);
                    var f = !1, l = !1;
                    function p(e) {
                        h("ondata"), l = !1, !1 !== t.write(e) || l || ((1 === i.pipesCount && i.pipes === t || i.pipesCount > 1 && -1 !== B(i.pipes, t)) && !f && (h("false write response, pause", i.awaitDrain), i.awaitDrain++, l = !0), r.pause());
                    }
                    function d(e) {
                        h("onerror", e), m(), t.removeListener("error", d), 0 === a(t, "error") && t.emit("error", e);
                    }
                    function y() {
                        t.removeListener("finish", b), m();
                    }
                    function b() {
                        h("onfinish"), t.removeListener("close", y), m();
                    }
                    function m() {
                        h("unpipe"), r.unpipe(t);
                    }
                    return r.on("data", p), function(t, e, r) {
                        if ("function" == typeof t.prependListener) return t.prependListener(e, r);
                        t._events && t._events[e] ? o(t._events[e]) ? t._events[e].unshift(r) : t._events[e] = [
                            r,
                            t._events[e]
                        ] : t.on(e, r);
                    }(t, "error", d), t.once("close", y), t.once("finish", b), t.emit("pipe", r), i.flowing || (h("pipe resume"), r.resume()), t;
                }, v.prototype.unpipe = function(t) {
                    var e = this._readableState, r = {
                        hasUnpiped: !1
                    };
                    if (0 === e.pipesCount) return this;
                    if (1 === e.pipesCount) return t && t !== e.pipes || (t || (t = e.pipes), e.pipes = null, e.pipesCount = 0, e.flowing = !1, t && t.emit("unpipe", this, r)), this;
                    if (!t) {
                        var n = e.pipes, i = e.pipesCount;
                        e.pipes = null, e.pipesCount = 0, e.flowing = !1;
                        for(var o = 0; o < i; o++)n[o].emit("unpipe", this, {
                            hasUnpiped: !1
                        });
                        return this;
                    }
                    var a = B(e.pipes, t);
                    return -1 === a || (e.pipes.splice(a, 1), e.pipesCount -= 1, 1 === e.pipesCount && (e.pipes = e.pipes[0]), t.emit("unpipe", this, r)), this;
                }, v.prototype.on = function(t, e) {
                    var r = s.prototype.on.call(this, t, e);
                    if ("data" === t) !1 !== this._readableState.flowing && this.resume();
                    else if ("readable" === t) {
                        var i = this._readableState;
                        i.endEmitted || i.readableListening || (i.readableListening = i.needReadable = !0, i.emittedReadable = !1, i.reading ? i.length && O(this) : n.nextTick(A, this));
                    }
                    return r;
                }, v.prototype.addListener = v.prototype.on, v.prototype.resume = function() {
                    var t = this._readableState;
                    return t.flowing || (h("resume"), t.flowing = !0, function(t, e) {
                        e.resumeScheduled || (e.resumeScheduled = !0, n.nextTick(P, t, e));
                    }(this, t)), this;
                }, v.prototype.pause = function() {
                    return h("call pause flowing=%j", this._readableState.flowing), !1 !== this._readableState.flowing && (h("pause"), this._readableState.flowing = !1, this.emit("pause")), this;
                }, v.prototype.wrap = function(t) {
                    var e = this, r = this._readableState, n = !1;
                    for(var i in t.on("end", function() {
                        if (h("wrapped end"), r.decoder && !r.ended) {
                            var t = r.decoder.end();
                            t && t.length && e.push(t);
                        }
                        e.push(null);
                    }), t.on("data", function(i) {
                        h("wrapped data"), r.decoder && (i = r.decoder.write(i)), r.objectMode && null == i || (r.objectMode || i && i.length) && (e.push(i) || (n = !0, t.pause()));
                    }), t)void 0 === this[i] && "function" == typeof t[i] && (this[i] = function(e) {
                        return function() {
                            return t[e].apply(t, arguments);
                        };
                    }(i));
                    for(var o = 0; o < b.length; o++)t.on(b[o], this.emit.bind(this, b[o]));
                    return this._read = function(e) {
                        h("wrapped _read", e), n && (n = !1, t.resume());
                    }, this;
                }, Object.defineProperty(v.prototype, "readableHighWaterMark", {
                    enumerable: !1,
                    get: function() {
                        return this._readableState.highWaterMark;
                    }
                }), v._fromList = k;
            },
            1191: (t, e, r)=>{
                "use strict";
                t.exports = a;
                var n = r(1313), i = Object.create(r(7919));
                function o(t, e) {
                    var r = this._transformState;
                    r.transforming = !1;
                    var n = r.writecb;
                    if (!n) return this.emit("error", new Error("write callback called multiple times"));
                    r.writechunk = null, r.writecb = null, null != e && this.push(e), n(t);
                    var i = this._readableState;
                    i.reading = !1, (i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark);
                }
                function a(t) {
                    if (!(this instanceof a)) return new a(t);
                    n.call(this, t), this._transformState = {
                        afterTransform: o.bind(this),
                        needTransform: !1,
                        transforming: !1,
                        writecb: null,
                        writechunk: null,
                        writeencoding: null
                    }, this._readableState.needReadable = !0, this._readableState.sync = !1, t && ("function" == typeof t.transform && (this._transform = t.transform), "function" == typeof t.flush && (this._flush = t.flush)), this.on("prefinish", s);
                }
                function s() {
                    var t = this;
                    "function" == typeof this._flush ? this._flush(function(e, r) {
                        u(t, e, r);
                    }) : u(this, null, null);
                }
                function u(t, e, r) {
                    if (e) return t.emit("error", e);
                    if (null != r && t.push(r), t._writableState.length) throw new Error("Calling transform done when ws.length != 0");
                    if (t._transformState.transforming) throw new Error("Calling transform done when still transforming");
                    return t.push(null);
                }
                i.inherits = r(1679), i.inherits(a, n), a.prototype.push = function(t, e) {
                    return this._transformState.needTransform = !1, n.prototype.push.call(this, t, e);
                }, a.prototype._transform = function(t, e, r) {
                    throw new Error("_transform() is not implemented");
                }, a.prototype._write = function(t, e, r) {
                    var n = this._transformState;
                    if (n.writecb = r, n.writechunk = t, n.writeencoding = e, !n.transforming) {
                        var i = this._readableState;
                        (n.needTransform || i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark);
                    }
                }, a.prototype._read = function(t) {
                    var e = this._transformState;
                    null !== e.writechunk && e.writecb && !e.transforming ? (e.transforming = !0, this._transform(e.writechunk, e.writeencoding, e.afterTransform)) : e.needTransform = !0;
                }, a.prototype._destroy = function(t, e) {
                    var r = this;
                    n.prototype._destroy.call(this, t, function(t) {
                        e(t), r.emit("close");
                    });
                };
            },
            9147: (t, e, r)=>{
                "use strict";
                var n = r(4758);
                function i(t) {
                    var e = this;
                    this.next = null, this.entry = null, this.finish = function() {
                        !function(t, e) {
                            var r = t.entry;
                            for(t.entry = null; r;){
                                var n = r.callback;
                                e.pendingcb--, n(undefined), r = r.next;
                            }
                            e.corkedRequestsFree.next = t;
                        }(e, t);
                    };
                }
                t.exports = b;
                var o, a = !({
                    env: {}
                }).browser && [
                    "v0.10",
                    "v0.9."
                ].indexOf(({
                    env: {}
                }).version.slice(0, 5)) > -1 ? setImmediate : n.nextTick;
                b.WritableState = y;
                var s = Object.create(r(7919));
                s.inherits = r(1679);
                var u, c = {
                    deprecate: r(3340)
                }, f = r(5864), l = r(8317).Buffer, h = (void 0 !== r.g ? r.g : "undefined" != typeof window ? window : "undefined" != typeof self ? self : {}).Uint8Array || function() {}, p = r(8639);
                function d() {}
                function y(t, e) {
                    o = o || r(1313), t = t || {};
                    var s = e instanceof o;
                    this.objectMode = !!t.objectMode, s && (this.objectMode = this.objectMode || !!t.writableObjectMode);
                    var u = t.highWaterMark, c = t.writableHighWaterMark, f = this.objectMode ? 16 : 16384;
                    this.highWaterMark = u || 0 === u ? u : s && (c || 0 === c) ? c : f, this.highWaterMark = Math.floor(this.highWaterMark), this.finalCalled = !1, this.needDrain = !1, this.ending = !1, this.ended = !1, this.finished = !1, this.destroyed = !1;
                    var l = !1 === t.decodeStrings;
                    this.decodeStrings = !l, this.defaultEncoding = t.defaultEncoding || "utf8", this.length = 0, this.writing = !1, this.corked = 0, this.sync = !0, this.bufferProcessing = !1, this.onwrite = function(t) {
                        !function(t, e) {
                            var r = t._writableState, i = r.sync, o = r.writecb;
                            if (function(t) {
                                t.writing = !1, t.writecb = null, t.length -= t.writelen, t.writelen = 0;
                            }(r), e) !function(t, e, r, i, o) {
                                --e.pendingcb, r ? (n.nextTick(o, i), n.nextTick(S, t, e), t._writableState.errorEmitted = !0, t.emit("error", i)) : (o(i), t._writableState.errorEmitted = !0, t.emit("error", i), S(t, e));
                            }(t, r, i, e, o);
                            else {
                                var s = _(r);
                                s || r.corked || r.bufferProcessing || !r.bufferedRequest || g(t, r), i ? a(v, t, r, s, o) : v(t, r, s, o);
                            }
                        }(e, t);
                    }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, this.prefinished = !1, this.errorEmitted = !1, this.bufferedRequestCount = 0, this.corkedRequestsFree = new i(this);
                }
                function b(t) {
                    if (o = o || r(1313), !(u.call(b, this) || this instanceof o)) return new b(t);
                    this._writableState = new y(t, this), this.writable = !0, t && ("function" == typeof t.write && (this._write = t.write), "function" == typeof t.writev && (this._writev = t.writev), "function" == typeof t.destroy && (this._destroy = t.destroy), "function" == typeof t.final && (this._final = t.final)), f.call(this);
                }
                function m(t, e, r, n, i, o, a) {
                    e.writelen = n, e.writecb = a, e.writing = !0, e.sync = !0, r ? t._writev(i, e.onwrite) : t._write(i, o, e.onwrite), e.sync = !1;
                }
                function v(t, e, r, n) {
                    r || function(t, e) {
                        0 === e.length && e.needDrain && (e.needDrain = !1, t.emit("drain"));
                    }(t, e), e.pendingcb--, n(), S(t, e);
                }
                function g(t, e) {
                    e.bufferProcessing = !0;
                    var r = e.bufferedRequest;
                    if (t._writev && r && r.next) {
                        var n = e.bufferedRequestCount, o = new Array(n), a = e.corkedRequestsFree;
                        a.entry = r;
                        for(var s = 0, u = !0; r;)o[s] = r, r.isBuf || (u = !1), r = r.next, s += 1;
                        o.allBuffers = u, m(t, e, !0, e.length, o, "", a.finish), e.pendingcb++, e.lastBufferedRequest = null, a.next ? (e.corkedRequestsFree = a.next, a.next = null) : e.corkedRequestsFree = new i(e), e.bufferedRequestCount = 0;
                    } else {
                        for(; r;){
                            var c = r.chunk, f = r.encoding, l = r.callback;
                            if (m(t, e, !1, e.objectMode ? 1 : c.length, c, f, l), r = r.next, e.bufferedRequestCount--, e.writing) break;
                        }
                        null === r && (e.lastBufferedRequest = null);
                    }
                    e.bufferedRequest = r, e.bufferProcessing = !1;
                }
                function _(t) {
                    return t.ending && 0 === t.length && null === t.bufferedRequest && !t.finished && !t.writing;
                }
                function w(t, e) {
                    t._final(function(r) {
                        e.pendingcb--, r && t.emit("error", r), e.prefinished = !0, t.emit("prefinish"), S(t, e);
                    });
                }
                function S(t, e) {
                    var r = _(e);
                    return r && (function(t, e) {
                        e.prefinished || e.finalCalled || ("function" == typeof t._final ? (e.pendingcb++, e.finalCalled = !0, n.nextTick(w, t, e)) : (e.prefinished = !0, t.emit("prefinish")));
                    }(t, e), 0 === e.pendingcb && (e.finished = !0, t.emit("finish"))), r;
                }
                s.inherits(b, f), y.prototype.getBuffer = function() {
                    for(var t = this.bufferedRequest, e = []; t;)e.push(t), t = t.next;
                    return e;
                }, function() {
                    try {
                        Object.defineProperty(y.prototype, "buffer", {
                            get: c.deprecate(function() {
                                return this.getBuffer();
                            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
                        });
                    } catch (t) {}
                }(), "function" == typeof Symbol && Symbol.hasInstance && "function" == typeof Function.prototype[Symbol.hasInstance] ? (u = Function.prototype[Symbol.hasInstance], Object.defineProperty(b, Symbol.hasInstance, {
                    value: function(t) {
                        return !!u.call(this, t) || this === b && t && t._writableState instanceof y;
                    }
                })) : u = function(t) {
                    return t instanceof this;
                }, b.prototype.pipe = function() {
                    this.emit("error", new Error("Cannot pipe, not readable"));
                }, b.prototype.write = function(t, e, r) {
                    var i, o = this._writableState, a = !1, s = !o.objectMode && (i = t, l.isBuffer(i) || i instanceof h);
                    return s && !l.isBuffer(t) && (t = function(t) {
                        return l.from(t);
                    }(t)), "function" == typeof e && (r = e, e = null), s ? e = "buffer" : e || (e = o.defaultEncoding), "function" != typeof r && (r = d), o.ended ? function(t, e) {
                        var r = new Error("write after end");
                        t.emit("error", r), n.nextTick(e, r);
                    }(this, r) : (s || function(t, e, r, i) {
                        var o = !0, a = !1;
                        return null === r ? a = new TypeError("May not write null values to stream") : "string" == typeof r || void 0 === r || e.objectMode || (a = new TypeError("Invalid non-string/buffer chunk")), a && (t.emit("error", a), n.nextTick(i, a), o = !1), o;
                    }(this, o, t, r)) && (o.pendingcb++, a = function(t, e, r, n, i, o) {
                        if (!r) {
                            var a = function(t, e, r) {
                                return t.objectMode || !1 === t.decodeStrings || "string" != typeof e || (e = l.from(e, r)), e;
                            }(e, n, i);
                            n !== a && (r = !0, i = "buffer", n = a);
                        }
                        var s = e.objectMode ? 1 : n.length;
                        e.length += s;
                        var u = e.length < e.highWaterMark;
                        if (u || (e.needDrain = !0), e.writing || e.corked) {
                            var c = e.lastBufferedRequest;
                            e.lastBufferedRequest = {
                                chunk: n,
                                encoding: i,
                                isBuf: r,
                                callback: o,
                                next: null
                            }, c ? c.next = e.lastBufferedRequest : e.bufferedRequest = e.lastBufferedRequest, e.bufferedRequestCount += 1;
                        } else m(t, e, !1, s, n, i, o);
                        return u;
                    }(this, o, s, t, e, r)), a;
                }, b.prototype.cork = function() {
                    this._writableState.corked++;
                }, b.prototype.uncork = function() {
                    var t = this._writableState;
                    t.corked && (t.corked--, t.writing || t.corked || t.bufferProcessing || !t.bufferedRequest || g(this, t));
                }, b.prototype.setDefaultEncoding = function(t) {
                    if ("string" == typeof t && (t = t.toLowerCase()), !([
                        "hex",
                        "utf8",
                        "utf-8",
                        "ascii",
                        "binary",
                        "base64",
                        "ucs2",
                        "ucs-2",
                        "utf16le",
                        "utf-16le",
                        "raw"
                    ].indexOf((t + "").toLowerCase()) > -1)) throw new TypeError("Unknown encoding: " + t);
                    return this._writableState.defaultEncoding = t, this;
                }, Object.defineProperty(b.prototype, "writableHighWaterMark", {
                    enumerable: !1,
                    get: function() {
                        return this._writableState.highWaterMark;
                    }
                }), b.prototype._write = function(t, e, r) {
                    r(new Error("_write() is not implemented"));
                }, b.prototype._writev = null, b.prototype.end = function(t, e, r) {
                    var i = this._writableState;
                    "function" == typeof t ? (r = t, t = null, e = null) : "function" == typeof e && (r = e, e = null), null != t && this.write(t, e), i.corked && (i.corked = 1, this.uncork()), i.ending || function(t, e, r) {
                        e.ending = !0, S(t, e), r && (e.finished ? n.nextTick(r) : t.once("finish", r)), e.ended = !0, t.writable = !1;
                    }(this, i, r);
                }, Object.defineProperty(b.prototype, "destroyed", {
                    get: function() {
                        return void 0 !== this._writableState && this._writableState.destroyed;
                    },
                    set: function(t) {
                        this._writableState && (this._writableState.destroyed = t);
                    }
                }), b.prototype.destroy = p.destroy, b.prototype._undestroy = p.undestroy, b.prototype._destroy = function(t, e) {
                    this.end(), e(t);
                };
            },
            6567: (t, e, r)=>{
                "use strict";
                var n = r(8317).Buffer, i = r(5340);
                t.exports = function() {
                    function t() {
                        !function(t, e) {
                            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                        }(this, t), this.head = null, this.tail = null, this.length = 0;
                    }
                    return t.prototype.push = function(t) {
                        var e = {
                            data: t,
                            next: null
                        };
                        this.length > 0 ? this.tail.next = e : this.head = e, this.tail = e, ++this.length;
                    }, t.prototype.unshift = function(t) {
                        var e = {
                            data: t,
                            next: this.head
                        };
                        0 === this.length && (this.tail = e), this.head = e, ++this.length;
                    }, t.prototype.shift = function() {
                        if (0 !== this.length) {
                            var t = this.head.data;
                            return 1 === this.length ? this.head = this.tail = null : this.head = this.head.next, --this.length, t;
                        }
                    }, t.prototype.clear = function() {
                        this.head = this.tail = null, this.length = 0;
                    }, t.prototype.join = function(t) {
                        if (0 === this.length) return "";
                        for(var e = this.head, r = "" + e.data; e = e.next;)r += t + e.data;
                        return r;
                    }, t.prototype.concat = function(t) {
                        if (0 === this.length) return n.alloc(0);
                        for(var e, r, i = n.allocUnsafe(t >>> 0), o = this.head, a = 0; o;)e = i, r = a, o.data.copy(e, r), a += o.data.length, o = o.next;
                        return i;
                    }, t;
                }(), i && i.inspect && i.inspect.custom && (t.exports.prototype[i.inspect.custom] = function() {
                    var t = i.inspect({
                        length: this.length
                    });
                    return this.constructor.name + " " + t;
                });
            },
            8639: (t, e, r)=>{
                "use strict";
                var n = r(4758);
                function i(t, e) {
                    t.emit("error", e);
                }
                t.exports = {
                    destroy: function(t, e) {
                        var r = this, o = this._readableState && this._readableState.destroyed, a = this._writableState && this._writableState.destroyed;
                        return o || a ? (e ? e(t) : t && (this._writableState ? this._writableState.errorEmitted || (this._writableState.errorEmitted = !0, n.nextTick(i, this, t)) : n.nextTick(i, this, t)), this) : (this._readableState && (this._readableState.destroyed = !0), this._writableState && (this._writableState.destroyed = !0), this._destroy(t || null, function(t) {
                            !e && t ? r._writableState ? r._writableState.errorEmitted || (r._writableState.errorEmitted = !0, n.nextTick(i, r, t)) : n.nextTick(i, r, t) : e && e(t);
                        }), this);
                    },
                    undestroy: function() {
                        this._readableState && (this._readableState.destroyed = !1, this._readableState.reading = !1, this._readableState.ended = !1, this._readableState.endEmitted = !1), this._writableState && (this._writableState.destroyed = !1, this._writableState.ended = !1, this._writableState.ending = !1, this._writableState.finalCalled = !1, this._writableState.prefinished = !1, this._writableState.finished = !1, this._writableState.errorEmitted = !1);
                    }
                };
            },
            5864: (t, e, r)=>{
                t.exports = r(3550).EventEmitter;
            },
            8317: (t, e, r)=>{
                var n = r(5832), i = n.Buffer;
                function o(t, e) {
                    for(var r in t)e[r] = t[r];
                }
                function a(t, e, r) {
                    return i(t, e, r);
                }
                i.from && i.alloc && i.allocUnsafe && i.allocUnsafeSlow ? t.exports = n : (o(n, e), e.Buffer = a), o(i, a), a.from = function(t, e, r) {
                    if ("number" == typeof t) throw new TypeError("Argument must not be a number");
                    return i(t, e, r);
                }, a.alloc = function(t, e, r) {
                    if ("number" != typeof t) throw new TypeError("Argument must be a number");
                    var n = i(t);
                    return void 0 !== e ? "string" == typeof r ? n.fill(e, r) : n.fill(e) : n.fill(0), n;
                }, a.allocUnsafe = function(t) {
                    if ("number" != typeof t) throw new TypeError("Argument must be a number");
                    return i(t);
                }, a.allocUnsafeSlow = function(t) {
                    if ("number" != typeof t) throw new TypeError("Argument must be a number");
                    return n.SlowBuffer(t);
                };
            },
            3292: (t, e, r)=>{
                (e = t.exports = r(7991)).Stream = e, e.Readable = e, e.Writable = r(9147), e.Duplex = r(1313), e.Transform = r(1191), e.PassThrough = r(9125);
            },
            1058: (t, e, r)=>{
                "use strict";
                var n = r(5832).Buffer, i = r(1679), o = r(6936), a = new Array(16), s = [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    7,
                    4,
                    13,
                    1,
                    10,
                    6,
                    15,
                    3,
                    12,
                    0,
                    9,
                    5,
                    2,
                    14,
                    11,
                    8,
                    3,
                    10,
                    14,
                    4,
                    9,
                    15,
                    8,
                    1,
                    2,
                    7,
                    0,
                    6,
                    13,
                    11,
                    5,
                    12,
                    1,
                    9,
                    11,
                    10,
                    0,
                    8,
                    12,
                    4,
                    13,
                    3,
                    7,
                    15,
                    14,
                    5,
                    6,
                    2,
                    4,
                    0,
                    5,
                    9,
                    7,
                    12,
                    2,
                    10,
                    14,
                    1,
                    3,
                    8,
                    11,
                    6,
                    15,
                    13
                ], u = [
                    5,
                    14,
                    7,
                    0,
                    9,
                    2,
                    11,
                    4,
                    13,
                    6,
                    15,
                    8,
                    1,
                    10,
                    3,
                    12,
                    6,
                    11,
                    3,
                    7,
                    0,
                    13,
                    5,
                    10,
                    14,
                    15,
                    8,
                    12,
                    4,
                    9,
                    1,
                    2,
                    15,
                    5,
                    1,
                    3,
                    7,
                    14,
                    6,
                    9,
                    11,
                    8,
                    12,
                    2,
                    10,
                    0,
                    4,
                    13,
                    8,
                    6,
                    4,
                    1,
                    3,
                    11,
                    15,
                    0,
                    5,
                    12,
                    2,
                    13,
                    9,
                    7,
                    10,
                    14,
                    12,
                    15,
                    10,
                    4,
                    1,
                    5,
                    8,
                    7,
                    6,
                    2,
                    13,
                    14,
                    0,
                    3,
                    9,
                    11
                ], c = [
                    11,
                    14,
                    15,
                    12,
                    5,
                    8,
                    7,
                    9,
                    11,
                    13,
                    14,
                    15,
                    6,
                    7,
                    9,
                    8,
                    7,
                    6,
                    8,
                    13,
                    11,
                    9,
                    7,
                    15,
                    7,
                    12,
                    15,
                    9,
                    11,
                    7,
                    13,
                    12,
                    11,
                    13,
                    6,
                    7,
                    14,
                    9,
                    13,
                    15,
                    14,
                    8,
                    13,
                    6,
                    5,
                    12,
                    7,
                    5,
                    11,
                    12,
                    14,
                    15,
                    14,
                    15,
                    9,
                    8,
                    9,
                    14,
                    5,
                    6,
                    8,
                    6,
                    5,
                    12,
                    9,
                    15,
                    5,
                    11,
                    6,
                    8,
                    13,
                    12,
                    5,
                    12,
                    13,
                    14,
                    11,
                    8,
                    5,
                    6
                ], f = [
                    8,
                    9,
                    9,
                    11,
                    13,
                    15,
                    15,
                    5,
                    7,
                    7,
                    8,
                    11,
                    14,
                    14,
                    12,
                    6,
                    9,
                    13,
                    15,
                    7,
                    12,
                    8,
                    9,
                    11,
                    7,
                    7,
                    12,
                    7,
                    6,
                    15,
                    13,
                    11,
                    9,
                    7,
                    15,
                    11,
                    8,
                    6,
                    6,
                    14,
                    12,
                    13,
                    5,
                    14,
                    13,
                    13,
                    7,
                    5,
                    15,
                    5,
                    8,
                    11,
                    14,
                    14,
                    6,
                    14,
                    6,
                    9,
                    12,
                    9,
                    12,
                    5,
                    15,
                    8,
                    8,
                    5,
                    12,
                    9,
                    12,
                    5,
                    14,
                    6,
                    8,
                    13,
                    6,
                    5,
                    15,
                    13,
                    11,
                    11
                ], l = [
                    0,
                    1518500249,
                    1859775393,
                    2400959708,
                    2840853838
                ], h = [
                    1352829926,
                    1548603684,
                    1836072691,
                    2053994217,
                    0
                ];
                function p() {
                    o.call(this, 64), this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520;
                }
                function d(t, e) {
                    return t << e | t >>> 32 - e;
                }
                function y(t, e, r, n, i, o, a, s) {
                    return d(t + (e ^ r ^ n) + o + a | 0, s) + i | 0;
                }
                function b(t, e, r, n, i, o, a, s) {
                    return d(t + (e & r | ~e & n) + o + a | 0, s) + i | 0;
                }
                function m(t, e, r, n, i, o, a, s) {
                    return d(t + ((e | ~r) ^ n) + o + a | 0, s) + i | 0;
                }
                function v(t, e, r, n, i, o, a, s) {
                    return d(t + (e & n | r & ~n) + o + a | 0, s) + i | 0;
                }
                function g(t, e, r, n, i, o, a, s) {
                    return d(t + (e ^ (r | ~n)) + o + a | 0, s) + i | 0;
                }
                i(p, o), p.prototype._update = function() {
                    for(var t = a, e = 0; e < 16; ++e)t[e] = this._block.readInt32LE(4 * e);
                    for(var r = 0 | this._a, n = 0 | this._b, i = 0 | this._c, o = 0 | this._d, p = 0 | this._e, _ = 0 | this._a, w = 0 | this._b, S = 0 | this._c, O = 0 | this._d, j = 0 | this._e, $ = 0; $ < 80; $ += 1){
                        var E, A;
                        $ < 16 ? (E = y(r, n, i, o, p, t[s[$]], l[0], c[$]), A = g(_, w, S, O, j, t[u[$]], h[0], f[$])) : $ < 32 ? (E = b(r, n, i, o, p, t[s[$]], l[1], c[$]), A = v(_, w, S, O, j, t[u[$]], h[1], f[$])) : $ < 48 ? (E = m(r, n, i, o, p, t[s[$]], l[2], c[$]), A = m(_, w, S, O, j, t[u[$]], h[2], f[$])) : $ < 64 ? (E = v(r, n, i, o, p, t[s[$]], l[3], c[$]), A = b(_, w, S, O, j, t[u[$]], h[3], f[$])) : (E = g(r, n, i, o, p, t[s[$]], l[4], c[$]), A = y(_, w, S, O, j, t[u[$]], h[4], f[$])), r = p, p = o, o = d(i, 10), i = n, n = E, _ = j, j = O, O = d(S, 10), S = w, w = A;
                    }
                    var P = this._b + i + O | 0;
                    this._b = this._c + o + j | 0, this._c = this._d + p + _ | 0, this._d = this._e + r + w | 0, this._e = this._a + n + S | 0, this._a = P;
                }, p.prototype._digest = function() {
                    this._block[this._blockOffset++] = 128, this._blockOffset > 56 && (this._block.fill(0, this._blockOffset, 64), this._update(), this._blockOffset = 0), this._block.fill(0, this._blockOffset, 56), this._block.writeUInt32LE(this._length[0], 56), this._block.writeUInt32LE(this._length[1], 60), this._update();
                    var t = n.alloc ? n.alloc(20) : new n(20);
                    return t.writeInt32LE(this._a, 0), t.writeInt32LE(this._b, 4), t.writeInt32LE(this._c, 8), t.writeInt32LE(this._d, 12), t.writeInt32LE(this._e, 16), t;
                }, t.exports = p;
            },
            9732: (t, e, r)=>{
                var n = r(5832), i = n.Buffer;
                function o(t, e) {
                    for(var r in t)e[r] = t[r];
                }
                function a(t, e, r) {
                    return i(t, e, r);
                }
                i.from && i.alloc && i.allocUnsafe && i.allocUnsafeSlow ? t.exports = n : (o(n, e), e.Buffer = a), a.prototype = Object.create(i.prototype), o(i, a), a.from = function(t, e, r) {
                    if ("number" == typeof t) throw new TypeError("Argument must not be a number");
                    return i(t, e, r);
                }, a.alloc = function(t, e, r) {
                    if ("number" != typeof t) throw new TypeError("Argument must be a number");
                    var n = i(t);
                    return void 0 !== e ? "string" == typeof r ? n.fill(e, r) : n.fill(e) : n.fill(0), n;
                }, a.allocUnsafe = function(t) {
                    if ("number" != typeof t) throw new TypeError("Argument must be a number");
                    return i(t);
                }, a.allocUnsafeSlow = function(t) {
                    if ("number" != typeof t) throw new TypeError("Argument must be a number");
                    return n.SlowBuffer(t);
                };
            },
            2724: (t, e, r)=>{
                "use strict";
                var n = r(3071), i = r(9344), o = n("RegExp.prototype.exec"), a = r(2268);
                t.exports = function(t) {
                    if (!i(t)) throw new a("`regex` must be a RegExp");
                    return function(e) {
                        return null !== o(t, e);
                    };
                };
            },
            3900: (t, e, r)=>{
                "use strict";
                var n = r(6400), i = r(6750), o = r(3191)(), a = r(1464), s = r(2268), u = n("%Math.floor%");
                t.exports = function(t, e) {
                    if ("function" != typeof t) throw new s("`fn` is not a function");
                    if ("number" != typeof e || e < 0 || e > 4294967295 || u(e) !== e) throw new s("`length` must be a positive 32-bit integer");
                    var r = arguments.length > 2 && !!arguments[2], n = !0, c = !0;
                    if ("length" in t && a) {
                        var f = a(t, "length");
                        f && !f.configurable && (n = !1), f && !f.writable && (c = !1);
                    }
                    return (n || c || !r) && (o ? i(t, "length", e, !0, !0) : i(t, "length", e)), t;
                };
            },
            1485: (t, e, r)=>{
                var n = r(9732).Buffer;
                function i(t, e) {
                    this._block = n.alloc(t), this._finalSize = e, this._blockSize = t, this._len = 0;
                }
                i.prototype.update = function(t, e) {
                    "string" == typeof t && (e = e || "utf8", t = n.from(t, e));
                    for(var r = this._block, i = this._blockSize, o = t.length, a = this._len, s = 0; s < o;){
                        for(var u = a % i, c = Math.min(o - s, i - u), f = 0; f < c; f++)r[u + f] = t[s + f];
                        s += c, (a += c) % i == 0 && this._update(r);
                    }
                    return this._len += o, this;
                }, i.prototype.digest = function(t) {
                    var e = this._len % this._blockSize;
                    this._block[e] = 128, this._block.fill(0, e + 1), e >= this._finalSize && (this._update(this._block), this._block.fill(0));
                    var r = 8 * this._len;
                    if (r <= 4294967295) this._block.writeUInt32BE(r, this._blockSize - 4);
                    else {
                        var n = (4294967295 & r) >>> 0, i = (r - n) / 4294967296;
                        this._block.writeUInt32BE(i, this._blockSize - 8), this._block.writeUInt32BE(n, this._blockSize - 4);
                    }
                    this._update(this._block);
                    var o = this._hash();
                    return t ? o.toString(t) : o;
                }, i.prototype._update = function() {
                    throw new Error("_update must be implemented by subclass");
                }, t.exports = i;
            },
            3261: (t, e, r)=>{
                var n = t.exports = function(t) {
                    t = t.toLowerCase();
                    var e = n[t];
                    if (!e) throw new Error(t + " is not supported (we accept pull requests)");
                    return new e;
                };
                n.sha = r(2219), n.sha1 = r(68), n.sha224 = r(3027), n.sha256 = r(8890), n.sha384 = r(5938), n.sha512 = r(6467);
            },
            2219: (t, e, r)=>{
                var n = r(1679), i = r(1485), o = r(9732).Buffer, a = [
                    1518500249,
                    1859775393,
                    -1894007588,
                    -899497514
                ], s = new Array(80);
                function u() {
                    this.init(), this._w = s, i.call(this, 64, 56);
                }
                function c(t) {
                    return t << 30 | t >>> 2;
                }
                function f(t, e, r, n) {
                    return 0 === t ? e & r | ~e & n : 2 === t ? e & r | e & n | r & n : e ^ r ^ n;
                }
                n(u, i), u.prototype.init = function() {
                    return this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520, this;
                }, u.prototype._update = function(t) {
                    for(var e, r = this._w, n = 0 | this._a, i = 0 | this._b, o = 0 | this._c, s = 0 | this._d, u = 0 | this._e, l = 0; l < 16; ++l)r[l] = t.readInt32BE(4 * l);
                    for(; l < 80; ++l)r[l] = r[l - 3] ^ r[l - 8] ^ r[l - 14] ^ r[l - 16];
                    for(var h = 0; h < 80; ++h){
                        var p = ~~(h / 20), d = 0 | ((e = n) << 5 | e >>> 27) + f(p, i, o, s) + u + r[h] + a[p];
                        u = s, s = o, o = c(i), i = n, n = d;
                    }
                    this._a = n + this._a | 0, this._b = i + this._b | 0, this._c = o + this._c | 0, this._d = s + this._d | 0, this._e = u + this._e | 0;
                }, u.prototype._hash = function() {
                    var t = o.allocUnsafe(20);
                    return t.writeInt32BE(0 | this._a, 0), t.writeInt32BE(0 | this._b, 4), t.writeInt32BE(0 | this._c, 8), t.writeInt32BE(0 | this._d, 12), t.writeInt32BE(0 | this._e, 16), t;
                }, t.exports = u;
            },
            68: (t, e, r)=>{
                var n = r(1679), i = r(1485), o = r(9732).Buffer, a = [
                    1518500249,
                    1859775393,
                    -1894007588,
                    -899497514
                ], s = new Array(80);
                function u() {
                    this.init(), this._w = s, i.call(this, 64, 56);
                }
                function c(t) {
                    return t << 5 | t >>> 27;
                }
                function f(t) {
                    return t << 30 | t >>> 2;
                }
                function l(t, e, r, n) {
                    return 0 === t ? e & r | ~e & n : 2 === t ? e & r | e & n | r & n : e ^ r ^ n;
                }
                n(u, i), u.prototype.init = function() {
                    return this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520, this;
                }, u.prototype._update = function(t) {
                    for(var e, r = this._w, n = 0 | this._a, i = 0 | this._b, o = 0 | this._c, s = 0 | this._d, u = 0 | this._e, h = 0; h < 16; ++h)r[h] = t.readInt32BE(4 * h);
                    for(; h < 80; ++h)r[h] = (e = r[h - 3] ^ r[h - 8] ^ r[h - 14] ^ r[h - 16]) << 1 | e >>> 31;
                    for(var p = 0; p < 80; ++p){
                        var d = ~~(p / 20), y = c(n) + l(d, i, o, s) + u + r[p] + a[d] | 0;
                        u = s, s = o, o = f(i), i = n, n = y;
                    }
                    this._a = n + this._a | 0, this._b = i + this._b | 0, this._c = o + this._c | 0, this._d = s + this._d | 0, this._e = u + this._e | 0;
                }, u.prototype._hash = function() {
                    var t = o.allocUnsafe(20);
                    return t.writeInt32BE(0 | this._a, 0), t.writeInt32BE(0 | this._b, 4), t.writeInt32BE(0 | this._c, 8), t.writeInt32BE(0 | this._d, 12), t.writeInt32BE(0 | this._e, 16), t;
                }, t.exports = u;
            },
            3027: (t, e, r)=>{
                var n = r(1679), i = r(8890), o = r(1485), a = r(9732).Buffer, s = new Array(64);
                function u() {
                    this.init(), this._w = s, o.call(this, 64, 56);
                }
                n(u, i), u.prototype.init = function() {
                    return this._a = 3238371032, this._b = 914150663, this._c = 812702999, this._d = 4144912697, this._e = 4290775857, this._f = 1750603025, this._g = 1694076839, this._h = 3204075428, this;
                }, u.prototype._hash = function() {
                    var t = a.allocUnsafe(28);
                    return t.writeInt32BE(this._a, 0), t.writeInt32BE(this._b, 4), t.writeInt32BE(this._c, 8), t.writeInt32BE(this._d, 12), t.writeInt32BE(this._e, 16), t.writeInt32BE(this._f, 20), t.writeInt32BE(this._g, 24), t;
                }, t.exports = u;
            },
            8890: (t, e, r)=>{
                var n = r(1679), i = r(1485), o = r(9732).Buffer, a = [
                    1116352408,
                    1899447441,
                    3049323471,
                    3921009573,
                    961987163,
                    1508970993,
                    2453635748,
                    2870763221,
                    3624381080,
                    310598401,
                    607225278,
                    1426881987,
                    1925078388,
                    2162078206,
                    2614888103,
                    3248222580,
                    3835390401,
                    4022224774,
                    264347078,
                    604807628,
                    770255983,
                    1249150122,
                    1555081692,
                    1996064986,
                    2554220882,
                    2821834349,
                    2952996808,
                    3210313671,
                    3336571891,
                    3584528711,
                    113926993,
                    338241895,
                    666307205,
                    773529912,
                    1294757372,
                    1396182291,
                    1695183700,
                    1986661051,
                    2177026350,
                    2456956037,
                    2730485921,
                    2820302411,
                    3259730800,
                    3345764771,
                    3516065817,
                    3600352804,
                    4094571909,
                    275423344,
                    430227734,
                    506948616,
                    659060556,
                    883997877,
                    958139571,
                    1322822218,
                    1537002063,
                    1747873779,
                    1955562222,
                    2024104815,
                    2227730452,
                    2361852424,
                    2428436474,
                    2756734187,
                    3204031479,
                    3329325298
                ], s = new Array(64);
                function u() {
                    this.init(), this._w = s, i.call(this, 64, 56);
                }
                function c(t, e, r) {
                    return r ^ t & (e ^ r);
                }
                function f(t, e, r) {
                    return t & e | r & (t | e);
                }
                function l(t) {
                    return (t >>> 2 | t << 30) ^ (t >>> 13 | t << 19) ^ (t >>> 22 | t << 10);
                }
                function h(t) {
                    return (t >>> 6 | t << 26) ^ (t >>> 11 | t << 21) ^ (t >>> 25 | t << 7);
                }
                function p(t) {
                    return (t >>> 7 | t << 25) ^ (t >>> 18 | t << 14) ^ t >>> 3;
                }
                n(u, i), u.prototype.init = function() {
                    return this._a = 1779033703, this._b = 3144134277, this._c = 1013904242, this._d = 2773480762, this._e = 1359893119, this._f = 2600822924, this._g = 528734635, this._h = 1541459225, this;
                }, u.prototype._update = function(t) {
                    for(var e, r = this._w, n = 0 | this._a, i = 0 | this._b, o = 0 | this._c, s = 0 | this._d, u = 0 | this._e, d = 0 | this._f, y = 0 | this._g, b = 0 | this._h, m = 0; m < 16; ++m)r[m] = t.readInt32BE(4 * m);
                    for(; m < 64; ++m)r[m] = 0 | (((e = r[m - 2]) >>> 17 | e << 15) ^ (e >>> 19 | e << 13) ^ e >>> 10) + r[m - 7] + p(r[m - 15]) + r[m - 16];
                    for(var v = 0; v < 64; ++v){
                        var g = b + h(u) + c(u, d, y) + a[v] + r[v] | 0, _ = l(n) + f(n, i, o) | 0;
                        b = y, y = d, d = u, u = s + g | 0, s = o, o = i, i = n, n = g + _ | 0;
                    }
                    this._a = n + this._a | 0, this._b = i + this._b | 0, this._c = o + this._c | 0, this._d = s + this._d | 0, this._e = u + this._e | 0, this._f = d + this._f | 0, this._g = y + this._g | 0, this._h = b + this._h | 0;
                }, u.prototype._hash = function() {
                    var t = o.allocUnsafe(32);
                    return t.writeInt32BE(this._a, 0), t.writeInt32BE(this._b, 4), t.writeInt32BE(this._c, 8), t.writeInt32BE(this._d, 12), t.writeInt32BE(this._e, 16), t.writeInt32BE(this._f, 20), t.writeInt32BE(this._g, 24), t.writeInt32BE(this._h, 28), t;
                }, t.exports = u;
            },
            5938: (t, e, r)=>{
                var n = r(1679), i = r(6467), o = r(1485), a = r(9732).Buffer, s = new Array(160);
                function u() {
                    this.init(), this._w = s, o.call(this, 128, 112);
                }
                n(u, i), u.prototype.init = function() {
                    return this._ah = 3418070365, this._bh = 1654270250, this._ch = 2438529370, this._dh = 355462360, this._eh = 1731405415, this._fh = 2394180231, this._gh = 3675008525, this._hh = 1203062813, this._al = 3238371032, this._bl = 914150663, this._cl = 812702999, this._dl = 4144912697, this._el = 4290775857, this._fl = 1750603025, this._gl = 1694076839, this._hl = 3204075428, this;
                }, u.prototype._hash = function() {
                    var t = a.allocUnsafe(48);
                    function e(e, r, n) {
                        t.writeInt32BE(e, n), t.writeInt32BE(r, n + 4);
                    }
                    return e(this._ah, this._al, 0), e(this._bh, this._bl, 8), e(this._ch, this._cl, 16), e(this._dh, this._dl, 24), e(this._eh, this._el, 32), e(this._fh, this._fl, 40), t;
                }, t.exports = u;
            },
            6467: (t, e, r)=>{
                var n = r(1679), i = r(1485), o = r(9732).Buffer, a = [
                    1116352408,
                    3609767458,
                    1899447441,
                    602891725,
                    3049323471,
                    3964484399,
                    3921009573,
                    2173295548,
                    961987163,
                    4081628472,
                    1508970993,
                    3053834265,
                    2453635748,
                    2937671579,
                    2870763221,
                    3664609560,
                    3624381080,
                    2734883394,
                    310598401,
                    1164996542,
                    607225278,
                    1323610764,
                    1426881987,
                    3590304994,
                    1925078388,
                    4068182383,
                    2162078206,
                    991336113,
                    2614888103,
                    633803317,
                    3248222580,
                    3479774868,
                    3835390401,
                    2666613458,
                    4022224774,
                    944711139,
                    264347078,
                    2341262773,
                    604807628,
                    2007800933,
                    770255983,
                    1495990901,
                    1249150122,
                    1856431235,
                    1555081692,
                    3175218132,
                    1996064986,
                    2198950837,
                    2554220882,
                    3999719339,
                    2821834349,
                    766784016,
                    2952996808,
                    2566594879,
                    3210313671,
                    3203337956,
                    3336571891,
                    1034457026,
                    3584528711,
                    2466948901,
                    113926993,
                    3758326383,
                    338241895,
                    168717936,
                    666307205,
                    1188179964,
                    773529912,
                    1546045734,
                    1294757372,
                    1522805485,
                    1396182291,
                    2643833823,
                    1695183700,
                    2343527390,
                    1986661051,
                    1014477480,
                    2177026350,
                    1206759142,
                    2456956037,
                    344077627,
                    2730485921,
                    1290863460,
                    2820302411,
                    3158454273,
                    3259730800,
                    3505952657,
                    3345764771,
                    106217008,
                    3516065817,
                    3606008344,
                    3600352804,
                    1432725776,
                    4094571909,
                    1467031594,
                    275423344,
                    851169720,
                    430227734,
                    3100823752,
                    506948616,
                    1363258195,
                    659060556,
                    3750685593,
                    883997877,
                    3785050280,
                    958139571,
                    3318307427,
                    1322822218,
                    3812723403,
                    1537002063,
                    2003034995,
                    1747873779,
                    3602036899,
                    1955562222,
                    1575990012,
                    2024104815,
                    1125592928,
                    2227730452,
                    2716904306,
                    2361852424,
                    442776044,
                    2428436474,
                    593698344,
                    2756734187,
                    3733110249,
                    3204031479,
                    2999351573,
                    3329325298,
                    3815920427,
                    3391569614,
                    3928383900,
                    3515267271,
                    566280711,
                    3940187606,
                    3454069534,
                    4118630271,
                    4000239992,
                    116418474,
                    1914138554,
                    174292421,
                    2731055270,
                    289380356,
                    3203993006,
                    460393269,
                    320620315,
                    685471733,
                    587496836,
                    852142971,
                    1086792851,
                    1017036298,
                    365543100,
                    1126000580,
                    2618297676,
                    1288033470,
                    3409855158,
                    1501505948,
                    4234509866,
                    1607167915,
                    987167468,
                    1816402316,
                    1246189591
                ], s = new Array(160);
                function u() {
                    this.init(), this._w = s, i.call(this, 128, 112);
                }
                function c(t, e, r) {
                    return r ^ t & (e ^ r);
                }
                function f(t, e, r) {
                    return t & e | r & (t | e);
                }
                function l(t, e) {
                    return (t >>> 28 | e << 4) ^ (e >>> 2 | t << 30) ^ (e >>> 7 | t << 25);
                }
                function h(t, e) {
                    return (t >>> 14 | e << 18) ^ (t >>> 18 | e << 14) ^ (e >>> 9 | t << 23);
                }
                function p(t, e) {
                    return (t >>> 1 | e << 31) ^ (t >>> 8 | e << 24) ^ t >>> 7;
                }
                function d(t, e) {
                    return (t >>> 1 | e << 31) ^ (t >>> 8 | e << 24) ^ (t >>> 7 | e << 25);
                }
                function y(t, e) {
                    return (t >>> 19 | e << 13) ^ (e >>> 29 | t << 3) ^ t >>> 6;
                }
                function b(t, e) {
                    return (t >>> 19 | e << 13) ^ (e >>> 29 | t << 3) ^ (t >>> 6 | e << 26);
                }
                function m(t, e) {
                    return t >>> 0 < e >>> 0 ? 1 : 0;
                }
                n(u, i), u.prototype.init = function() {
                    return this._ah = 1779033703, this._bh = 3144134277, this._ch = 1013904242, this._dh = 2773480762, this._eh = 1359893119, this._fh = 2600822924, this._gh = 528734635, this._hh = 1541459225, this._al = 4089235720, this._bl = 2227873595, this._cl = 4271175723, this._dl = 1595750129, this._el = 2917565137, this._fl = 725511199, this._gl = 4215389547, this._hl = 327033209, this;
                }, u.prototype._update = function(t) {
                    for(var e = this._w, r = 0 | this._ah, n = 0 | this._bh, i = 0 | this._ch, o = 0 | this._dh, s = 0 | this._eh, u = 0 | this._fh, v = 0 | this._gh, g = 0 | this._hh, _ = 0 | this._al, w = 0 | this._bl, S = 0 | this._cl, O = 0 | this._dl, j = 0 | this._el, $ = 0 | this._fl, E = 0 | this._gl, A = 0 | this._hl, P = 0; P < 32; P += 2)e[P] = t.readInt32BE(4 * P), e[P + 1] = t.readInt32BE(4 * P + 4);
                    for(; P < 160; P += 2){
                        var x = e[P - 30], k = e[P - 30 + 1], M = p(x, k), T = d(k, x), B = y(x = e[P - 4], k = e[P - 4 + 1]), I = b(k, x), R = e[P - 14], N = e[P - 14 + 1], D = e[P - 32], L = e[P - 32 + 1], C = T + N | 0, U = M + R + m(C, T) | 0;
                        U = (U = U + B + m(C = C + I | 0, I) | 0) + D + m(C = C + L | 0, L) | 0, e[P] = U, e[P + 1] = C;
                    }
                    for(var q = 0; q < 160; q += 2){
                        U = e[q], C = e[q + 1];
                        var F = f(r, n, i), V = f(_, w, S), z = l(r, _), K = l(_, r), H = h(s, j), W = h(j, s), J = a[q], G = a[q + 1], Y = c(s, u, v), Q = c(j, $, E), X = A + W | 0, Z = g + H + m(X, A) | 0;
                        Z = (Z = (Z = Z + Y + m(X = X + Q | 0, Q) | 0) + J + m(X = X + G | 0, G) | 0) + U + m(X = X + C | 0, C) | 0;
                        var tt = K + V | 0, et = z + F + m(tt, K) | 0;
                        g = v, A = E, v = u, E = $, u = s, $ = j, s = o + Z + m(j = O + X | 0, O) | 0, o = i, O = S, i = n, S = w, n = r, w = _, r = Z + et + m(_ = X + tt | 0, X) | 0;
                    }
                    this._al = this._al + _ | 0, this._bl = this._bl + w | 0, this._cl = this._cl + S | 0, this._dl = this._dl + O | 0, this._el = this._el + j | 0, this._fl = this._fl + $ | 0, this._gl = this._gl + E | 0, this._hl = this._hl + A | 0, this._ah = this._ah + r + m(this._al, _) | 0, this._bh = this._bh + n + m(this._bl, w) | 0, this._ch = this._ch + i + m(this._cl, S) | 0, this._dh = this._dh + o + m(this._dl, O) | 0, this._eh = this._eh + s + m(this._el, j) | 0, this._fh = this._fh + u + m(this._fl, $) | 0, this._gh = this._gh + v + m(this._gl, E) | 0, this._hh = this._hh + g + m(this._hl, A) | 0;
                }, u.prototype._hash = function() {
                    var t = o.allocUnsafe(64);
                    function e(e, r, n) {
                        t.writeInt32BE(e, n), t.writeInt32BE(r, n + 4);
                    }
                    return e(this._ah, this._al, 0), e(this._bh, this._bl, 8), e(this._ch, this._cl, 16), e(this._dh, this._dl, 24), e(this._eh, this._el, 32), e(this._fh, this._fl, 40), e(this._gh, this._gl, 48), e(this._hh, this._hl, 56), t;
                }, t.exports = u;
            },
            7775: (t, e, r)=>{
                t.exports = i;
                var n = r(3550).EventEmitter;
                function i() {
                    n.call(this);
                }
                r(1679)(i, n), i.Readable = r(8134), i.Writable = r(4186), i.Duplex = r(4560), i.Transform = r(8784), i.PassThrough = r(1026), i.finished = r(8500), i.pipeline = r(1144), i.Stream = i, i.prototype.pipe = function(t, e) {
                    var r = this;
                    function i(e) {
                        t.writable && !1 === t.write(e) && r.pause && r.pause();
                    }
                    function o() {
                        r.readable && r.resume && r.resume();
                    }
                    r.on("data", i), t.on("drain", o), t._isStdio || e && !1 === e.end || (r.on("end", s), r.on("close", u));
                    var a = !1;
                    function s() {
                        a || (a = !0, t.end());
                    }
                    function u() {
                        a || (a = !0, "function" == typeof t.destroy && t.destroy());
                    }
                    function c(t) {
                        if (f(), 0 === n.listenerCount(this, "error")) throw t;
                    }
                    function f() {
                        r.removeListener("data", i), t.removeListener("drain", o), r.removeListener("end", s), r.removeListener("close", u), r.removeListener("error", c), t.removeListener("error", c), r.removeListener("end", f), r.removeListener("close", f), t.removeListener("close", f);
                    }
                    return r.on("error", c), t.on("error", c), r.on("end", f), r.on("close", f), t.on("close", f), t.emit("pipe", r), t;
                };
            },
            198: (t)=>{
                "use strict";
                function e(t) {
                    return e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, e(t);
                }
                var r = {};
                function n(t, e, n) {
                    n || (n = Error);
                    var i = function(t) {
                        var r, n;
                        function i(r, n, i) {
                            return t.call(this, function(t, r, n) {
                                return "string" == typeof e ? e : e(t, r, n);
                            }(r, n, i)) || this;
                        }
                        return n = t, (r = i).prototype = Object.create(n.prototype), r.prototype.constructor = r, r.__proto__ = n, i;
                    }(n);
                    i.prototype.name = n.name, i.prototype.code = t, r[t] = i;
                }
                function i(t, e) {
                    if (Array.isArray(t)) {
                        var r = t.length;
                        return t = t.map(function(t) {
                            return String(t);
                        }), r > 2 ? "one of ".concat(e, " ").concat(t.slice(0, r - 1).join(", "), ", or ") + t[r - 1] : 2 === r ? "one of ".concat(e, " ").concat(t[0], " or ").concat(t[1]) : "of ".concat(e, " ").concat(t[0]);
                    }
                    return "of ".concat(e, " ").concat(String(t));
                }
                n("ERR_INVALID_OPT_VALUE", function(t, e) {
                    return 'The value "' + e + '" is invalid for option "' + t + '"';
                }, TypeError), n("ERR_INVALID_ARG_TYPE", function(t, r, n) {
                    var o, a, s, u, c;
                    if ("string" == typeof r && (a = "not ", r.substr(0, 4) === a) ? (o = "must not be", r = r.replace(/^not /, "")) : o = "must be", function(t, e, r) {
                        return (void 0 === r || r > t.length) && (r = t.length), t.substring(r - 9, r) === e;
                    }(t, " argument")) s = "The ".concat(t, " ").concat(o, " ").concat(i(r, "type"));
                    else {
                        var f = ("number" != typeof c && (c = 0), c + 1 > (u = t).length || -1 === u.indexOf(".", c) ? "argument" : "property");
                        s = 'The "'.concat(t, '" ').concat(f, " ").concat(o, " ").concat(i(r, "type"));
                    }
                    return s + ". Received type ".concat(e(n));
                }, TypeError), n("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF"), n("ERR_METHOD_NOT_IMPLEMENTED", function(t) {
                    return "The " + t + " method is not implemented";
                }), n("ERR_STREAM_PREMATURE_CLOSE", "Premature close"), n("ERR_STREAM_DESTROYED", function(t) {
                    return "Cannot call " + t + " after a stream was destroyed";
                }), n("ERR_MULTIPLE_CALLBACK", "Callback called multiple times"), n("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable"), n("ERR_STREAM_WRITE_AFTER_END", "write after end"), n("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError), n("ERR_UNKNOWN_ENCODING", function(t) {
                    return "Unknown encoding: " + t;
                }, TypeError), n("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event"), t.exports.F = r;
            },
            4560: (t, e, r)=>{
                "use strict";
                var n = Object.keys || function(t) {
                    var e = [];
                    for(var r in t)e.push(r);
                    return e;
                };
                t.exports = c;
                var i = r(8134), o = r(4186);
                r(1679)(c, i);
                for(var a = n(o.prototype), s = 0; s < a.length; s++){
                    var u = a[s];
                    c.prototype[u] || (c.prototype[u] = o.prototype[u]);
                }
                function c(t) {
                    if (!(this instanceof c)) return new c(t);
                    i.call(this, t), o.call(this, t), this.allowHalfOpen = !0, t && (!1 === t.readable && (this.readable = !1), !1 === t.writable && (this.writable = !1), !1 === t.allowHalfOpen && (this.allowHalfOpen = !1, this.once("end", f)));
                }
                function f() {
                    this._writableState.ended || ({
                        env: {}
                    }).nextTick(l, this);
                }
                function l(t) {
                    t.end();
                }
                Object.defineProperty(c.prototype, "writableHighWaterMark", {
                    enumerable: !1,
                    get: function() {
                        return this._writableState.highWaterMark;
                    }
                }), Object.defineProperty(c.prototype, "writableBuffer", {
                    enumerable: !1,
                    get: function() {
                        return this._writableState && this._writableState.getBuffer();
                    }
                }), Object.defineProperty(c.prototype, "writableLength", {
                    enumerable: !1,
                    get: function() {
                        return this._writableState.length;
                    }
                }), Object.defineProperty(c.prototype, "destroyed", {
                    enumerable: !1,
                    get: function() {
                        return void 0 !== this._readableState && void 0 !== this._writableState && this._readableState.destroyed && this._writableState.destroyed;
                    },
                    set: function(t) {
                        void 0 !== this._readableState && void 0 !== this._writableState && (this._readableState.destroyed = t, this._writableState.destroyed = t);
                    }
                });
            },
            1026: (t, e, r)=>{
                "use strict";
                t.exports = i;
                var n = r(8784);
                function i(t) {
                    if (!(this instanceof i)) return new i(t);
                    n.call(this, t);
                }
                r(1679)(i, n), i.prototype._transform = function(t, e, r) {
                    r(null, t);
                };
            },
            8134: (t, e, r)=>{
                "use strict";
                var n;
                t.exports = j, j.ReadableState = O, r(3550).EventEmitter;
                var i, o = function(t, e) {
                    return t.listeners(e).length;
                }, a = r(6871), s = r(5832).Buffer, u = (void 0 !== r.g ? r.g : "undefined" != typeof window ? window : "undefined" != typeof self ? self : {}).Uint8Array || function() {}, c = r(7199);
                i = c && c.debuglog ? c.debuglog("stream") : function() {};
                var f, l, h, p = r(6811), d = r(6222), y = r(9681).getHighWaterMark, b = r(198).F, m = b.ERR_INVALID_ARG_TYPE, v = b.ERR_STREAM_PUSH_AFTER_EOF, g = b.ERR_METHOD_NOT_IMPLEMENTED, _ = b.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
                r(1679)(j, a);
                var w = d.errorOrDestroy, S = [
                    "error",
                    "close",
                    "destroy",
                    "pause",
                    "resume"
                ];
                function O(t, e, i) {
                    n = n || r(4560), t = t || {}, "boolean" != typeof i && (i = e instanceof n), this.objectMode = !!t.objectMode, i && (this.objectMode = this.objectMode || !!t.readableObjectMode), this.highWaterMark = y(this, t, "readableHighWaterMark", i), this.buffer = new p, this.length = 0, this.pipes = null, this.pipesCount = 0, this.flowing = null, this.ended = !1, this.endEmitted = !1, this.reading = !1, this.sync = !0, this.needReadable = !1, this.emittedReadable = !1, this.readableListening = !1, this.resumeScheduled = !1, this.paused = !0, this.emitClose = !1 !== t.emitClose, this.autoDestroy = !!t.autoDestroy, this.destroyed = !1, this.defaultEncoding = t.defaultEncoding || "utf8", this.awaitDrain = 0, this.readingMore = !1, this.decoder = null, this.encoding = null, t.encoding && (f || (f = r(136).I), this.decoder = new f(t.encoding), this.encoding = t.encoding);
                }
                function j(t) {
                    if (n = n || r(4560), !(this instanceof j)) return new j(t);
                    var e = this instanceof n;
                    this._readableState = new O(t, this, e), this.readable = !0, t && ("function" == typeof t.read && (this._read = t.read), "function" == typeof t.destroy && (this._destroy = t.destroy)), a.call(this);
                }
                function $(t, e, r, n, o) {
                    i("readableAddChunk", e);
                    var a, c = t._readableState;
                    if (null === e) c.reading = !1, function(t, e) {
                        if (i("onEofChunk"), !e.ended) {
                            if (e.decoder) {
                                var r = e.decoder.end();
                                r && r.length && (e.buffer.push(r), e.length += e.objectMode ? 1 : r.length);
                            }
                            e.ended = !0, e.sync ? x(t) : (e.needReadable = !1, e.emittedReadable || (e.emittedReadable = !0, k(t)));
                        }
                    }(t, c);
                    else if (o || (a = function(t, e) {
                        var r, n;
                        return n = e, s.isBuffer(n) || n instanceof u || "string" == typeof e || void 0 === e || t.objectMode || (r = new m("chunk", [
                            "string",
                            "Buffer",
                            "Uint8Array"
                        ], e)), r;
                    }(c, e)), a) w(t, a);
                    else if (c.objectMode || e && e.length > 0) {
                        if ("string" == typeof e || c.objectMode || Object.getPrototypeOf(e) === s.prototype || (e = function(t) {
                            return s.from(t);
                        }(e)), n) c.endEmitted ? w(t, new _) : E(t, c, e, !0);
                        else if (c.ended) w(t, new v);
                        else {
                            if (c.destroyed) return !1;
                            c.reading = !1, c.decoder && !r ? (e = c.decoder.write(e), c.objectMode || 0 !== e.length ? E(t, c, e, !1) : M(t, c)) : E(t, c, e, !1);
                        }
                    } else n || (c.reading = !1, M(t, c));
                    return !c.ended && (c.length < c.highWaterMark || 0 === c.length);
                }
                function E(t, e, r, n) {
                    e.flowing && 0 === e.length && !e.sync ? (e.awaitDrain = 0, t.emit("data", r)) : (e.length += e.objectMode ? 1 : r.length, n ? e.buffer.unshift(r) : e.buffer.push(r), e.needReadable && x(t)), M(t, e);
                }
                Object.defineProperty(j.prototype, "destroyed", {
                    enumerable: !1,
                    get: function() {
                        return void 0 !== this._readableState && this._readableState.destroyed;
                    },
                    set: function(t) {
                        this._readableState && (this._readableState.destroyed = t);
                    }
                }), j.prototype.destroy = d.destroy, j.prototype._undestroy = d.undestroy, j.prototype._destroy = function(t, e) {
                    e(t);
                }, j.prototype.push = function(t, e) {
                    var r, n = this._readableState;
                    return n.objectMode ? r = !0 : "string" == typeof t && ((e = e || n.defaultEncoding) !== n.encoding && (t = s.from(t, e), e = ""), r = !0), $(this, t, e, !1, r);
                }, j.prototype.unshift = function(t) {
                    return $(this, t, null, !0, !1);
                }, j.prototype.isPaused = function() {
                    return !1 === this._readableState.flowing;
                }, j.prototype.setEncoding = function(t) {
                    f || (f = r(136).I);
                    var e = new f(t);
                    this._readableState.decoder = e, this._readableState.encoding = this._readableState.decoder.encoding;
                    for(var n = this._readableState.buffer.head, i = ""; null !== n;)i += e.write(n.data), n = n.next;
                    return this._readableState.buffer.clear(), "" !== i && this._readableState.buffer.push(i), this._readableState.length = i.length, this;
                };
                var A = 1073741824;
                function P(t, e) {
                    return t <= 0 || 0 === e.length && e.ended ? 0 : e.objectMode ? 1 : t != t ? e.flowing && e.length ? e.buffer.head.data.length : e.length : (t > e.highWaterMark && (e.highWaterMark = function(t) {
                        return t >= A ? t = A : (t--, t |= t >>> 1, t |= t >>> 2, t |= t >>> 4, t |= t >>> 8, t |= t >>> 16, t++), t;
                    }(t)), t <= e.length ? t : e.ended ? e.length : (e.needReadable = !0, 0));
                }
                function x(t) {
                    var e = t._readableState;
                    i("emitReadable", e.needReadable, e.emittedReadable), e.needReadable = !1, e.emittedReadable || (i("emitReadable", e.flowing), e.emittedReadable = !0, ({
                        env: {}
                    }).nextTick(k, t));
                }
                function k(t) {
                    var e = t._readableState;
                    i("emitReadable_", e.destroyed, e.length, e.ended), e.destroyed || !e.length && !e.ended || (t.emit("readable"), e.emittedReadable = !1), e.needReadable = !e.flowing && !e.ended && e.length <= e.highWaterMark, N(t);
                }
                function M(t, e) {
                    e.readingMore || (e.readingMore = !0, ({
                        env: {}
                    }).nextTick(T, t, e));
                }
                function T(t, e) {
                    for(; !e.reading && !e.ended && (e.length < e.highWaterMark || e.flowing && 0 === e.length);){
                        var r = e.length;
                        if (i("maybeReadMore read 0"), t.read(0), r === e.length) break;
                    }
                    e.readingMore = !1;
                }
                function B(t) {
                    var e = t._readableState;
                    e.readableListening = t.listenerCount("readable") > 0, e.resumeScheduled && !e.paused ? e.flowing = !0 : t.listenerCount("data") > 0 && t.resume();
                }
                function I(t) {
                    i("readable nexttick read 0"), t.read(0);
                }
                function R(t, e) {
                    i("resume", e.reading), e.reading || t.read(0), e.resumeScheduled = !1, t.emit("resume"), N(t), e.flowing && !e.reading && t.read(0);
                }
                function N(t) {
                    var e = t._readableState;
                    for(i("flow", e.flowing); e.flowing && null !== t.read(););
                }
                function D(t, e) {
                    var r;
                    return 0 === e.length ? null : (e.objectMode ? r = e.buffer.shift() : !t || t >= e.length ? (r = e.decoder ? e.buffer.join("") : 1 === e.buffer.length ? e.buffer.first() : e.buffer.concat(e.length), e.buffer.clear()) : r = e.buffer.consume(t, e.decoder), r);
                }
                function L(t) {
                    var e = t._readableState;
                    i("endReadable", e.endEmitted), e.endEmitted || (e.ended = !0, ({
                        env: {}
                    }).nextTick(C, e, t));
                }
                function C(t, e) {
                    if (i("endReadableNT", t.endEmitted, t.length), !t.endEmitted && 0 === t.length && (t.endEmitted = !0, e.readable = !1, e.emit("end"), t.autoDestroy)) {
                        var r = e._writableState;
                        (!r || r.autoDestroy && r.finished) && e.destroy();
                    }
                }
                function U(t, e) {
                    for(var r = 0, n = t.length; r < n; r++)if (t[r] === e) return r;
                    return -1;
                }
                j.prototype.read = function(t) {
                    i("read", t), t = parseInt(t, 10);
                    var e = this._readableState, r = t;
                    if (0 !== t && (e.emittedReadable = !1), 0 === t && e.needReadable && ((0 !== e.highWaterMark ? e.length >= e.highWaterMark : e.length > 0) || e.ended)) return i("read: emitReadable", e.length, e.ended), 0 === e.length && e.ended ? L(this) : x(this), null;
                    if (0 === (t = P(t, e)) && e.ended) return 0 === e.length && L(this), null;
                    var n, o = e.needReadable;
                    return i("need readable", o), (0 === e.length || e.length - t < e.highWaterMark) && i("length less than watermark", o = !0), e.ended || e.reading ? i("reading or ended", o = !1) : o && (i("do read"), e.reading = !0, e.sync = !0, 0 === e.length && (e.needReadable = !0), this._read(e.highWaterMark), e.sync = !1, e.reading || (t = P(r, e))), null === (n = t > 0 ? D(t, e) : null) ? (e.needReadable = e.length <= e.highWaterMark, t = 0) : (e.length -= t, e.awaitDrain = 0), 0 === e.length && (e.ended || (e.needReadable = !0), r !== t && e.ended && L(this)), null !== n && this.emit("data", n), n;
                }, j.prototype._read = function(t) {
                    w(this, new g("_read()"));
                }, j.prototype.pipe = function(t, e) {
                    var r = this, n = this._readableState;
                    switch(n.pipesCount){
                        case 0:
                            n.pipes = t;
                            break;
                        case 1:
                            n.pipes = [
                                n.pipes,
                                t
                            ];
                            break;
                        default:
                            n.pipes.push(t);
                    }
                    n.pipesCount += 1, i("pipe count=%d opts=%j", n.pipesCount, e);
                    var a = e && !1 === e.end || t === ({
                        env: {}
                    }).stdout || t === ({
                        env: {}
                    }).stderr ? d : s;
                    function s() {
                        i("onend"), t.end();
                    }
                    n.endEmitted ? ({
                        env: {}
                    }).nextTick(a) : r.once("end", a), t.on("unpipe", function e(o, a) {
                        i("onunpipe"), o === r && a && !1 === a.hasUnpiped && (a.hasUnpiped = !0, i("cleanup"), t.removeListener("close", h), t.removeListener("finish", p), t.removeListener("drain", u), t.removeListener("error", l), t.removeListener("unpipe", e), r.removeListener("end", s), r.removeListener("end", d), r.removeListener("data", f), c = !0, !n.awaitDrain || t._writableState && !t._writableState.needDrain || u());
                    });
                    var u = function(t) {
                        return function() {
                            var e = t._readableState;
                            i("pipeOnDrain", e.awaitDrain), e.awaitDrain && e.awaitDrain--, 0 === e.awaitDrain && o(t, "data") && (e.flowing = !0, N(t));
                        };
                    }(r);
                    t.on("drain", u);
                    var c = !1;
                    function f(e) {
                        i("ondata");
                        var o = t.write(e);
                        i("dest.write", o), !1 === o && ((1 === n.pipesCount && n.pipes === t || n.pipesCount > 1 && -1 !== U(n.pipes, t)) && !c && (i("false write response, pause", n.awaitDrain), n.awaitDrain++), r.pause());
                    }
                    function l(e) {
                        i("onerror", e), d(), t.removeListener("error", l), 0 === o(t, "error") && w(t, e);
                    }
                    function h() {
                        t.removeListener("finish", p), d();
                    }
                    function p() {
                        i("onfinish"), t.removeListener("close", h), d();
                    }
                    function d() {
                        i("unpipe"), r.unpipe(t);
                    }
                    return r.on("data", f), function(t, e, r) {
                        if ("function" == typeof t.prependListener) return t.prependListener(e, r);
                        t._events && t._events[e] ? Array.isArray(t._events[e]) ? t._events[e].unshift(r) : t._events[e] = [
                            r,
                            t._events[e]
                        ] : t.on(e, r);
                    }(t, "error", l), t.once("close", h), t.once("finish", p), t.emit("pipe", r), n.flowing || (i("pipe resume"), r.resume()), t;
                }, j.prototype.unpipe = function(t) {
                    var e = this._readableState, r = {
                        hasUnpiped: !1
                    };
                    if (0 === e.pipesCount) return this;
                    if (1 === e.pipesCount) return t && t !== e.pipes || (t || (t = e.pipes), e.pipes = null, e.pipesCount = 0, e.flowing = !1, t && t.emit("unpipe", this, r)), this;
                    if (!t) {
                        var n = e.pipes, i = e.pipesCount;
                        e.pipes = null, e.pipesCount = 0, e.flowing = !1;
                        for(var o = 0; o < i; o++)n[o].emit("unpipe", this, {
                            hasUnpiped: !1
                        });
                        return this;
                    }
                    var a = U(e.pipes, t);
                    return -1 === a || (e.pipes.splice(a, 1), e.pipesCount -= 1, 1 === e.pipesCount && (e.pipes = e.pipes[0]), t.emit("unpipe", this, r)), this;
                }, j.prototype.on = function(t, e) {
                    var r = a.prototype.on.call(this, t, e), n = this._readableState;
                    return "data" === t ? (n.readableListening = this.listenerCount("readable") > 0, !1 !== n.flowing && this.resume()) : "readable" === t && (n.endEmitted || n.readableListening || (n.readableListening = n.needReadable = !0, n.flowing = !1, n.emittedReadable = !1, i("on readable", n.length, n.reading), n.length ? x(this) : n.reading || ({
                        env: {}
                    }).nextTick(I, this))), r;
                }, j.prototype.addListener = j.prototype.on, j.prototype.removeListener = function(t, e) {
                    var r = a.prototype.removeListener.call(this, t, e);
                    return "readable" === t && ({
                        env: {}
                    }).nextTick(B, this), r;
                }, j.prototype.removeAllListeners = function(t) {
                    var e = a.prototype.removeAllListeners.apply(this, arguments);
                    return "readable" !== t && void 0 !== t || ({
                        env: {}
                    }).nextTick(B, this), e;
                }, j.prototype.resume = function() {
                    var t = this._readableState;
                    return t.flowing || (i("resume"), t.flowing = !t.readableListening, function(t, e) {
                        e.resumeScheduled || (e.resumeScheduled = !0, ({
                            env: {}
                        }).nextTick(R, t, e));
                    }(this, t)), t.paused = !1, this;
                }, j.prototype.pause = function() {
                    return i("call pause flowing=%j", this._readableState.flowing), !1 !== this._readableState.flowing && (i("pause"), this._readableState.flowing = !1, this.emit("pause")), this._readableState.paused = !0, this;
                }, j.prototype.wrap = function(t) {
                    var e = this, r = this._readableState, n = !1;
                    for(var o in t.on("end", function() {
                        if (i("wrapped end"), r.decoder && !r.ended) {
                            var t = r.decoder.end();
                            t && t.length && e.push(t);
                        }
                        e.push(null);
                    }), t.on("data", function(o) {
                        i("wrapped data"), r.decoder && (o = r.decoder.write(o)), r.objectMode && null == o || (r.objectMode || o && o.length) && (e.push(o) || (n = !0, t.pause()));
                    }), t)void 0 === this[o] && "function" == typeof t[o] && (this[o] = function(e) {
                        return function() {
                            return t[e].apply(t, arguments);
                        };
                    }(o));
                    for(var a = 0; a < S.length; a++)t.on(S[a], this.emit.bind(this, S[a]));
                    return this._read = function(e) {
                        i("wrapped _read", e), n && (n = !1, t.resume());
                    }, this;
                }, "function" == typeof Symbol && (j.prototype[Symbol.asyncIterator] = function() {
                    return void 0 === l && (l = r(8493)), l(this);
                }), Object.defineProperty(j.prototype, "readableHighWaterMark", {
                    enumerable: !1,
                    get: function() {
                        return this._readableState.highWaterMark;
                    }
                }), Object.defineProperty(j.prototype, "readableBuffer", {
                    enumerable: !1,
                    get: function() {
                        return this._readableState && this._readableState.buffer;
                    }
                }), Object.defineProperty(j.prototype, "readableFlowing", {
                    enumerable: !1,
                    get: function() {
                        return this._readableState.flowing;
                    },
                    set: function(t) {
                        this._readableState && (this._readableState.flowing = t);
                    }
                }), j._fromList = D, Object.defineProperty(j.prototype, "readableLength", {
                    enumerable: !1,
                    get: function() {
                        return this._readableState.length;
                    }
                }), "function" == typeof Symbol && (j.from = function(t, e) {
                    return void 0 === h && (h = r(9271)), h(j, t, e);
                });
            },
            8784: (t, e, r)=>{
                "use strict";
                t.exports = f;
                var n = r(198).F, i = n.ERR_METHOD_NOT_IMPLEMENTED, o = n.ERR_MULTIPLE_CALLBACK, a = n.ERR_TRANSFORM_ALREADY_TRANSFORMING, s = n.ERR_TRANSFORM_WITH_LENGTH_0, u = r(4560);
                function c(t, e) {
                    var r = this._transformState;
                    r.transforming = !1;
                    var n = r.writecb;
                    if (null === n) return this.emit("error", new o);
                    r.writechunk = null, r.writecb = null, null != e && this.push(e), n(t);
                    var i = this._readableState;
                    i.reading = !1, (i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark);
                }
                function f(t) {
                    if (!(this instanceof f)) return new f(t);
                    u.call(this, t), this._transformState = {
                        afterTransform: c.bind(this),
                        needTransform: !1,
                        transforming: !1,
                        writecb: null,
                        writechunk: null,
                        writeencoding: null
                    }, this._readableState.needReadable = !0, this._readableState.sync = !1, t && ("function" == typeof t.transform && (this._transform = t.transform), "function" == typeof t.flush && (this._flush = t.flush)), this.on("prefinish", l);
                }
                function l() {
                    var t = this;
                    "function" != typeof this._flush || this._readableState.destroyed ? h(this, null, null) : this._flush(function(e, r) {
                        h(t, e, r);
                    });
                }
                function h(t, e, r) {
                    if (e) return t.emit("error", e);
                    if (null != r && t.push(r), t._writableState.length) throw new s;
                    if (t._transformState.transforming) throw new a;
                    return t.push(null);
                }
                r(1679)(f, u), f.prototype.push = function(t, e) {
                    return this._transformState.needTransform = !1, u.prototype.push.call(this, t, e);
                }, f.prototype._transform = function(t, e, r) {
                    r(new i("_transform()"));
                }, f.prototype._write = function(t, e, r) {
                    var n = this._transformState;
                    if (n.writecb = r, n.writechunk = t, n.writeencoding = e, !n.transforming) {
                        var i = this._readableState;
                        (n.needTransform || i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark);
                    }
                }, f.prototype._read = function(t) {
                    var e = this._transformState;
                    null === e.writechunk || e.transforming ? e.needTransform = !0 : (e.transforming = !0, this._transform(e.writechunk, e.writeencoding, e.afterTransform));
                }, f.prototype._destroy = function(t, e) {
                    u.prototype._destroy.call(this, t, function(t) {
                        e(t);
                    });
                };
            },
            4186: (t, e, r)=>{
                "use strict";
                function n(t) {
                    var e = this;
                    this.next = null, this.entry = null, this.finish = function() {
                        !function(t, e) {
                            var r = t.entry;
                            for(t.entry = null; r;){
                                var n = r.callback;
                                e.pendingcb--, n(undefined), r = r.next;
                            }
                            e.corkedRequestsFree.next = t;
                        }(e, t);
                    };
                }
                var i;
                t.exports = j, j.WritableState = O;
                var o, a = {
                    deprecate: r(3340)
                }, s = r(6871), u = r(5832).Buffer, c = (void 0 !== r.g ? r.g : "undefined" != typeof window ? window : "undefined" != typeof self ? self : {}).Uint8Array || function() {}, f = r(6222), l = r(9681).getHighWaterMark, h = r(198).F, p = h.ERR_INVALID_ARG_TYPE, d = h.ERR_METHOD_NOT_IMPLEMENTED, y = h.ERR_MULTIPLE_CALLBACK, b = h.ERR_STREAM_CANNOT_PIPE, m = h.ERR_STREAM_DESTROYED, v = h.ERR_STREAM_NULL_VALUES, g = h.ERR_STREAM_WRITE_AFTER_END, _ = h.ERR_UNKNOWN_ENCODING, w = f.errorOrDestroy;
                function S() {}
                function O(t, e, o) {
                    i = i || r(4560), t = t || {}, "boolean" != typeof o && (o = e instanceof i), this.objectMode = !!t.objectMode, o && (this.objectMode = this.objectMode || !!t.writableObjectMode), this.highWaterMark = l(this, t, "writableHighWaterMark", o), this.finalCalled = !1, this.needDrain = !1, this.ending = !1, this.ended = !1, this.finished = !1, this.destroyed = !1;
                    var a = !1 === t.decodeStrings;
                    this.decodeStrings = !a, this.defaultEncoding = t.defaultEncoding || "utf8", this.length = 0, this.writing = !1, this.corked = 0, this.sync = !0, this.bufferProcessing = !1, this.onwrite = function(t) {
                        !function(t, e) {
                            var r = t._writableState, n = r.sync, i = r.writecb;
                            if ("function" != typeof i) throw new y;
                            if (function(t) {
                                t.writing = !1, t.writecb = null, t.length -= t.writelen, t.writelen = 0;
                            }(r), e) !function(t, e, r, n, i) {
                                --e.pendingcb, r ? (({
                                    env: {}
                                }).nextTick(i, n), ({
                                    env: {}
                                }).nextTick(k, t, e), t._writableState.errorEmitted = !0, w(t, n)) : (i(n), t._writableState.errorEmitted = !0, w(t, n), k(t, e));
                            }(t, r, n, e, i);
                            else {
                                var o = P(r) || t.destroyed;
                                o || r.corked || r.bufferProcessing || !r.bufferedRequest || A(t, r), n ? ({
                                    env: {}
                                }).nextTick(E, t, r, o, i) : E(t, r, o, i);
                            }
                        }(e, t);
                    }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, this.prefinished = !1, this.errorEmitted = !1, this.emitClose = !1 !== t.emitClose, this.autoDestroy = !!t.autoDestroy, this.bufferedRequestCount = 0, this.corkedRequestsFree = new n(this);
                }
                function j(t) {
                    var e = this instanceof (i = i || r(4560));
                    if (!e && !o.call(j, this)) return new j(t);
                    this._writableState = new O(t, this, e), this.writable = !0, t && ("function" == typeof t.write && (this._write = t.write), "function" == typeof t.writev && (this._writev = t.writev), "function" == typeof t.destroy && (this._destroy = t.destroy), "function" == typeof t.final && (this._final = t.final)), s.call(this);
                }
                function $(t, e, r, n, i, o, a) {
                    e.writelen = n, e.writecb = a, e.writing = !0, e.sync = !0, e.destroyed ? e.onwrite(new m("write")) : r ? t._writev(i, e.onwrite) : t._write(i, o, e.onwrite), e.sync = !1;
                }
                function E(t, e, r, n) {
                    r || function(t, e) {
                        0 === e.length && e.needDrain && (e.needDrain = !1, t.emit("drain"));
                    }(t, e), e.pendingcb--, n(), k(t, e);
                }
                function A(t, e) {
                    e.bufferProcessing = !0;
                    var r = e.bufferedRequest;
                    if (t._writev && r && r.next) {
                        var i = e.bufferedRequestCount, o = new Array(i), a = e.corkedRequestsFree;
                        a.entry = r;
                        for(var s = 0, u = !0; r;)o[s] = r, r.isBuf || (u = !1), r = r.next, s += 1;
                        o.allBuffers = u, $(t, e, !0, e.length, o, "", a.finish), e.pendingcb++, e.lastBufferedRequest = null, a.next ? (e.corkedRequestsFree = a.next, a.next = null) : e.corkedRequestsFree = new n(e), e.bufferedRequestCount = 0;
                    } else {
                        for(; r;){
                            var c = r.chunk, f = r.encoding, l = r.callback;
                            if ($(t, e, !1, e.objectMode ? 1 : c.length, c, f, l), r = r.next, e.bufferedRequestCount--, e.writing) break;
                        }
                        null === r && (e.lastBufferedRequest = null);
                    }
                    e.bufferedRequest = r, e.bufferProcessing = !1;
                }
                function P(t) {
                    return t.ending && 0 === t.length && null === t.bufferedRequest && !t.finished && !t.writing;
                }
                function x(t, e) {
                    t._final(function(r) {
                        e.pendingcb--, r && w(t, r), e.prefinished = !0, t.emit("prefinish"), k(t, e);
                    });
                }
                function k(t, e) {
                    var r = P(e);
                    if (r && (function(t, e) {
                        e.prefinished || e.finalCalled || ("function" != typeof t._final || e.destroyed ? (e.prefinished = !0, t.emit("prefinish")) : (e.pendingcb++, e.finalCalled = !0, ({
                            env: {}
                        }).nextTick(x, t, e)));
                    }(t, e), 0 === e.pendingcb && (e.finished = !0, t.emit("finish"), e.autoDestroy))) {
                        var n = t._readableState;
                        (!n || n.autoDestroy && n.endEmitted) && t.destroy();
                    }
                    return r;
                }
                r(1679)(j, s), O.prototype.getBuffer = function() {
                    for(var t = this.bufferedRequest, e = []; t;)e.push(t), t = t.next;
                    return e;
                }, function() {
                    try {
                        Object.defineProperty(O.prototype, "buffer", {
                            get: a.deprecate(function() {
                                return this.getBuffer();
                            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
                        });
                    } catch (t) {}
                }(), "function" == typeof Symbol && Symbol.hasInstance && "function" == typeof Function.prototype[Symbol.hasInstance] ? (o = Function.prototype[Symbol.hasInstance], Object.defineProperty(j, Symbol.hasInstance, {
                    value: function(t) {
                        return !!o.call(this, t) || this === j && t && t._writableState instanceof O;
                    }
                })) : o = function(t) {
                    return t instanceof this;
                }, j.prototype.pipe = function() {
                    w(this, new b);
                }, j.prototype.write = function(t, e, r) {
                    var n, i = this._writableState, o = !1, a = !i.objectMode && (n = t, u.isBuffer(n) || n instanceof c);
                    return a && !u.isBuffer(t) && (t = function(t) {
                        return u.from(t);
                    }(t)), "function" == typeof e && (r = e, e = null), a ? e = "buffer" : e || (e = i.defaultEncoding), "function" != typeof r && (r = S), i.ending ? function(t, e) {
                        var r = new g;
                        w(t, r), ({
                            env: {}
                        }).nextTick(e, r);
                    }(this, r) : (a || function(t, e, r, n) {
                        var i;
                        return null === r ? i = new v : "string" == typeof r || e.objectMode || (i = new p("chunk", [
                            "string",
                            "Buffer"
                        ], r)), !i || (w(t, i), ({
                            env: {}
                        }).nextTick(n, i), !1);
                    }(this, i, t, r)) && (i.pendingcb++, o = function(t, e, r, n, i, o) {
                        if (!r) {
                            var a = function(t, e, r) {
                                return t.objectMode || !1 === t.decodeStrings || "string" != typeof e || (e = u.from(e, r)), e;
                            }(e, n, i);
                            n !== a && (r = !0, i = "buffer", n = a);
                        }
                        var s = e.objectMode ? 1 : n.length;
                        e.length += s;
                        var c = e.length < e.highWaterMark;
                        if (c || (e.needDrain = !0), e.writing || e.corked) {
                            var f = e.lastBufferedRequest;
                            e.lastBufferedRequest = {
                                chunk: n,
                                encoding: i,
                                isBuf: r,
                                callback: o,
                                next: null
                            }, f ? f.next = e.lastBufferedRequest : e.bufferedRequest = e.lastBufferedRequest, e.bufferedRequestCount += 1;
                        } else $(t, e, !1, s, n, i, o);
                        return c;
                    }(this, i, a, t, e, r)), o;
                }, j.prototype.cork = function() {
                    this._writableState.corked++;
                }, j.prototype.uncork = function() {
                    var t = this._writableState;
                    t.corked && (t.corked--, t.writing || t.corked || t.bufferProcessing || !t.bufferedRequest || A(this, t));
                }, j.prototype.setDefaultEncoding = function(t) {
                    if ("string" == typeof t && (t = t.toLowerCase()), !([
                        "hex",
                        "utf8",
                        "utf-8",
                        "ascii",
                        "binary",
                        "base64",
                        "ucs2",
                        "ucs-2",
                        "utf16le",
                        "utf-16le",
                        "raw"
                    ].indexOf((t + "").toLowerCase()) > -1)) throw new _(t);
                    return this._writableState.defaultEncoding = t, this;
                }, Object.defineProperty(j.prototype, "writableBuffer", {
                    enumerable: !1,
                    get: function() {
                        return this._writableState && this._writableState.getBuffer();
                    }
                }), Object.defineProperty(j.prototype, "writableHighWaterMark", {
                    enumerable: !1,
                    get: function() {
                        return this._writableState.highWaterMark;
                    }
                }), j.prototype._write = function(t, e, r) {
                    r(new d("_write()"));
                }, j.prototype._writev = null, j.prototype.end = function(t, e, r) {
                    var n = this._writableState;
                    return "function" == typeof t ? (r = t, t = null, e = null) : "function" == typeof e && (r = e, e = null), null != t && this.write(t, e), n.corked && (n.corked = 1, this.uncork()), n.ending || function(t, e, r) {
                        e.ending = !0, k(t, e), r && (e.finished ? ({
                            env: {}
                        }).nextTick(r) : t.once("finish", r)), e.ended = !0, t.writable = !1;
                    }(this, n, r), this;
                }, Object.defineProperty(j.prototype, "writableLength", {
                    enumerable: !1,
                    get: function() {
                        return this._writableState.length;
                    }
                }), Object.defineProperty(j.prototype, "destroyed", {
                    enumerable: !1,
                    get: function() {
                        return void 0 !== this._writableState && this._writableState.destroyed;
                    },
                    set: function(t) {
                        this._writableState && (this._writableState.destroyed = t);
                    }
                }), j.prototype.destroy = f.destroy, j.prototype._undestroy = f.undestroy, j.prototype._destroy = function(t, e) {
                    e(t);
                };
            },
            8493: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                var i;
                function o(t, e, r) {
                    return (e = function(t) {
                        var e = function(t) {
                            if ("object" !== n(t) || null === t) return t;
                            var e = t[Symbol.toPrimitive];
                            if (void 0 !== e) {
                                var r = e.call(t, "string");
                                if ("object" !== n(r)) return r;
                                throw new TypeError("@@toPrimitive must return a primitive value.");
                            }
                            return String(t);
                        }(t);
                        return "symbol" === n(e) ? e : String(e);
                    }(e)) in t ? Object.defineProperty(t, e, {
                        value: r,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0
                    }) : t[e] = r, t;
                }
                var a = r(8500), s = Symbol("lastResolve"), u = Symbol("lastReject"), c = Symbol("error"), f = Symbol("ended"), l = Symbol("lastPromise"), h = Symbol("handlePromise"), p = Symbol("stream");
                function d(t, e) {
                    return {
                        value: t,
                        done: e
                    };
                }
                function y(t) {
                    var e = t[s];
                    if (null !== e) {
                        var r = t[p].read();
                        null !== r && (t[l] = null, t[s] = null, t[u] = null, e(d(r, !1)));
                    }
                }
                function b(t) {
                    ({
                        env: {}
                    }).nextTick(y, t);
                }
                var m = Object.getPrototypeOf(function() {}), v = Object.setPrototypeOf((o(i = {
                    get stream () {
                        return this[p];
                    },
                    next: function() {
                        var t = this, e = this[c];
                        if (null !== e) return Promise.reject(e);
                        if (this[f]) return Promise.resolve(d(void 0, !0));
                        if (this[p].destroyed) return new Promise(function(e, r) {
                            ({
                                env: {}
                            }).nextTick(function() {
                                t[c] ? r(t[c]) : e(d(void 0, !0));
                            });
                        });
                        var r, n = this[l];
                        if (n) r = new Promise(function(t, e) {
                            return function(r, n) {
                                t.then(function() {
                                    e[f] ? r(d(void 0, !0)) : e[h](r, n);
                                }, n);
                            };
                        }(n, this));
                        else {
                            var i = this[p].read();
                            if (null !== i) return Promise.resolve(d(i, !1));
                            r = new Promise(this[h]);
                        }
                        return this[l] = r, r;
                    }
                }, Symbol.asyncIterator, function() {
                    return this;
                }), o(i, "return", function() {
                    var t = this;
                    return new Promise(function(e, r) {
                        t[p].destroy(null, function(t) {
                            t ? r(t) : e(d(void 0, !0));
                        });
                    });
                }), i), m);
                t.exports = function(t) {
                    var e, r = Object.create(v, (o(e = {}, p, {
                        value: t,
                        writable: !0
                    }), o(e, s, {
                        value: null,
                        writable: !0
                    }), o(e, u, {
                        value: null,
                        writable: !0
                    }), o(e, c, {
                        value: null,
                        writable: !0
                    }), o(e, f, {
                        value: t._readableState.endEmitted,
                        writable: !0
                    }), o(e, h, {
                        value: function(t, e) {
                            var n = r[p].read();
                            n ? (r[l] = null, r[s] = null, r[u] = null, t(d(n, !1))) : (r[s] = t, r[u] = e);
                        },
                        writable: !0
                    }), e));
                    return r[l] = null, a(t, function(t) {
                        if (t && "ERR_STREAM_PREMATURE_CLOSE" !== t.code) {
                            var e = r[u];
                            return null !== e && (r[l] = null, r[s] = null, r[u] = null, e(t)), void (r[c] = t);
                        }
                        var n = r[s];
                        null !== n && (r[l] = null, r[s] = null, r[u] = null, n(d(void 0, !0))), r[f] = !0;
                    }), t.on("readable", b.bind(null, r)), r;
                };
            },
            6811: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i(t, e) {
                    var r = Object.keys(t);
                    if (Object.getOwnPropertySymbols) {
                        var n = Object.getOwnPropertySymbols(t);
                        e && (n = n.filter(function(e) {
                            return Object.getOwnPropertyDescriptor(t, e).enumerable;
                        })), r.push.apply(r, n);
                    }
                    return r;
                }
                function o(t) {
                    for(var e = 1; e < arguments.length; e++){
                        var r = null != arguments[e] ? arguments[e] : {};
                        e % 2 ? i(Object(r), !0).forEach(function(e) {
                            a(t, e, r[e]);
                        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : i(Object(r)).forEach(function(e) {
                            Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));
                        });
                    }
                    return t;
                }
                function a(t, e, r) {
                    return (e = u(e)) in t ? Object.defineProperty(t, e, {
                        value: r,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0
                    }) : t[e] = r, t;
                }
                function s(t, e) {
                    for(var r = 0; r < e.length; r++){
                        var n = e[r];
                        n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, u(n.key), n);
                    }
                }
                function u(t) {
                    var e = function(t) {
                        if ("object" !== n(t) || null === t) return t;
                        var e = t[Symbol.toPrimitive];
                        if (void 0 !== e) {
                            var r = e.call(t, "string");
                            if ("object" !== n(r)) return r;
                            throw new TypeError("@@toPrimitive must return a primitive value.");
                        }
                        return String(t);
                    }(t);
                    return "symbol" === n(e) ? e : String(e);
                }
                var c = r(5832).Buffer, f = r(3779).inspect, l = f && f.custom || "inspect";
                t.exports = function() {
                    function t() {
                        !function(t, e) {
                            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                        }(this, t), this.head = null, this.tail = null, this.length = 0;
                    }
                    var e, r;
                    return e = t, r = [
                        {
                            key: "push",
                            value: function(t) {
                                var e = {
                                    data: t,
                                    next: null
                                };
                                this.length > 0 ? this.tail.next = e : this.head = e, this.tail = e, ++this.length;
                            }
                        },
                        {
                            key: "unshift",
                            value: function(t) {
                                var e = {
                                    data: t,
                                    next: this.head
                                };
                                0 === this.length && (this.tail = e), this.head = e, ++this.length;
                            }
                        },
                        {
                            key: "shift",
                            value: function() {
                                if (0 !== this.length) {
                                    var t = this.head.data;
                                    return 1 === this.length ? this.head = this.tail = null : this.head = this.head.next, --this.length, t;
                                }
                            }
                        },
                        {
                            key: "clear",
                            value: function() {
                                this.head = this.tail = null, this.length = 0;
                            }
                        },
                        {
                            key: "join",
                            value: function(t) {
                                if (0 === this.length) return "";
                                for(var e = this.head, r = "" + e.data; e = e.next;)r += t + e.data;
                                return r;
                            }
                        },
                        {
                            key: "concat",
                            value: function(t) {
                                if (0 === this.length) return c.alloc(0);
                                for(var e, r, n, i = c.allocUnsafe(t >>> 0), o = this.head, a = 0; o;)e = o.data, r = i, n = a, c.prototype.copy.call(e, r, n), a += o.data.length, o = o.next;
                                return i;
                            }
                        },
                        {
                            key: "consume",
                            value: function(t, e) {
                                var r;
                                return t < this.head.data.length ? (r = this.head.data.slice(0, t), this.head.data = this.head.data.slice(t)) : r = t === this.head.data.length ? this.shift() : e ? this._getString(t) : this._getBuffer(t), r;
                            }
                        },
                        {
                            key: "first",
                            value: function() {
                                return this.head.data;
                            }
                        },
                        {
                            key: "_getString",
                            value: function(t) {
                                var e = this.head, r = 1, n = e.data;
                                for(t -= n.length; e = e.next;){
                                    var i = e.data, o = t > i.length ? i.length : t;
                                    if (o === i.length ? n += i : n += i.slice(0, t), 0 == (t -= o)) {
                                        o === i.length ? (++r, e.next ? this.head = e.next : this.head = this.tail = null) : (this.head = e, e.data = i.slice(o));
                                        break;
                                    }
                                    ++r;
                                }
                                return this.length -= r, n;
                            }
                        },
                        {
                            key: "_getBuffer",
                            value: function(t) {
                                var e = c.allocUnsafe(t), r = this.head, n = 1;
                                for(r.data.copy(e), t -= r.data.length; r = r.next;){
                                    var i = r.data, o = t > i.length ? i.length : t;
                                    if (i.copy(e, e.length - t, 0, o), 0 == (t -= o)) {
                                        o === i.length ? (++n, r.next ? this.head = r.next : this.head = this.tail = null) : (this.head = r, r.data = i.slice(o));
                                        break;
                                    }
                                    ++n;
                                }
                                return this.length -= n, e;
                            }
                        },
                        {
                            key: l,
                            value: function(t, e) {
                                return f(this, o(o({}, e), {}, {
                                    depth: 0,
                                    customInspect: !1
                                }));
                            }
                        }
                    ], s(e.prototype, r), Object.defineProperty(e, "prototype", {
                        writable: !1
                    }), t;
                }();
            },
            6222: (t)=>{
                "use strict";
                function e(t, e) {
                    n(t, e), r(t);
                }
                function r(t) {
                    t._writableState && !t._writableState.emitClose || t._readableState && !t._readableState.emitClose || t.emit("close");
                }
                function n(t, e) {
                    t.emit("error", e);
                }
                t.exports = {
                    destroy: function(t, i) {
                        var o = this, a = this._readableState && this._readableState.destroyed, s = this._writableState && this._writableState.destroyed;
                        return a || s ? (i ? i(t) : t && (this._writableState ? this._writableState.errorEmitted || (this._writableState.errorEmitted = !0, ({
                            env: {}
                        }).nextTick(n, this, t)) : ({
                            env: {}
                        }).nextTick(n, this, t)), this) : (this._readableState && (this._readableState.destroyed = !0), this._writableState && (this._writableState.destroyed = !0), this._destroy(t || null, function(t) {
                            !i && t ? o._writableState ? o._writableState.errorEmitted ? ({
                                env: {}
                            }).nextTick(r, o) : (o._writableState.errorEmitted = !0, ({
                                env: {}
                            }).nextTick(e, o, t)) : ({
                                env: {}
                            }).nextTick(e, o, t) : i ? (({
                                env: {}
                            }).nextTick(r, o), i(t)) : ({
                                env: {}
                            }).nextTick(r, o);
                        }), this);
                    },
                    undestroy: function() {
                        this._readableState && (this._readableState.destroyed = !1, this._readableState.reading = !1, this._readableState.ended = !1, this._readableState.endEmitted = !1), this._writableState && (this._writableState.destroyed = !1, this._writableState.ended = !1, this._writableState.ending = !1, this._writableState.finalCalled = !1, this._writableState.prefinished = !1, this._writableState.finished = !1, this._writableState.errorEmitted = !1);
                    },
                    errorOrDestroy: function(t, e) {
                        var r = t._readableState, n = t._writableState;
                        r && r.autoDestroy || n && n.autoDestroy ? t.destroy(e) : t.emit("error", e);
                    }
                };
            },
            8500: (t, e, r)=>{
                "use strict";
                var n = r(198).F.ERR_STREAM_PREMATURE_CLOSE;
                function i() {}
                t.exports = function t(e, r, o) {
                    if ("function" == typeof r) return t(e, null, r);
                    r || (r = {}), o = function(t) {
                        var e = !1;
                        return function() {
                            if (!e) {
                                e = !0;
                                for(var r = arguments.length, n = new Array(r), i = 0; i < r; i++)n[i] = arguments[i];
                                t.apply(this, n);
                            }
                        };
                    }(o || i);
                    var a = r.readable || !1 !== r.readable && e.readable, s = r.writable || !1 !== r.writable && e.writable, u = function() {
                        e.writable || f();
                    }, c = e._writableState && e._writableState.finished, f = function() {
                        s = !1, c = !0, a || o.call(e);
                    }, l = e._readableState && e._readableState.endEmitted, h = function() {
                        a = !1, l = !0, s || o.call(e);
                    }, p = function(t) {
                        o.call(e, t);
                    }, d = function() {
                        var t;
                        return a && !l ? (e._readableState && e._readableState.ended || (t = new n), o.call(e, t)) : s && !c ? (e._writableState && e._writableState.ended || (t = new n), o.call(e, t)) : void 0;
                    }, y = function() {
                        e.req.on("finish", f);
                    };
                    return function(t) {
                        return t.setHeader && "function" == typeof t.abort;
                    }(e) ? (e.on("complete", f), e.on("abort", d), e.req ? y() : e.on("request", y)) : s && !e._writableState && (e.on("end", u), e.on("close", u)), e.on("end", h), e.on("finish", f), !1 !== r.error && e.on("error", p), e.on("close", d), function() {
                        e.removeListener("complete", f), e.removeListener("abort", d), e.removeListener("request", y), e.req && e.req.removeListener("finish", f), e.removeListener("end", u), e.removeListener("close", u), e.removeListener("finish", f), e.removeListener("end", h), e.removeListener("error", p), e.removeListener("close", d);
                    };
                };
            },
            9271: (t)=>{
                t.exports = function() {
                    throw new Error("Readable.from is not available in the browser");
                };
            },
            1144: (t, e, r)=>{
                "use strict";
                var n, i = r(198).F, o = i.ERR_MISSING_ARGS, a = i.ERR_STREAM_DESTROYED;
                function s(t) {
                    if (t) throw t;
                }
                function u(t) {
                    t();
                }
                function c(t, e) {
                    return t.pipe(e);
                }
                t.exports = function() {
                    for(var t = arguments.length, e = new Array(t), i = 0; i < t; i++)e[i] = arguments[i];
                    var f, l = function(t) {
                        return t.length ? "function" != typeof t[t.length - 1] ? s : t.pop() : s;
                    }(e);
                    if (Array.isArray(e[0]) && (e = e[0]), e.length < 2) throw new o("streams");
                    var h = e.map(function(t, i) {
                        var o = i < e.length - 1;
                        return function(t, e, i, o) {
                            o = function(t) {
                                var e = !1;
                                return function() {
                                    e || (e = !0, t.apply(void 0, arguments));
                                };
                            }(o);
                            var s = !1;
                            t.on("close", function() {
                                s = !0;
                            }), void 0 === n && (n = r(8500)), n(t, {
                                readable: e,
                                writable: i
                            }, function(t) {
                                if (t) return o(t);
                                s = !0, o();
                            });
                            var u = !1;
                            return function(e) {
                                if (!s && !u) return u = !0, function(t) {
                                    return t.setHeader && "function" == typeof t.abort;
                                }(t) ? t.abort() : "function" == typeof t.destroy ? t.destroy() : void o(e || new a("pipe"));
                            };
                        }(t, o, i > 0, function(t) {
                            f || (f = t), t && h.forEach(u), o || (h.forEach(u), l(f));
                        });
                    });
                    return e.reduce(c);
                };
            },
            9681: (t, e, r)=>{
                "use strict";
                var n = r(198).F.ERR_INVALID_OPT_VALUE;
                t.exports = {
                    getHighWaterMark: function(t, e, r, i) {
                        var o = function(t, e, r) {
                            return null != t.highWaterMark ? t.highWaterMark : e ? t[r] : null;
                        }(e, i, r);
                        if (null != o) {
                            if (!isFinite(o) || Math.floor(o) !== o || o < 0) throw new n(i ? r : "highWaterMark", o);
                            return Math.floor(o);
                        }
                        return t.objectMode ? 16 : 16384;
                    }
                };
            },
            6871: (t, e, r)=>{
                t.exports = r(3550).EventEmitter;
            },
            136: (t, e, r)=>{
                "use strict";
                var n = r(2).Buffer, i = n.isEncoding || function(t) {
                    switch((t = "" + t) && t.toLowerCase()){
                        case "hex":
                        case "utf8":
                        case "utf-8":
                        case "ascii":
                        case "binary":
                        case "base64":
                        case "ucs2":
                        case "ucs-2":
                        case "utf16le":
                        case "utf-16le":
                        case "raw":
                            return !0;
                        default:
                            return !1;
                    }
                };
                function o(t) {
                    var e;
                    switch(this.encoding = function(t) {
                        var e = function(t) {
                            if (!t) return "utf8";
                            for(var e;;)switch(t){
                                case "utf8":
                                case "utf-8":
                                    return "utf8";
                                case "ucs2":
                                case "ucs-2":
                                case "utf16le":
                                case "utf-16le":
                                    return "utf16le";
                                case "latin1":
                                case "binary":
                                    return "latin1";
                                case "base64":
                                case "ascii":
                                case "hex":
                                    return t;
                                default:
                                    if (e) return;
                                    t = ("" + t).toLowerCase(), e = !0;
                            }
                        }(t);
                        if ("string" != typeof e && (n.isEncoding === i || !i(t))) throw new Error("Unknown encoding: " + t);
                        return e || t;
                    }(t), this.encoding){
                        case "utf16le":
                            this.text = u, this.end = c, e = 4;
                            break;
                        case "utf8":
                            this.fillLast = s, e = 4;
                            break;
                        case "base64":
                            this.text = f, this.end = l, e = 3;
                            break;
                        default:
                            return this.write = h, void (this.end = p);
                    }
                    this.lastNeed = 0, this.lastTotal = 0, this.lastChar = n.allocUnsafe(e);
                }
                function a(t) {
                    return t <= 127 ? 0 : t >> 5 == 6 ? 2 : t >> 4 == 14 ? 3 : t >> 3 == 30 ? 4 : t >> 6 == 2 ? -1 : -2;
                }
                function s(t) {
                    var e = this.lastTotal - this.lastNeed, r = function(t, e) {
                        if (128 != (192 & e[0])) return t.lastNeed = 0, "\uFFFD";
                        if (t.lastNeed > 1 && e.length > 1) {
                            if (128 != (192 & e[1])) return t.lastNeed = 1, "\uFFFD";
                            if (t.lastNeed > 2 && e.length > 2 && 128 != (192 & e[2])) return t.lastNeed = 2, "\uFFFD";
                        }
                    }(this, t);
                    return void 0 !== r ? r : this.lastNeed <= t.length ? (t.copy(this.lastChar, e, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal)) : (t.copy(this.lastChar, e, 0, t.length), void (this.lastNeed -= t.length));
                }
                function u(t, e) {
                    if ((t.length - e) % 2 == 0) {
                        var r = t.toString("utf16le", e);
                        if (r) {
                            var n = r.charCodeAt(r.length - 1);
                            if (n >= 55296 && n <= 56319) return this.lastNeed = 2, this.lastTotal = 4, this.lastChar[0] = t[t.length - 2], this.lastChar[1] = t[t.length - 1], r.slice(0, -1);
                        }
                        return r;
                    }
                    return this.lastNeed = 1, this.lastTotal = 2, this.lastChar[0] = t[t.length - 1], t.toString("utf16le", e, t.length - 1);
                }
                function c(t) {
                    var e = t && t.length ? this.write(t) : "";
                    if (this.lastNeed) {
                        var r = this.lastTotal - this.lastNeed;
                        return e + this.lastChar.toString("utf16le", 0, r);
                    }
                    return e;
                }
                function f(t, e) {
                    var r = (t.length - e) % 3;
                    return 0 === r ? t.toString("base64", e) : (this.lastNeed = 3 - r, this.lastTotal = 3, 1 === r ? this.lastChar[0] = t[t.length - 1] : (this.lastChar[0] = t[t.length - 2], this.lastChar[1] = t[t.length - 1]), t.toString("base64", e, t.length - r));
                }
                function l(t) {
                    var e = t && t.length ? this.write(t) : "";
                    return this.lastNeed ? e + this.lastChar.toString("base64", 0, 3 - this.lastNeed) : e;
                }
                function h(t) {
                    return t.toString(this.encoding);
                }
                function p(t) {
                    return t && t.length ? this.write(t) : "";
                }
                e.I = o, o.prototype.write = function(t) {
                    if (0 === t.length) return "";
                    var e, r;
                    if (this.lastNeed) {
                        if (void 0 === (e = this.fillLast(t))) return "";
                        r = this.lastNeed, this.lastNeed = 0;
                    } else r = 0;
                    return r < t.length ? e ? e + this.text(t, r) : this.text(t, r) : e || "";
                }, o.prototype.end = function(t) {
                    var e = t && t.length ? this.write(t) : "";
                    return this.lastNeed ? e + "\uFFFD" : e;
                }, o.prototype.text = function(t, e) {
                    var r = function(t, e, r) {
                        var n = e.length - 1;
                        if (n < r) return 0;
                        var i = a(e[n]);
                        return i >= 0 ? (i > 0 && (t.lastNeed = i - 1), i) : --n < r || -2 === i ? 0 : (i = a(e[n])) >= 0 ? (i > 0 && (t.lastNeed = i - 2), i) : --n < r || -2 === i ? 0 : (i = a(e[n])) >= 0 ? (i > 0 && (2 === i ? i = 0 : t.lastNeed = i - 3), i) : 0;
                    }(this, t, e);
                    if (!this.lastNeed) return t.toString("utf8", e);
                    this.lastTotal = r;
                    var n = t.length - (r - this.lastNeed);
                    return t.copy(this.lastChar, 0, n), t.toString("utf8", e, n);
                }, o.prototype.fillLast = function(t) {
                    if (this.lastNeed <= t.length) return t.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
                    t.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, t.length), this.lastNeed -= t.length;
                };
            },
            2: (t, e, r)=>{
                var n = r(5832), i = n.Buffer;
                function o(t, e) {
                    for(var r in t)e[r] = t[r];
                }
                function a(t, e, r) {
                    return i(t, e, r);
                }
                i.from && i.alloc && i.allocUnsafe && i.allocUnsafeSlow ? t.exports = n : (o(n, e), e.Buffer = a), o(i, a), a.from = function(t, e, r) {
                    if ("number" == typeof t) throw new TypeError("Argument must not be a number");
                    return i(t, e, r);
                }, a.alloc = function(t, e, r) {
                    if ("number" != typeof t) throw new TypeError("Argument must be a number");
                    var n = i(t);
                    return void 0 !== e ? "string" == typeof r ? n.fill(e, r) : n.fill(e) : n.fill(0), n;
                }, a.allocUnsafe = function(t) {
                    if ("number" != typeof t) throw new TypeError("Argument must be a number");
                    return i(t);
                }, a.allocUnsafeSlow = function(t) {
                    if ("number" != typeof t) throw new TypeError("Argument must be a number");
                    return n.SlowBuffer(t);
                };
            },
            3340: (t, e, r)=>{
                function n(t) {
                    try {
                        if (!r.g.localStorage) return !1;
                    } catch (t) {
                        return !1;
                    }
                    var e = r.g.localStorage[t];
                    return null != e && "true" === String(e).toLowerCase();
                }
                t.exports = function(t, e) {
                    if (n("noDeprecation")) return t;
                    var r = !1;
                    return function() {
                        if (!r) {
                            if (n("throwDeprecation")) throw new Error(e);
                            n("traceDeprecation") ? console.trace(e) : console.warn(e), r = !0;
                        }
                        return t.apply(this, arguments);
                    };
                };
            },
            7944: (t)=>{
                function e(t) {
                    return e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, e(t);
                }
                t.exports = function(t) {
                    return t && "object" === e(t) && "function" == typeof t.copy && "function" == typeof t.fill && "function" == typeof t.readUInt8;
                };
            },
            7595: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                var i = r(5899), o = r(1905), a = r(9834), s = r(7911);
                function u(t) {
                    return t.call.bind(t);
                }
                var c = "undefined" != typeof BigInt, f = "undefined" != typeof Symbol, l = u(Object.prototype.toString), h = u(Number.prototype.valueOf), p = u(String.prototype.valueOf), d = u(Boolean.prototype.valueOf);
                if (c) var y = u(BigInt.prototype.valueOf);
                if (f) var b = u(Symbol.prototype.valueOf);
                function m(t, e) {
                    if ("object" !== n(t)) return !1;
                    try {
                        return e(t), !0;
                    } catch (t) {
                        return !1;
                    }
                }
                function v(t) {
                    return "[object Map]" === l(t);
                }
                function g(t) {
                    return "[object Set]" === l(t);
                }
                function _(t) {
                    return "[object WeakMap]" === l(t);
                }
                function w(t) {
                    return "[object WeakSet]" === l(t);
                }
                function S(t) {
                    return "[object ArrayBuffer]" === l(t);
                }
                function O(t) {
                    return "undefined" != typeof ArrayBuffer && (S.working ? S(t) : t instanceof ArrayBuffer);
                }
                function j(t) {
                    return "[object DataView]" === l(t);
                }
                function $(t) {
                    return "undefined" != typeof DataView && (j.working ? j(t) : t instanceof DataView);
                }
                e.isArgumentsObject = i, e.isGeneratorFunction = o, e.isTypedArray = s, e.isPromise = function(t) {
                    return "undefined" != typeof Promise && t instanceof Promise || null !== t && "object" === n(t) && "function" == typeof t.then && "function" == typeof t.catch;
                }, e.isArrayBufferView = function(t) {
                    return "undefined" != typeof ArrayBuffer && ArrayBuffer.isView ? ArrayBuffer.isView(t) : s(t) || $(t);
                }, e.isUint8Array = function(t) {
                    return "Uint8Array" === a(t);
                }, e.isUint8ClampedArray = function(t) {
                    return "Uint8ClampedArray" === a(t);
                }, e.isUint16Array = function(t) {
                    return "Uint16Array" === a(t);
                }, e.isUint32Array = function(t) {
                    return "Uint32Array" === a(t);
                }, e.isInt8Array = function(t) {
                    return "Int8Array" === a(t);
                }, e.isInt16Array = function(t) {
                    return "Int16Array" === a(t);
                }, e.isInt32Array = function(t) {
                    return "Int32Array" === a(t);
                }, e.isFloat32Array = function(t) {
                    return "Float32Array" === a(t);
                }, e.isFloat64Array = function(t) {
                    return "Float64Array" === a(t);
                }, e.isBigInt64Array = function(t) {
                    return "BigInt64Array" === a(t);
                }, e.isBigUint64Array = function(t) {
                    return "BigUint64Array" === a(t);
                }, v.working = "undefined" != typeof Map && v(new Map), e.isMap = function(t) {
                    return "undefined" != typeof Map && (v.working ? v(t) : t instanceof Map);
                }, g.working = "undefined" != typeof Set && g(new Set), e.isSet = function(t) {
                    return "undefined" != typeof Set && (g.working ? g(t) : t instanceof Set);
                }, _.working = "undefined" != typeof WeakMap && _(new WeakMap), e.isWeakMap = function(t) {
                    return "undefined" != typeof WeakMap && (_.working ? _(t) : t instanceof WeakMap);
                }, w.working = "undefined" != typeof WeakSet && w(new WeakSet), e.isWeakSet = function(t) {
                    return w(t);
                }, S.working = "undefined" != typeof ArrayBuffer && S(new ArrayBuffer), e.isArrayBuffer = O, j.working = "undefined" != typeof ArrayBuffer && "undefined" != typeof DataView && j(new DataView(new ArrayBuffer(1), 0, 1)), e.isDataView = $;
                var E = "undefined" != typeof SharedArrayBuffer ? SharedArrayBuffer : void 0;
                function A(t) {
                    return "[object SharedArrayBuffer]" === l(t);
                }
                function P(t) {
                    return void 0 !== E && (void 0 === A.working && (A.working = A(new E)), A.working ? A(t) : t instanceof E);
                }
                function x(t) {
                    return m(t, h);
                }
                function k(t) {
                    return m(t, p);
                }
                function M(t) {
                    return m(t, d);
                }
                function T(t) {
                    return c && m(t, y);
                }
                function B(t) {
                    return f && m(t, b);
                }
                e.isSharedArrayBuffer = P, e.isAsyncFunction = function(t) {
                    return "[object AsyncFunction]" === l(t);
                }, e.isMapIterator = function(t) {
                    return "[object Map Iterator]" === l(t);
                }, e.isSetIterator = function(t) {
                    return "[object Set Iterator]" === l(t);
                }, e.isGeneratorObject = function(t) {
                    return "[object Generator]" === l(t);
                }, e.isWebAssemblyCompiledModule = function(t) {
                    return "[object WebAssembly.Module]" === l(t);
                }, e.isNumberObject = x, e.isStringObject = k, e.isBooleanObject = M, e.isBigIntObject = T, e.isSymbolObject = B, e.isBoxedPrimitive = function(t) {
                    return x(t) || k(t) || M(t) || T(t) || B(t);
                }, e.isAnyArrayBuffer = function(t) {
                    return "undefined" != typeof Uint8Array && (O(t) || P(t));
                }, [
                    "isProxy",
                    "isExternal",
                    "isModuleNamespaceObject"
                ].forEach(function(t) {
                    Object.defineProperty(e, t, {
                        enumerable: !1,
                        value: function() {
                            throw new Error(t + " is not supported in userland");
                        }
                    });
                });
            },
            7352: (t, e, r)=>{
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                var i = Object.getOwnPropertyDescriptors || function(t) {
                    for(var e = Object.keys(t), r = {}, n = 0; n < e.length; n++)r[e[n]] = Object.getOwnPropertyDescriptor(t, e[n]);
                    return r;
                }, o = /%[sdj%]/g;
                e.format = function(t) {
                    if (!g(t)) {
                        for(var e = [], r = 0; r < arguments.length; r++)e.push(c(arguments[r]));
                        return e.join(" ");
                    }
                    r = 1;
                    for(var n = arguments, i = n.length, a = String(t).replace(o, function(t) {
                        if ("%%" === t) return "%";
                        if (r >= i) return t;
                        switch(t){
                            case "%s":
                                return String(n[r++]);
                            case "%d":
                                return Number(n[r++]);
                            case "%j":
                                try {
                                    return JSON.stringify(n[r++]);
                                } catch (t) {
                                    return "[Circular]";
                                }
                            default:
                                return t;
                        }
                    }), s = n[r]; r < i; s = n[++r])m(s) || !S(s) ? a += " " + s : a += " " + c(s);
                    return a;
                }, e.deprecate = function(t, e) {
                    if (!0 === ({
                        env: {}
                    }).noDeprecation) return t;
                    var r = !1;
                    return function() {
                        if (!r) {
                            if (({
                                env: {}
                            }).throwDeprecation) throw new Error(e);
                            !({
                                env: {}
                            }).traceDeprecation ? console.error(e) : console.trace(e), r = !0;
                        }
                        return t.apply(this, arguments);
                    };
                };
                var a = {}, s = /^$/;
                if (({}).NODE_DEBUG) {
                    var u = {}.NODE_DEBUG;
                    u = u.replace(/[|\\{}()[\]^$+?.]/g, "\\$&").replace(/\*/g, ".*").replace(/,/g, "$|^").toUpperCase(), s = new RegExp("^" + u + "$", "i");
                }
                function c(t, r) {
                    var n = {
                        seen: [],
                        stylize: l
                    };
                    return arguments.length >= 3 && (n.depth = arguments[2]), arguments.length >= 4 && (n.colors = arguments[3]), b(r) ? n.showHidden = r : r && e._extend(n, r), _(n.showHidden) && (n.showHidden = !1), _(n.depth) && (n.depth = 2), _(n.colors) && (n.colors = !1), _(n.customInspect) && (n.customInspect = !0), n.colors && (n.stylize = f), h(n, t, n.depth);
                }
                function f(t, e) {
                    var r = c.styles[e];
                    return r ? "[" + c.colors[r][0] + "m" + t + "[" + c.colors[r][1] + "m" : t;
                }
                function l(t, e) {
                    return t;
                }
                function h(t, r, n) {
                    if (t.customInspect && r && $(r.inspect) && r.inspect !== e.inspect && (!r.constructor || r.constructor.prototype !== r)) {
                        var i = r.inspect(n, t);
                        return g(i) || (i = h(t, i, n)), i;
                    }
                    var o = function(t, e) {
                        if (_(e)) return t.stylize("undefined", "undefined");
                        if (g(e)) {
                            var r = "'" + JSON.stringify(e).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
                            return t.stylize(r, "string");
                        }
                        return v(e) ? t.stylize("" + e, "number") : b(e) ? t.stylize("" + e, "boolean") : m(e) ? t.stylize("null", "null") : void 0;
                    }(t, r);
                    if (o) return o;
                    var a = Object.keys(r), s = function(t) {
                        var e = {};
                        return t.forEach(function(t, r) {
                            e[t] = !0;
                        }), e;
                    }(a);
                    if (t.showHidden && (a = Object.getOwnPropertyNames(r)), j(r) && (a.indexOf("message") >= 0 || a.indexOf("description") >= 0)) return p(r);
                    if (0 === a.length) {
                        if ($(r)) {
                            var u = r.name ? ": " + r.name : "";
                            return t.stylize("[Function" + u + "]", "special");
                        }
                        if (w(r)) return t.stylize(RegExp.prototype.toString.call(r), "regexp");
                        if (O(r)) return t.stylize(Date.prototype.toString.call(r), "date");
                        if (j(r)) return p(r);
                    }
                    var c, f = "", l = !1, S = [
                        "{",
                        "}"
                    ];
                    return y(r) && (l = !0, S = [
                        "[",
                        "]"
                    ]), $(r) && (f = " [Function" + (r.name ? ": " + r.name : "") + "]"), w(r) && (f = " " + RegExp.prototype.toString.call(r)), O(r) && (f = " " + Date.prototype.toUTCString.call(r)), j(r) && (f = " " + p(r)), 0 !== a.length || l && 0 != r.length ? n < 0 ? w(r) ? t.stylize(RegExp.prototype.toString.call(r), "regexp") : t.stylize("[Object]", "special") : (t.seen.push(r), c = l ? function(t, e, r, n, i) {
                        for(var o = [], a = 0, s = e.length; a < s; ++a)x(e, String(a)) ? o.push(d(t, e, r, n, String(a), !0)) : o.push("");
                        return i.forEach(function(i) {
                            i.match(/^\d+$/) || o.push(d(t, e, r, n, i, !0));
                        }), o;
                    }(t, r, n, s, a) : a.map(function(e) {
                        return d(t, r, n, s, e, l);
                    }), t.seen.pop(), function(t, e, r) {
                        return t.reduce(function(t, e) {
                            return e.indexOf("\n"), t + e.replace(/\u001b\[\d\d?m/g, "").length + 1;
                        }, 0) > 60 ? r[0] + ("" === e ? "" : e + "\n ") + " " + t.join(",\n  ") + " " + r[1] : r[0] + e + " " + t.join(", ") + " " + r[1];
                    }(c, f, S)) : S[0] + f + S[1];
                }
                function p(t) {
                    return "[" + Error.prototype.toString.call(t) + "]";
                }
                function d(t, e, r, n, i, o) {
                    var a, s, u;
                    if ((u = Object.getOwnPropertyDescriptor(e, i) || {
                        value: e[i]
                    }).get ? s = u.set ? t.stylize("[Getter/Setter]", "special") : t.stylize("[Getter]", "special") : u.set && (s = t.stylize("[Setter]", "special")), x(n, i) || (a = "[" + i + "]"), s || (t.seen.indexOf(u.value) < 0 ? (s = m(r) ? h(t, u.value, null) : h(t, u.value, r - 1)).indexOf("\n") > -1 && (s = o ? s.split("\n").map(function(t) {
                        return "  " + t;
                    }).join("\n").slice(2) : "\n" + s.split("\n").map(function(t) {
                        return "   " + t;
                    }).join("\n")) : s = t.stylize("[Circular]", "special")), _(a)) {
                        if (o && i.match(/^\d+$/)) return s;
                        (a = JSON.stringify("" + i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/) ? (a = a.slice(1, -1), a = t.stylize(a, "name")) : (a = a.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'"), a = t.stylize(a, "string"));
                    }
                    return a + ": " + s;
                }
                function y(t) {
                    return Array.isArray(t);
                }
                function b(t) {
                    return "boolean" == typeof t;
                }
                function m(t) {
                    return null === t;
                }
                function v(t) {
                    return "number" == typeof t;
                }
                function g(t) {
                    return "string" == typeof t;
                }
                function _(t) {
                    return void 0 === t;
                }
                function w(t) {
                    return S(t) && "[object RegExp]" === E(t);
                }
                function S(t) {
                    return "object" === n(t) && null !== t;
                }
                function O(t) {
                    return S(t) && "[object Date]" === E(t);
                }
                function j(t) {
                    return S(t) && ("[object Error]" === E(t) || t instanceof Error);
                }
                function $(t) {
                    return "function" == typeof t;
                }
                function E(t) {
                    return Object.prototype.toString.call(t);
                }
                function A(t) {
                    return t < 10 ? "0" + t.toString(10) : t.toString(10);
                }
                e.debuglog = function(t) {
                    if (t = t.toUpperCase(), !a[t]) {
                        if (s.test(t)) {
                            var r = {
                                env: {}
                            }.pid;
                            a[t] = function() {
                                var n = e.format.apply(e, arguments);
                                console.error("%s %d: %s", t, r, n);
                            };
                        } else a[t] = function() {};
                    }
                    return a[t];
                }, e.inspect = c, c.colors = {
                    bold: [
                        1,
                        22
                    ],
                    italic: [
                        3,
                        23
                    ],
                    underline: [
                        4,
                        24
                    ],
                    inverse: [
                        7,
                        27
                    ],
                    white: [
                        37,
                        39
                    ],
                    grey: [
                        90,
                        39
                    ],
                    black: [
                        30,
                        39
                    ],
                    blue: [
                        34,
                        39
                    ],
                    cyan: [
                        36,
                        39
                    ],
                    green: [
                        32,
                        39
                    ],
                    magenta: [
                        35,
                        39
                    ],
                    red: [
                        31,
                        39
                    ],
                    yellow: [
                        33,
                        39
                    ]
                }, c.styles = {
                    special: "cyan",
                    number: "yellow",
                    boolean: "yellow",
                    undefined: "grey",
                    null: "bold",
                    string: "green",
                    date: "magenta",
                    regexp: "red"
                }, e.types = r(7595), e.isArray = y, e.isBoolean = b, e.isNull = m, e.isNullOrUndefined = function(t) {
                    return null == t;
                }, e.isNumber = v, e.isString = g, e.isSymbol = function(t) {
                    return "symbol" === n(t);
                }, e.isUndefined = _, e.isRegExp = w, e.types.isRegExp = w, e.isObject = S, e.isDate = O, e.types.isDate = O, e.isError = j, e.types.isNativeError = j, e.isFunction = $, e.isPrimitive = function(t) {
                    return null === t || "boolean" == typeof t || "number" == typeof t || "string" == typeof t || "symbol" === n(t) || void 0 === t;
                }, e.isBuffer = r(7944);
                var P = [
                    "Jan",
                    "Feb",
                    "Mar",
                    "Apr",
                    "May",
                    "Jun",
                    "Jul",
                    "Aug",
                    "Sep",
                    "Oct",
                    "Nov",
                    "Dec"
                ];
                function x(t, e) {
                    return Object.prototype.hasOwnProperty.call(t, e);
                }
                e.log = function() {
                    var t, r;
                    console.log("%s - %s", (r = [
                        A((t = new Date).getHours()),
                        A(t.getMinutes()),
                        A(t.getSeconds())
                    ].join(":"), [
                        t.getDate(),
                        P[t.getMonth()],
                        r
                    ].join(" ")), e.format.apply(e, arguments));
                }, e.inherits = r(1679), e._extend = function(t, e) {
                    if (!e || !S(e)) return t;
                    for(var r = Object.keys(e), n = r.length; n--;)t[r[n]] = e[r[n]];
                    return t;
                };
                var k = "undefined" != typeof Symbol ? Symbol("util.promisify.custom") : void 0;
                function M(t, e) {
                    if (!t) {
                        var r = new Error("Promise was rejected with a falsy value");
                        r.reason = t, t = r;
                    }
                    return e(t);
                }
                e.promisify = function(t) {
                    if ("function" != typeof t) throw new TypeError('The "original" argument must be of type Function');
                    if (k && t[k]) {
                        var e;
                        if ("function" != typeof (e = t[k])) throw new TypeError('The "util.promisify.custom" argument must be of type Function');
                        return Object.defineProperty(e, k, {
                            value: e,
                            enumerable: !1,
                            writable: !1,
                            configurable: !0
                        }), e;
                    }
                    function e() {
                        for(var e, r, n = new Promise(function(t, n) {
                            e = t, r = n;
                        }), i = [], o = 0; o < arguments.length; o++)i.push(arguments[o]);
                        i.push(function(t, n) {
                            t ? r(t) : e(n);
                        });
                        try {
                            t.apply(this, i);
                        } catch (t) {
                            r(t);
                        }
                        return n;
                    }
                    return Object.setPrototypeOf(e, Object.getPrototypeOf(t)), k && Object.defineProperty(e, k, {
                        value: e,
                        enumerable: !1,
                        writable: !1,
                        configurable: !0
                    }), Object.defineProperties(e, i(t));
                }, e.promisify.custom = k, e.callbackify = function(t) {
                    if ("function" != typeof t) throw new TypeError('The "original" argument must be of type Function');
                    function e() {
                        for(var e = [], r = 0; r < arguments.length; r++)e.push(arguments[r]);
                        var n = e.pop();
                        if ("function" != typeof n) throw new TypeError("The last argument must be of type Function");
                        var i = this, o = function() {
                            return n.apply(i, arguments);
                        };
                        t.apply(this, e).then(function(t) {
                            ({
                                env: {}
                            }).nextTick(o.bind(null, null, t));
                        }, function(t) {
                            ({
                                env: {}
                            }).nextTick(M.bind(null, t, o));
                        });
                    }
                    return Object.setPrototypeOf(e, Object.getPrototypeOf(t)), Object.defineProperties(e, i(t)), e;
                };
            },
            9834: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                var i = r(3777), o = r(3426), a = r(9122), s = r(3071), u = r(1464), c = s("Object.prototype.toString"), f = r(953)(), l = "undefined" == typeof globalThis ? r.g : globalThis, h = o(), p = s("String.prototype.slice"), d = Object.getPrototypeOf, y = s("Array.prototype.indexOf", !0) || function(t, e) {
                    for(var r = 0; r < t.length; r += 1)if (t[r] === e) return r;
                    return -1;
                }, b = {
                    __proto__: null
                };
                i(h, f && u && d ? function(t) {
                    var e = new l[t];
                    if (Symbol.toStringTag in e) {
                        var r = d(e), n = u(r, Symbol.toStringTag);
                        if (!n) {
                            var i = d(r);
                            n = u(i, Symbol.toStringTag);
                        }
                        b["$" + t] = a(n.get);
                    }
                } : function(t) {
                    var e = new l[t], r = e.slice || e.set;
                    r && (b["$" + t] = a(r));
                }), t.exports = function(t) {
                    if (!t || "object" !== n(t)) return !1;
                    if (!f) {
                        var e = p(c(t), 8, -1);
                        return y(h, e) > -1 ? e : "Object" === e && function(t) {
                            var e = !1;
                            return i(b, function(r, n) {
                                if (!e) try {
                                    r(t), e = p(n, 1);
                                } catch (t) {}
                            }), e;
                        }(t);
                    }
                    return u ? function(t) {
                        var e = !1;
                        return i(b, function(r, n) {
                            if (!e) try {
                                "$" + r(t) === n && (e = p(n, 1));
                            } catch (t) {}
                        }), e;
                    }(t) : null;
                };
            },
            7790: ()=>{},
            3776: ()=>{},
            5340: ()=>{},
            9838: ()=>{},
            3779: ()=>{},
            7199: ()=>{},
            4829: (t, e, r)=>{
                "use strict";
                t.exports = r(8533);
            },
            8533: (t, e, r)=>{
                "use strict";
                var n = r(5832).Buffer;
                function i(t) {
                    return i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, i(t);
                }
                function o() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
                    } catch (t) {}
                    return (o = function() {
                        return !!t;
                    })();
                }
                function a(t) {
                    return a = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                        return t.__proto__ || Object.getPrototypeOf(t);
                    }, a(t);
                }
                function s(t, e) {
                    return s = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                        return t.__proto__ = e, t;
                    }, s(t, e);
                }
                r(7591).set(r(4026));
                var u = r(8285);
                u.setBrowser(!0), e.Error = r(3672), e.Schema = r(7058), e.Types = r(9600), e.VirtualType = r(622), e.SchemaType = r(6426), e.utils = r(8768), e.Document = u(), e.model = function(t, r) {
                    var n = function(t) {
                        function e(t, n) {
                            return function(t, e) {
                                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                            }(this, e), function(t, e, r) {
                                return e = a(e), function(t, e) {
                                    if (e && ("object" == i(e) || "function" == typeof e)) return e;
                                    if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                                    return function(t) {
                                        if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                                        return t;
                                    }(t);
                                }(t, o() ? Reflect.construct(e, r || [], a(t).constructor) : e.apply(t, r));
                            }(this, e, [
                                t,
                                r,
                                n
                            ]);
                        }
                        var n;
                        return function(t, e) {
                            if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                            t.prototype = Object.create(e && e.prototype, {
                                constructor: {
                                    value: t,
                                    writable: !0,
                                    configurable: !0
                                }
                            }), Object.defineProperty(t, "prototype", {
                                writable: !1
                            }), e && s(t, e);
                        }(e, t), n = e, Object.defineProperty(n, "prototype", {
                            writable: !1
                        }), n;
                    }(e.Document);
                    return n.modelName = t, n;
                }, "undefined" != typeof window && (window.mongoose = t.exports, window.Buffer = n);
            },
            2580: (t, e, r)=>{
                "use strict";
                var n = r(2400), i = r(3550).EventEmitter, o = r(3672), a = r(7058), s = r(5549), u = o.ValidationError, c = r(4957), f = r(608);
                function l(t, e, r, i, u) {
                    if (!(this instanceof l)) return new l(t, e, r, i, u);
                    if (f(e) && !e.instanceOfSchema && (e = new a(e)), e = this.schema || e, !this.schema && e.options._id && void 0 === (t = t || {})._id && (t._id = new s), !e) throw new o.MissingSchemaError;
                    for(var h in this.$__setSchema(e), n.call(this, t, r, i, u), c(this, e, {
                        decorateDoc: !0
                    }), e.methods)this[h] = e.methods[h];
                    for(var p in e.statics)this[p] = e.statics[p];
                }
                l.prototype = Object.create(n.prototype), l.prototype.constructor = l, l.events = new i, l.$emitter = new i, [
                    "on",
                    "once",
                    "emit",
                    "listeners",
                    "removeListener",
                    "setMaxListeners",
                    "removeAllListeners",
                    "addListener"
                ].forEach(function(t) {
                    l[t] = function() {
                        return l.$emitter[t].apply(l.$emitter, arguments);
                    };
                }), l.ValidationError = u, t.exports = l;
            },
            7982: (t, e, r)=>{
                "use strict";
                function n(t, e) {
                    var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                    if (!r) {
                        if (Array.isArray(t) || (r = function(t, e) {
                            if (t) {
                                if ("string" == typeof t) return i(t, e);
                                var r = ({}).toString.call(t).slice(8, -1);
                                return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? i(t, e) : void 0;
                            }
                        }(t)) || e && t && "number" == typeof t.length) {
                            r && (t = r);
                            var n = 0, o = function() {};
                            return {
                                s: o,
                                n: function() {
                                    return n >= t.length ? {
                                        done: !0
                                    } : {
                                        done: !1,
                                        value: t[n++]
                                    };
                                },
                                e: function(t) {
                                    throw t;
                                },
                                f: o
                            };
                        }
                        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    }
                    var a, s = !0, u = !1;
                    return {
                        s: function() {
                            r = r.call(t);
                        },
                        n: function() {
                            var t = r.next();
                            return s = t.done, t;
                        },
                        e: function(t) {
                            u = !0, a = t;
                        },
                        f: function() {
                            try {
                                s || null == r.return || r.return();
                            } finally{
                                if (u) throw a;
                            }
                        }
                    };
                }
                function i(t, e) {
                    (null == e || e > t.length) && (e = t.length);
                    for(var r = 0, n = Array(e); r < e; r++)n[r] = t[r];
                    return n;
                }
                function o(t) {
                    return o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, o(t);
                }
                var a = r(3609), s = r(8995), u = r(7953), c = r(170), f = r(1244), l = r(9064), h = r(3703), p = r(7425), d = r(5110), y = r(7352), b = r(608), m = r(2497), v = r(8768), g = [
                    "Polygon",
                    "MultiPolygon"
                ];
                function _(t, e, r) {
                    if (Array.isArray(t)) t.forEach(function(n, i) {
                        if (Array.isArray(n) || b(n)) return _(n, e, r);
                        t[i] = e.castForQuery(null, n, r);
                    });
                    else for(var n = Object.keys(t), i = n.length; i--;){
                        var o = n[i], a = t[o];
                        Array.isArray(a) || b(a) ? (_(a, e, r), t[o] = a) : t[o] = e.castForQuery({
                            val: a,
                            context: r
                        });
                    }
                }
                function w(t, e, r, n) {
                    if ("strictQuery" in t) return t.strictQuery;
                    if ("strictQuery" in e) return e.strictQuery;
                    var i = n && n.mongooseCollection && n.mongooseCollection.conn && n.mongooseCollection.conn.base && n.mongooseCollection.conn.base.options;
                    return i && "strictQuery" in i ? i.strictQuery : r.strictQuery;
                }
                t.exports = function t(e, r, i, S) {
                    if (Array.isArray(r)) throw new Error("Query filter must be an object, got an array ", y.inspect(r));
                    if (null == r) return r;
                    null != e && null != e.discriminators && null != r[e.options.discriminatorKey] && (e = p(e, r[e.options.discriminatorKey]) || e);
                    var O, j, $, E, A, P, x = Object.keys(r), k = x.length;
                    for(i = i || {}; k--;)if (P = r[E = x[k]], "$or" === E || "$nor" === E || "$and" === E) {
                        if (!Array.isArray(P)) throw new a("Array", P, E);
                        for(var M = P.length - 1; M >= 0; M--){
                            if (null == P[M] || "object" !== o(P[M])) throw new a("Object", P[M], E + "." + M);
                            var T = Object.keys(P[M]).length, B = P[M][e.options.discriminatorKey];
                            if (null == B) P[M] = t(e, P[M], i, S);
                            else {
                                var I = p(S.schema, B);
                                P[M] = t(I || e, P[M], i, S);
                            }
                            0 === Object.keys(P[M]).length && 0 !== T && P.splice(M, 1);
                        }
                        0 === P.length && delete r[E];
                    } else {
                        if ("$where" === E) {
                            if ("string" !== (A = o(P)) && "function" !== A) throw new Error("Must have a string or function for $where");
                            "function" === A && (r[E] = P.toString());
                            continue;
                        }
                        if ("$expr" === E) {
                            P = c(P, e);
                            continue;
                        }
                        if ("$elemMatch" === E) P = t(e, P, i, S);
                        else if ("$text" === E) P = l(P, E);
                        else if ("$comment" !== E || e.paths.hasOwnProperty("$comment")) {
                            if (!e) continue;
                            if (!(j = e.path(E))) for(var R = E.split("."), N = R.length; N--;){
                                var D = R.slice(0, N).join("."), L = R.slice(N).join("."), C = e.path(D), U = C && C.schema && C.schema.options && C.schema.options.discriminatorKey;
                                if (null != C && null != (C.schema && C.schema.discriminators) && null != U && L !== U) {
                                    var q = h(r, D + "." + U), F = C.schema.discriminators;
                                    "string" == typeof q && null != F[q] ? j = F[q].path(L) : null != q && 1 === Object.keys(q).length && Array.isArray(q.$in) && 1 === q.$in.length && "string" == typeof q.$in[0] && null != F[q.$in[0]] && (j = F[q.$in[0]].path(L));
                                }
                            }
                            if (j) {
                                if (null == P) continue;
                                if (v.isPOJO(P)) {
                                    if (Object.keys(P).some(d)) for(var V = Object.keys(P), z = void 0, K = V.length; K--;)if ($ = P[z = V[K]], "$elemMatch" === z) $ && null != j && null != j.schema ? t(j.schema, $, i, S) : $ && null != j && j.$isMongooseArray && (v.isPOJO($) && null != $.$not ? t(e, $, i, S) : P[z] = j.castForQuery(z, $, S));
                                    else if ("$not" === z) {
                                        if ($ && j) {
                                            if ((O = Object.keys($)).length && d(O[0])) for(var H in $)$[H] = j.castForQuery(H, $[H], S);
                                            else P[z] = j.castForQuery(z, $, S);
                                            continue;
                                        }
                                    } else P[z] = j.castForQuery(z, $, S);
                                    else r[E] = j.castForQuery(null, P, S);
                                } else if (Array.isArray(P) && -1 === [
                                    "Buffer",
                                    "Array"
                                ].indexOf(j.instance) && !i.sanitizeFilter) {
                                    var W, J = [], G = n(P);
                                    try {
                                        for(G.s(); !(W = G.n()).done;){
                                            var Y = W.value;
                                            J.push(j.castForQuery(null, Y, S));
                                        }
                                    } catch (t) {
                                        G.e(t);
                                    } finally{
                                        G.f();
                                    }
                                    r[E] = {
                                        $in: J
                                    };
                                } else r[E] = j.castForQuery(null, P, S);
                            } else {
                                for(var Q = E.split("."), X = Q.length, Z = void 0, tt = void 0, et = void 0; X-- && (Z = Q.slice(0, X).join("."), !(j = e.path(Z))););
                                if (j) {
                                    if (j.caster && j.caster.schema) {
                                        (et = {})[tt = Q.slice(X).join(".")] = P;
                                        var rt = t(j.caster.schema, et, i, S)[tt];
                                        void 0 === rt ? delete r[E] : r[E] = rt;
                                    } else r[E] = P;
                                    continue;
                                }
                                if (b(P)) {
                                    var nt = "";
                                    if (P.$near ? nt = "$near" : P.$nearSphere ? nt = "$nearSphere" : P.$within ? nt = "$within" : P.$geoIntersects ? nt = "$geoIntersects" : P.$geoWithin && (nt = "$geoWithin"), nt) {
                                        var it = new u.Number("__QueryCasting__"), ot = P[nt];
                                        if (null != P.$maxDistance && (P.$maxDistance = it.castForQuery(null, P.$maxDistance, S)), null != P.$minDistance && (P.$minDistance = it.castForQuery(null, P.$minDistance, S)), "$within" === nt) {
                                            var at = ot.$center || ot.$centerSphere || ot.$box || ot.$polygon;
                                            if (!at) throw new Error("Bad $within parameter: " + JSON.stringify(P));
                                            ot = at;
                                        } else if ("$near" === nt && "string" == typeof ot.type && Array.isArray(ot.coordinates)) ot = ot.coordinates;
                                        else if (("$near" === nt || "$nearSphere" === nt || "$geoIntersects" === nt) && ot.$geometry && "string" == typeof ot.$geometry.type && Array.isArray(ot.$geometry.coordinates)) null != ot.$maxDistance && (ot.$maxDistance = it.castForQuery(null, ot.$maxDistance, S)), null != ot.$minDistance && (ot.$minDistance = it.castForQuery(null, ot.$minDistance, S)), m(ot.$geometry) && (ot.$geometry = ot.$geometry.toObject({
                                            transform: !1,
                                            virtuals: !1
                                        })), ot = ot.$geometry.coordinates;
                                        else if ("$geoWithin" === nt) {
                                            if (ot.$geometry) {
                                                m(ot.$geometry) && (ot.$geometry = ot.$geometry.toObject({
                                                    virtuals: !1
                                                }));
                                                var st = ot.$geometry.type;
                                                if (-1 === g.indexOf(st)) throw new Error('Invalid geoJSON type for $geoWithin "' + st + '", must be "Polygon" or "MultiPolygon"');
                                                ot = ot.$geometry.coordinates;
                                            } else ot = ot.$box || ot.$polygon || ot.$center || ot.$centerSphere, m(ot) && (ot = ot.toObject({
                                                virtuals: !1
                                            }));
                                        }
                                        _(ot, it, S);
                                        continue;
                                    }
                                }
                                if (e.nested[E]) continue;
                                var ut = "strict" in i ? i.strict : e.options.strict, ct = w(i, e._userProvidedOptions, e.options, S);
                                if (i.upsert && ut) {
                                    if ("throw" === ut) throw new s(E);
                                    throw new s(E, 'Path "' + E + '" is not in schema, strict mode is `true`, and upsert is `true`.');
                                }
                                if ("throw" === ct) throw new s(E, 'Path "' + E + "\" is not in schema and strictQuery is 'throw'.");
                                ct && delete r[E];
                            }
                        } else P = f(P, E), r[E] = P;
                    }
                    return r;
                };
            },
            4058: (t, e, r)=>{
                "use strict";
                var n = r(2402), i = r(3633).Long;
                t.exports = function(t) {
                    return null == t ? t : "" === t ? null : "bigint" == typeof t ? t : t instanceof i ? t.toBigInt() : "string" == typeof t || "number" == typeof t ? BigInt(t) : void n.ok(!1);
                };
            },
            8953: (t, e, r)=>{
                "use strict";
                var n = r(3609);
                t.exports = function(e, r) {
                    if (t.exports.convertToTrue.has(e)) return !0;
                    if (t.exports.convertToFalse.has(e)) return !1;
                    if (null == e) return e;
                    throw new n("boolean", e, r);
                }, t.exports.convertToTrue = new Set([
                    !0,
                    "true",
                    1,
                    "1",
                    "yes"
                ]), t.exports.convertToFalse = new Set([
                    !1,
                    "false",
                    0,
                    "0",
                    "no"
                ]);
            },
            2477: (t, e, r)=>{
                "use strict";
                var n = r(2402);
                t.exports = function(t) {
                    var e;
                    return null == t || "" === t ? null : t instanceof Date ? (n.ok(!isNaN(t.valueOf())), t) : (n.ok("boolean" != typeof t), e = t instanceof Number || "number" == typeof t ? new Date(t) : "string" == typeof t && !isNaN(Number(t)) && (Number(t) >= 275761 || Number(t) < -271820) ? new Date(Number(t)) : "function" == typeof t.valueOf ? new Date(t.valueOf()) : new Date(t), isNaN(e.valueOf()) ? void n.ok(!1) : e);
                };
            },
            9553: (t, e, r)=>{
                "use strict";
                var n = r(5832).Buffer;
                function i(t) {
                    return i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, i(t);
                }
                var o = r(9639), a = r(2402);
                t.exports = function(t) {
                    return null == t ? t : "object" === i(t) && "string" == typeof t.$numberDecimal ? o.fromString(t.$numberDecimal) : t instanceof o ? t : "string" == typeof t ? o.fromString(t) : "function" == typeof n && n.isBuffer(t) || "function" == typeof Uint8Array && t instanceof Uint8Array ? new o(t) : "number" == typeof t ? o.fromString(String(t)) : "function" == typeof t.valueOf && "string" == typeof t.valueOf() ? o.fromString(t.valueOf()) : void a.ok(!1);
                };
            },
            3704: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                var i = r(2402), o = r(3633), a = r(3305);
                t.exports = function(t) {
                    if (null == t || "" === t) return null;
                    var e;
                    if (a(t, "Long")) e = t.toNumber();
                    else if ("string" == typeof t) try {
                        return o.Double.fromString(t);
                    } catch (t) {
                        i.ok(!1);
                    }
                    else if ("object" === n(t)) {
                        var r, s = null !== (r = t.valueOf()) && void 0 !== r ? r : t.toString();
                        if ("string" == typeof s) try {
                            return o.Double.fromString(t);
                        } catch (t) {
                            i.ok(!1);
                        }
                        else e = Number(s);
                    } else e = Number(t);
                    return new o.Double(e);
                };
            },
            5413: (t, e, r)=>{
                "use strict";
                var n = r(3305), i = r(2402);
                t.exports = function(t) {
                    if (null == t) return t;
                    if ("" === t) return null;
                    var e = n(t, "Long") ? t.toNumber() : Number(t);
                    if (e === (0 | e) && e >= -2147483648 && e <= 2147483647) return e;
                    i.ok(!1);
                };
            },
            7768: (t, e, r)=>{
                "use strict";
                var n = r(2402);
                t.exports = function(t) {
                    return null == t ? t : "" === t ? null : ("string" != typeof t && "boolean" != typeof t || (t = Number(t)), n.ok(!isNaN(t)), t instanceof Number ? t.valueOf() : "number" == typeof t ? t : Array.isArray(t) || "function" != typeof t.valueOf ? t.toString && !Array.isArray(t) && t.toString() == Number(t) ? Number(t) : void n.ok(!1) : Number(t.valueOf()));
                };
            },
            863: (t, e, r)=>{
                "use strict";
                var n = r(3305), i = r(5549);
                t.exports = function(t) {
                    if (null == t) return t;
                    if (n(t, "ObjectId")) return t;
                    if (t._id) {
                        if (n(t._id, "ObjectId")) return t._id;
                        if (t._id.toString instanceof Function) return new i(t._id.toString());
                    }
                    return t.toString instanceof Function ? new i(t.toString()) : new i(t);
                };
            },
            1244: (t, e, r)=>{
                "use strict";
                var n = r(3609);
                t.exports = function(t, e) {
                    if (null == t) return t;
                    if (t._id && "string" == typeof t._id) return t._id;
                    if (t.toString && t.toString !== Object.prototype.toString && !Array.isArray(t)) return t.toString();
                    throw new n("string", t, e);
                };
            },
            8250: (t, e, r)=>{
                "use strict";
                var n = r(5832).Buffer, i = r(6365), o = /[0-9a-f]{8}-[0-9a-f]{4}-[0-9][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}/i, a = i.Binary;
                function s(t) {
                    "string" != typeof t && (t = "");
                    var e, r = null != (e = t.replace(/[{}-]/g, "")) && n.from(e, "hex"), o = new i(r);
                    return o._subtype = 4, o;
                }
                t.exports = function(t) {
                    if (null == t) return t;
                    function e(t) {
                        var e = new i(t);
                        return e._subtype = 4, e;
                    }
                    if ("string" == typeof t) {
                        if (o.test(t)) return s(t);
                        throw new Error('"'.concat(t, '" is not a valid UUID string'));
                    }
                    if (n.isBuffer(t)) return e(t);
                    if (t instanceof a) return e(t.value(!0));
                    if (t.toString && t.toString !== Object.prototype.toString && o.test(t.toString())) return s(t.toString());
                    throw new Error('"'.concat(t, '" cannot be casted to a UUID'));
                }, t.exports.UUID_FORMAT = o;
            },
            1260: (t, e)=>{
                "use strict";
                var r = Object.freeze([
                    "countDocuments",
                    "distinct",
                    "estimatedDocumentCount",
                    "find",
                    "findOne",
                    "findOneAndReplace",
                    "findOneAndUpdate",
                    "replaceOne",
                    "updateMany",
                    "updateOne",
                    "deleteMany",
                    "deleteOne",
                    "findOneAndDelete"
                ]).concat([
                    "validate"
                ]);
                e.Ut = r;
            },
            2400: (t, e, r)=>{
                "use strict";
                var n = r(5832).Buffer;
                function i(t) {
                    return function(t) {
                        if (Array.isArray(t)) return p(t);
                    }(t) || function(t) {
                        if ("undefined" != typeof Symbol && null != t[Symbol.iterator] || null != t["@@iterator"]) return Array.from(t);
                    }(t) || h(t) || function() {
                        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    }();
                }
                function o() {
                    o = function() {
                        return e;
                    };
                    var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, i = Object.defineProperty || function(t, e, r) {
                        t[e] = r.value;
                    }, a = "function" == typeof Symbol ? Symbol : {}, s = a.iterator || "@@iterator", u = a.asyncIterator || "@@asyncIterator", c = a.toStringTag || "@@toStringTag";
                    function f(t, e, r) {
                        return Object.defineProperty(t, e, {
                            value: r,
                            enumerable: !0,
                            configurable: !0,
                            writable: !0
                        }), t[e];
                    }
                    try {
                        f({}, "");
                    } catch (t) {
                        f = function(t, e, r) {
                            return t[e] = r;
                        };
                    }
                    function l(t, e, r, n) {
                        var o = e && e.prototype instanceof g ? e : g, a = Object.create(o.prototype), s = new T(n || []);
                        return i(a, "_invoke", {
                            value: P(t, r, s)
                        }), a;
                    }
                    function h(t, e, r) {
                        try {
                            return {
                                type: "normal",
                                arg: t.call(e, r)
                            };
                        } catch (t) {
                            return {
                                type: "throw",
                                arg: t
                            };
                        }
                    }
                    e.wrap = l;
                    var p = "suspendedStart", y = "suspendedYield", b = "executing", m = "completed", v = {};
                    function g() {}
                    function _() {}
                    function w() {}
                    var S = {};
                    f(S, s, function() {
                        return this;
                    });
                    var O = Object.getPrototypeOf, j = O && O(O(B([])));
                    j && j !== r && n.call(j, s) && (S = j);
                    var $ = w.prototype = g.prototype = Object.create(S);
                    function E(t) {
                        [
                            "next",
                            "throw",
                            "return"
                        ].forEach(function(e) {
                            f(t, e, function(t) {
                                return this._invoke(e, t);
                            });
                        });
                    }
                    function A(t, e) {
                        function r(i, o, a, s) {
                            var u = h(t[i], t, o);
                            if ("throw" !== u.type) {
                                var c = u.arg, f = c.value;
                                return f && "object" == d(f) && n.call(f, "__await") ? e.resolve(f.__await).then(function(t) {
                                    r("next", t, a, s);
                                }, function(t) {
                                    r("throw", t, a, s);
                                }) : e.resolve(f).then(function(t) {
                                    c.value = t, a(c);
                                }, function(t) {
                                    return r("throw", t, a, s);
                                });
                            }
                            s(u.arg);
                        }
                        var o;
                        i(this, "_invoke", {
                            value: function(t, n) {
                                function i() {
                                    return new e(function(e, i) {
                                        r(t, n, e, i);
                                    });
                                }
                                return o = o ? o.then(i, i) : i();
                            }
                        });
                    }
                    function P(e, r, n) {
                        var i = p;
                        return function(o, a) {
                            if (i === b) throw Error("Generator is already running");
                            if (i === m) {
                                if ("throw" === o) throw a;
                                return {
                                    value: t,
                                    done: !0
                                };
                            }
                            for(n.method = o, n.arg = a;;){
                                var s = n.delegate;
                                if (s) {
                                    var u = x(s, n);
                                    if (u) {
                                        if (u === v) continue;
                                        return u;
                                    }
                                }
                                if ("next" === n.method) n.sent = n._sent = n.arg;
                                else if ("throw" === n.method) {
                                    if (i === p) throw i = m, n.arg;
                                    n.dispatchException(n.arg);
                                } else "return" === n.method && n.abrupt("return", n.arg);
                                i = b;
                                var c = h(e, r, n);
                                if ("normal" === c.type) {
                                    if (i = n.done ? m : y, c.arg === v) continue;
                                    return {
                                        value: c.arg,
                                        done: n.done
                                    };
                                }
                                "throw" === c.type && (i = m, n.method = "throw", n.arg = c.arg);
                            }
                        };
                    }
                    function x(e, r) {
                        var n = r.method, i = e.iterator[n];
                        if (i === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, x(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), v;
                        var o = h(i, e.iterator, r.arg);
                        if ("throw" === o.type) return r.method = "throw", r.arg = o.arg, r.delegate = null, v;
                        var a = o.arg;
                        return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, v) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, v);
                    }
                    function k(t) {
                        var e = {
                            tryLoc: t[0]
                        };
                        1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
                    }
                    function M(t) {
                        var e = t.completion || {};
                        e.type = "normal", delete e.arg, t.completion = e;
                    }
                    function T(t) {
                        this.tryEntries = [
                            {
                                tryLoc: "root"
                            }
                        ], t.forEach(k, this), this.reset(!0);
                    }
                    function B(e) {
                        if (e || "" === e) {
                            var r = e[s];
                            if (r) return r.call(e);
                            if ("function" == typeof e.next) return e;
                            if (!isNaN(e.length)) {
                                var i = -1, o = function r() {
                                    for(; ++i < e.length;)if (n.call(e, i)) return r.value = e[i], r.done = !1, r;
                                    return r.value = t, r.done = !0, r;
                                };
                                return o.next = o;
                            }
                        }
                        throw new TypeError(d(e) + " is not iterable");
                    }
                    return _.prototype = w, i($, "constructor", {
                        value: w,
                        configurable: !0
                    }), i(w, "constructor", {
                        value: _,
                        configurable: !0
                    }), _.displayName = f(w, c, "GeneratorFunction"), e.isGeneratorFunction = function(t) {
                        var e = "function" == typeof t && t.constructor;
                        return !!e && (e === _ || "GeneratorFunction" === (e.displayName || e.name));
                    }, e.mark = function(t) {
                        return Object.setPrototypeOf ? Object.setPrototypeOf(t, w) : (t.__proto__ = w, f(t, c, "GeneratorFunction")), t.prototype = Object.create($), t;
                    }, e.awrap = function(t) {
                        return {
                            __await: t
                        };
                    }, E(A.prototype), f(A.prototype, u, function() {
                        return this;
                    }), e.AsyncIterator = A, e.async = function(t, r, n, i, o) {
                        void 0 === o && (o = Promise);
                        var a = new A(l(t, r, n, i), o);
                        return e.isGeneratorFunction(r) ? a : a.next().then(function(t) {
                            return t.done ? t.value : a.next();
                        });
                    }, E($), f($, c, "Generator"), f($, s, function() {
                        return this;
                    }), f($, "toString", function() {
                        return "[object Generator]";
                    }), e.keys = function(t) {
                        var e = Object(t), r = [];
                        for(var n in e)r.push(n);
                        return r.reverse(), function t() {
                            for(; r.length;){
                                var n = r.pop();
                                if (n in e) return t.value = n, t.done = !1, t;
                            }
                            return t.done = !0, t;
                        };
                    }, e.values = B, T.prototype = {
                        constructor: T,
                        reset: function(e) {
                            if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(M), !e) for(var r in this)"t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
                        },
                        stop: function() {
                            this.done = !0;
                            var t = this.tryEntries[0].completion;
                            if ("throw" === t.type) throw t.arg;
                            return this.rval;
                        },
                        dispatchException: function(e) {
                            if (this.done) throw e;
                            var r = this;
                            function i(n, i) {
                                return s.type = "throw", s.arg = e, r.next = n, i && (r.method = "next", r.arg = t), !!i;
                            }
                            for(var o = this.tryEntries.length - 1; o >= 0; --o){
                                var a = this.tryEntries[o], s = a.completion;
                                if ("root" === a.tryLoc) return i("end");
                                if (a.tryLoc <= this.prev) {
                                    var u = n.call(a, "catchLoc"), c = n.call(a, "finallyLoc");
                                    if (u && c) {
                                        if (this.prev < a.catchLoc) return i(a.catchLoc, !0);
                                        if (this.prev < a.finallyLoc) return i(a.finallyLoc);
                                    } else if (u) {
                                        if (this.prev < a.catchLoc) return i(a.catchLoc, !0);
                                    } else {
                                        if (!c) throw Error("try statement without catch or finally");
                                        if (this.prev < a.finallyLoc) return i(a.finallyLoc);
                                    }
                                }
                            }
                        },
                        abrupt: function(t, e) {
                            for(var r = this.tryEntries.length - 1; r >= 0; --r){
                                var i = this.tryEntries[r];
                                if (i.tryLoc <= this.prev && n.call(i, "finallyLoc") && this.prev < i.finallyLoc) {
                                    var o = i;
                                    break;
                                }
                            }
                            o && ("break" === t || "continue" === t) && o.tryLoc <= e && e <= o.finallyLoc && (o = null);
                            var a = o ? o.completion : {};
                            return a.type = t, a.arg = e, o ? (this.method = "next", this.next = o.finallyLoc, v) : this.complete(a);
                        },
                        complete: function(t, e) {
                            if ("throw" === t.type) throw t.arg;
                            return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), v;
                        },
                        finish: function(t) {
                            for(var e = this.tryEntries.length - 1; e >= 0; --e){
                                var r = this.tryEntries[e];
                                if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), M(r), v;
                            }
                        },
                        catch: function(t) {
                            for(var e = this.tryEntries.length - 1; e >= 0; --e){
                                var r = this.tryEntries[e];
                                if (r.tryLoc === t) {
                                    var n = r.completion;
                                    if ("throw" === n.type) {
                                        var i = n.arg;
                                        M(r);
                                    }
                                    return i;
                                }
                            }
                            throw Error("illegal catch attempt");
                        },
                        delegateYield: function(e, r, n) {
                            return this.delegate = {
                                iterator: B(e),
                                resultName: r,
                                nextLoc: n
                            }, "next" === this.method && (this.arg = t), v;
                        }
                    }, e;
                }
                function a(t, e, r, n, i, o, a) {
                    try {
                        var s = t[o](a), u = s.value;
                    } catch (t) {
                        return void r(t);
                    }
                    s.done ? e(u) : Promise.resolve(u).then(n, i);
                }
                function s(t) {
                    return function() {
                        var e = this, r = arguments;
                        return new Promise(function(n, i) {
                            var o = t.apply(e, r);
                            function s(t) {
                                a(o, n, i, s, u, "next", t);
                            }
                            function u(t) {
                                a(o, n, i, s, u, "throw", t);
                            }
                            s(void 0);
                        });
                    };
                }
                function u(t, e) {
                    var r = Object.keys(t);
                    if (Object.getOwnPropertySymbols) {
                        var n = Object.getOwnPropertySymbols(t);
                        e && (n = n.filter(function(e) {
                            return Object.getOwnPropertyDescriptor(t, e).enumerable;
                        })), r.push.apply(r, n);
                    }
                    return r;
                }
                function c(t) {
                    for(var e = 1; e < arguments.length; e++){
                        var r = null != arguments[e] ? arguments[e] : {};
                        e % 2 ? u(Object(r), !0).forEach(function(e) {
                            f(t, e, r[e]);
                        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : u(Object(r)).forEach(function(e) {
                            Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));
                        });
                    }
                    return t;
                }
                function f(t, e, r) {
                    return (e = function(t) {
                        var e = function(t) {
                            if ("object" != d(t) || !t) return t;
                            var e = t[Symbol.toPrimitive];
                            if (void 0 !== e) {
                                var r = e.call(t, "string");
                                if ("object" != d(r)) return r;
                                throw new TypeError("@@toPrimitive must return a primitive value.");
                            }
                            return String(t);
                        }(t);
                        return "symbol" == d(e) ? e : e + "";
                    }(e)) in t ? Object.defineProperty(t, e, {
                        value: r,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0
                    }) : t[e] = r, t;
                }
                function l(t, e) {
                    var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                    if (!r) {
                        if (Array.isArray(t) || (r = h(t)) || e && t && "number" == typeof t.length) {
                            r && (t = r);
                            var n = 0, i = function() {};
                            return {
                                s: i,
                                n: function() {
                                    return n >= t.length ? {
                                        done: !0
                                    } : {
                                        done: !1,
                                        value: t[n++]
                                    };
                                },
                                e: function(t) {
                                    throw t;
                                },
                                f: i
                            };
                        }
                        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    }
                    var o, a = !0, s = !1;
                    return {
                        s: function() {
                            r = r.call(t);
                        },
                        n: function() {
                            var t = r.next();
                            return a = t.done, t;
                        },
                        e: function(t) {
                            s = !0, o = t;
                        },
                        f: function() {
                            try {
                                a || null == r.return || r.return();
                            } finally{
                                if (s) throw o;
                            }
                        }
                    };
                }
                function h(t, e) {
                    if (t) {
                        if ("string" == typeof t) return p(t, e);
                        var r = ({}).toString.call(t).slice(8, -1);
                        return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? p(t, e) : void 0;
                    }
                }
                function p(t, e) {
                    (null == e || e > t.length) && (e = t.length);
                    for(var r = 0, n = Array(e); r < e; r++)n[r] = t[r];
                    return n;
                }
                function d(t) {
                    return d = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, d(t);
                }
                var y, b, m, v = r(1417), g = r(3550).EventEmitter, _ = r(4224), w = r(6365), S = r(3672), O = r(5022), j = r(6140), $ = r(3441), E = r(1350), A = r(1635), P = r(7058), x = r(8995), k = r(6949), M = r(9538), T = r(6814), B = r(5335), I = r(4473), R = r(4450), N = r(2068).w, D = r(2068).X, L = r(1226), C = r(7430).B, U = r(5152), q = r(791), F = r(2692), V = r(3216), z = r(2746), K = r(3305), H = r(7300), W = r(1793), J = r(5188), G = r(7352).inspect, Y = r(3303)._, Q = r(1849), X = r(6451), Z = r(5678), tt = r(6223), et = r(3892), rt = r(8768), nt = r(542), it = rt.deepEqual, ot = rt.isMongooseObject, at = r(7930).arrayAtomicsBackupSymbol, st = r(7930).arrayAtomicsSymbol, ut = r(7930).documentArrayParent, ct = r(7930).documentIsModified, ft = r(7930).documentModifiedPaths, lt = r(7930).documentSchemaSymbol, ht = r(7930).getSymbol, pt = r(7930).modelSymbol, dt = r(7930).populateModelSymbol, yt = r(7930).scopeSymbol, bt = r(7160).schemaMixedSymbol, mt = r(5346), vt = r(7930).sessionNewDocuments, gt = rt.specialProperties;
                function _t(t, e, r, n) {
                    if ("object" === d(r) && null != r && (r = (n = r).skipId), n = Object.assign({}, n), null == this.$__schema) {
                        var i = rt.isObject(e) && !e.instanceOfSchema ? new P(e) : e;
                        this.$__setSchema(i), e = r, r = n, n = arguments[4] || {};
                    }
                    if (this.$__ = new _, null != n.isNew && !0 !== n.isNew && (this.$isNew = n.isNew), null != n.priorDoc && (this.$__.priorDoc = n.priorDoc), r && (this.$__.skipId = r), null != t && "object" !== d(t)) throw new E(t, "obj", "Document");
                    var o = !0;
                    void 0 !== n.defaults && (this.$__.defaults = n.defaults, o = n.defaults);
                    var a = this.$__schema;
                    "boolean" == typeof e || "throw" === e ? (!0 !== e && (this.$__.strictMode = e), e = void 0) : !0 !== a.options.strict && (this.$__.strictMode = a.options.strict);
                    var s, u = l(a.requiredPaths(!0));
                    try {
                        for(u.s(); !(s = u.n()).done;){
                            var c = s.value;
                            this.$__.activePaths.require(c);
                        }
                    } catch (t) {
                        u.e(t);
                    } finally{
                        u.f();
                    }
                    var f = null;
                    rt.isPOJO(e) && Object.keys(e).length > 0 && (f = W(e), this.$__.selected = e, this.$__.exclude = f);
                    var h = !1 === f && e ? T(e) : null;
                    if (null == this._doc && (this.$__buildDoc(t, e, r, f, h, !1), o && B(this, e, f, h, !0, null, {
                        skipParentChangeTracking: !0
                    })), t && (this.$__original_set ? this.$__original_set(t, void 0, !0, n) : this.$set(t, void 0, !0, n), t instanceof _t && (this.$isNew = t.$isNew)), n.willInit && o ? n.skipDefaults && (this.$__.skipDefaults = n.skipDefaults) : o && B(this, e, f, h, !1, n.skipDefaults), !this.$__.strictMode && t) {
                        var p = this;
                        Object.keys(this._doc).forEach(function(t) {
                            t in a.tree || t in a.methods || t in a.virtuals || t.startsWith("$") || D({
                                prop: t,
                                subprops: null,
                                prototype: p
                            });
                        });
                    }
                    !function(t) {
                        var e = t.$__schema && t.$__schema.callQueue;
                        if (e.length) {
                            var r, n = l(e);
                            try {
                                for(n.s(); !(r = n.n()).done;){
                                    var i = r.value;
                                    "pre" !== i[0] && "post" !== i[0] && "on" !== i[0] && t[i[0]].apply(t, i[1]);
                                }
                            } catch (t) {
                                n.e(t);
                            } finally{
                                n.f();
                            }
                        }
                    }(this);
                }
                for(var wt in _t.prototype.$isMongooseDocumentPrototype = !0, Object.defineProperty(_t.prototype, "isNew", {
                    get: function() {
                        return this.$isNew;
                    },
                    set: function(t) {
                        this.$isNew = t;
                    }
                }), Object.defineProperty(_t.prototype, "errors", {
                    get: function() {
                        return this.$errors;
                    },
                    set: function(t) {
                        this.$errors = t;
                    }
                }), _t.prototype.$isNew = !0, rt.each([
                    "on",
                    "once",
                    "emit",
                    "listeners",
                    "removeListener",
                    "setMaxListeners",
                    "removeAllListeners",
                    "addListener"
                ], function(t) {
                    _t.prototype[t] = function() {
                        if (!this.$__.emitter) {
                            if ("emit" === t) return;
                            this.$__.emitter = new g, this.$__.emitter.setMaxListeners(0);
                        }
                        return this.$__.emitter[t].apply(this.$__.emitter, arguments);
                    }, _t.prototype["$".concat(t)] = _t.prototype[t];
                }), _t.prototype.constructor = _t, g.prototype)_t[wt] = g.prototype[wt];
                function St(t, e, r) {
                    if (null != t) for(var n = Object.keys(r.$__schema.paths), i = n.length, o = -1 === e.indexOf(".") ? [
                        e
                    ] : e.split("."), a = 0; a < i; ++a){
                        var s = "", u = n[a];
                        if (u.startsWith(e + ".")) {
                            var c = r.$__schema.paths[u], f = c.splitPath().slice(o.length), l = f.length;
                            if (void 0 !== c.defaultValue) for(var h = t, p = 0; p < l && null != h; ++p){
                                var d = f[p];
                                if (p === l - 1) {
                                    if (void 0 !== h[d]) break;
                                    try {
                                        var y = c.getDefault(r, !1);
                                        void 0 !== y && (h[d] = y);
                                    } catch (t) {
                                        r.invalidate(e + "." + s, t);
                                        break;
                                    }
                                    break;
                                }
                                s += (s.length ? "." : "") + d, h[d] = h[d] || {}, h = h[d];
                            }
                        }
                    }
                }
                function Ot(t, e, r, n, i) {
                    i = i || "", null != e.$__ && (e = e._doc);
                    for(var o, a, s, u = Object.keys(e), c = u.length, f = t.$__.strictMode, l = t.$__schema, h = 0; h < c; ++h){
                        if ("__proto__" === (s = u[h]) || "constructor" === s) return;
                        if (a = i ? i + s : s, o = l.path(a), l.$isRootDiscriminator && !t.$__isSelected(a)) return;
                        var p = e[s];
                        if (!o && rt.isPOJO(p)) r[s] || (r[s] = {}, f || s in l.tree || s in l.methods || s in l.virtuals || (t[s] = r[s])), Ot(t, p, r[s], n, a + ".");
                        else if (o) {
                            if (r.hasOwnProperty(s) && void 0 !== p && !n.hydratedPopulatedDocs && delete r[s], null === p) r[s] = o._castNullish(null);
                            else if (void 0 !== p) {
                                var d = null == p.$__ ? null : p.$__.wasPopulated;
                                if (!o || d || n.hydratedPopulatedDocs) {
                                    if (o && n.hydratedPopulatedDocs) {
                                        var y;
                                        r[s] = o.cast(p, t, !0, void 0, {
                                            hydratedPopulatedDocs: !0
                                        }), r[s] && r[s].$__ && r[s].$__.wasPopulated ? t.$populated(a, r[s].$__.wasPopulated.value, r[s].$__.wasPopulated.options) : Array.isArray(r[s]) && r[s].length && null !== (y = r[s][0]) && void 0 !== y && null !== (y = y.$__) && void 0 !== y && y.wasPopulated && t.$populated(a, r[s].map(function(t) {
                                            var e;
                                            return null == t || null === (e = t.$__) || void 0 === e || null === (e = e.wasPopulated) || void 0 === e ? void 0 : e.value;
                                        }).filter(function(t) {
                                            return null != t;
                                        }), r[s][0].$__.wasPopulated.options);
                                    } else r[s] = p;
                                } else try {
                                    n && n.setters ? r[s] = o.applySetters(p, t, !1) : r[s] = o.cast(p, t, !0);
                                } catch (e) {
                                    t.invalidate(e.path, new M({
                                        path: e.path,
                                        message: e.message,
                                        type: "cast",
                                        value: e.value,
                                        reason: e
                                    }));
                                }
                            }
                            t.$isModified(a) || t.$__.activePaths.init(a);
                        } else r[s] = p, f || i || (t[s] = p);
                    }
                }
                function jt(t) {
                    if (null == t) return !0;
                    if ("object" !== d(t) || Array.isArray(t)) return !1;
                    for(var e = 0, r = Object.keys(t); e < r.length; e++)if (!jt(t[r[e]])) return !1;
                    return !0;
                }
                function $t(t, e, r, n) {
                    var i = {};
                    !function(t) {
                        var e = Object.keys(t.$__.activePaths.getStatePaths("require")), r = 0, n = e.length;
                        for(r = 0; r < n; ++r){
                            var i = e[r], o = t.$__schema.path(i);
                            if (null != o && "function" == typeof o.originalRequiredValue) {
                                t.$__.cachedRequired = t.$__.cachedRequired || {};
                                try {
                                    t.$__.cachedRequired[i] = o.originalRequiredValue.call(t, t);
                                } catch (e) {
                                    t.invalidate(i, e);
                                }
                            }
                        }
                    }(t);
                    var o = new Set(Object.keys(t.$__.activePaths.getStatePaths("require")).filter(function(e) {
                        return !(!t.$__isSelected(e) && !t.$isModified(e)) && (null == t.$__.cachedRequired || !(e in t.$__.cachedRequired) || t.$__.cachedRequired[e]);
                    }));
                    function a(t) {
                        o.add(t);
                    }
                    if (Object.keys(t.$__.activePaths.getStatePaths("init")).forEach(a), Object.keys(t.$__.activePaths.getStatePaths("modify")).forEach(a), Object.keys(t.$__.activePaths.getStatePaths("default")).forEach(a), !n) {
                        var s, u = t.$getAllSubdocs({
                            useCache: !0
                        }), c = t.modifiedPaths(), f = l(u);
                        try {
                            for(f.s(); !(s = f.n()).done;){
                                var h = s.value;
                                if (h.$basePath) {
                                    var p, d = h.$isSingleNested ? h.$__pathRelativeToParent() : h.$__fullPathWithIndexes(), y = l(h.modifiedPaths());
                                    try {
                                        for(y.s(); !(p = y.n()).done;){
                                            var b = p.value;
                                            o.delete(d + "." + b);
                                        }
                                    } catch (t) {
                                        y.e(t);
                                    } finally{
                                        y.f();
                                    }
                                    !t.$isModified(d, null, c) || t.$__.activePaths.getStatePaths("modify").hasOwnProperty(d) || t.$isDefault(d) || (o.add(d), null == t.$__.pathsToScopes && (t.$__.pathsToScopes = {}), t.$__.pathsToScopes[d] = h.$isDocumentArrayElement ? h.__parentArray : h.$parent(), i[d] = {
                                        skipSchemaValidators: !0
                                    }, h.$isDocumentArrayElement && null != h.__index && (i[d].index = h.__index));
                                }
                            }
                        } catch (t) {
                            f.e(t);
                        } finally{
                            f.f();
                        }
                    }
                    var m, v = l(o);
                    try {
                        for(v.s(); !(m = v.n()).done;){
                            var g = m.value, _ = t.$__schema.path(g);
                            if (_) {
                                if (_.$isMongooseDocumentArray) {
                                    var w, S = l(o);
                                    try {
                                        for(S.s(); !(w = S.n()).done;){
                                            var O = w.value;
                                            (null == O || O.startsWith(_.path + ".")) && o.delete(O);
                                        }
                                    } catch (t) {
                                        S.e(t);
                                    } finally{
                                        S.f();
                                    }
                                }
                                (_.caster || 0 !== _.validators.length || _.$parentSchemaDocArray) && (!_.$isMongooseArray || _.$isMongooseDocumentArray || _.$embeddedSchemaType.$isMongooseArray || 0 !== _.validators.length || 0 !== _.$embeddedSchemaType.validators.length) || o.delete(g);
                            }
                        }
                    } catch (t) {
                        v.e(t);
                    } finally{
                        v.f();
                    }
                    Array.isArray(e) ? o = function(t, e) {
                        var r, n = new Set(e), i = new Map([]), o = l(e);
                        try {
                            for(o.s(); !(r = o.n()).done;){
                                var a = r.value;
                                if (-1 !== a.indexOf(".")) for(var s = a.split("."), u = s[0], c = 1; c < s.length; ++c)i.set(u, a), u = u + "." + s[c];
                            }
                        } catch (t) {
                            o.e(t);
                        } finally{
                            o.f();
                        }
                        var f, h = new Set, p = l(t);
                        try {
                            for(p.s(); !(f = p.n()).done;){
                                var d = f.value;
                                n.has(d) ? h.add(d) : i.has(d) && h.add(i.get(d));
                            }
                        } catch (t) {
                            p.e(t);
                        } finally{
                            p.f();
                        }
                        return h;
                    }(o, e) : Array.isArray(r) && (o = function(t, e) {
                        return e = new Set(e), t = Array.from(t).filter(function(t) {
                            return !e.has(t);
                        }), new Set(t);
                    }(o, r)), function(t, e) {
                        var r, n = l(e);
                        try {
                            for(n.s(); !(r = n.n()).done;){
                                var i = r.value, o = t.$__schema.path(i);
                                o && o.$isMongooseArray && (Array.isArray(o) || !o.$isMongooseDocumentArray || o && o.schemaOptions && o.schemaOptions.required) && (!o.$isMongooseArray || o.$isMongooseDocumentArray || o.$embeddedSchemaType.$isMongooseArray || 0 !== o.$embeddedSchemaType.validators.length) && Et(t.$__getValue(i), e, i);
                            }
                        } catch (t) {
                            n.e(t);
                        } finally{
                            n.f();
                        }
                    }(t, o);
                    var j, $ = {
                        skipArrays: !0
                    }, E = l(o);
                    try {
                        for(E.s(); !(j = E.n()).done;){
                            var A = j.value;
                            if (t.$__schema.nested[A]) {
                                var P = t.$__getValue(A);
                                ot(P) && (P = P.toObject({
                                    transform: !1
                                }));
                                var x = C(P, A, $, t.$__schema);
                                Object.keys(x).filter(function(e) {
                                    return !t.$__schema.singleNestedPaths.hasOwnProperty(e);
                                }).forEach(a);
                            }
                        }
                    } catch (t) {
                        E.e(t);
                    } finally{
                        E.f();
                    }
                    var k, M = l(o);
                    try {
                        for(M.s(); !(k = M.n()).done;){
                            var T = k.value, B = t.$__schema.path(T);
                            if (B && (B.$parentSchemaDocArray && "string" == typeof B.$parentSchemaDocArray.path && o.add(B.$parentSchemaDocArray.path), B.$isSchemaMap)) {
                                var I = t.$__getValue(T);
                                if (null != I) {
                                    var R, N = l(I.keys());
                                    try {
                                        for(N.s(); !(R = N.n()).done;){
                                            var D = R.value;
                                            o.add(T + "." + D);
                                        }
                                    } catch (t) {
                                        N.e(t);
                                    } finally{
                                        N.f();
                                    }
                                }
                            }
                        }
                    } catch (t) {
                        M.e(t);
                    } finally{
                        M.f();
                    }
                    return [
                        o = Array.from(o),
                        i
                    ];
                }
                function Et(t, e, r) {
                    if (null != t) for(var n = t.length, i = 0; i < n; ++i)Array.isArray(t[i]) ? Et(t[i], e, r + "." + i) : e.add(r + "." + i);
                }
                function At(t, e, r, n) {
                    var i, o, a, s = t.$__schema, u = s.virtuals, c = Object.keys(u), f = c.length, l = f, h = t._doc, p = "boolean" != typeof (n && n.aliases) || n.aliases;
                    r = r || {};
                    var d = null;
                    if (Array.isArray(r.virtuals)) d = new Set(r.virtuals);
                    else if (r.virtuals && r.virtuals.pathsToSkip) {
                        d = new Set(c);
                        for(var y = 0; y < r.virtuals.pathsToSkip.length; y++)d.has(r.virtuals.pathsToSkip[y]) && d.delete(r.virtuals.pathsToSkip[y]);
                    }
                    if (!h) return e;
                    for(f = 0; f < l; ++f)if (i = c[f], (null == d || d.has(i)) && (p || !s.aliases.hasOwnProperty(i))) {
                        if (o = i, null != r.path) {
                            if (!i.startsWith(r.path + ".")) continue;
                            o = i.substring(r.path.length + 1);
                        }
                        if (-1 !== o.indexOf(".") || o !== i) {
                            var b = o.split(".");
                            if (void 0 !== (a = R(t.get(i), r))) {
                                var m = b.length;
                                h = e;
                                for(var v = 0; v < m - 1; ++v)h[b[v]] = h[b[v]] || {}, h = h[b[v]];
                                h[b[m - 1]] = a;
                            }
                        } else {
                            if (void 0 === (a = u[i].applyGetters(void 0, t))) continue;
                            a = R(a, r), e[o] = a;
                        }
                    }
                    return e;
                }
                function Pt(t, e) {
                    if (nt(e)) throw new Error("`transform` function must be synchronous, but the transform on path `" + t + "` returned a promise.");
                }
                function xt(t, e, r) {
                    var n = t.$populated(e, !0);
                    if (!n && t.$__.selected) {
                        var i = e.split(".")[0];
                        if (t.$__.selected[i + ".$"]) return i;
                    }
                    if (n && rt.isMongooseArray(r) && (n.options.match || n.options.options && rt.object.hasOwnProperty(n.options.options, "limit") || n.options.options && n.options.options.skip || n.options.select && (0 === n.options.select._id || /\s?-_id\s?/.test(n.options.select)))) {
                        var o = r[st];
                        if (0 === Object.keys(o).length || o.$set || o.$pop) return e;
                    }
                }
                function kt(t, e, r, n, i, o) {
                    if (o || (o = "$set"), r[o] || (r[o] = {}), r[o][n.path] = i, !1 !== t.$__schema.options.versionKey && !function(t, e) {
                        var r = t.$__schema.options.skipVersioning;
                        return !!r && r[e = e.replace(/\.\d+\./, ".")];
                    }(t, n.path) && 3 & ~t.$__.version && !t.$__schema.options.optimisticConcurrency) {
                        switch(o){
                            case "$set":
                            case "$unset":
                            case "$pop":
                            case "$pull":
                            case "$pullAll":
                            case "$push":
                            case "$addToSet":
                            case "$inc":
                                break;
                            default:
                                return;
                        }
                        "$push" === o || "$addToSet" === o || "$pullAll" === o || "$pull" === o ? /\.\d+\.|\.\d+$/.test(n.path) ? t.$__.version = 3 : t.$__.version = 2 : /^\$p/.test(o) || Array.isArray(i) ? t.$__.version = 3 : /\.\d+\.|\.\d+$/.test(n.path) && (t.$__.version = 1);
                    }
                }
                function Mt(t, e, r, n, i) {
                    if (!r.$set || !r.$set[n.path]) {
                        if ("function" != typeof i.$__getAtomics) {
                            var o, a, s = i[st], u = Object.keys(s), c = u.length;
                            if (0 === c) return rt.isMongooseObject(i) ? i = i.toObject({
                                depopulate: 1,
                                _isNested: !0
                            }) : i.valueOf && (i = i.valueOf()), kt(t, 0, r, n, i);
                            for(; c--;)o = s[a = u[c]], rt.isMongooseObject(o) ? o = o.toObject({
                                depopulate: !0,
                                transform: !1,
                                _isNested: !0
                            }) : Array.isArray(o) ? o = o.map(f) : o.valueOf && (o = o.valueOf()), "$addToSet" === a && (o = {
                                $each: o
                            }), kt(t, 0, r, n, o, a);
                        } else i.$__getAtomics().forEach(function(e) {
                            var i = e[0], o = e[1];
                            kt(t, 0, r, n, o, i);
                        });
                    }
                    function f(t) {
                        return rt.isMongooseObject(t) ? t.toObject({
                            depopulate: 1,
                            _isNested: !0
                        }) : t;
                    }
                }
                _t.prototype.$__schema, _t.prototype.schema, Object.defineProperty(_t.prototype, "$locals", {
                    configurable: !1,
                    enumerable: !1,
                    get: function() {
                        return null == this.$__.locals && (this.$__.locals = {}), this.$__.locals;
                    },
                    set: function(t) {
                        this.$__.locals = t;
                    }
                }), _t.prototype.isNew, Object.defineProperty(_t.prototype, "$where", {
                    configurable: !1,
                    enumerable: !1,
                    writable: !0
                }), _t.prototype.id, _t.prototype.$errors, Object.defineProperty(_t.prototype, "$op", {
                    get: function() {
                        return this.$__.op || null;
                    },
                    set: function(t) {
                        this.$__.op = t;
                    }
                }), _t.prototype.$__buildDoc = function(t, e, r, n, i) {
                    for(var o = {}, a = Object.keys(this.$__schema.paths).filter(function(t) {
                        return !t.includes("$*");
                    }), s = a.length, u = 0; u < s; ++u){
                        var c = a[u];
                        if ("_id" === c) {
                            if (r) continue;
                            if (t && "_id" in t) continue;
                        }
                        for(var f = this.$__schema.paths[c].splitPath(), l = f.length, h = l - 1, p = "", d = o, y = !1, b = 0; b < l; ++b){
                            var m = f[b];
                            if (p.length ? p += "." + m : p = m, !0 === n) {
                                if (p in e) break;
                            } else if (!1 === n && e && !y) {
                                if (p in e) y = !0;
                                else if (!i[p]) break;
                            }
                            b < h && (d = d[m] || (d[m] = {}));
                        }
                    }
                    this._doc = o;
                }, _t.prototype.toBSON = function() {
                    return this.toObject(Y);
                }, _t.prototype.init = function(t, e, r) {
                    return "function" == typeof e && (r = e, e = null), this.$__init(t, e), r && r(null, this), this;
                }, _t.prototype.$init = function() {
                    return this.constructor.prototype.init.apply(this, arguments);
                }, _t.prototype.$__init = function(t, e) {
                    if (this.$isNew = !1, e = e || {}, null != t._id && e.populated && e.populated.length) {
                        var r, n = String(t._id), i = l(e.populated);
                        try {
                            for(i.s(); !(r = i.n()).done;){
                                var o = r.value;
                                if (o.isVirtual ? this.$populated(o.path, rt.getValue(o.path, t), o) : this.$populated(o.path, o._docs[n], o), null != o._childDocs) {
                                    var a, s = l(o._childDocs);
                                    try {
                                        for(s.s(); !(a = s.n()).done;){
                                            var u = a.value;
                                            null != u && null != u.$__ && (u.$__.parent = this);
                                        }
                                    } catch (t) {
                                        s.e(t);
                                    } finally{
                                        s.f();
                                    }
                                    o._childDocs = [];
                                }
                            }
                        } catch (t) {
                            i.e(t);
                        } finally{
                            i.f();
                        }
                    }
                    Ot(this, t, this._doc, e), Q(this, e.populated), this.$emit("init", this), this.constructor.emit("init", this);
                    var c = !1 === this.$__.exclude && this.$__.selected ? T(this.$__.selected) : null;
                    return B(this, this.$__.selected, this.$__.exclude, c, !1, this.$__.skipDefaults), this;
                }, _t.prototype.updateOne = function(t, e, r) {
                    var n = this.constructor.updateOne({
                        _id: this._doc._id
                    }, t, e), i = this;
                    return n.pre(function(t) {
                        i.constructor._middleware.execPre("updateOne", i, [
                            i
                        ], t);
                    }), n.post(function(t) {
                        i.constructor._middleware.execPost("updateOne", i, [
                            i
                        ], {}, t);
                    }), null != this.$session() && ("session" in n.options || (n.options.session = this.$session())), null != r ? n.exec(r) : n;
                }, _t.prototype.replaceOne = function() {
                    var t = Array.prototype.slice.call(arguments);
                    return t.unshift({
                        _id: this._doc._id
                    }), this.constructor.replaceOne.apply(this.constructor, t);
                }, _t.prototype.$session = function(t) {
                    if (0 === arguments.length) return null != this.$__.session && this.$__.session.hasEnded ? (this.$__.session = null, null) : this.$__.session;
                    if (null != t && t.hasEnded) throw new S("Cannot set a document's session to a session that has ended. Make sure you haven't called `endSession()` on the session you are passing to `$session()`.");
                    if (null != t || null != this.$__.session) {
                        if (this.$__.session = t, !this.$isSubdocument) {
                            var e, r = l(this.$getAllSubdocs());
                            try {
                                for(r.s(); !(e = r.n()).done;)e.value.$session(t);
                            } catch (t) {
                                r.e(t);
                            } finally{
                                r.f();
                            }
                        }
                        return t;
                    }
                }, _t.prototype.$timestamps = function(t) {
                    return 0 === arguments.length ? null != this.$__.timestamps ? this.$__.timestamps : this.$__schema ? this.$__schema.options.timestamps : void 0 : (t !== this.$timestamps() && (this.$__.timestamps = t), this);
                }, _t.prototype.overwrite = function(t) {
                    for(var e = 0, r = Array.from(new Set(Object.keys(this._doc).concat(Object.keys(t)))); e < r.length; e++){
                        var n = r[e];
                        "_id" !== n && (this.$__schema.options.versionKey && n === this.$__schema.options.versionKey || this.$__schema.options.discriminatorKey && n === this.$__schema.options.discriminatorKey || this.$set(n, t[n]));
                    }
                    return this;
                }, _t.prototype.$set = function(t, e, r, n) {
                    var i = this;
                    rt.isPOJO(r) && (n = r, r = void 0);
                    var o, a, s, u, h = n && n.merge, p = r && !0 !== r, y = !0 === r, b = 0, m = n && "strict" in n, v = m ? n.strict : this.$__.strictMode;
                    if (p && ((this.$__.adhocPaths || (this.$__.adhocPaths = {}))[t] = this.$__schema.interpretAsType(t, r, this.$__schema.options)), null == t) {
                        var g = [
                            e,
                            t
                        ];
                        t = g[0], e = g[1];
                    } else if ("string" != typeof t) {
                        if (t instanceof _t && (t = t.$__isNested ? t.toObject() : t.$__schema === this.$__schema ? At(t, c({}, t._doc)) : t._doc), null == t) {
                            var _ = [
                                e,
                                t
                            ];
                            t = _[0], e = _[1];
                        }
                        u = e ? e + "." : "";
                        var w = (o = q(this.$__schema, t)).length, j = n && n._skipMinimizeTopLevel || !1;
                        if (0 === w && j) return delete n._skipMinimizeTopLevel, e && this.$set(e, {}), this;
                        n = Object.assign({}, n, {
                            _skipMinimizeTopLevel: !1
                        });
                        for(var E = 0; E < w; ++E){
                            s = o[E];
                            var A = u ? u + s : s;
                            a = this.$__schema.pathType(A);
                            var P = t[s];
                            if (!0 !== r || u || null == P || "nested" !== a || null == this._doc[s] || delete this._doc[s], rt.isNonBuiltinObject(P) && "nested" === a) this.$set(A, P, y, Object.assign({}, n, {
                                _skipMarkModified: !0
                            })), St(this.$get(A), A, this);
                            else if (v) {
                                if (y && void 0 === P && void 0 !== this.$get(A)) continue;
                                if ("adhocOrUndefined" === a && (a = U(this, A, {
                                    typeOnly: !0
                                })), "real" === a || "virtual" === a) this.$set(A, P, y, n);
                                else if ("nested" === a && P instanceof _t) this.$set(A, P.toObject({
                                    transform: !1
                                }), y, n);
                                else {
                                    if ("throw" === v) throw "nested" === a ? new $(s, P) : new x(s);
                                    "nested" === a && null == P && this.$set(A, P, y, n);
                                }
                            } else this.$set(A, P, y, n);
                        }
                        for(var k = {}, M = Object.keys(this.$__schema.tree), T = 0, B = M.length; T < B; ++T)(s = M[T]) && this._doc.hasOwnProperty(s) && (k[s] = void 0);
                        return this._doc = Object.assign(k, this._doc), this;
                    }
                    var R = this.$__schema.pathType(t), N = null;
                    if ("adhocOrUndefined" === R && (N = -1 === t.indexOf(".") ? [
                        t
                    ] : t.split("."), R = U(this, N, {
                        typeOnly: !0
                    })), "adhocOrUndefined" === R && !m) {
                        null == N && (N = -1 === t.indexOf(".") ? [
                            t
                        ] : t.split("."));
                        var D = F(this.$__schema, N);
                        void 0 !== D && (v = D);
                    }
                    e = V(e, !0);
                    var L, C = null != i.$__.priorDoc ? i.$__.priorDoc.$__getValue(t) : y ? void 0 : i.$__getValue(t);
                    if ("nested" === R && e) {
                        if ("object" === d(e) && null != e) {
                            if (null != e.$__ && (e = e.toObject(Y)), null == e) return this.invalidate(t, new S.CastError("Object", e, t)), this;
                            var z = this.$isModified(t), K = null != this.$__.savedState && this.$__.savedState.hasOwnProperty(t);
                            if (null != this.$__.savedState && !this.$isNew && !this.$__.savedState.hasOwnProperty(t)) {
                                var H = this.$__getValue(t);
                                this.$__.savedState[t] = H;
                                for(var W = 0, J = Object.keys(H || {}); W < J.length; W++){
                                    var G = J[W];
                                    this.$__.savedState[t + "." + G] = H[G];
                                }
                            }
                            if (h) return this.$set(e, t, y, n);
                            this.$__setValue(t, null), I(this, t);
                            var Q = q(this.$__schema, e, t);
                            this.$__setValue(t, {});
                            var X, tt = l(Q);
                            try {
                                for(tt.s(); !(X = tt.n()).done;){
                                    var et = X.value;
                                    this.$set(t + "." + et, e[et], y, c(c({}, n), {}, {
                                        _skipMarkModified: !0
                                    }));
                                }
                            } catch (t) {
                                tt.e(t);
                            } finally{
                                tt.f();
                            }
                            return null == C || z && !K || !rt.deepEqual(K ? this.$__.savedState[t] : C, e) ? this.markModified(t) : this.unmarkModified(t), this;
                        }
                        return this.invalidate(t, new S.CastError("Object", e, t)), this;
                    }
                    if (null == N && (N = -1 === t.indexOf(".") ? [
                        t
                    ] : t.split(".")), "string" == typeof this.$__schema.aliases[N[0]] && (N[0] = this.$__schema.aliases[N[0]]), "adhocOrUndefined" === R && v) {
                        var nt;
                        for(b = 0; b < N.length; ++b){
                            var it = N.slice(0, b + 1).join(".");
                            if (b + 1 < N.length && "virtual" === this.$__schema.pathType(it)) return Z.set(t, e, this), this;
                            if (null != (L = this.$__schema.path(it))) {
                                if (L instanceof O) {
                                    nt = !0;
                                    break;
                                }
                                if (L.$isSchemaMap && L.$__schemaType instanceof O && b < N.length - 1) {
                                    nt = !0, L = L.$__schemaType;
                                    break;
                                }
                            }
                        }
                        if (null == L && (L = U(this, t)), !nt && !L) {
                            if ("throw" === v) throw new x(t);
                            return this;
                        }
                    } else {
                        if ("virtual" === R) return (L = this.$__schema.virtualpath(t)).applySetters(e, this), this;
                        L = this.$__path(t);
                    }
                    var ot, at = this._doc, st = "";
                    for(b = 0; b < N.length - 1; ++b)at = at[N[b]], st += (0 !== st.length ? "." : "") + N[b], at || (this.$set(st, {}), this.$__isSelected(st) || this.unmarkModified(st), at = this.$__getValue(st));
                    if (N.length <= 1) ot = t;
                    else {
                        var ut = N.length;
                        for(b = 0; b < ut; ++b){
                            var ct = N.slice(0, b + 1).join(".");
                            if (null === this.$get(ct, null, {
                                getters: !1
                            })) {
                                ot = ct;
                                break;
                            }
                        }
                        ot || (ot = t);
                    }
                    if (!L) return this.$__set(ot, t, n, y, N, L, e, C), "nested" === R && null == e && I(this, t), this;
                    if ((L.$isSingleNested || L.$isMongooseArray) && function(t, e) {
                        if (t.$__.validationError) {
                            for(var r = 0, n = Object.keys(t.$__.validationError.errors); r < n.length; r++){
                                var i = n[r];
                                i.startsWith(e + ".") && delete t.$__.validationError.errors[i];
                            }
                            0 === Object.keys(t.$__.validationError.errors).length && (t.$__.validationError = null);
                        }
                    }(this, t), null != e && h && L.$isSingleNested) {
                        e instanceof _t && (e = e.toObject({
                            virtuals: !1,
                            transform: !1
                        }));
                        for(var ft = 0, lt = Object.keys(e); ft < lt.length; ft++){
                            var ht = lt[ft];
                            this.$set(t + "." + ht, e[ht], y, n);
                        }
                        return this;
                    }
                    var yt = !0;
                    try {
                        var bt, gt = function() {
                            if (null == L.options) return !1;
                            if (!(e instanceof _t)) return !1;
                            var t = e.constructor, r = "function" != typeof L.options.ref || L.options.ref[pt] ? L.options.ref : L.options.ref.call(i, i), n = (null == r ? void 0 : r.modelName) || r;
                            if (null != n && (n === t.modelName || n === t.baseModelName)) return !0;
                            var o = L.options.refPath;
                            if (null == o) return !1;
                            var a = e.get(o);
                            return a === t.modelName || a === t.baseModelName;
                        }(), wt = !1;
                        if (gt && e instanceof _t && (!e.$__.wasPopulated || rt.deepEqual(e.$__.wasPopulated.value, e._doc._id))) {
                            var Ot = L && L.$isSingleNested ? L.cast(e, this) : e._doc._id;
                            this.$populated(t, Ot, f({}, dt, e.constructor)), e.$__.wasPopulated = {
                                value: Ot
                            }, wt = !0;
                        }
                        var jt = this.$__schema.options.typeKey;
                        if (L.options && Array.isArray(L.options[jt]) && L.options[jt].length && L.options[jt][0] && L.options[jt][0].ref && function(t, e) {
                            if (!Array.isArray(t)) return !1;
                            if (0 === t.length) return !1;
                            var r, n = l(t);
                            try {
                                for(n.s(); !(r = n.n()).done;){
                                    var i = r.value;
                                    if (!(i instanceof _t)) return !1;
                                    if (null == i.constructor.modelName) return !1;
                                    if (i.constructor.modelName != e && i.constructor.baseModelName != e) return !1;
                                }
                            } catch (t) {
                                n.e(t);
                            } finally{
                                n.f();
                            }
                            return !0;
                        }(e, L.options[jt][0].ref)) {
                            bt = f({}, dt, e[0].constructor), this.$populated(t, e.map(function(t) {
                                return t._doc._id;
                            }), bt);
                            var $t, Et = l(e);
                            try {
                                for(Et.s(); !($t = Et.n()).done;){
                                    var Pt = $t.value;
                                    Pt.$__.wasPopulated = {
                                        value: Pt._doc._id
                                    };
                                }
                            } catch (t) {
                                Et.e(t);
                            } finally{
                                Et.f();
                            }
                            wt = !0;
                        }
                        if (!gt || !L.$isSingleNested || !e.$__) {
                            var xt = this;
                            null != this.$__schema.singleNestedPaths[t] && N.length > 1 && (xt = mt(this, N, this.schema)), e = null != n && n.overwriteImmutable ? L.applySetters(e, xt, !1, C, {
                                overwriteImmutable: !0
                            }) : L.applySetters(e, xt, !1, C);
                        }
                        if (Array.isArray(e) && !Array.isArray(L) && L.$isMongooseDocumentArray && 0 !== e.length && null != e[0] && null != e[0].$__ && null != e[0].$__.populated) {
                            for(var kt = Object.keys(e[0].$__.populated), Mt = function() {
                                var r = Bt[Tt];
                                i.$populated(t + "." + r, e.map(function(t) {
                                    return t.$populated(r);
                                }), e[0].$__.populated[r].options);
                            }, Tt = 0, Bt = kt; Tt < Bt.length; Tt++)Mt();
                            wt = !0;
                        }
                        if (!wt && this.$__.populated) {
                            if (Array.isArray(e) && this.$__.populated[t]) for(var It = 0; It < e.length; ++It)e[It] instanceof _t && e.set(It, e[It]._doc._id, !0);
                            delete this.$__.populated[t];
                        }
                        null != e && L.$isSingleNested && function(t, e, r) {
                            var n = e.schema;
                            if (null != n) for(var i = 0, o = Object.keys(n.paths); i < o.length; i++){
                                var a = o[i], s = n.paths[a];
                                if (null != s.$immutableSetter) {
                                    var u = null == r ? void 0 : r.$__getValue(a);
                                    s.$immutableSetter.call(t, u);
                                }
                            }
                        }(e, L, C), this.$markValid(t);
                    } catch (r) {
                        r instanceof S.StrictModeError && r.isImmutableError ? this.invalidate(t, r) : r instanceof S.CastError ? (this.invalidate(r.path, r), r.$originalErrorPath && this.invalidate(t, new S.CastError(L.instance, e, t, r.$originalErrorPath))) : this.invalidate(t, new S.CastError(L.instance, e, t, r)), yt = !1;
                    }
                    if (yt) {
                        var Rt, Nt = null, Dt = null;
                        if (!y) {
                            var Lt = this.$isSubdocument ? this.ownerDocument() : this;
                            Nt = Lt.$__.savedState, Dt = this.$isSubdocument ? this.$__.fullPath + "." + t : t, Lt.$__saveInitialState(Dt);
                        }
                        this.$__set(ot, t, n, y, N, L, e, C);
                        var Ct = !(null === (Rt = this.$__.session) || void 0 === Rt || !Rt.transaction), Ut = this.$__.session && this.$__.session[vt] && this.$__.session[vt].has(this) && this.$__.session[vt].get(this).modifiedPaths && !this.$__.session[vt].get(this).modifiedPaths.has(Dt);
                        null != Nt && Nt.hasOwnProperty(Dt) && (!Ct || Ut) && rt.deepEqual(e, Nt[Dt]) && this.unmarkModified(t);
                    }
                    return L.$isSingleNested && (this.isDirectModified(t) || null == e) && I(this, t), this;
                }, _t.prototype.set = _t.prototype.$set, _t.prototype.$__shouldModify = function(t, e, r, n, i, o, a, s) {
                    return !(r && r._skipMarkModified || !this.$isNew && !(e in this.$__.activePaths.getStatePaths("modify")) && (void 0 !== a || this.$__isSelected(e)) && (void 0 === a && e in this.$__.activePaths.getStatePaths("default") || this.$populated(e) && a instanceof _t && it(a._doc._id, s) || it(a, void 0 !== s ? s : rt.getValue(e, this)) && (n || null == a || !(e in this.$__.activePaths.getStatePaths("default")) || !it(a, o.getDefault(this, n)))));
                }, _t.prototype.$__set = function(t, e, n, i, o, a, s, u) {
                    m = m || r(6547);
                    var c = this.$__shouldModify(t, e, n, i, o, a, s, u);
                    c ? (this.$__.primitiveAtomics && this.$__.primitiveAtomics[e] && (delete this.$__.primitiveAtomics[e], 0 === Object.keys(this.$__.primitiveAtomics).length && delete this.$__.primitiveAtomics), this.markModified(t), b || (b = r(7557)), s && rt.isMongooseArray(s) && (s._registerAtomic("$set", s), rt.isMongooseDocumentArray(s) && s.forEach(function(t) {
                        t && t.__parentArray && (t.__parentArray = s);
                    }))) : Array.isArray(s) && Array.isArray(u) && rt.isMongooseArray(s) && rt.isMongooseArray(u) && (s[st] = u[st], s[at] = u[at], rt.isMongooseDocumentArray(s) && s.forEach(function(t) {
                        null != t && (t.$isNew = !1);
                    }));
                    for(var f = this._doc, l = 0, h = o.length, p = ""; l < h; l++){
                        var d = l + 1 === h;
                        if (p += p ? "." + o[l] : o[l], gt.has(o[l])) return;
                        if (d) f instanceof Map ? f.set(o[l], s) : f.$isSingleNested ? (o[l] in f || (f[o[l]] = s), f._doc[o[l]] = s, c && f.markModified(o[l])) : f[o[l]] = s;
                        else {
                            var y = f instanceof Map, v = y ? f.get(o[l]) : f[o[l]];
                            rt.isPOJO(v) || v && v instanceof m || v && !Array.isArray(v) && v.$isSingleNested || v && Array.isArray(v) ? f = v : null == v ? (v = {}, y ? f.set(o[l], v) : f[o[l]] = v, f = v) : f = v;
                        }
                    }
                }, _t.prototype.$__getValue = function(t) {
                    if ("string" != typeof t && !Array.isArray(t)) throw new TypeError('Invalid `path`. Must be either string or array. Got "'.concat(t, '" (type ').concat(d(t), ")"));
                    return rt.getValue(t, this._doc);
                }, _t.prototype.$inc = function(t, e) {
                    var r = this;
                    if (null == e && (e = 1), Array.isArray(t)) return t.forEach(function(t) {
                        return r.$inc(t, e);
                    }), this;
                    var n = this.$__path(t);
                    if (null == n) {
                        if ("throw" === this.$__.strictMode) throw new x(t);
                        if (!0 === this.$__.strictMode) return this;
                    } else if ("Number" !== n.instance) return this.invalidate(t, new S.CastError(n.instance, e, t)), this;
                    var i = this.$__getValue(t) || 0, o = !1, a = null, s = e;
                    try {
                        e = n.cast(e), s = (a = n.applySetters(i + e, this)) - i, o = !0;
                    } catch (r) {
                        this.invalidate(t, new S.CastError("number", e, t, r));
                    }
                    return o && (this.$__.primitiveAtomics = this.$__.primitiveAtomics || {}, null == this.$__.primitiveAtomics[t] ? this.$__.primitiveAtomics[t] = {
                        $inc: s
                    } : this.$__.primitiveAtomics[t].$inc += s, this.markModified(t), this.$__setValue(t, a)), this;
                }, _t.prototype.$__setValue = function(t, e) {
                    return rt.setValue(t, e, this._doc), this;
                }, _t.prototype.get = function(t, e, r) {
                    var n;
                    null == r && (r = {}), e && (n = this.$__schema.interpretAsType(t, e, this.$__schema.options));
                    var i = r.noDottedPath, o = i ? this.$__schema.paths[t] : this.$__path(t);
                    if (null == o && null != (o = this.$__schema.virtualpath(t))) return o.applyGetters(void 0, this);
                    if (i) {
                        var a = this._doc[t];
                        return n && (a = n.cast(a)), null != o && !1 !== r.getters ? o.applyGetters(a, this) : a;
                    }
                    if (null != o && "Mixed" === o.instance) {
                        var s = this.$__schema.virtualpath(t);
                        null != s && (o = s);
                    }
                    var u = -1 !== t.indexOf("."), c = this._doc, f = u ? t.split(".") : [
                        t
                    ];
                    "string" == typeof this.$__schema.aliases[f[0]] && (f[0] = this.$__schema.aliases[f[0]]);
                    for(var l = 0, h = f.length; l < h; l++)c && c._doc && (c = c._doc), c = null == c ? void 0 : c instanceof Map ? c.get(f[l], {
                        getters: !1
                    }) : l === h - 1 ? rt.getValue(f[l], c) : c[f[l]];
                    if (n && (c = n.cast(c)), null != o && !1 !== r.getters) c = o.applyGetters(c, this);
                    else if (this.$__schema.nested[t] && r.virtuals) return At(this, R(c) || {}, {
                        path: t
                    });
                    return c;
                }, _t.prototype[ht] = _t.prototype.get, _t.prototype.$get = _t.prototype.get, _t.prototype.$__path = function(t) {
                    var e = this.$__.adhocPaths;
                    return (e && e.hasOwnProperty(t) ? e[t] : null) || this.$__schema.path(t);
                }, _t.prototype.markModified = function(t, e) {
                    this.$__saveInitialState(t), this.$__.activePaths.modify(t), null == e || this.$isSubdocument || (this.$__.pathsToScopes = this.$__pathsToScopes || {}, this.$__.pathsToScopes[t] = e);
                }, _t.prototype.$__saveInitialState = function(t) {
                    var e = this.$__.savedState, r = t;
                    if (null != e) {
                        var n = r.indexOf("."), i = -1 === n ? r : r.slice(0, n);
                        e.hasOwnProperty(i) || (e[i] = R(this.$__getValue(i)));
                    }
                }, _t.prototype.unmarkModified = function(t) {
                    this.$__.activePaths.init(t), null != this.$__.pathsToScopes && delete this.$__.pathsToScopes[t];
                }, _t.prototype.$ignore = function(t) {
                    this.$__.activePaths.ignore(t);
                }, _t.prototype.directModifiedPaths = function() {
                    return Object.keys(this.$__.activePaths.getStatePaths("modify"));
                }, _t.prototype.$isEmpty = function(t) {
                    var e = {
                        minimize: !0,
                        virtuals: !1,
                        getters: !1,
                        transform: !1
                    };
                    if (0 !== arguments.length) {
                        var r = this.$get(t);
                        return null == r || "object" === d(r) && (rt.isPOJO(r) ? jt(r) : 0 === Object.keys(r.toObject(e)).length);
                    }
                    return 0 === Object.keys(this.toObject(e)).length;
                }, _t.prototype.modifiedPaths = function(t) {
                    t = t || {};
                    var e = Object.keys(this.$__.activePaths.getStatePaths("modify")), r = new Set, n = 0, i = 0, o = e.length;
                    for(n = 0; n < o; ++n){
                        var a = e[n], s = tt(a), u = s.length;
                        for(i = 0; i < u; ++i)r.add(s[i]);
                        if (t.includeChildren) {
                            var c = 0, f = this.$get(a);
                            if ("object" === d(f) && null !== f) {
                                f._doc && (f = f._doc);
                                var l = f.length;
                                if (Array.isArray(f)) for(c = 0; c < l; ++c){
                                    var h = a + "." + c;
                                    if (!r.has(h) && (r.add(h), null != f[c] && f[c].$__)) {
                                        var p = f[c].modifiedPaths(), y = 0, b = p.length;
                                        for(y = 0; y < b; ++y)r.add(h + "." + p[y]);
                                    }
                                }
                                else {
                                    var m = Object.keys(f), v = 0, g = m.length;
                                    for(v = 0; v < g; ++v)r.add(a + "." + m[v]);
                                }
                            }
                        }
                    }
                    return Array.from(r);
                }, _t.prototype[ft] = _t.prototype.modifiedPaths, _t.prototype.isModified = function(t, e, r) {
                    var n = this;
                    if (t) {
                        var i = e && e.ignoreAtomics, o = this.$__.activePaths.states.modify;
                        if (null == o) return !1;
                        "string" == typeof t && (t = -1 === t.indexOf(" ") ? [
                            t
                        ] : t.split(" "));
                        var a, s = l(t);
                        try {
                            for(s.s(); !(a = s.n()).done;)if (null != o[a.value]) return !0;
                        } catch (t) {
                            s.e(t);
                        } finally{
                            s.f();
                        }
                        var u = r || this[ft](), c = t.some(function(t) {
                            return !!~u.indexOf(t);
                        }), f = Object.keys(o);
                        return i && (f = f.filter(function(t) {
                            var e = n.$__getValue(t);
                            return null == e || null == e[st] || void 0 !== e[st].$set;
                        })), c || t.some(function(t) {
                            return f.some(function(e) {
                                return e === t || t.startsWith(e + ".");
                            });
                        });
                    }
                    return this.$__.activePaths.some("modify");
                }, _t.prototype.$isModified = _t.prototype.isModified, _t.prototype[ct] = _t.prototype.isModified, _t.prototype.$isDefault = function(t) {
                    var e = this;
                    if (null == t) return this.$__.activePaths.some("default");
                    if ("string" == typeof t && -1 === t.indexOf(" ")) return this.$__.activePaths.getStatePaths("default").hasOwnProperty(t);
                    var r = t;
                    return Array.isArray(r) || (r = r.split(" ")), r.some(function(t) {
                        return e.$__.activePaths.getStatePaths("default").hasOwnProperty(t);
                    });
                }, _t.prototype.$isDeleted = function(t) {
                    return 0 === arguments.length ? !!this.$__.isDeleted : (this.$__.isDeleted = !!t, this);
                }, _t.prototype.isDirectModified = function(t) {
                    var e = this;
                    if (null == t) return this.$__.activePaths.some("modify");
                    if ("string" == typeof t && -1 === t.indexOf(" ")) {
                        var r = this.$__.activePaths.getStatePaths("modify").hasOwnProperty(t);
                        if (r || -1 === t.indexOf(".")) return r;
                        for(var n = t.split("."), i = 0; i < n.length - 1; ++i){
                            var o = n.slice(0, i + 1).join("."), a = this.$get(o);
                            if (null != a && null != a.$__ && a.isDirectModified(n.slice(i + 1).join("."))) return !0;
                        }
                        return !1;
                    }
                    var s = t;
                    return "string" == typeof s && (s = s.split(" ")), s.some(function(t) {
                        return e.isDirectModified(t);
                    });
                }, _t.prototype.isInit = function(t) {
                    var e = this;
                    if (null == t) return this.$__.activePaths.some("init");
                    if ("string" == typeof t && -1 === t.indexOf(" ")) return this.$__.activePaths.getStatePaths("init").hasOwnProperty(t);
                    var r = t;
                    return Array.isArray(r) || (r = r.split(" ")), r.some(function(t) {
                        return e.$__.activePaths.getStatePaths("init").hasOwnProperty(t);
                    });
                }, _t.prototype.isSelected = function(t) {
                    var e = this;
                    if (null == this.$__.selected) return !0;
                    if (!t) return !1;
                    if ("_id" === t) return 0 !== this.$__.selected._id;
                    if (-1 !== t.indexOf(" ") && (t = t.split(" ")), Array.isArray(t)) return t.some(function(t) {
                        return e.$__isSelected(t);
                    });
                    var r = Object.keys(this.$__.selected), n = null;
                    if (1 === r.length && "_id" === r[0]) return 0 === this.$__.selected._id;
                    for(var i = 0, o = r; i < o.length; i++){
                        var a = o[i];
                        if ("_id" !== a && H(this.$__.selected[a])) {
                            n = !!this.$__.selected[a];
                            break;
                        }
                    }
                    if (null === n) return !0;
                    if (t in this.$__.selected) return n;
                    for(var s = t + ".", u = 0, c = r; u < c.length; u++){
                        var f = c[u];
                        if ("_id" !== f) {
                            if (f.startsWith(s)) return n || f !== s;
                            if (s.startsWith(f + ".")) return n;
                        }
                    }
                    return !n;
                }, _t.prototype.$__isSelected = _t.prototype.isSelected, _t.prototype.isDirectSelected = function(t) {
                    var e = this;
                    if (null == this.$__.selected) return !0;
                    if ("_id" === t) return 0 !== this.$__.selected._id;
                    if (-1 !== t.indexOf(" ") && (t = t.split(" ")), Array.isArray(t)) return t.some(function(t) {
                        return e.isDirectSelected(t);
                    });
                    var r = Object.keys(this.$__.selected), n = null;
                    if (1 === r.length && "_id" === r[0]) return 0 === this.$__.selected._id;
                    for(var i = 0, o = r; i < o.length; i++){
                        var a = o[i];
                        if ("_id" !== a && H(this.$__.selected[a])) {
                            n = !!this.$__.selected[a];
                            break;
                        }
                    }
                    return null === n || (this.$__.selected.hasOwnProperty(t) ? n : !n);
                }, _t.prototype.validate = function() {
                    var t = s(o().mark(function t(e, r) {
                        var n, i, a, s = this, u = arguments;
                        return o().wrap(function(t) {
                            for(;;)switch(t.prev = t.next){
                                case 0:
                                    if ("function" != typeof e && "function" != typeof r && "function" != typeof u[2]) {
                                        t.next = 2;
                                        break;
                                    }
                                    throw new S("Document.prototype.validate() no longer accepts a callback");
                                case 2:
                                    if (this.$op = "validate", 1 === u.length && ("object" !== d(u[0]) || Array.isArray(u[0]) || (r = u[0], e = null)), r && "string" == typeof r.pathsToSkip && (i = -1 === r.pathsToSkip.indexOf(" "), r.pathsToSkip = i ? [
                                        r.pathsToSkip
                                    ] : r.pathsToSkip.split(" ")), a = r && r._skipParallelValidateCheck, null != this.$isSubdocument || (this.$__.validating && !a ? n = new A(this, {
                                        parentStack: r && r.parentStack,
                                        conflictStack: this.$__.validating.stack
                                    }) : a || (this.$__.validating = new A(this, {
                                        parentStack: r && r.parentStack
                                    }))), null == n) {
                                        t.next = 9;
                                        break;
                                    }
                                    throw n;
                                case 9:
                                    return t.abrupt("return", new Promise(function(t, n) {
                                        s.$__validate(e, r, function(e) {
                                            if (s.$op = null, s.$__.validating = null, null != e) return n(e);
                                            t();
                                        });
                                    }));
                                case 10:
                                case "end":
                                    return t.stop();
                            }
                        }, t, this);
                    }));
                    return function(e, r) {
                        return t.apply(this, arguments);
                    };
                }(), _t.prototype.$validate = _t.prototype.validate, _t.prototype.$__validate = function(t, e, r) {
                    var n, o = this;
                    this.$__.saveOptions && this.$__.saveOptions.pathsToSave && !t ? t = i(this.$__.saveOptions.pathsToSave) : "function" == typeof t ? (r = t, e = null, t = null) : "function" == typeof e && (r = e, e = null);
                    var a, s = e && "object" === d(e) && "validateModifiedOnly" in e, u = e && e.pathsToSkip || null;
                    a = s ? !!e.validateModifiedOnly : this.$__schema.options.validateModifiedOnly;
                    var f = e && e.validateAllPaths;
                    if (f) {
                        if (u) throw new TypeError("Cannot set both `validateAllPaths` and `pathsToSkip`");
                        if (t) throw new TypeError("Cannot set both `validateAllPaths` and `pathsToValidate`");
                        if (s && a) throw new TypeError("Cannot set both `validateAllPaths` and `validateModifiedOnly`");
                    }
                    var h, p, y = this, b = function() {
                        var t = o.$__.validationError;
                        if (o.$__.validationError = null, o.$__.validating = null, a && null != t) {
                            for(var e = 0, r = Object.keys(t.errors); e < r.length; e++){
                                var n = r[e];
                                o.$isModified(n) || delete t.errors[n];
                            }
                            0 === Object.keys(t.errors).length && (t = void 0);
                        }
                        if (o.$__.cachedRequired = {}, o.$emit("validate", y), o.constructor.emit("validate", y), t) {
                            for(var i in t.errors)!o[ut] && t.errors[i] instanceof S.CastError && o.invalidate(i, t.errors[i]);
                            return t;
                        }
                    };
                    if (f) {
                        var m, v = l(h = new Set(Object.keys(this.$__schema.paths)));
                        try {
                            for(v.s(); !(m = v.n()).done;){
                                var g = m.value, _ = this.$__schema.path(g);
                                if (_ && _.$isMongooseArray) {
                                    var w = this.$__getValue(g);
                                    w && Et(w, h, g);
                                }
                            }
                        } catch (t) {
                            v.e(t);
                        } finally{
                            v.f();
                        }
                        h = i(h), p = {};
                    } else {
                        var O = $t(this, t, u, e && e._nestedValidate);
                        h = a ? O[0].filter(function(t) {
                            return o.$isModified(t);
                        }) : O[0], p = O[1];
                    }
                    if ("string" == typeof t && (t = t.split(" ")), 0 === h.length) return z(function() {
                        var t = b();
                        if (t) return y.$__schema.s.hooks.execPost("validate:error", y, [
                            y
                        ], {
                            error: t
                        }, function(t) {
                            r(t);
                        });
                        r(null, y);
                    });
                    var j = {}, $ = 0, E = null === (n = this.$__.saveOptions) || void 0 === n ? void 0 : n.pathsToSave;
                    if (Array.isArray(E)) {
                        E = new Set(E);
                        var A, P = l(h);
                        try {
                            for(P.s(); !(A = P.n()).done;){
                                var x = A.value;
                                E.has(x) && B(x);
                            }
                        } catch (t) {
                            P.e(t);
                        } finally{
                            P.f();
                        }
                    } else {
                        var M, T = l(h);
                        try {
                            for(T.s(); !(M = T.n()).done;)B(M.value);
                        } catch (t) {
                            T.e(t);
                        } finally{
                            T.f();
                        }
                    }
                    function B(t) {
                        null == t || j[t] || (j[t] = !0, $++, z(function() {
                            var e = y.$__schema.path(t);
                            if (!e) return --$ || I();
                            if (y.$isValid(t)) {
                                if (null != e[bt] && t !== e.path) return --$ || I();
                                var r, n = y.$__getValue(t);
                                (r = y.$populated(t)) ? n = r : null != n && null != n.$__ && n.$__.wasPopulated && (n = n._doc._id);
                                var i = null != y.$__.pathsToScopes && t in y.$__.pathsToScopes ? y.$__.pathsToScopes[t] : y, o = c(c({}, p[t]), {}, {
                                    path: t,
                                    validateAllPaths: f,
                                    _nestedValidate: !0
                                });
                                e.doValidate(n, function(r) {
                                    if (r) {
                                        if ((e.$isSingleNested || e.$isArraySubdocument || e.$isMongooseDocumentArray) && r instanceof k) return --$ || I();
                                        y.invalidate(t, r, void 0, !0);
                                    }
                                    --$ || I();
                                }, i, o);
                            } else --$ || I();
                        }));
                    }
                    function I() {
                        var t = b();
                        if (t) return y.$__schema.s.hooks.execPost("validate:error", y, [
                            y
                        ], {
                            error: t
                        }, function(t) {
                            r(t);
                        });
                        r(null, y);
                    }
                }, _t.prototype.validateSync = function(t, e) {
                    var r, n = this, o = this;
                    1 !== arguments.length || "object" !== d(arguments[0]) || Array.isArray(arguments[0]) || (e = arguments[0], t = null), r = e && "object" === d(e) && "validateModifiedOnly" in e ? !!e.validateModifiedOnly : this.$__schema.options.validateModifiedOnly;
                    var a, s, u = e && e.pathsToSkip, c = e && e.validateAllPaths;
                    if (c) {
                        if (u) throw new TypeError("Cannot set both `validateAllPaths` and `pathsToSkip`");
                        if (t) throw new TypeError("Cannot set both `validateAllPaths` and `pathsToValidate`");
                    }
                    if ("string" == typeof t) {
                        var f = -1 === t.indexOf(" ");
                        t = f ? [
                            t
                        ] : t.split(" ");
                    } else "string" == typeof u && -1 !== u.indexOf(" ") && (u = u.split(" "));
                    if (c) {
                        var h, p = l(a = new Set(Object.keys(this.$__schema.paths)));
                        try {
                            for(p.s(); !(h = p.n()).done;){
                                var y = h.value, b = this.$__schema.path(y);
                                if (b && b.$isMongooseArray) {
                                    var m = this.$__getValue(y);
                                    m && Et(m, a, y);
                                }
                            }
                        } catch (A) {
                            p.e(A);
                        } finally{
                            p.f();
                        }
                        a = i(a), s = {};
                    } else {
                        var v = $t(this, t, u);
                        a = r ? v[0].filter(function(t) {
                            return n.$isModified(t);
                        }) : v[0], s = v[1];
                    }
                    for(var g = {}, _ = 0, w = a.length; _ < w; ++_){
                        var O = a[_];
                        if (!g[O]) {
                            g[O] = !0;
                            var j = o.$__schema.path(O);
                            if (j && o.$isValid(O)) {
                                var $ = o.$__getValue(O), E = j.doValidateSync($, o, {
                                    skipSchemaValidators: s[O],
                                    path: O,
                                    validateModifiedOnly: r,
                                    validateAllPaths: c
                                });
                                if (E) {
                                    if ((j.$isSingleNested || j.$isArraySubdocument || j.$isMongooseDocumentArray) && E instanceof k) continue;
                                    o.invalidate(O, E, void 0, !0);
                                }
                            }
                        }
                    }
                    var A = o.$__.validationError;
                    if (o.$__.validationError = void 0, o.$emit("validate", o), o.constructor.emit("validate", o), A) for(var P in A.errors)A.errors[P] instanceof S.CastError && o.invalidate(P, A.errors[P]);
                    return A;
                }, _t.prototype.invalidate = function(t, e, r, n) {
                    if (this.$__.validationError || (this.$__.validationError = new k(this)), !this.$__.validationError.errors[t]) return e && "string" != typeof e || (e = new M({
                        path: t,
                        message: e,
                        type: n || "user defined",
                        value: r
                    })), this.$__.validationError === e || this.$__.validationError.addError(t, e), this.$__.validationError;
                }, _t.prototype.$markValid = function(t) {
                    this.$__.validationError && this.$__.validationError.errors[t] && (delete this.$__.validationError.errors[t], 0 === Object.keys(this.$__.validationError.errors).length && (this.$__.validationError = null));
                }, _t.prototype.$isValid = function(t) {
                    var e = this;
                    return null == this.$__.validationError || 0 === Object.keys(this.$__.validationError.errors).length || null != t && (-1 !== t.indexOf(" ") && (t = t.split(" ")), Array.isArray(t) ? t.some(function(t) {
                        return null == e.$__.validationError.errors[t];
                    }) : null == this.$__.validationError.errors[t]);
                }, _t.prototype.$__reset = function() {
                    var t, e = this.$isSubdocument ? null : this.$getAllSubdocs({
                        useCache: !0
                    });
                    if (e && e.length > 0) {
                        var r, n = l(e);
                        try {
                            for(n.s(); !(r = n.n()).done;)r.value.$__reset();
                        } catch (t) {
                            n.e(t);
                        } finally{
                            n.f();
                        }
                    }
                    return this.$__dirty().forEach(function(t) {
                        var e = t.value;
                        e && e[st] && (e[at] = e[st], e[st] = {});
                    }), this.$__.backup = {}, this.$__.backup.activePaths = {
                        modify: Object.assign({}, this.$__.activePaths.getStatePaths("modify")),
                        default: Object.assign({}, this.$__.activePaths.getStatePaths("default"))
                    }, this.$__.backup.validationError = this.$__.validationError, this.$__.backup.errors = this.$errors, this.$__.activePaths.clear("modify"), this.$__.activePaths.clear("default"), this.$__.validationError = void 0, this.$errors = void 0, t = this, this.$__schema.requiredPaths().forEach(function(e) {
                        t.$__.activePaths.require(e);
                    }), this;
                }, _t.prototype.$__undoReset = function() {
                    if (null != this.$__.backup && null != this.$__.backup.activePaths) {
                        this.$__.activePaths.states.modify = this.$__.backup.activePaths.modify, this.$__.activePaths.states.default = this.$__.backup.activePaths.default, this.$__.validationError = this.$__.backup.validationError, this.$errors = this.$__.backup.errors;
                        var t, e = l(this.$__dirty());
                        try {
                            for(e.s(); !(t = e.n()).done;){
                                var r = t.value.value;
                                r && r[st] && r[at] && (r[st] = r[at]);
                            }
                        } catch (t) {
                            e.e(t);
                        } finally{
                            e.f();
                        }
                        if (!this.$isSubdocument) {
                            var n, i = l(this.$getAllSubdocs());
                            try {
                                for(i.s(); !(n = i.n()).done;)n.value.$__undoReset();
                            } catch (t) {
                                i.e(t);
                            } finally{
                                i.f();
                            }
                        }
                    }
                }, _t.prototype.$__dirty = function() {
                    var t = this, e = this.$__.activePaths.map("modify", function(e) {
                        return {
                            path: e,
                            value: t.$__getValue(e),
                            schema: t.$__path(e)
                        };
                    });
                    e = e.concat(this.$__.activePaths.map("default", function(e) {
                        if ("_id" !== e && null != t.$__getValue(e)) return {
                            path: e,
                            value: t.$__getValue(e),
                            schema: t.$__path(e)
                        };
                    }));
                    var r = new Map(e.filter(function(t) {
                        return null != t;
                    }).map(function(t) {
                        return [
                            t.path,
                            t.value
                        ];
                    })), n = [];
                    return e.forEach(function(t) {
                        if (t) {
                            for(var e = null, i = tt(t.path), o = 0; o < i.length - 1; o++)if (r.has(i[o])) {
                                e = r.get(i[o]);
                                break;
                            }
                            null == e ? n.push(t) : null != e && null != e[st] && e.hasAtomics() && (e[st] = {}, e[st].$set = e);
                        }
                    }), n;
                }, _t.prototype.$__setSchema = function(t) {
                    N(t.tree, this, void 0, t.options);
                    for(var e = 0, r = Object.keys(t.virtuals); e < r.length; e++){
                        var n = r[e];
                        t.virtuals[n]._applyDefaultGetters();
                    }
                    null == t.path("schema") && (this.schema = t), this.$__schema = t, this[lt] = t;
                }, _t.prototype.$__getArrayPathsToValidate = function() {
                    return y || (y = r(4878)), this.$__.activePaths.map("init", "modify", (function(t) {
                        return this.$__getValue(t);
                    }).bind(this)).filter(function(t) {
                        return t && Array.isArray(t) && rt.isMongooseDocumentArray(t) && t.length;
                    }).reduce(function(t, e) {
                        return t.concat(e);
                    }, []).filter(function(t) {
                        return t;
                    });
                }, _t.prototype.$getAllSubdocs = function(t) {
                    var e;
                    if (null != t && t.useCache && null !== (e = this.$__.saveOptions) && void 0 !== e && e.__subdocs) return this.$__.saveOptions.__subdocs;
                    y || (y = r(4878)), m = m || r(6547);
                    var n = [];
                    return function t(e) {
                        var r, i = [], o = l(e.$__schema.childSchemas);
                        try {
                            for(o.s(); !(r = o.n()).done;){
                                var a = r.value.model, s = e.$__getValue(a.path);
                                if (null != s) {
                                    if (s.$__ && i.push(s), Array.isArray(s)) {
                                        var u, c = l(s);
                                        try {
                                            for(c.s(); !(u = c.n()).done;){
                                                var f = u.value;
                                                null != f && f.$__ && i.push(f);
                                            }
                                        } catch (t) {
                                            c.e(t);
                                        } finally{
                                            c.f();
                                        }
                                    }
                                    if (s instanceof Map) {
                                        var h, p = l(s.values());
                                        try {
                                            for(p.s(); !(h = p.n()).done;){
                                                var d = h.value;
                                                null != d && d.$__ && i.push(d);
                                            }
                                        } catch (t) {
                                            p.e(t);
                                        } finally{
                                            p.f();
                                        }
                                    }
                                }
                            }
                        } catch (t) {
                            o.e(t);
                        } finally{
                            o.f();
                        }
                        for(var y = 0, b = i; y < b.length; y++)t(b[y]);
                        n.push.apply(n, i);
                    }(this), this.$__.saveOptions && (this.$__.saveOptions.__subdocs = n), n;
                }, _t.prototype.$__handleReject = function(t) {
                    this.$listeners("error").length ? this.$emit("error", t) : this.constructor.listeners && this.constructor.listeners("error").length && this.constructor.emit("error", t);
                }, _t.prototype.$toObject = function(t, e) {
                    var r, n, i, o, a, s, u, f, l, h, p, y = this.$__schema._defaultToObjectOptions(e), b = this.$__hasOnlyPrimitiveValues();
                    (t = rt.isPOJO(t) ? c({}, t) : {})._calledWithOptions = t._calledWithOptions || c({}, t), p = null != t._calledWithOptions.minimize ? t.minimize : null != y && null != y.minimize ? y.minimize : this.$__schema.options.minimize, t.minimize = p, b || (t._seen = t._seen || new Map);
                    var m = null !== (r = null !== (n = null !== (i = t._calledWithOptions.depopulate) && void 0 !== i ? i : null == y ? void 0 : y.depopulate) && void 0 !== n ? n : t.depopulate) && void 0 !== r && r;
                    if (m && t._isNested && this.$__.wasPopulated) return R(this.$__.wasPopulated.value || this._doc._id, t);
                    if (m && (t.depopulate = !0), null != y) for(var v = 0, g = Object.keys(y); v < g.length; v++){
                        var _ = g[v];
                        null == t[_] && (t[_] = y[_]);
                    }
                    t._isNested = !0, t.json = e, t.minimize = p;
                    var w, S = t._parentOptions;
                    t._parentOptions = this.$isSubdocument ? t : null, w = b && !t.flattenObjectIds ? this.$__toObjectShallow() : R(this._doc, t) || {};
                    var O = null !== (o = null !== (a = null !== (s = t._calledWithOptions.getters) && void 0 !== s ? s : t.getters) && void 0 !== a ? a : y.getters) && void 0 !== o && o;
                    O && (function(t, e) {
                        var r, n, i = t.$__schema, o = Object.keys(i.paths), a = o.length, s = t._doc;
                        if (!s) return e;
                        for(; a--;){
                            var u = (r = o[a]).split("."), c = u.length, f = c - 1, l = e, h = void 0;
                            if (s = t._doc, t.$__isSelected(r)) for(var p = 0; p < c && (n = s[h = u[p]], null == l || "object" === d(l)); ++p){
                                if (p === f) {
                                    if (l[h] = i.paths[r].applyGetters(l[h], t), Array.isArray(l[h]) && i.paths[r].$embeddedSchemaType) for(var y = 0; y < l[h].length; ++y)l[h][y] = i.paths[r].$embeddedSchemaType.applyGetters(l[h][y], t);
                                } else {
                                    if (null == n) {
                                        h in s && (l[h] = n);
                                        break;
                                    }
                                    l = l[h] || (l[h] = {});
                                }
                                s = n;
                            }
                        }
                    }(this, w), t.minimize && (w = X(w) || {}));
                    var j = null !== (u = null !== (f = null !== (l = t._calledWithOptions.virtuals) && void 0 !== l ? l : y.virtuals) && void 0 !== f ? f : null == S ? void 0 : S.virtuals) && void 0 !== u ? u : void 0;
                    (j || O && !1 !== j) && At(this, w, t, t), !1 === t.versionKey && this.$__schema.options.versionKey && delete w[this.$__schema.options.versionKey];
                    var $ = null === (h = t._calledWithOptions.transform) || void 0 === h || h, E = void 0;
                    if (!0 === $ ? E = y.transform : "function" == typeof $ && (E = $), $ && function(t, e) {
                        var r = t.$__schema, n = Object.keys(r.paths || {});
                        if (!t._doc) return e;
                        for(var i = 0, o = n; i < o.length; i++){
                            var a, s, u, c, f, l = o[i], h = r.paths[l], p = null !== (a = h.options.transform) && void 0 !== a ? a : null === (s = h.constructor) || void 0 === s || null === (s = s.defaultOptions) || void 0 === s ? void 0 : s.transform, d = null !== (u = null === (c = h.$embeddedSchemaType) || void 0 === c || null === (c = c.options) || void 0 === c ? void 0 : c.transform) && void 0 !== u ? u : null === (f = h.$embeddedSchemaType) || void 0 === f || null === (f = f.constructor) || void 0 === f || null === (f = f.defaultOptions) || void 0 === f ? void 0 : f.transform;
                            if ("function" == typeof p) {
                                var y = t.$get(l);
                                if (void 0 === y) continue;
                                var b = p.call(t, y);
                                Pt(l, b), rt.setValue(l, b, e);
                            } else if ("function" == typeof d) {
                                var m = t.$get(l);
                                if (void 0 === m) continue;
                                for(var v = [].concat(m), g = 0; g < v.length; ++g){
                                    var _ = d.call(t, v[g]);
                                    v[g] = _, Pt(l, _);
                                }
                                e[l] = v;
                            }
                        }
                    }(this, w), t.useProjection && function(t, e) {
                        var r = t.$__schema, n = Object.keys(r.paths || {});
                        if (!t._doc) return e;
                        var i = t.$__.selected;
                        if (void 0 === i && (i = {}, et.applyPaths(i, r)), null == i || 0 === Object.keys(i).length) return e;
                        for(var o = 0, a = n; o < a.length; o++){
                            var s = a[o];
                            null == i[s] || i[s] || delete e[s];
                        }
                    }(this, w), "function" == typeof E) {
                        var A = E(this, w, t);
                        void 0 !== A && (w = A);
                    }
                    return w;
                }, _t.prototype.$__toObjectShallow = function() {
                    var t = {};
                    if (null != this._doc) for(var e = 0, r = Object.keys(this._doc); e < r.length; e++){
                        var n = r[e], i = this._doc[n];
                        i instanceof Date ? t[n] = new Date(i) : void 0 !== i && (t[n] = i);
                    }
                    return t;
                }, _t.prototype.toObject = function(t) {
                    return this.$toObject(t);
                }, _t.prototype.toJSON = function(t) {
                    return this.$toObject(t, !0);
                }, _t.prototype.ownerDocument = function() {
                    return this;
                }, _t.prototype.parent = function() {
                    return this.$isSubdocument || this.$__.wasPopulated ? this.$__.parent : this;
                }, _t.prototype.$parent = _t.prototype.parent, _t.prototype.inspect = function(t) {
                    var e;
                    rt.isPOJO(t) && ((e = t).minimize = !1);
                    var r = arguments.length > 0 ? this.toObject(e) : this.toObject();
                    return null == r ? "MongooseDocument { " + r + " }" : r;
                }, G.custom && (_t.prototype[G.custom] = _t.prototype.inspect), _t.prototype.toString = function() {
                    var t = this.inspect();
                    return "string" == typeof t ? t : G(t);
                }, _t.prototype.equals = function(t) {
                    if (!t) return !1;
                    var e = this.$__getValue("_id"), r = null != t.$__ ? t.$__getValue("_id") : t;
                    return e || r ? e && e.equals ? e.equals(r) : e === r : it(this, t);
                }, _t.prototype.populate = function() {
                    var t = s(o().mark(function t() {
                        var e, r, n, i, a, s, u, c, f, h, p = arguments;
                        return o().wrap(function(t) {
                            for(;;)switch(t.prev = t.next){
                                case 0:
                                    if (e = {}, "function" != typeof (r = Array.prototype.slice.call(p))[r.length - 1]) {
                                        t.next = 4;
                                        break;
                                    }
                                    throw new S("Document.prototype.populate() no longer accepts a callback");
                                case 4:
                                    if (0 !== r.length) {
                                        n = rt.populate.apply(null, r), i = l(n);
                                        try {
                                            for(i.s(); !(a = i.n()).done;)s = a.value, e[s.path] = s;
                                        } catch (t) {
                                            i.e(t);
                                        } finally{
                                            i.f();
                                        }
                                    }
                                    return u = rt.object.vals(e), c = this.constructor, this.$__isNested && (c = this.$__[yt].constructor, f = this.$__.nestedPath, u.forEach(function(t) {
                                        t.path = f + "." + t.path;
                                    })), null != this.$session() && (h = this.$session(), u.forEach(function(t) {
                                        null != t.options ? "session" in t.options || (t.options.session = h) : t.options = {
                                            session: h
                                        };
                                    })), u.forEach(function(t) {
                                        t._localModel = c;
                                    }), t.abrupt("return", c.populate(this, u));
                                case 11:
                                case "end":
                                    return t.stop();
                            }
                        }, t, this);
                    }));
                    return function() {
                        return t.apply(this, arguments);
                    };
                }(), _t.prototype.$getPopulatedDocs = function() {
                    var t = [];
                    null != this.$__.populated && (t = t.concat(Object.keys(this.$__.populated)));
                    var e, r = [], n = l(t);
                    try {
                        for(n.s(); !(e = n.n()).done;){
                            var i = e.value, o = this.$get(i);
                            Array.isArray(o) ? r = r.concat(o) : o instanceof _t && r.push(o);
                        }
                    } catch (t) {
                        n.e(t);
                    } finally{
                        n.f();
                    }
                    return r;
                }, _t.prototype.populated = function(t, e, r) {
                    if (null == e || !0 === e) {
                        if (!this.$__.populated) return;
                        if ("string" != typeof t) return;
                        var n = t.endsWith(".$*") ? t.replace(/\.\$\*$/, "") : t, i = this.$__.populated[n];
                        return i ? !0 === e ? i : i.value : void 0;
                    }
                    this.$__.populated || (this.$__.populated = {}), this.$__.populated[t] = {
                        value: e,
                        options: r
                    };
                    for(var o = t.split("."), a = 0; a < o.length - 1; ++a){
                        var s = o.slice(0, a + 1).join("."), u = this.$get(s);
                        if (null != u && null != u.$__ && this.$populated(s)) {
                            var c = o.slice(a + 1).join(".");
                            u.$populated(c, e, r);
                            break;
                        }
                    }
                    return e;
                }, _t.prototype.$populated = _t.prototype.populated, _t.prototype.$assertPopulated = function(t, e) {
                    var r = this;
                    if (Array.isArray(t)) return t.forEach(function(t) {
                        return r.$assertPopulated(t, e);
                    }), this;
                    if (arguments.length > 1 && this.$set(e), !this.$populated(t)) throw new S('Expected path "'.concat(t, '" to be populated'));
                    return this;
                }, _t.prototype.depopulate = function(t) {
                    var e;
                    "string" == typeof t && (t = -1 === t.indexOf(" ") ? [
                        t
                    ] : t.split(" "));
                    var r = this.$$populatedVirtuals ? Object.keys(this.$$populatedVirtuals) : [], n = this.$__ && this.$__.populated || {};
                    if (0 === arguments.length) {
                        var i, o = l(r);
                        try {
                            for(o.s(); !(i = o.n()).done;){
                                var a = i.value;
                                delete this.$$populatedVirtuals[a], delete this._doc[a], delete n[a];
                            }
                        } catch (t) {
                            o.e(t);
                        } finally{
                            o.f();
                        }
                        for(var s = 0, u = Object.keys(n); s < u.length; s++){
                            var c = u[s];
                            if (e = this.$populated(c)) {
                                if (delete n[c], Array.isArray(e)) {
                                    var f = rt.getValue(c, this._doc);
                                    if (f.isMongooseArray) for(var h = f.__array, p = 0; p < h.length; ++p){
                                        var d = h[p];
                                        null != d && (h[p] = d instanceof _t ? d._doc._id : d._id);
                                    }
                                    else rt.setValue(c, e, this._doc);
                                } else rt.setValue(c, e, this._doc);
                            }
                        }
                        return this;
                    }
                    var y, b = l(t);
                    try {
                        for(b.s(); !(y = b.n()).done;){
                            var m = y.value;
                            if (e = this.$populated(m), delete n[m], -1 !== r.indexOf(m)) delete this.$$populatedVirtuals[m], delete this._doc[m];
                            else if (e) {
                                if (Array.isArray(e)) {
                                    var v = rt.getValue(m, this._doc);
                                    if (v.isMongooseArray) for(var g = v.__array, _ = 0; _ < g.length; ++_){
                                        var w = g[_];
                                        null != w && (g[_] = w instanceof _t ? w._doc._id : w._id);
                                    }
                                    else rt.setValue(m, e, this._doc);
                                } else rt.setValue(m, e, this._doc);
                            }
                        }
                    } catch (t) {
                        b.e(t);
                    } finally{
                        b.f();
                    }
                    return this;
                }, _t.prototype.$__fullPath = function(t) {
                    return t || "";
                }, _t.prototype.getChanges = function() {
                    var t = this.$__delta();
                    return t ? t[1] : {};
                }, _t.prototype.$__delta = function() {
                    var t = this, e = this.$__dirty(), r = this.$__schema.options.optimisticConcurrency;
                    if (r) {
                        if (Array.isArray(r)) {
                            var i = new Set(r);
                            this.modifiedPaths().find(function(t) {
                                return i.has(t);
                            }) && (this.$__.version = e.length ? 3 : 1);
                        } else this.$__.version = e.length ? 3 : 1;
                    }
                    if (e.length || 3 === this.$__.version) {
                        var o = {}, a = {}, s = e.length, u = [], c = 0;
                        for(o._id = this._doc._id, null != (o && o._id && o._id.$__ || null) && (o._id = o._id.toObject({
                            transform: !1,
                            depopulate: !0
                        })); c < s; ++c){
                            var f = e[c], l = f.value, h = xt(this, f.path, l);
                            if (h) u.push(h);
                            else {
                                if (!this.$populated(f.path, !0) && this.$__.selected) {
                                    var p = f.path.split("."), d = p[0];
                                    if (this.$__.selected[d] && this.$__.selected[d].$elemMatch) {
                                        if (!(p.length > 1 && 0 == p[1] && void 0 === o[d])) {
                                            u.push(f.path);
                                            continue;
                                        }
                                        o[d] = this.$__.selected[d], p[1] = "$", f.path = p.join(".");
                                    }
                                }
                                if (this.$isDefault(f.path) && this.$__.selected) {
                                    if (-1 === f.path.indexOf(".") && J(this.$__.selected, f.path)) continue;
                                    if (tt(f.path).find(function(e) {
                                        return J(t.$__.isSelected, e);
                                    })) continue;
                                }
                                if (!u.length) {
                                    if (void 0 === l) kt(this, 0, a, f, 1, "$unset");
                                    else if (null === l) kt(this, 0, a, f, null);
                                    else if (rt.isMongooseArray(l) && l.$path() && l[st]) Mt(this, 0, a, f, l);
                                    else if (l[w.pathSymbol] && n.isBuffer(l)) kt(this, 0, a, f, l = l.toObject());
                                    else if (this.$__.primitiveAtomics && null != this.$__.primitiveAtomics[f.path]) {
                                        var y = this.$__.primitiveAtomics[f.path], b = L(y);
                                        kt(this, 0, a, f, y[b], b);
                                    } else kt(this, 0, a, f, l = R(l, {
                                        depopulate: !0,
                                        transform: !1,
                                        virtuals: !1,
                                        getters: !1,
                                        omitUndefined: !0,
                                        _isNested: !0
                                    }));
                                }
                            }
                        }
                        return u.length ? new v(u) : (this.$__.version && this.$__version(o, a), 0 === Object.keys(a).length ? [
                            o,
                            null
                        ] : [
                            o,
                            a
                        ]);
                    }
                }, _t.prototype.$clone = function() {
                    var t = new this.constructor;
                    if (t.$isNew = this.$isNew, this._doc && (t._doc = R(this._doc, {
                        retainDocuments: !0
                    })), this.$__) {
                        var e, r = new this.$__.constructor, n = l(Object.getOwnPropertyNames(this.$__));
                        try {
                            for(n.s(); !(e = n.n()).done;){
                                var i = e.value;
                                "activePaths" !== i && (r[i] = R(this.$__[i]));
                            }
                        } catch (t) {
                            n.e(t);
                        } finally{
                            n.f();
                        }
                        Object.assign(r.activePaths, R(c({}, this.$__.activePaths))), t.$__ = r;
                    }
                    return t;
                }, _t.prototype.$createModifiedPathsSnapshot = function() {
                    var t = new WeakMap;
                    if (!this.$isSubdocument) {
                        var e, r = l(this.$getAllSubdocs());
                        try {
                            for(r.s(); !(e = r.n()).done;){
                                var n = e.value;
                                t.set(n, n.$__.activePaths.clone());
                            }
                        } catch (t) {
                            r.e(t);
                        } finally{
                            r.f();
                        }
                    }
                    return new j(t, this.$__.activePaths.clone(), this.$__.version);
                }, _t.prototype.$restoreModifiedPathsSnapshot = function(t) {
                    if (this.$__.activePaths = t.activePaths.clone(), this.$__.version = t.version, !this.$isSubdocument) {
                        var e, r = l(this.$getAllSubdocs());
                        try {
                            for(r.s(); !(e = r.n()).done;){
                                var n = e.value;
                                t.subdocSnapshot.has(n) && (n.$__.activePaths = t.subdocSnapshot.get(n));
                            }
                        } catch (t) {
                            r.e(t);
                        } finally{
                            r.f();
                        }
                    }
                    return this;
                }, _t.prototype.$clearModifiedPaths = function() {
                    if (this.$__.activePaths.clear("modify"), this.$__.activePaths.clear("init"), this.$__.version = 0, !this.$isSubdocument) {
                        var t, e = l(this.$getAllSubdocs());
                        try {
                            for(e.s(); !(t = e.n()).done;)t.value.$clearModifiedPaths();
                        } catch (t) {
                            e.e(t);
                        } finally{
                            e.f();
                        }
                    }
                    return this;
                }, _t.prototype.$__hasOnlyPrimitiveValues = function() {
                    return !this.$__.populated && !this.$__.wasPopulated && (null == this._doc || Object.values(this._doc).every(function(t) {
                        return null == t || "object" !== d(t) || rt.isNativeObject(t) && !Array.isArray(t) || K(t, "ObjectId") || K(t, "Decimal128");
                    }));
                }, _t.VERSION_WHERE = 1, _t.VERSION_INC = 2, _t.VERSION_ALL = 3, _t.ValidationError = k, t.exports = _t;
            },
            8285: (t, e, r)=>{
                "use strict";
                var n = r(2400), i = r(2580), o = !1;
                t.exports = function() {
                    return o ? i : n;
                }, t.exports.setBrowser = function(t) {
                    o = t;
                };
            },
            7591: (t)=>{
                "use strict";
                var e = null;
                t.exports.get = function() {
                    return e;
                }, t.exports.set = function(t) {
                    e = t;
                };
            },
            4026: (t, e)=>{
                "use strict";
                e.Collection = function() {
                    throw new Error("Cannot create a collection from browser library");
                }, e.Connection = function() {
                    throw new Error("Cannot create a connection from browser library");
                }, e.BulkWriteResult = function() {};
            },
            3609: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i(t, e) {
                    for(var r = 0; r < e.length; r++){
                        var n = e[r];
                        n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, o(n.key), n);
                    }
                }
                function o(t) {
                    var e = function(t) {
                        if ("object" != n(t) || !t) return t;
                        var e = t[Symbol.toPrimitive];
                        if (void 0 !== e) {
                            var r = e.call(t, "string");
                            if ("object" != n(r)) return r;
                            throw new TypeError("@@toPrimitive must return a primitive value.");
                        }
                        return String(t);
                    }(t);
                    return "symbol" == n(e) ? e : e + "";
                }
                function a(t, e, r) {
                    return e = c(e), function(t, e) {
                        if (e && ("object" == n(e) || "function" == typeof e)) return e;
                        if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                        return s(t);
                    }(t, u() ? Reflect.construct(e, r || [], c(t).constructor) : e.apply(t, r));
                }
                function s(t) {
                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t;
                }
                function u() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
                    } catch (t) {}
                    return (u = function() {
                        return !!t;
                    })();
                }
                function c(t) {
                    return c = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                        return t.__proto__ || Object.getPrototypeOf(t);
                    }, c(t);
                }
                function f(t, e) {
                    return f = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                        return t.__proto__ = e, t;
                    }, f(t, e);
                }
                var l = r(8213), h = r(7352), p = function(t) {
                    function e(t, r, n, i, o) {
                        var u;
                        if (function(t, e) {
                            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                        }(this, e), arguments.length > 0) {
                            var c = y(r);
                            (u = a(this, e, [
                                m(null, t, r, n, b(o), c, i)
                            ])).init(t, r, n, i, o);
                        } else u = a(this, e, [
                            m()
                        ]);
                        return s(u);
                    }
                    var r, n;
                    return function(t, e) {
                        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                        t.prototype = Object.create(e && e.prototype, {
                            constructor: {
                                value: t,
                                writable: !0,
                                configurable: !0
                            }
                        }), Object.defineProperty(t, "prototype", {
                            writable: !1
                        }), e && f(t, e);
                    }(e, t), r = e, n = [
                        {
                            key: "toJSON",
                            value: function() {
                                return {
                                    stringValue: this.stringValue,
                                    valueType: this.valueType,
                                    kind: this.kind,
                                    value: this.value,
                                    path: this.path,
                                    reason: this.reason,
                                    name: this.name,
                                    message: this.message
                                };
                            }
                        },
                        {
                            key: "init",
                            value: function(t, e, r, n, i) {
                                this.stringValue = d(e), this.messageFormat = b(i), this.kind = t, this.value = e, this.path = r, this.reason = n, this.valueType = y(e);
                            }
                        },
                        {
                            key: "copy",
                            value: function(t) {
                                this.messageFormat = t.messageFormat, this.stringValue = t.stringValue, this.kind = t.kind, this.value = t.value, this.path = t.path, this.reason = t.reason, this.message = t.message, this.valueType = t.valueType;
                            }
                        },
                        {
                            key: "setModel",
                            value: function(t) {
                                this.message = m(t, this.kind, this.value, this.path, this.messageFormat, this.valueType);
                            }
                        }
                    ], i(r.prototype, n), Object.defineProperty(r, "prototype", {
                        writable: !1
                    }), r;
                }(l);
                function d(t) {
                    var e = h.inspect(t);
                    return (e = e.replace(/^'|'$/g, '"')).startsWith('"') || (e = '"' + e + '"'), e;
                }
                function y(t) {
                    if (null == t) return "" + t;
                    var e = n(t);
                    return "object" !== e || "function" != typeof t.constructor ? e : t.constructor.name;
                }
                function b(t) {
                    var e = t && t._castErrorMessage || null;
                    if ("string" == typeof e || "function" == typeof e) return e;
                }
                function m(t, e, r, n, i, o, a) {
                    if ("string" == typeof i) {
                        var s = d(r), u = i.replace("{KIND}", e).replace("{VALUE}", s).replace("{PATH}", n);
                        return null != t && (u = u.replace("{MODEL}", t.modelName)), u;
                    }
                    if ("function" == typeof i) return i(r, n, t, e);
                    var c = "Cast to " + e + " failed for value " + d(r) + (o ? " (type " + o + ")" : "") + ' at path "' + n + '"';
                    return null != t && (c += ' for model "' + t.modelName + '"'), null != a && "function" == typeof a.constructor && "AssertionError" !== a.constructor.name && "Error" !== a.constructor.name && (c += ' because of "' + a.constructor.name + '"'), c;
                }
                Object.defineProperty(p.prototype, "name", {
                    value: "CastError"
                }), t.exports = p;
            },
            1417: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
                    } catch (t) {}
                    return (i = function() {
                        return !!t;
                    })();
                }
                function o(t) {
                    return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                        return t.__proto__ || Object.getPrototypeOf(t);
                    }, o(t);
                }
                function a(t, e) {
                    return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                        return t.__proto__ = e, t;
                    }, a(t, e);
                }
                var s = function(t) {
                    function e(t) {
                        return function(t, e) {
                            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                        }(this, e), function(t, e, r) {
                            return e = o(e), function(t, e) {
                                if (e && ("object" == n(e) || "function" == typeof e)) return e;
                                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                                return function(t) {
                                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                                    return t;
                                }(t);
                            }(t, i() ? Reflect.construct(e, r || [], o(t).constructor) : e.apply(t, r));
                        }(this, e, [
                            "For your own good, using `document.save()` to update an array which was selected using an $elemMatch projection OR populated using skip, limit, query conditions, or exclusion of the _id field when the operation results in a $pop or $set of the entire array is not supported. The following path(s) would have been modified unsafely:\n  " + t.join("\n  ") + "\nUse Model.updateOne() to update these arrays instead."
                        ]);
                    }
                    var r;
                    return function(t, e) {
                        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                        t.prototype = Object.create(e && e.prototype, {
                            constructor: {
                                value: t,
                                writable: !0,
                                configurable: !0
                            }
                        }), Object.defineProperty(t, "prototype", {
                            writable: !1
                        }), e && a(t, e);
                    }(e, t), r = e, Object.defineProperty(r, "prototype", {
                        writable: !1
                    }), r;
                }(r(8213));
                Object.defineProperty(s.prototype, "name", {
                    value: "DivergentArrayError"
                }), t.exports = s;
            },
            3672: (t, e, r)=>{
                "use strict";
                var n = r(8213);
                t.exports = n, n.messages = r(766), n.Messages = n.messages, n.DocumentNotFoundError = r(1129), n.CastError = r(3609), n.ValidationError = r(6949), n.ValidatorError = r(9538), n.VersionError = r(6996), n.ParallelSaveError = r(3940), n.OverwriteModelError = r(3644), n.MissingSchemaError = r(8063), n.MongooseServerSelectionError = r(7219), n.DivergentArrayError = r(1417), n.StrictModeError = r(8995), n.StrictPopulateError = r(6801);
            },
            5537: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
                    } catch (t) {}
                    return (i = function() {
                        return !!t;
                    })();
                }
                function o(t) {
                    return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                        return t.__proto__ || Object.getPrototypeOf(t);
                    }, o(t);
                }
                function a(t, e) {
                    return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                        return t.__proto__ = e, t;
                    }, a(t, e);
                }
                var s = function(t) {
                    function e(t, r) {
                        return function(t, e) {
                            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                        }(this, e), function(t, e, r) {
                            return e = o(e), function(t, e) {
                                if (e && ("object" == n(e) || "function" == typeof e)) return e;
                                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                                return function(t) {
                                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                                    return t;
                                }(t);
                            }(t, i() ? Reflect.construct(e, r || [], o(t).constructor) : e.apply(t, r));
                        }(this, e, [
                            'Cannot create use schema for property "'.concat(t, '" because the schema has the ').concat(r, " option enabled.")
                        ]);
                    }
                    var r;
                    return function(t, e) {
                        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                        t.prototype = Object.create(e && e.prototype, {
                            constructor: {
                                value: t,
                                writable: !0,
                                configurable: !0
                            }
                        }), Object.defineProperty(t, "prototype", {
                            writable: !1
                        }), e && a(t, e);
                    }(e, t), r = e, Object.defineProperty(r, "prototype", {
                        writable: !1
                    }), r;
                }(r(8213));
                Object.defineProperty(s.prototype, "name", {
                    value: "InvalidSchemaOptionError"
                }), t.exports = s;
            },
            766: (t, e)=>{
                "use strict";
                var r = t.exports = {};
                r.DocumentNotFoundError = null, r.general = {}, r.general.default = "Validator failed for path `{PATH}` with value `{VALUE}`", r.general.required = "Path `{PATH}` is required.", r.Number = {}, r.Number.min = "Path `{PATH}` ({VALUE}) is less than minimum allowed value ({MIN}).", r.Number.max = "Path `{PATH}` ({VALUE}) is more than maximum allowed value ({MAX}).", r.Number.enum = "`{VALUE}` is not a valid enum value for path `{PATH}`.", r.Date = {}, r.Date.min = "Path `{PATH}` ({VALUE}) is before minimum allowed value ({MIN}).", r.Date.max = "Path `{PATH}` ({VALUE}) is after maximum allowed value ({MAX}).", r.String = {}, r.String.enum = "`{VALUE}` is not a valid enum value for path `{PATH}`.", r.String.match = "Path `{PATH}` is invalid ({VALUE}).", r.String.minlength = "Path `{PATH}` (`{VALUE}`) is shorter than the minimum allowed length ({MINLENGTH}).", r.String.maxlength = "Path `{PATH}` (`{VALUE}`) is longer than the maximum allowed length ({MAXLENGTH}).";
            },
            8063: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
                    } catch (t) {}
                    return (i = function() {
                        return !!t;
                    })();
                }
                function o(t) {
                    return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                        return t.__proto__ || Object.getPrototypeOf(t);
                    }, o(t);
                }
                function a(t, e) {
                    return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                        return t.__proto__ = e, t;
                    }, a(t, e);
                }
                var s = function(t) {
                    function e(t) {
                        return function(t, e) {
                            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                        }(this, e), function(t, e, r) {
                            return e = o(e), function(t, e) {
                                if (e && ("object" == n(e) || "function" == typeof e)) return e;
                                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                                return function(t) {
                                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                                    return t;
                                }(t);
                            }(t, i() ? Reflect.construct(e, r || [], o(t).constructor) : e.apply(t, r));
                        }(this, e, [
                            "Schema hasn't been registered for model \"" + t + '".\nUse mongoose.model(name, schema)'
                        ]);
                    }
                    var r;
                    return function(t, e) {
                        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                        t.prototype = Object.create(e && e.prototype, {
                            constructor: {
                                value: t,
                                writable: !0,
                                configurable: !0
                            }
                        }), Object.defineProperty(t, "prototype", {
                            writable: !1
                        }), e && a(t, e);
                    }(e, t), r = e, Object.defineProperty(r, "prototype", {
                        writable: !1
                    }), r;
                }(r(8213));
                Object.defineProperty(s.prototype, "name", {
                    value: "MissingSchemaError"
                }), t.exports = s;
            },
            8213: (t)=>{
                "use strict";
                function e(t) {
                    return e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, e(t);
                }
                function r(t) {
                    var e = "function" == typeof Map ? new Map : void 0;
                    return r = function(t) {
                        if (null === t || !function(t) {
                            try {
                                return -1 !== Function.toString.call(t).indexOf("[native code]");
                            } catch (e) {
                                return "function" == typeof t;
                            }
                        }(t)) return t;
                        if ("function" != typeof t) throw new TypeError("Super expression must either be null or a function");
                        if (void 0 !== e) {
                            if (e.has(t)) return e.get(t);
                            e.set(t, r);
                        }
                        function r() {
                            return function(t, e, r) {
                                if (n()) return Reflect.construct.apply(null, arguments);
                                var o = [
                                    null
                                ];
                                o.push.apply(o, e);
                                var a = new (t.bind.apply(t, o));
                                return r && i(a, r.prototype), a;
                            }(t, arguments, o(this).constructor);
                        }
                        return r.prototype = Object.create(t.prototype, {
                            constructor: {
                                value: r,
                                enumerable: !1,
                                writable: !0,
                                configurable: !0
                            }
                        }), i(r, t);
                    }, r(t);
                }
                function n() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
                    } catch (t) {}
                    return (n = function() {
                        return !!t;
                    })();
                }
                function i(t, e) {
                    return i = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                        return t.__proto__ = e, t;
                    }, i(t, e);
                }
                function o(t) {
                    return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                        return t.__proto__ || Object.getPrototypeOf(t);
                    }, o(t);
                }
                var a = function(t) {
                    function r() {
                        return function(t, e) {
                            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                        }(this, r), function(t, r, i) {
                            return r = o(r), function(t, r) {
                                if (r && ("object" == e(r) || "function" == typeof r)) return r;
                                if (void 0 !== r) throw new TypeError("Derived constructors may only return object or undefined");
                                return function(t) {
                                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                                    return t;
                                }(t);
                            }(t, n() ? Reflect.construct(r, i || [], o(t).constructor) : r.apply(t, i));
                        }(this, r, arguments);
                    }
                    var a;
                    return function(t, e) {
                        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                        t.prototype = Object.create(e && e.prototype, {
                            constructor: {
                                value: t,
                                writable: !0,
                                configurable: !0
                            }
                        }), Object.defineProperty(t, "prototype", {
                            writable: !1
                        }), e && i(t, e);
                    }(r, t), a = r, Object.defineProperty(a, "prototype", {
                        writable: !1
                    }), a;
                }(r(Error));
                Object.defineProperty(a.prototype, "name", {
                    value: "MongooseError"
                }), t.exports = a;
            },
            1129: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
                    } catch (t) {}
                    return (i = function() {
                        return !!t;
                    })();
                }
                function o(t) {
                    return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                        return t.__proto__ || Object.getPrototypeOf(t);
                    }, o(t);
                }
                function a(t, e) {
                    return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                        return t.__proto__ = e, t;
                    }, a(t, e);
                }
                var s = r(8213), u = r(7352), c = function(t) {
                    function e(t, r, a, c) {
                        var f;
                        !function(t, e) {
                            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                        }(this, e);
                        var l = s.messages;
                        return (f = function(t, e, r) {
                            return e = o(e), function(t, e) {
                                if (e && ("object" == n(e) || "function" == typeof e)) return e;
                                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                                return function(t) {
                                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                                    return t;
                                }(t);
                            }(t, i() ? Reflect.construct(e, r || [], o(t).constructor) : e.apply(t, r));
                        }(this, e, [
                            null != l.DocumentNotFoundError ? "function" == typeof l.DocumentNotFoundError ? l.DocumentNotFoundError(t, r) : l.DocumentNotFoundError : 'No document found for query "' + u.inspect(t) + '" on model "' + r + '"'
                        ])).result = c, f.numAffected = a, f.filter = t, f.query = t, f;
                    }
                    var r;
                    return function(t, e) {
                        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                        t.prototype = Object.create(e && e.prototype, {
                            constructor: {
                                value: t,
                                writable: !0,
                                configurable: !0
                            }
                        }), Object.defineProperty(t, "prototype", {
                            writable: !1
                        }), e && a(t, e);
                    }(e, t), r = e, Object.defineProperty(r, "prototype", {
                        writable: !1
                    }), r;
                }(s);
                Object.defineProperty(c.prototype, "name", {
                    value: "DocumentNotFoundError"
                }), t.exports = c;
            },
            3441: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
                    } catch (t) {}
                    return (i = function() {
                        return !!t;
                    })();
                }
                function o(t) {
                    return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                        return t.__proto__ || Object.getPrototypeOf(t);
                    }, o(t);
                }
                function a(t, e) {
                    return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                        return t.__proto__ = e, t;
                    }, a(t, e);
                }
                var s = function(t) {
                    function e(t, r) {
                        var a;
                        !function(t, e) {
                            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                        }(this, e);
                        var s = Array.isArray(r) ? "array" : "primitive value";
                        return (a = function(t, e, r) {
                            return e = o(e), function(t, e) {
                                if (e && ("object" == n(e) || "function" == typeof e)) return e;
                                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                                return function(t) {
                                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                                    return t;
                                }(t);
                            }(t, i() ? Reflect.construct(e, r || [], o(t).constructor) : e.apply(t, r));
                        }(this, e, [
                            "Tried to set nested object field `" + t + "` to ".concat(s, " `") + r + "`"
                        ])).path = t, a;
                    }
                    var r;
                    return function(t, e) {
                        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                        t.prototype = Object.create(e && e.prototype, {
                            constructor: {
                                value: t,
                                writable: !0,
                                configurable: !0
                            }
                        }), Object.defineProperty(t, "prototype", {
                            writable: !1
                        }), e && a(t, e);
                    }(e, t), r = e, Object.defineProperty(r, "prototype", {
                        writable: !1
                    }), r;
                }(r(8213));
                Object.defineProperty(s.prototype, "name", {
                    value: "ObjectExpectedError"
                }), t.exports = s;
            },
            1350: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
                    } catch (t) {}
                    return (i = function() {
                        return !!t;
                    })();
                }
                function o(t) {
                    return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                        return t.__proto__ || Object.getPrototypeOf(t);
                    }, o(t);
                }
                function a(t, e) {
                    return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                        return t.__proto__ = e, t;
                    }, a(t, e);
                }
                var s = function(t) {
                    function e(t, r, a) {
                        return function(t, e) {
                            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                        }(this, e), function(t, e, r) {
                            return e = o(e), function(t, e) {
                                if (e && ("object" == n(e) || "function" == typeof e)) return e;
                                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                                return function(t) {
                                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                                    return t;
                                }(t);
                            }(t, i() ? Reflect.construct(e, r || [], o(t).constructor) : e.apply(t, r));
                        }(this, e, [
                            'Parameter "' + r + '" to ' + a + '() must be an object, got "' + t.toString() + '" (type ' + n(t) + ")"
                        ]);
                    }
                    var r;
                    return function(t, e) {
                        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                        t.prototype = Object.create(e && e.prototype, {
                            constructor: {
                                value: t,
                                writable: !0,
                                configurable: !0
                            }
                        }), Object.defineProperty(t, "prototype", {
                            writable: !1
                        }), e && a(t, e);
                    }(e, t), r = e, Object.defineProperty(r, "prototype", {
                        writable: !1
                    }), r;
                }(r(8213));
                Object.defineProperty(s.prototype, "name", {
                    value: "ObjectParameterError"
                }), t.exports = s;
            },
            3644: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
                    } catch (t) {}
                    return (i = function() {
                        return !!t;
                    })();
                }
                function o(t) {
                    return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                        return t.__proto__ || Object.getPrototypeOf(t);
                    }, o(t);
                }
                function a(t, e) {
                    return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                        return t.__proto__ = e, t;
                    }, a(t, e);
                }
                var s = function(t) {
                    function e(t) {
                        return function(t, e) {
                            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                        }(this, e), function(t, e, r) {
                            return e = o(e), function(t, e) {
                                if (e && ("object" == n(e) || "function" == typeof e)) return e;
                                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                                return function(t) {
                                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                                    return t;
                                }(t);
                            }(t, i() ? Reflect.construct(e, r || [], o(t).constructor) : e.apply(t, r));
                        }(this, e, [
                            "Cannot overwrite `" + t + "` model once compiled."
                        ]);
                    }
                    var r;
                    return function(t, e) {
                        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                        t.prototype = Object.create(e && e.prototype, {
                            constructor: {
                                value: t,
                                writable: !0,
                                configurable: !0
                            }
                        }), Object.defineProperty(t, "prototype", {
                            writable: !1
                        }), e && a(t, e);
                    }(e, t), r = e, Object.defineProperty(r, "prototype", {
                        writable: !1
                    }), r;
                }(r(8213));
                Object.defineProperty(s.prototype, "name", {
                    value: "OverwriteModelError"
                }), t.exports = s;
            },
            3940: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
                    } catch (t) {}
                    return (i = function() {
                        return !!t;
                    })();
                }
                function o(t) {
                    return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                        return t.__proto__ || Object.getPrototypeOf(t);
                    }, o(t);
                }
                function a(t, e) {
                    return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                        return t.__proto__ = e, t;
                    }, a(t, e);
                }
                var s = function(t) {
                    function e(t) {
                        return function(t, e) {
                            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                        }(this, e), function(t, e, r) {
                            return e = o(e), function(t, e) {
                                if (e && ("object" == n(e) || "function" == typeof e)) return e;
                                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                                return function(t) {
                                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                                    return t;
                                }(t);
                            }(t, i() ? Reflect.construct(e, r || [], o(t).constructor) : e.apply(t, r));
                        }(this, e, [
                            "Can't save() the same doc multiple times in parallel. Document: " + t._doc._id
                        ]);
                    }
                    var r;
                    return function(t, e) {
                        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                        t.prototype = Object.create(e && e.prototype, {
                            constructor: {
                                value: t,
                                writable: !0,
                                configurable: !0
                            }
                        }), Object.defineProperty(t, "prototype", {
                            writable: !1
                        }), e && a(t, e);
                    }(e, t), r = e, Object.defineProperty(r, "prototype", {
                        writable: !1
                    }), r;
                }(r(8213));
                Object.defineProperty(s.prototype, "name", {
                    value: "ParallelSaveError"
                }), t.exports = s;
            },
            1635: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
                    } catch (t) {}
                    return (i = function() {
                        return !!t;
                    })();
                }
                function o(t) {
                    return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                        return t.__proto__ || Object.getPrototypeOf(t);
                    }, o(t);
                }
                function a(t, e) {
                    return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                        return t.__proto__ = e, t;
                    }, a(t, e);
                }
                var s = function(t) {
                    function e(t) {
                        return function(t, e) {
                            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                        }(this, e), function(t, e, r) {
                            return e = o(e), function(t, e) {
                                if (e && ("object" == n(e) || "function" == typeof e)) return e;
                                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                                return function(t) {
                                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                                    return t;
                                }(t);
                            }(t, i() ? Reflect.construct(e, r || [], o(t).constructor) : e.apply(t, r));
                        }(this, e, [
                            "Can't validate() the same doc multiple times in parallel. Document: " + t._doc._id
                        ]);
                    }
                    var r;
                    return function(t, e) {
                        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                        t.prototype = Object.create(e && e.prototype, {
                            constructor: {
                                value: t,
                                writable: !0,
                                configurable: !0
                            }
                        }), Object.defineProperty(t, "prototype", {
                            writable: !1
                        }), e && a(t, e);
                    }(e, t), r = e, Object.defineProperty(r, "prototype", {
                        writable: !1
                    }), r;
                }(r(8213));
                Object.defineProperty(s.prototype, "name", {
                    value: "ParallelValidateError"
                }), t.exports = s;
            },
            7219: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i(t, e) {
                    for(var r = 0; r < e.length; r++){
                        var n = e[r];
                        n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, o(n.key), n);
                    }
                }
                function o(t) {
                    var e = function(t) {
                        if ("object" != n(t) || !t) return t;
                        var e = t[Symbol.toPrimitive];
                        if (void 0 !== e) {
                            var r = e.call(t, "string");
                            if ("object" != n(r)) return r;
                            throw new TypeError("@@toPrimitive must return a primitive value.");
                        }
                        return String(t);
                    }(t);
                    return "symbol" == n(e) ? e : e + "";
                }
                function a() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
                    } catch (t) {}
                    return (a = function() {
                        return !!t;
                    })();
                }
                function s(t) {
                    return s = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                        return t.__proto__ || Object.getPrototypeOf(t);
                    }, s(t);
                }
                function u(t, e) {
                    return u = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                        return t.__proto__ = e, t;
                    }, u(t, e);
                }
                var c = r(8213), f = r(2900), l = r(4070), h = r(5497), p = function(t) {
                    function e() {
                        return function(t, e) {
                            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                        }(this, e), function(t, e, r) {
                            return e = s(e), function(t, e) {
                                if (e && ("object" == n(e) || "function" == typeof e)) return e;
                                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                                return function(t) {
                                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                                    return t;
                                }(t);
                            }(t, a() ? Reflect.construct(e, r || [], s(t).constructor) : e.apply(t, r));
                        }(this, e, arguments);
                    }
                    var r, o;
                    return function(t, e) {
                        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                        t.prototype = Object.create(e && e.prototype, {
                            constructor: {
                                value: t,
                                writable: !0,
                                configurable: !0
                            }
                        }), Object.defineProperty(t, "prototype", {
                            writable: !1
                        }), e && u(t, e);
                    }(e, t), r = e, o = [
                        {
                            key: "assimilateError",
                            value: function(t) {
                                var e = t.reason, r = l(e) && f(e) && -1 === t.message.indexOf("bad auth") && -1 === t.message.indexOf("Authentication failed");
                                for(var n in r ? this.message = "Could not connect to any servers in your MongoDB Atlas cluster. One common reason is that you're trying to access the database from an IP that isn't whitelisted. Make sure your current IP address is on your Atlas cluster's IP whitelist: https://www.mongodb.com/docs/atlas/security-whitelist/" : h(e) ? this.message = "Mongoose is connecting with SSL enabled, but the server is not accepting SSL connections. Please ensure that the MongoDB server you are connecting to is configured to accept SSL connections. Learn more: https://mongoosejs.com/docs/tutorials/ssl.html" : this.message = t.message, t)"name" !== n && (this[n] = t[n]);
                                return this;
                            }
                        }
                    ], i(r.prototype, o), Object.defineProperty(r, "prototype", {
                        writable: !1
                    }), r;
                }(c);
                Object.defineProperty(p.prototype, "name", {
                    value: "MongooseServerSelectionError"
                }), t.exports = p;
            },
            8995: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
                    } catch (t) {}
                    return (i = function() {
                        return !!t;
                    })();
                }
                function o(t) {
                    return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                        return t.__proto__ || Object.getPrototypeOf(t);
                    }, o(t);
                }
                function a(t, e) {
                    return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                        return t.__proto__ = e, t;
                    }, a(t, e);
                }
                var s = function(t) {
                    function e(t, r, a) {
                        var s;
                        return function(t, e) {
                            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                        }(this, e), (s = function(t, e, r) {
                            return e = o(e), function(t, e) {
                                if (e && ("object" == n(e) || "function" == typeof e)) return e;
                                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                                return function(t) {
                                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                                    return t;
                                }(t);
                            }(t, i() ? Reflect.construct(e, r || [], o(t).constructor) : e.apply(t, r));
                        }(this, e, [
                            r = r || "Field `" + t + "` is not in schema and strict mode is set to throw."
                        ])).isImmutableError = !!a, s.path = t, s;
                    }
                    var r;
                    return function(t, e) {
                        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                        t.prototype = Object.create(e && e.prototype, {
                            constructor: {
                                value: t,
                                writable: !0,
                                configurable: !0
                            }
                        }), Object.defineProperty(t, "prototype", {
                            writable: !1
                        }), e && a(t, e);
                    }(e, t), r = e, Object.defineProperty(r, "prototype", {
                        writable: !1
                    }), r;
                }(r(8213));
                Object.defineProperty(s.prototype, "name", {
                    value: "StrictModeError"
                }), t.exports = s;
            },
            6801: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
                    } catch (t) {}
                    return (i = function() {
                        return !!t;
                    })();
                }
                function o(t) {
                    return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                        return t.__proto__ || Object.getPrototypeOf(t);
                    }, o(t);
                }
                function a(t, e) {
                    return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                        return t.__proto__ = e, t;
                    }, a(t, e);
                }
                var s = function(t) {
                    function e(t, r) {
                        var a;
                        return function(t, e) {
                            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                        }(this, e), (a = function(t, e, r) {
                            return e = o(e), function(t, e) {
                                if (e && ("object" == n(e) || "function" == typeof e)) return e;
                                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                                return function(t) {
                                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                                    return t;
                                }(t);
                            }(t, i() ? Reflect.construct(e, r || [], o(t).constructor) : e.apply(t, r));
                        }(this, e, [
                            r = r || "Cannot populate path `" + t + "` because it is not in your schema. Set the `strictPopulate` option to false to override."
                        ])).path = t, a;
                    }
                    var r;
                    return function(t, e) {
                        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                        t.prototype = Object.create(e && e.prototype, {
                            constructor: {
                                value: t,
                                writable: !0,
                                configurable: !0
                            }
                        }), Object.defineProperty(t, "prototype", {
                            writable: !1
                        }), e && a(t, e);
                    }(e, t), r = e, Object.defineProperty(r, "prototype", {
                        writable: !1
                    }), r;
                }(r(8213));
                Object.defineProperty(s.prototype, "name", {
                    value: "StrictPopulateError"
                }), t.exports = s;
            },
            6949: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i(t, e) {
                    for(var r = 0; r < e.length; r++){
                        var n = e[r];
                        n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, o(n.key), n);
                    }
                }
                function o(t) {
                    var e = function(t) {
                        if ("object" != n(t) || !t) return t;
                        var e = t[Symbol.toPrimitive];
                        if (void 0 !== e) {
                            var r = e.call(t, "string");
                            if ("object" != n(r)) return r;
                            throw new TypeError("@@toPrimitive must return a primitive value.");
                        }
                        return String(t);
                    }(t);
                    return "symbol" == n(e) ? e : e + "";
                }
                function a() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
                    } catch (t) {}
                    return (a = function() {
                        return !!t;
                    })();
                }
                function s(t) {
                    return s = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                        return t.__proto__ || Object.getPrototypeOf(t);
                    }, s(t);
                }
                function u(t, e) {
                    return u = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                        return t.__proto__ = e, t;
                    }, u(t, e);
                }
                var c = r(8213), f = r(5879), l = r(7352), h = r(1875), p = function(t) {
                    function e(t) {
                        var r, i;
                        return function(t, e) {
                            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                        }(this, e), (r = function(t, e, r) {
                            return e = s(e), function(t, e) {
                                if (e && ("object" == n(e) || "function" == typeof e)) return e;
                                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                                return function(t) {
                                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                                    return t;
                                }(t);
                            }(t, a() ? Reflect.construct(e, r || [], s(t).constructor) : e.apply(t, r));
                        }(this, e, [
                            i = "model" === f(t) ? t.constructor.modelName + " validation failed" : "Validation failed"
                        ])).errors = {}, r._message = i, t && (t.$errors = r.errors), r;
                    }
                    var r, o;
                    return function(t, e) {
                        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                        t.prototype = Object.create(e && e.prototype, {
                            constructor: {
                                value: t,
                                writable: !0,
                                configurable: !0
                            }
                        }), Object.defineProperty(t, "prototype", {
                            writable: !1
                        }), e && u(t, e);
                    }(e, t), r = e, o = [
                        {
                            key: "toString",
                            value: function() {
                                return this.name + ": " + h(this);
                            }
                        },
                        {
                            key: "inspect",
                            value: function() {
                                return Object.assign(new Error(this.message), this);
                            }
                        },
                        {
                            key: "addError",
                            value: function(t, r) {
                                if (r instanceof e) for(var n = r.errors, i = 0, o = Object.keys(n); i < o.length; i++){
                                    var a = o[i];
                                    this.addError("".concat(t, ".").concat(a), n[a]);
                                }
                                else this.errors[t] = r, this.message = this._message + ": " + h(this);
                            }
                        }
                    ], i(r.prototype, o), Object.defineProperty(r, "prototype", {
                        writable: !1
                    }), r;
                }(c);
                l.inspect.custom && (p.prototype[l.inspect.custom] = p.prototype.inspect), Object.defineProperty(p.prototype, "toJSON", {
                    enumerable: !1,
                    writable: !1,
                    configurable: !0,
                    value: function() {
                        return Object.assign({}, this, {
                            name: this.name,
                            message: this.message
                        });
                    }
                }), Object.defineProperty(p.prototype, "name", {
                    value: "ValidationError"
                }), t.exports = p;
            },
            9538: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i(t, e) {
                    for(var r = 0; r < e.length; r++){
                        var n = e[r];
                        n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, o(n.key), n);
                    }
                }
                function o(t) {
                    var e = function(t) {
                        if ("object" != n(t) || !t) return t;
                        var e = t[Symbol.toPrimitive];
                        if (void 0 !== e) {
                            var r = e.call(t, "string");
                            if ("object" != n(r)) return r;
                            throw new TypeError("@@toPrimitive must return a primitive value.");
                        }
                        return String(t);
                    }(t);
                    return "symbol" == n(e) ? e : e + "";
                }
                function a() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
                    } catch (t) {}
                    return (a = function() {
                        return !!t;
                    })();
                }
                function s(t) {
                    return s = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                        return t.__proto__ || Object.getPrototypeOf(t);
                    }, s(t);
                }
                function u(t, e) {
                    return u = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                        return t.__proto__ = e, t;
                    }, u(t, e);
                }
                var c = r(8213), f = function(t) {
                    function e(t, r) {
                        var i;
                        !function(t, e) {
                            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                        }(this, e);
                        var o = t.message;
                        o || (o = c.messages.general.default);
                        var u = l(o, t, r);
                        return i = function(t, e, r) {
                            return e = s(e), function(t, e) {
                                if (e && ("object" == n(e) || "function" == typeof e)) return e;
                                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                                return function(t) {
                                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                                    return t;
                                }(t);
                            }(t, a() ? Reflect.construct(e, r || [], s(t).constructor) : e.apply(t, r));
                        }(this, e, [
                            u
                        ]), t = Object.assign({}, t, {
                            message: u
                        }), i.properties = t, i.kind = t.type, i.path = t.path, i.value = t.value, i.reason = t.reason, i;
                    }
                    var r, o;
                    return function(t, e) {
                        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                        t.prototype = Object.create(e && e.prototype, {
                            constructor: {
                                value: t,
                                writable: !0,
                                configurable: !0
                            }
                        }), Object.defineProperty(t, "prototype", {
                            writable: !1
                        }), e && u(t, e);
                    }(e, t), r = e, o = [
                        {
                            key: "toString",
                            value: function() {
                                return this.message;
                            }
                        },
                        {
                            key: "toJSON",
                            value: function() {
                                return Object.assign({
                                    name: this.name,
                                    message: this.message
                                }, this);
                            }
                        }
                    ], i(r.prototype, o), Object.defineProperty(r, "prototype", {
                        writable: !1
                    }), r;
                }(c);
                function l(t, e, r) {
                    if ("function" == typeof t) return t(e, r);
                    for(var n = 0, i = Object.keys(e); n < i.length; n++){
                        var o = i[n];
                        "message" !== o && (t = t.replace("{" + o.toUpperCase() + "}", e[o]));
                    }
                    return t;
                }
                Object.defineProperty(f.prototype, "name", {
                    value: "ValidatorError"
                }), Object.defineProperty(f.prototype, "properties", {
                    enumerable: !1,
                    writable: !0,
                    value: null
                }), f.prototype.formatMessage = l, t.exports = f;
            },
            6996: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
                    } catch (t) {}
                    return (i = function() {
                        return !!t;
                    })();
                }
                function o(t) {
                    return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                        return t.__proto__ || Object.getPrototypeOf(t);
                    }, o(t);
                }
                function a(t, e) {
                    return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                        return t.__proto__ = e, t;
                    }, a(t, e);
                }
                var s = function(t) {
                    function e(t, r, a) {
                        var s;
                        !function(t, e) {
                            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                        }(this, e);
                        var u = a.join(", ");
                        return (s = function(t, e, r) {
                            return e = o(e), function(t, e) {
                                if (e && ("object" == n(e) || "function" == typeof e)) return e;
                                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                                return function(t) {
                                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                                    return t;
                                }(t);
                            }(t, i() ? Reflect.construct(e, r || [], o(t).constructor) : e.apply(t, r));
                        }(this, e, [
                            'No matching document found for id "' + t._doc._id + '" version ' + r + ' modifiedPaths "' + u + '"'
                        ])).version = r, s.modifiedPaths = a, s;
                    }
                    var r;
                    return function(t, e) {
                        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                        t.prototype = Object.create(e && e.prototype, {
                            constructor: {
                                value: t,
                                writable: !0,
                                configurable: !0
                            }
                        }), Object.defineProperty(t, "prototype", {
                            writable: !1
                        }), e && a(t, e);
                    }(e, t), r = e, Object.defineProperty(r, "prototype", {
                        writable: !1
                    }), r;
                }(r(8213));
                Object.defineProperty(s.prototype, "name", {
                    value: "VersionError"
                }), t.exports = s;
            },
            2073: (t)=>{
                "use strict";
                t.exports = function t(e) {
                    if (!Array.isArray(e)) return {
                        min: 0,
                        max: 0,
                        containsNonArrayItem: !0
                    };
                    if (0 === e.length) return {
                        min: 1,
                        max: 1,
                        containsNonArrayItem: !1
                    };
                    if (1 === e.length && !Array.isArray(e[0])) return {
                        min: 1,
                        max: 1,
                        containsNonArrayItem: !1
                    };
                    for(var r = t(e[0]), n = 1; n < e.length; ++n){
                        var i = t(e[n]);
                        i.min < r.min && (r.min = i.min), i.max > r.max && (r.max = i.max), r.containsNonArrayItem = r.containsNonArrayItem || i.containsNonArrayItem;
                    }
                    return r.min = r.min + 1, r.max = r.max + 1, r;
                };
            },
            4450: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                var i = r(9639), o = r(5549), a = r(2793), s = r(2497), u = r(9696), c = r(3305), f = r(1243).isMongooseArray, l = r(608), h = r(2789), p = r(7930), d = r(7291).trustedSymbol, y = r(3633);
                function b(t, e, r) {
                    if (null == t) return t;
                    if (c(t, "Double")) return new y.Double(t.value);
                    if ("number" == typeof t || "string" == typeof t || "boolean" == typeof t || "bigint" == typeof t) return t;
                    if (Array.isArray(t)) return function(t, e) {
                        var r = 0, n = t.length, i = new Array(n);
                        for(r = 0; r < n; ++r)i[r] = b(t[r], e, !0);
                        return i;
                    }(f(t) ? t.__array : t, e);
                    if (s(t)) {
                        if (e && e.retainDocuments && null != t.$__) {
                            var a = t.$clone();
                            return null != t.__index && (a.__index = t.__index), null != t.__parentArray && (a.__parentArray = t.__parentArray), a.$__parent = t.$__parent, a;
                        }
                        var d, v = t.$isSingleNested;
                        if (h(t) && null != t.$__ && null != t._doc) return t._doc;
                        if (d = e && e.json && "function" == typeof t.toJSON ? t.toJSON(e) : t.toObject(e), e && e.minimize && !t.constructor.$__required && v && 0 === Object.keys(d).length) return;
                        return d;
                    }
                    var g = t.constructor;
                    if (g) switch(u(g)){
                        case "Object":
                            return m(t, e, r);
                        case "Date":
                            return new g(+t);
                        case "RegExp":
                            return function(t) {
                                var e = new RegExp(t.source, t.flags);
                                return e.lastIndex !== t.lastIndex && (e.lastIndex = t.lastIndex), e;
                            }(t);
                    }
                    return c(t, "ObjectId") ? e && e.flattenObjectIds ? t.toJSON() : new o(t.id) : c(t, "Decimal128") ? e && e.flattenDecimals ? t.toJSON() : i.fromString(t.toString()) : !g && l(t) ? m(t, e, r) : "object" === n(t) && t[p.schemaTypeSymbol] ? t.clone() : e && e.bson && "function" == typeof t.toBSON ? t : "function" == typeof t.valueOf ? t.valueOf() : m(t, e, r);
                }
                function m(t, e, r) {
                    var n, i = e && e.minimize, o = e && e.omitUndefined, s = e && e._seen, u = {};
                    if (s && s.has(t)) return s.get(t);
                    s && s.set(t, u), d in t && !1 !== (null == e ? void 0 : e.copyTrustedSymbol) && (u[d] = t[d]);
                    for(var c = Object.keys(t), f = c.length, l = 0; l < f; ++l){
                        var h = c[l];
                        if (!a.has(h)) {
                            var p = b(t[h], e, !1);
                            !1 !== i && !o || void 0 !== p ? !0 === i && void 0 === p || (n || (n = !0), u[h] = p) : delete u[h];
                        }
                    }
                    return i && !r ? n && u : u;
                }
                t.exports = b;
            },
            7430: (t, e, r)=>{
                "use strict";
                var n = r(5832).Buffer;
                function i(t) {
                    return i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, i(t);
                }
                var o = r(3633).Binary, a = r(3305), s = r(2497);
                r(3672), r(7352);
                function u(t) {
                    return t && "object" === i(t) && !(t instanceof Date) && !a(t, "ObjectId") && (!Array.isArray(t) || 0 !== t.length) && !(t instanceof n) && !a(t, "Decimal128") && !(t instanceof o);
                }
                e.B = function t(e, r, i, o) {
                    var a, c = (a = e && s(e) && !n.isBuffer(e) ? Object.keys(e.toObject({
                        transform: !1,
                        virtuals: !1
                    }) || {}) : Object.keys(e || {})).length, f = {};
                    r = r ? r + "." : "";
                    for(var l = 0; l < c; ++l){
                        var h = a[l], p = e[h];
                        f[r + h] = p;
                        var d = o && o.path && o.path(r + h), y = o && o.nested && o.nested[r + h];
                        if (!d || "Mixed" !== d.instance) {
                            if (u(p)) {
                                if (i && i.skipArrays && Array.isArray(p)) continue;
                                var b = t(p, r + h, i, o);
                                for(var m in b)f[m] = b[m];
                                Array.isArray(p) && (f[r + h] = p);
                            }
                            if (y) for(var v = 0, g = Object.keys(o.paths); v < g.length; v++){
                                var _ = g[v];
                                _.startsWith(r + h + ".") && !f.hasOwnProperty(_) && (f[_] = void 0);
                            }
                        }
                    }
                    return f;
                };
            },
            4327: (t)=>{
                "use strict";
                t.exports = function(t, e, r, n) {
                    return r ? n ? {
                        bsonType: e
                    } : {
                        bsonType: [
                            e,
                            "null"
                        ]
                    } : n ? {
                        type: t
                    } : {
                        type: [
                            t,
                            "null"
                        ]
                    };
                };
            },
            2696: (t, e, r)=>{
                "use strict";
                var n = r(3305);
                t.exports = function(t, e) {
                    return "string" == typeof t && "string" == typeof e || "number" == typeof t && "number" == typeof e ? t === e : !(!n(t, "ObjectId") || !n(e, "ObjectId")) && t.toString() === e.toString();
                };
            },
            3916: (t)=>{
                "use strict";
                t.exports = function(t, e, r, n, i) {
                    var o = Object.keys(t).reduce(function(t, r) {
                        return t || r.startsWith(e + ".");
                    }, !1), a = e + "." + r.options.discriminatorKey;
                    o || 1 !== i.length || i[0] !== a || n.splice(n.indexOf(a), 1);
                };
            },
            7910: (t, e, r)=>{
                "use strict";
                var n = r(8677);
                t.exports = function(t, e, r) {
                    var i = t.schema.options.discriminatorKey, o = null != e && e[i];
                    if (null == o && (o = r), t.discriminators && null != o) {
                        if (t.discriminators[o]) t = t.discriminators[o];
                        else {
                            var a = n(t.discriminators, o);
                            a && (t = a);
                        }
                    }
                    return t;
                };
            },
            8677: (t, e, r)=>{
                "use strict";
                var n = r(2696);
                t.exports = function(t, e) {
                    if (null == t) return null;
                    for(var r = 0, i = Object.keys(t); r < i.length; r++){
                        var o = t[i[r]];
                        if (o.schema && o.schema.discriminatorMapping && n(o.schema.discriminatorMapping.value, e)) return o;
                    }
                    return null;
                };
            },
            7425: (t, e, r)=>{
                "use strict";
                var n = r(2696);
                t.exports = function(t, e) {
                    if (null == t || null == t.discriminators) return null;
                    for(var r = 0, i = Object.keys(t.discriminators); r < i.length; r++){
                        var o = i[r], a = t.discriminators[o];
                        if (null != a.discriminatorMapping && n(a.discriminatorMapping.value, e)) return a;
                    }
                    return null;
                };
            },
            4301: (t, e, r)=>{
                "use strict";
                var n = r(9539), i = r(2793), o = r(3305), a = r(5549), s = r(608);
                t.exports = function t(e, r, u, c) {
                    var f, l = Object.keys(r), h = 0, p = l.length;
                    if (u = u || "", !(c = c || new WeakSet).has(r)) {
                        for(c.add(r); h < p;)if (f = l[h++], (u || "discriminators" !== f && "base" !== f && "_applyDiscriminators" !== f && "_userProvidedOptions" !== f && "options" !== f && "tree" !== f) && !("tree" === u && null != r && r.instanceOfSchema || i.has(f))) {
                            if (null == e[f]) e[f] = r[f];
                            else if (s(r[f])) {
                                if (s(e[f]) || (e[f] = {}), null != r[f]) {
                                    if (r[f].$isSingleNested && e[f].$isMongooseDocumentArray || r[f].$isMongooseDocumentArray && e[f].$isSingleNested || r[f].$isMongooseDocumentArrayElement && e[f].$isMongooseDocumentArrayElement) continue;
                                    if (r[f].instanceOfSchema) {
                                        e[f].instanceOfSchema ? n(e[f], r[f].clone(), !0) : e[f] = r[f].clone();
                                        continue;
                                    }
                                    if (o(r[f], "ObjectId")) {
                                        e[f] = new a(r[f]);
                                        continue;
                                    }
                                }
                                t(e[f], r[f], u ? u + "." + f : f, c);
                            }
                        }
                        null != r && r.instanceOfSchema && (e.tree = Object.assign({}, r.tree, e.tree));
                    }
                };
            },
            5335: (t, e, r)=>{
                "use strict";
                var n = r(1091);
                function i(t, e, r) {
                    t.$__.activePaths.default(e), !r && t.$isSubdocument && t.$isSingleNested && null != t.$parent() && t.$parent().$__.activePaths.default(t.$__pathRelativeToParent(e));
                }
                t.exports = function(t, e, r, o, a, s, u) {
                    for(var c = Object.keys(t.$__schema.paths), f = c.length, l = u && u.skipParentChangeTracking, h = 0; h < f; ++h){
                        var p = void 0, d = "", y = c[h];
                        if ("_id" !== y || !t.$__.skipId) {
                            var b = t.$__schema.paths[y], m = b.splitPath(), v = m.length;
                            if ("$*" !== m[v - 1]) for(var g = !1, _ = t._doc, w = 0; w < v && null != _; ++w){
                                var S = m[w];
                                if (d += (d.length ? "." : "") + S, !0 === r) {
                                    if (d in e) break;
                                } else if (!1 === r && e && !g) {
                                    var O = b.$isSingleNested || b.$isMongooseDocumentArray;
                                    if (d in e && !n(e[d]) || w === v - 1 && O && null != o && o[d]) g = !0;
                                    else if (null != o && !o[d]) break;
                                }
                                if (w === v - 1) {
                                    if (void 0 !== _[S]) break;
                                    if (null != a) {
                                        if ("function" == typeof b.defaultValue) {
                                            if (!b.defaultValue.$runBeforeSetters && a) break;
                                            if (b.defaultValue.$runBeforeSetters && !a) break;
                                        } else if (!a) continue;
                                    }
                                    if (s && s[d]) break;
                                    if (e && null !== r) {
                                        if (!0 === r) {
                                            if (y in e) continue;
                                            try {
                                                p = b.getDefault(t, !1);
                                            } catch (e) {
                                                t.invalidate(y, e);
                                                break;
                                            }
                                            void 0 !== p && (_[S] = p, i(t, y, l));
                                        } else if (g) {
                                            try {
                                                p = b.getDefault(t, !1);
                                            } catch (e) {
                                                t.invalidate(y, e);
                                                break;
                                            }
                                            void 0 !== p && (_[S] = p, i(t, y, l));
                                        }
                                    } else {
                                        try {
                                            p = b.getDefault(t, !1);
                                        } catch (e) {
                                            t.invalidate(y, e);
                                            break;
                                        }
                                        void 0 !== p && (_[S] = p, i(t, y, l));
                                    }
                                } else _ = _[S];
                            }
                        }
                    }
                };
            },
            4473: (t)=>{
                "use strict";
                function e(t, r) {
                    var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : new Set;
                    if (n.has(t)) throw new Error("Infinite subdocument loop: subdoc with _id " + t._id + " is a parent of itself");
                    var i = t.$parent(), o = t.$__pathRelativeToParent(void 0, !1) + "." + r;
                    i.$__.activePaths.clearPath(o), i.$isSubdocument && e(i, o, n);
                }
                t.exports = function(t, r, n) {
                    var i = (n = n || {}).skipDocArrays, o = 0;
                    if (!t) return o;
                    for(var a = 0, s = Object.keys(t.$__.activePaths.getStatePaths("modify")); a < s.length; a++){
                        var u = s[a];
                        if (i) {
                            var c = t.$__schema.path(u);
                            if (c && c.$isMongooseDocumentArray) continue;
                        }
                        u.startsWith(r + ".") && (t.$__.activePaths.clearPath(u), ++o, t.$isSubdocument && e(t, u));
                    }
                    return o;
                };
            },
            2068: (t, e, r)=>{
                "use strict";
                var n, i = r(4450), o = r(7930).documentSchemaSymbol, a = r(3303)._, s = r(8768), u = r(7930).getSymbol, c = r(7930).scopeSymbol, f = s.isPOJO;
                e.w = p, e.X = d;
                var l = Object.freeze({
                    minimize: !0,
                    virtuals: !1,
                    getters: !1,
                    transform: !1
                }), h = Object.freeze({
                    noDottedPath: !0
                });
                function p(t, e, i, o) {
                    n = n || r(2400);
                    for(var a = o.typeKey, s = 0, u = Object.keys(t); s < u.length; s++){
                        var c = u[s], l = t[c];
                        d({
                            prop: c,
                            subprops: f(l) && Object.keys(l).length > 0 && (!l[a] || "type" === a && f(l.type) && l.type.type) ? l : null,
                            prototype: e,
                            prefix: i,
                            options: o
                        });
                    }
                }
                function d(t) {
                    var e = t.prop, s = t.subprops, f = t.prototype, d = t.prefix, y = t.options;
                    n = n || r(2400);
                    var b = (d ? d + "." : "") + e, m = (d = d || "") ? Object.freeze({}) : h;
                    s ? Object.defineProperty(f, e, {
                        enumerable: !0,
                        configurable: !0,
                        get: function() {
                            var t, e, r = this;
                            if (this.$__.getters || (this.$__.getters = {}), !this.$__.getters[b]) {
                                var a = Object.create(n.prototype, (t = this, e = {}, Object.getOwnPropertyNames(t).forEach(function(r) {
                                    -1 === [
                                        "isNew",
                                        "$__",
                                        "$errors",
                                        "errors",
                                        "_doc",
                                        "$locals",
                                        "$op",
                                        "__parentArray",
                                        "__index",
                                        "$isDocumentArrayElement"
                                    ].indexOf(r) || (e[r] = Object.getOwnPropertyDescriptor(t, r), e[r].enumerable = !1);
                                }), e));
                                d || (a.$__[c] = this), a.$__.nestedPath = b, Object.defineProperty(a, "schema", {
                                    enumerable: !1,
                                    configurable: !0,
                                    writable: !1,
                                    value: f.schema
                                }), Object.defineProperty(a, "$__schema", {
                                    enumerable: !1,
                                    configurable: !0,
                                    writable: !1,
                                    value: f.schema
                                }), Object.defineProperty(a, o, {
                                    enumerable: !1,
                                    configurable: !0,
                                    writable: !1,
                                    value: f.schema
                                }), Object.defineProperty(a, "toObject", {
                                    enumerable: !1,
                                    configurable: !0,
                                    writable: !1,
                                    value: function() {
                                        return i(r.get(b, null, {
                                            virtuals: this && this.schema && this.schema.options && this.schema.options.toObject && this.schema.options.toObject.virtuals || null
                                        }));
                                    }
                                }), Object.defineProperty(a, "$__get", {
                                    enumerable: !1,
                                    configurable: !0,
                                    writable: !1,
                                    value: function() {
                                        return r.get(b, null, {
                                            virtuals: this && this.schema && this.schema.options && this.schema.options.toObject && this.schema.options.toObject.virtuals || null
                                        });
                                    }
                                }), Object.defineProperty(a, "toJSON", {
                                    enumerable: !1,
                                    configurable: !0,
                                    writable: !1,
                                    value: function() {
                                        return r.get(b, null, {
                                            virtuals: this && this.schema && this.schema.options && this.schema.options.toJSON && this.schema.options.toJSON.virtuals || null
                                        });
                                    }
                                }), Object.defineProperty(a, "$__isNested", {
                                    enumerable: !1,
                                    configurable: !0,
                                    writable: !1,
                                    value: !0
                                }), Object.defineProperty(a, "$isEmpty", {
                                    enumerable: !1,
                                    configurable: !0,
                                    writable: !1,
                                    value: function() {
                                        return 0 === Object.keys(this.get(b, null, l) || {}).length;
                                    }
                                }), Object.defineProperty(a, "$__parent", {
                                    enumerable: !1,
                                    configurable: !0,
                                    writable: !1,
                                    value: this
                                }), p(s, a, b, y), this.$__.getters[b] = a;
                            }
                            return this.$__.getters[b];
                        },
                        set: function(t) {
                            null != t && t.$__isNested ? t = t.$__get() : t instanceof n && !t.$__isNested && (t = t.$toObject(a)), (this.$__[c] || this).$set(b, t);
                        }
                    }) : Object.defineProperty(f, e, {
                        enumerable: !0,
                        configurable: !0,
                        get: function() {
                            return this[u].call(this.$__[c] || this, b, null, m);
                        },
                        set: function(t) {
                            this.$set.call(this.$__[c] || this, b, t);
                        }
                    });
                }
            },
            5346: (t)=>{
                "use strict";
                t.exports = function(t, e, r) {
                    for(var n = e[0], i = r, o = t, a = 0; a < e.length - 1; ++a){
                        var s = i.path(n);
                        if (s && s.schema) {
                            var u = o.get(n);
                            if (i = s.schema, n = e[a + 1], Array.isArray(u) && !isNaN(n) && (u = u[n], n = ""), null == u) break;
                            o = u;
                        } else n += n.length ? "." + e[a + 1] : e[a + 1];
                    }
                    return o;
                };
            },
            5152: (t, e, r)=>{
                "use strict";
                var n = r(3703), i = r(7425);
                t.exports = function t(e, r, o) {
                    for(var a = (o = o || {}).typeOnly, s = Array.isArray(r) ? r : -1 === r.indexOf(".") ? [
                        r
                    ] : r.split("."), u = null, c = "adhocOrUndefined", f = i(e.schema, e.get(e.schema.options.discriminatorKey)) || e.schema, l = 0; l < s.length; ++l){
                        var h = s.slice(0, l + 1).join(".");
                        if (null != (u = f.path(h))) {
                            if ("Mixed" === u.instance) return a ? "real" : u;
                            if (c = f.pathType(h), (u.$isSingleNested || u.$isMongooseDocumentArrayElement) && null != u.schema.discriminators) {
                                var p = u.schema.discriminators, d = e.get(h + "." + n(u, "schema.options.discriminatorKey"));
                                if (null == d || null == p[d]) continue;
                                var y = s.slice(l + 1).join(".");
                                return t(e.get(h), y, o);
                            }
                        } else c = "adhocOrUndefined";
                    }
                    return a ? c : u;
                };
            },
            3216: (t, e, r)=>{
                "use strict";
                function n(t, e) {
                    var r = Object.keys(t);
                    if (Object.getOwnPropertySymbols) {
                        var n = Object.getOwnPropertySymbols(t);
                        e && (n = n.filter(function(e) {
                            return Object.getOwnPropertyDescriptor(t, e).enumerable;
                        })), r.push.apply(r, n);
                    }
                    return r;
                }
                function i(t) {
                    for(var e = 1; e < arguments.length; e++){
                        var r = null != arguments[e] ? arguments[e] : {};
                        e % 2 ? n(Object(r), !0).forEach(function(e) {
                            o(t, e, r[e]);
                        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : n(Object(r)).forEach(function(e) {
                            Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));
                        });
                    }
                    return t;
                }
                function o(t, e, r) {
                    return (e = function(t) {
                        var e = function(t) {
                            if ("object" != a(t) || !t) return t;
                            var e = t[Symbol.toPrimitive];
                            if (void 0 !== e) {
                                var r = e.call(t, "string");
                                if ("object" != a(r)) return r;
                                throw new TypeError("@@toPrimitive must return a primitive value.");
                            }
                            return String(t);
                        }(t);
                        return "symbol" == a(e) ? e : e + "";
                    }(e)) in t ? Object.defineProperty(t, e, {
                        value: r,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0
                    }) : t[e] = r, t;
                }
                function a(t) {
                    return a = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, a(t);
                }
                var s = r(8768), u = new Set([
                    "__index",
                    "__parentArray",
                    "_doc"
                ]);
                t.exports = function(t, e) {
                    if (s.isPOJO(t) && null != t.$__ && null != t._doc) {
                        if (e) {
                            for(var r = {}, n = 0, o = Object.keys(t); n < o.length; n++){
                                var c = o[n];
                                "symbol" !== a(c) && "$" !== c[0] && (u.has(c) || (r[c] = t[c]));
                            }
                            return i(i({}, t._doc), r);
                        }
                        return t._doc;
                    }
                    return t;
                };
            },
            5782: (t)=>{
                "use strict";
                function e(t, e) {
                    (null == e || e > t.length) && (e = t.length);
                    for(var r = 0, n = Array(e); r < e; r++)n[r] = t[r];
                    return n;
                }
                t.exports = function(t, r, n) {
                    if (0 === t.length) return n();
                    var i, o = t.length, a = null, s = function(t, r) {
                        var n = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                        if (!n) {
                            if (Array.isArray(t) || (n = function(t, r) {
                                if (t) {
                                    if ("string" == typeof t) return e(t, r);
                                    var n = ({}).toString.call(t).slice(8, -1);
                                    return "Object" === n && t.constructor && (n = t.constructor.name), "Map" === n || "Set" === n ? Array.from(t) : "Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? e(t, r) : void 0;
                                }
                            }(t)) || r && t && "number" == typeof t.length) {
                                n && (t = n);
                                var i = 0, o = function() {};
                                return {
                                    s: o,
                                    n: function() {
                                        return i >= t.length ? {
                                            done: !0
                                        } : {
                                            done: !1,
                                            value: t[i++]
                                        };
                                    },
                                    e: function(t) {
                                        throw t;
                                    },
                                    f: o
                                };
                            }
                            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                        }
                        var a, s = !0, u = !1;
                        return {
                            s: function() {
                                n = n.call(t);
                            },
                            n: function() {
                                var t = n.next();
                                return s = t.done, t;
                            },
                            e: function(t) {
                                u = !0, a = t;
                            },
                            f: function() {
                                try {
                                    s || null == n.return || n.return();
                                } finally{
                                    if (u) throw a;
                                }
                            }
                        };
                    }(t);
                    try {
                        for(s.s(); !(i = s.n()).done;)r(i.value, function(t) {
                            if (null == a) return null != t ? n(a = t) : --o <= 0 ? n() : void 0;
                        });
                    } catch (a) {
                        s.e(a);
                    } finally{
                        s.f();
                    }
                };
            },
            1875: (t)=>{
                "use strict";
                t.exports = function(t) {
                    for(var e, r = Object.keys(t.errors || {}), n = r.length, i = [], o = 0; o < n; ++o)e = r[o], t !== t.errors[e] && i.push(e + ": " + t.errors[e].message);
                    return i.join(", ");
                };
            },
            1226: (t)=>{
                "use strict";
                t.exports = function(t) {
                    return null == t ? null : Object.keys(t)[0];
                };
            },
            3703: (t)=>{
                "use strict";
                function e(t, e) {
                    (null == e || e > t.length) && (e = t.length);
                    for(var r = 0, n = Array(e); r < e; r++)n[r] = t[r];
                    return n;
                }
                function r(t, e) {
                    return null == t ? t : t instanceof Map ? t.get(e) : t[e];
                }
                t.exports = function(t, n, i) {
                    var o, a = !1;
                    if ("string" == typeof n) {
                        if (-1 === n.indexOf(".")) {
                            var s = r(t, n);
                            return null == s ? i : s;
                        }
                        o = n.split(".");
                    } else if (a = !0, 1 === (o = n).length) {
                        var u = r(t, o[0]);
                        return null == u ? i : u;
                    }
                    var c, f = n, l = t, h = function(t, r) {
                        var n = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                        if (!n) {
                            if (Array.isArray(t) || (n = function(t, r) {
                                if (t) {
                                    if ("string" == typeof t) return e(t, r);
                                    var n = ({}).toString.call(t).slice(8, -1);
                                    return "Object" === n && t.constructor && (n = t.constructor.name), "Map" === n || "Set" === n ? Array.from(t) : "Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? e(t, r) : void 0;
                                }
                            }(t)) || r && t && "number" == typeof t.length) {
                                n && (t = n);
                                var i = 0, o = function() {};
                                return {
                                    s: o,
                                    n: function() {
                                        return i >= t.length ? {
                                            done: !0
                                        } : {
                                            done: !1,
                                            value: t[i++]
                                        };
                                    },
                                    e: function(t) {
                                        throw t;
                                    },
                                    f: o
                                };
                            }
                            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                        }
                        var a, s = !0, u = !1;
                        return {
                            s: function() {
                                n = n.call(t);
                            },
                            n: function() {
                                var t = n.next();
                                return s = t.done, t;
                            },
                            e: function(t) {
                                u = !0, a = t;
                            },
                            f: function() {
                                try {
                                    s || null == n.return || n.return();
                                } finally{
                                    if (u) throw a;
                                }
                            }
                        };
                    }(o);
                    try {
                        for(h.s(); !(c = h.n()).done;){
                            var p = c.value;
                            if (null == l) return i;
                            if (!a && null != l[f]) return l[f];
                            l = r(l, p), a || (f = f.substr(p.length + 1));
                        }
                    } catch (t) {
                        h.e(t);
                    } finally{
                        h.f();
                    }
                    return null == l ? i : l;
                };
            },
            5879: (t)=>{
                "use strict";
                t.exports = function(t) {
                    if (null != t && "function" == typeof t.constructor) return t.constructor.name;
                };
            },
            9696: (t)=>{
                "use strict";
                var e = /^function\s*([^\s(]+)/;
                t.exports = function(t) {
                    return t.name || (t.toString().trim().match(e) || [])[1];
                };
            },
            2746: (t)=>{
                "use strict";
                var e = "function" == typeof ({
                    env: {}
                }).nextTick ? ({
                    env: {}
                }).nextTick.bind({
                    env: {}
                }) : function(t) {
                    return setTimeout(t, 0);
                };
                t.exports = function(t) {
                    return e(t);
                };
            },
            2423: (t)=>{
                "use strict";
                t.exports = function(t, e) {
                    var r = t.discriminatorMapping && t.discriminatorMapping.value;
                    if (r && !("sparse" in e)) {
                        var n = t.options.discriminatorKey;
                        e.partialFilterExpression = e.partialFilterExpression || {}, e.partialFilterExpression[n] = r;
                    }
                    return e;
                };
            },
            1199: (t)=>{
                "use strict";
                t.exports = function(t, e) {
                    var r = Object.keys(t), n = Object.keys(e);
                    if (r.length !== n.length) return !1;
                    for(var i = 0; i < r.length; i++){
                        var o = r[i];
                        if (o !== n[i] || t[o] !== e[o]) return !1;
                    }
                    return !0;
                };
            },
            9183: (t)=>{
                "use strict";
                t.exports = function(t) {
                    return "function" == typeof t && t.constructor && "AsyncFunction" === t.constructor.name;
                };
            },
            3305: (t)=>{
                "use strict";
                t.exports = function(t, e) {
                    return null != t && t._bsontype === e;
                };
            },
            2497: (t, e, r)=>{
                "use strict";
                var n = r(1243).isMongooseArray;
                t.exports = function(t) {
                    return null != t && (n(t) || null != t.$__ || t.isMongooseBuffer || t.$isMongooseMap);
                };
            },
            608: (t, e, r)=>{
                "use strict";
                var n = r(5832).Buffer;
                t.exports = function(t) {
                    return n.isBuffer(t) || "[object Object]" === Object.prototype.toString.call(t);
                };
            },
            2789: (t)=>{
                "use strict";
                function e(t) {
                    return e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, e(t);
                }
                t.exports = function(t) {
                    if (null == t || "object" !== e(t)) return !1;
                    var r = Object.getPrototypeOf(t);
                    return !r || "Object" === r.constructor.name;
                };
            },
            542: (t)=>{
                "use strict";
                function e(t) {
                    return e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, e(t);
                }
                t.exports = function(t) {
                    return !!t && ("object" === e(t) || "function" == typeof t) && "function" == typeof t.then;
                };
            },
            6155: (t)=>{
                "use strict";
                function e(t) {
                    return e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, e(t);
                }
                t.exports = function(t) {
                    for(var r = Object.keys(t), n = !0, i = 0, o = r.length; i < o; ++i)if ("object" === e(t[r[i]]) && null !== t[r[i]]) {
                        n = !1;
                        break;
                    }
                    return n;
                };
            },
            6451: (t, e, r)=>{
                "use strict";
                var n = r(8768).isPOJO;
                t.exports = function t(e) {
                    for(var r, i, o, a = Object.keys(e), s = a.length; s--;)o = e[i = a[s]], n(o) && (e[i] = t(o)), void 0 !== e[i] ? r = !0 : delete e[i];
                    return r ? e : void 0;
                };
            },
            4957: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i(t, e) {
                    var r = Object.keys(t);
                    if (Object.getOwnPropertySymbols) {
                        var n = Object.getOwnPropertySymbols(t);
                        e && (n = n.filter(function(e) {
                            return Object.getOwnPropertyDescriptor(t, e).enumerable;
                        })), r.push.apply(r, n);
                    }
                    return r;
                }
                function o(t) {
                    for(var e = 1; e < arguments.length; e++){
                        var r = null != arguments[e] ? arguments[e] : {};
                        e % 2 ? i(Object(r), !0).forEach(function(e) {
                            a(t, e, r[e]);
                        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : i(Object(r)).forEach(function(e) {
                            Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));
                        });
                    }
                    return t;
                }
                function a(t, e, r) {
                    return (e = function(t) {
                        var e = function(t) {
                            if ("object" != n(t) || !t) return t;
                            var e = t[Symbol.toPrimitive];
                            if (void 0 !== e) {
                                var r = e.call(t, "string");
                                if ("object" != n(r)) return r;
                                throw new TypeError("@@toPrimitive must return a primitive value.");
                            }
                            return String(t);
                        }(t);
                        return "symbol" == n(e) ? e : e + "";
                    }(e)) in t ? Object.defineProperty(t, e, {
                        value: r,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0
                    }) : t[e] = r, t;
                }
                var s = r(7160), u = r(5268);
                t.exports = f, f.middlewareFunctions = [
                    "deleteOne",
                    "save",
                    "validate",
                    "remove",
                    "updateOne",
                    "init"
                ];
                var c = new Set(f.middlewareFunctions.flatMap(function(t) {
                    return [
                        t,
                        "$__".concat(t)
                    ];
                }));
                function f(t, e, r) {
                    var n = {
                        useErrorHandlers: !0,
                        numCallbackParams: 1,
                        nullResultByDefault: !0,
                        contextParameter: !0
                    }, i = (r = r || {}).decorateDoc ? t : t.prototype;
                    t.$appliedHooks = !0;
                    for(var a = 0, l = Object.keys(e.paths); a < l.length; a++){
                        var h = l[a], p = e.paths[h], d = null;
                        if (p.$isSingleNested) d = p.caster;
                        else {
                            if (!p.$isMongooseDocumentArray) continue;
                            d = p.Constructor;
                        }
                        if (!d.$appliedHooks && (f(d, p.schema, o(o({}, r), {}, {
                            isChildSchema: !0
                        })), null != d.discriminators)) for(var y = 0, b = Object.keys(d.discriminators); y < b.length; y++){
                            var m = b[y];
                            f(d.discriminators[m], d.discriminators[m].schema, r);
                        }
                    }
                    var v = e.s.hooks.filter(function(t) {
                        return "updateOne" === t.name || "deleteOne" === t.name ? !!t.document : "remove" === t.name || "init" === t.name ? null == t.document || !!t.document : null == t.query && null == t.document || !1 !== t.document;
                    }).filter(function(t) {
                        return !e.methods[t.name] || !t.fn[s.builtInMiddleware];
                    });
                    t._middleware = v, i.$__originalValidate = i.$__originalValidate || i.$__validate;
                    for(var g = 0, _ = r && r.isChildSchema ? [
                        "save",
                        "validate",
                        "deleteOne"
                    ] : [
                        "save",
                        "validate"
                    ]; g < _.length; g++){
                        var w = _[g], S = "validate" === w ? "$__originalValidate" : "$__".concat(w), O = v.createWrapper(w, i[S], null, n);
                        i["$__".concat(w)] = O;
                    }
                    i.$__init = v.createWrapperSync("init", i.$__init, null, n);
                    for(var j = Object.keys(e.methods), $ = Object.assign({}, n, {
                        checkForPromise: !0
                    }), E = function() {
                        var e = P[A];
                        if (c.has(e)) return 0;
                        if (!v.hasHooks(e)) return 0;
                        var r = i[e];
                        i[e] = function() {
                            var r = this, n = Array.prototype.slice.call(arguments), i = n.slice(-1).pop(), o = "function" == typeof i ? n.slice(0, n.length - 1) : n;
                            return u(i, function(t) {
                                return r["$__".concat(e)].apply(r, o.concat([
                                    t
                                ]));
                            }, t.events);
                        }, i["$__".concat(e)] = v.createWrapper(e, r, null, $);
                    }, A = 0, P = j; A < P.length; A++)E();
                }
            },
            1469: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i(t, e) {
                    var r = Object.keys(t);
                    if (Object.getOwnPropertySymbols) {
                        var n = Object.getOwnPropertySymbols(t);
                        e && (n = n.filter(function(e) {
                            return Object.getOwnPropertyDescriptor(t, e).enumerable;
                        })), r.push.apply(r, n);
                    }
                    return r;
                }
                function o(t, e, r) {
                    return (e = function(t) {
                        var e = function(t) {
                            if ("object" != n(t) || !t) return t;
                            var e = t[Symbol.toPrimitive];
                            if (void 0 !== e) {
                                var r = e.call(t, "string");
                                if ("object" != n(r)) return r;
                                throw new TypeError("@@toPrimitive must return a primitive value.");
                            }
                            return String(t);
                        }(t);
                        return "symbol" == n(e) ? e : e + "";
                    }(e)) in t ? Object.defineProperty(t, e, {
                        value: r,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0
                    }) : t[e] = r, t;
                }
                function a(t, e) {
                    var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                    if (!r) {
                        if (Array.isArray(t) || (r = function(t, e) {
                            if (t) {
                                if ("string" == typeof t) return s(t, e);
                                var r = ({}).toString.call(t).slice(8, -1);
                                return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? s(t, e) : void 0;
                            }
                        }(t)) || e && t && "number" == typeof t.length) {
                            r && (t = r);
                            var n = 0, i = function() {};
                            return {
                                s: i,
                                n: function() {
                                    return n >= t.length ? {
                                        done: !0
                                    } : {
                                        done: !1,
                                        value: t[n++]
                                    };
                                },
                                e: function(t) {
                                    throw t;
                                },
                                f: i
                            };
                        }
                        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    }
                    var o, a = !0, u = !1;
                    return {
                        s: function() {
                            r = r.call(t);
                        },
                        n: function() {
                            var t = r.next();
                            return a = t.done, t;
                        },
                        e: function(t) {
                            u = !0, o = t;
                        },
                        f: function() {
                            try {
                                a || null == r.return || r.return();
                            } finally{
                                if (u) throw o;
                            }
                        }
                    };
                }
                function s(t, e) {
                    (null == e || e > t.length) && (e = t.length);
                    for(var r = 0, n = Array(e); r < e; r++)n[r] = t[r];
                    return n;
                }
                var u = r(5022), c = r(8442), f = r(4450), l = r(2068).X, h = r(3703), p = r(8768), d = r(4301), y = {
                    toJSON: !0,
                    toObject: !0,
                    _id: !0,
                    id: !0,
                    virtuals: !0,
                    methods: !0
                };
                t.exports = function(t, e, r, n, s, b, m) {
                    if (!r || !r.instanceOfSchema) throw new Error("You must pass a valid discriminator Schema");
                    if (b = null == b || b, t.schema.discriminatorMapping && !t.schema.discriminatorMapping.isRoot) throw new Error('Discriminator "' + e + '" can only be a discriminator of the root model');
                    if (s) {
                        var v = h(t.base, "options.applyPluginsToDiscriminators", !1) || !b;
                        t.base._applyPlugins(r, {
                            skipTopLevel: !v
                        });
                    } else b || c(r);
                    var g = t.schema.options.discriminatorKey, _ = t.schema.path(g);
                    if (null != _) p.hasUserDefinedProperty(_.options, "select") || (_.options.select = !0), _.options.$skipDiscriminatorCheck = !0;
                    else {
                        var w = {};
                        w[g] = {
                            default: void 0,
                            select: !0,
                            $skipDiscriminatorCheck: !0
                        }, w[g][t.schema.options.typeKey] = String, t.schema.add(w), l({
                            prop: g,
                            prototype: t.prototype,
                            options: t.schema.options
                        });
                    }
                    if (r.path(g) && !0 !== r.path(g).options.$skipDiscriminatorCheck) throw new Error('Discriminator "' + e + '" cannot have field with name "' + g + '"');
                    var S = e;
                    if (("string" == typeof n && n.length || null != n) && (S = n), function(e, r) {
                        e._baseSchema = r, r.paths._id && r.paths._id.options && !r.paths._id.options.auto && e.remove("_id");
                        for(var n = [], c = 0, l = Object.keys(r.paths); c < l.length; c++){
                            var h = l[c];
                            if (e.nested[h]) n.push(h);
                            else if (-1 !== h.indexOf(".")) {
                                var m, v = "", w = a(h.split(".").slice(0, -1));
                                try {
                                    for(w.s(); !(m = w.n()).done;){
                                        var O = m.value;
                                        v += (v.length ? "." : "") + O, (e.paths[v] instanceof u || e.singleNestedPaths[v] instanceof u) && n.push(h);
                                    }
                                } catch (t) {
                                    w.e(t);
                                } finally{
                                    w.f();
                                }
                            }
                        }
                        e.obj = function(t) {
                            for(var e = 1; e < arguments.length; e++){
                                var r = null != arguments[e] ? arguments[e] : {};
                                e % 2 ? i(Object(r), !0).forEach(function(e) {
                                    o(t, e, r[e]);
                                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : i(Object(r)).forEach(function(e) {
                                    Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));
                                });
                            }
                            return t;
                        }({}, e.obj), d(e, r), e._gatherChildSchemas();
                        for(var j = 0, $ = n; j < $.length; j++){
                            var E = $[j];
                            delete e.paths[E];
                        }
                        e.childSchemas.forEach(function(t) {
                            t.model.prototype.$__setSchema(t.schema);
                        });
                        var A = {};
                        A[g] = {
                            default: S,
                            select: !0,
                            set: function(t) {
                                if (t === S || Array.isArray(S) && p.deepEqual(t, S)) return S;
                                throw new Error("Can't set discriminator key \"" + g + '"');
                            },
                            $skipDiscriminatorCheck: !0
                        }, A[g][e.options.typeKey] = _ ? _.options[e.options.typeKey] : String, e.add(A), e.discriminatorMapping = {
                            key: g,
                            value: S,
                            isRoot: !1
                        }, r.options.collection && (e.options.collection = r.options.collection);
                        var P = e.options.toJSON, x = e.options.toObject, k = e.options._id, M = e.options.id, T = Object.keys(e.options);
                        e.options.discriminatorKey = r.options.discriminatorKey;
                        for(var B = e._userProvidedOptions, I = 0, R = T; I < R.length; I++){
                            var N = R[I];
                            if (!y[N] && N in B && !p.deepEqual(e.options[N], r.options[N])) throw new Error("Can't customize discriminator option " + N + " (can only modify " + Object.keys(y).join(", ") + ")");
                        }
                        e.options = f(r.options);
                        for(var D = 0, L = Object.keys(B); D < L.length; D++){
                            var C = L[D];
                            e.options[C] = B[C];
                        }
                        P && (e.options.toJSON = P), x && (e.options.toObject = x), void 0 !== k && (e.options._id = k), e.options.id = M, b && (e.s.hooks = t.schema.s.hooks.merge(e.s.hooks)), s && (e.plugins = Array.prototype.slice.call(r.plugins)), e.callQueue = r.callQueue.concat(e.callQueue), delete e._requiredpaths;
                    }(r, t.schema), t.discriminators || (t.discriminators = {}), t.schema.discriminatorMapping || (t.schema.discriminatorMapping = {
                        key: g,
                        value: null,
                        isRoot: !0
                    }), t.schema.discriminators || (t.schema.discriminators = {}), t.schema.discriminators[e] = r, t.discriminators[e] && !r.options.overwriteModels && !m) throw new Error('Discriminator with name "' + e + '" already exists');
                    return r;
                };
            },
            7236: (t)=>{
                "use strict";
                function e(t) {
                    return e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, e(t);
                }
                t.exports = function(t) {
                    if (null == t || "object" !== e(t)) return t;
                    if (Array.isArray(t)) for(var r = t.length - 1; r >= 0; --r)void 0 === t[r] && t.splice(r, 1);
                    for(var n = 0, i = Object.keys(t); n < i.length; n++){
                        var o = i[n];
                        void 0 === t[o] && delete t[o];
                    }
                    return t;
                };
            },
            6223: (t)=>{
                "use strict";
                var e = /\./g;
                t.exports = function(t) {
                    if (-1 === t.indexOf(".")) return [
                        t
                    ];
                    for(var r = t.split(e), n = r.length, i = new Array(n), o = "", a = 0; a < n; ++a)o += 0 !== o.length ? "." + r[a] : r[a], i[a] = o;
                    return i;
                };
            },
            3622: (t)=>{
                "use strict";
                function e(t) {
                    return e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, e(t);
                }
                t.exports = function(t, r, n) {
                    if (null == t) return t;
                    if (null != t._doc && (t = t._doc), arguments.length >= 3) {
                        if ("object" !== e(t)) return;
                        if (void 0 === n) return;
                        return t instanceof Map ? t.set(r, n) : t[r] = n, n;
                    }
                    return "$*" === r ? t instanceof Map ? Array.from(t.values()) : Object.keys(t).map(function(e) {
                        return t[e];
                    }) : t instanceof Map ? t.get(r) : t[r];
                };
            },
            1849: (t, e, r)=>{
                "use strict";
                function n(t, e) {
                    (null == e || e > t.length) && (e = t.length);
                    for(var r = 0, n = Array(e); r < e; r++)n[r] = t[r];
                    return n;
                }
                var i = r(8768);
                t.exports = function(t, e) {
                    if (null != t._doc._id && null != e && 0 !== e.length) {
                        var r, o = String(t._doc._id), a = function(t, e) {
                            var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                            if (!r) {
                                if (Array.isArray(t) || (r = function(t, e) {
                                    if (t) {
                                        if ("string" == typeof t) return n(t, e);
                                        var r = ({}).toString.call(t).slice(8, -1);
                                        return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? n(t, e) : void 0;
                                    }
                                }(t)) || e && t && "number" == typeof t.length) {
                                    r && (t = r);
                                    var i = 0, o = function() {};
                                    return {
                                        s: o,
                                        n: function() {
                                            return i >= t.length ? {
                                                done: !0
                                            } : {
                                                done: !1,
                                                value: t[i++]
                                            };
                                        },
                                        e: function(t) {
                                            throw t;
                                        },
                                        f: o
                                    };
                                }
                                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                            }
                            var a, s = !0, u = !1;
                            return {
                                s: function() {
                                    r = r.call(t);
                                },
                                n: function() {
                                    var t = r.next();
                                    return s = t.done, t;
                                },
                                e: function(t) {
                                    u = !0, a = t;
                                },
                                f: function() {
                                    try {
                                        s || null == r.return || r.return();
                                    } finally{
                                        if (u) throw a;
                                    }
                                }
                            };
                        }(e);
                        try {
                            for(a.s(); !(r = a.n()).done;){
                                var s = r.value;
                                if (!s.isVirtual) for(var u = s.path.split("."), c = 0; c < u.length - 1; ++c){
                                    var f = u.slice(0, c + 1).join("."), l = u.slice(c + 1).join("."), h = t.get(f);
                                    if (null != h && i.isMongooseDocumentArray(h)) {
                                        for(var p = 0; p < h.length; ++p)h[p] && h[p].populated(l, null == s._docs[o] ? void 0 : s._docs[o][p], s);
                                        break;
                                    }
                                }
                            }
                        } catch (t) {
                            a.e(t);
                        } finally{
                            a.f();
                        }
                    }
                };
            },
            4009: (t, e, r)=>{
                "use strict";
                var n = r(8213), i = r(5188), o = r(3622), a = r(5678), s = r(7352), u = r(8768), c = /(\.\d+$|\.\d+\.)/g;
                t.exports = function(t, e, r, f, l) {
                    if (null == t) return [];
                    if ("string" == typeof t && null != l && i(l, t)) throw new n("refPath `" + t + "` must not be excluded in projection, got " + s.inspect(l));
                    if (c.test(r)) {
                        var h = r.split(c);
                        if ("" === h[h.length - 1]) throw new Error("Can't populate individual element in an array");
                        for(var p = "", d = t, y = 0; y < h.length; y += 2){
                            var b = h[y];
                            if (!d.startsWith(b + ".")) {
                                if (y === h.length - 1) {
                                    p += d, d = "";
                                    break;
                                }
                                throw new Error("Could not normalize ref path, chunk " + b + " not in populated path");
                            }
                            p += d.substring(0, b.length) + h[y + 1], d = d.substring(b.length + 1);
                        }
                        var m = a.get(p, e, o), v = Array.isArray(m) ? m : [
                            m
                        ];
                        return u.array.flatten(v);
                    }
                    var g = a.get(t, e, o);
                    return null != f && f.virtuals.hasOwnProperty(t) ? [
                        f.virtuals[t].applyGetters(void 0, e)
                    ] : Array.isArray(g) ? g : [
                        g
                    ];
                };
            },
            7834: (t)=>{
                "use strict";
                function e(t) {
                    return e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, e(t);
                }
                t.exports = function(t, r, n, i) {
                    return i.justOne || i.count ? (t[r] = Array.isArray(n) ? n[0] : n, "object" !== e(t[r]) && (t[r] = i.count ? n : null)) : (t[r] = Array.isArray(n) ? n : null == n ? [] : [
                        n
                    ], t[r] = t[r].filter(function(t) {
                        return t && "object" === e(t);
                    })), t[r];
                };
            },
            533: (t, e, r)=>{
                "use strict";
                var n = r(8213), i = r(7352);
                t.exports = function(t, e) {
                    if ("string" != typeof t && "function" != typeof t) throw new n('Invalid ref at path "' + e + '". Got ' + i.inspect(t, {
                        depth: 0
                    }));
                };
            },
            6814: (t)=>{
                "use strict";
                t.exports = function(t) {
                    for(var e = {}, r = 0, n = Object.keys(t); r < n.length; r++){
                        var i = n[r];
                        if (-1 !== i.indexOf(".")) for(var o = i.split("."), a = o[0], s = 0; s < o.length; ++s)e[a] = 1, s + 1 < o.length && (a = a + "." + o[s + 1]);
                        else e[i] = 1;
                    }
                    return e;
                };
            },
            7300: (t)=>{
                "use strict";
                function e(t) {
                    return e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, e(t);
                }
                t.exports = function(t) {
                    return null == t || "object" !== e(t) || !("$meta" in t) && !("$slice" in t);
                };
            },
            1793: (t, e, r)=>{
                "use strict";
                var n = r(7300), i = r(2789);
                t.exports = function t(e) {
                    if (null == e) return null;
                    var r = Object.keys(e), o = null;
                    if (1 === r.length && "_id" === r[0]) o = !e._id;
                    else for(var a = 0; a < r.length; ++a){
                        var s, u = r[a];
                        if ("_id" !== u && n(e[u]) && null != (o = i(e[u]) ? null !== (s = t(e[u])) && void 0 !== s ? s : o : !e[u])) break;
                    }
                    return o;
                };
            },
            1091: (t)=>{
                "use strict";
                function e(t) {
                    return e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, e(t);
                }
                t.exports = function(t) {
                    return null != t && "object" === e(t) && null == t.$slice && null == t.$elemMatch && null == t.$meta && null == t.$;
                };
            },
            5188: (t, e, r)=>{
                "use strict";
                var n = r(7300);
                t.exports = function(t, e) {
                    if (null == t) return !1;
                    if ("_id" === e) return 0 === t._id;
                    for(var r = null, i = 0, o = Object.keys(t); i < o.length; i++){
                        var a = o[i];
                        if (n(t[a])) {
                            r = 1 === t[e] ? "inclusive" : "exclusive";
                            break;
                        }
                    }
                    return "inclusive" === r ? 1 !== t[e] : "exclusive" === r && 0 === t[e];
                };
            },
            6665: (t)=>{
                "use strict";
                t.exports = function(t, e) {
                    for(var r, n, i, o = e.split("."), a = "", s = 0; s < o.length; ++s)if (t[a += a.length ? "." : "" + o[s]]) {
                        for(i = (n = Object.keys(t)).length, r = 0; r < i; ++r)0 !== n[s].indexOf(a + ".") || n[s].indexOf(e);
                        return !0;
                    }
                    return !1;
                };
            },
            5268: (t, e, r)=>{
                "use strict";
                var n = r(2746), i = Symbol("mongoose#emitted");
                t.exports = function(t, e, o, a) {
                    if ("function" == typeof t) try {
                        return e(function(e) {
                            if (null == e) t.apply(this, arguments);
                            else {
                                null != o && null != o.listeners && o.listeners("error").length > 0 && !e[i] && (e[i] = !0, o.emit("error", e));
                                try {
                                    t(e);
                                } catch (e) {
                                    return n(function() {
                                        throw e;
                                    });
                                }
                            }
                        });
                    } catch (e) {
                        return null != o && null != o.listeners && o.listeners("error").length > 0 && !e[i] && (e[i] = !0, o.emit("error", e)), t(e);
                    }
                    return new (a = a || r.g.Promise)(function(t, r) {
                        e(function(e, n) {
                            return null != e ? (null != o && null != o.listeners && o.listeners("error").length > 0 && !e[i] && (e[i] = !0, o.emit("error", e)), r(e)) : arguments.length > 2 ? t(Array.prototype.slice.call(arguments, 1)) : void t(n);
                        });
                    });
                };
            },
            170: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                var i = r(3609), o = r(8995), a = r(7768), s = r(7236), u = new Set([
                    "$and",
                    "$or"
                ]), c = new Set([
                    "$cmp",
                    "$eq",
                    "$lt",
                    "$lte",
                    "$gt",
                    "$gte"
                ]), f = new Set([
                    "$multiply",
                    "$divide",
                    "$log",
                    "$mod",
                    "$trunc",
                    "$avg",
                    "$max",
                    "$min",
                    "$stdDevPop",
                    "$stdDevSamp",
                    "$sum"
                ]), l = new Set([
                    "$abs",
                    "$exp",
                    "$ceil",
                    "$floor",
                    "$ln",
                    "$log10",
                    "$sqrt",
                    "$sin",
                    "$cos",
                    "$tan",
                    "$asin",
                    "$acos",
                    "$atan",
                    "$atan2",
                    "$asinh",
                    "$acosh",
                    "$atanh",
                    "$sinh",
                    "$cosh",
                    "$tanh",
                    "$degreesToRadians",
                    "$radiansToDegrees"
                ]), h = new Set([
                    "$arrayElemAt",
                    "$first",
                    "$last"
                ]), p = new Set([
                    "$year",
                    "$month",
                    "$week",
                    "$dayOfMonth",
                    "$dayOfYear",
                    "$hour",
                    "$minute",
                    "$second",
                    "$isoDayOfWeek",
                    "$isoWeekYear",
                    "$isoWeek",
                    "$millisecond"
                ]), d = new Set([
                    "$not"
                ]);
                function y(t, e, r) {
                    if (g(t) || null === t) return t;
                    null != t.$cond ? Array.isArray(t.$cond) ? t.$cond = t.$cond.map(function(t) {
                        return y(t, e, r);
                    }) : (t.$cond.if = y(t.$cond.if, e, r), t.$cond.then = y(t.$cond.then, e, r), t.$cond.else = y(t.$cond.else, e, r)) : null != t.$ifNull ? t.$ifNull.map(function(t) {
                        return y(t, e, r);
                    }) : null != t.$switch && (Array.isArray(t.$switch.branches) && (t.$switch.branches = t.$switch.branches.map(function(t) {
                        return y(t, e, r);
                    })), "default" in t.$switch && (t.$switch.default = y(t.$switch.default, e, r)));
                    for(var n = 0, a = Object.keys(t); n < a.length; n++){
                        var h = a[n];
                        u.has(h) ? t[h] = t[h].map(function(t) {
                            return y(t, e, r);
                        }) : c.has(h) ? t[h] = v(t[h], e, r) : f.has(h) ? t[h] = m(t[h]) : l.has(h) ? t[h] = b(t[h]) : d.has(h) && (t[h] = y(t[h], e, r));
                    }
                    if (t.$in && (t.$in = function(t, e, r) {
                        var n = t[1];
                        if (!g(n)) return t;
                        var i = t[0], a = e.path(n.slice(1));
                        if (null !== a) {
                            if (!a.$isMongooseArray) throw new Error("Path must be an array for $in");
                            return [
                                a.$isMongooseDocumentArray ? a.$embeddedSchemaType.cast(i) : a.caster.cast(i),
                                n
                            ];
                        }
                        if (!1 === r) return t;
                        if ("throw" === r) throw new o("$in");
                    }(t.$in, e, r)), t.$size && (t.$size = b(t.$size)), t.$round) {
                        var p = t.$round;
                        if (!Array.isArray(p) || p.length < 1 || p.length > 2) throw new i("Array", p, "$round");
                        t.$round = p.map(function(t) {
                            return b(t);
                        });
                    }
                    return s(t), t;
                }
                function b(t) {
                    if (!_(t)) return t;
                    try {
                        return a(t);
                    } catch (e) {
                        throw new i("Number", t);
                    }
                }
                function m(t) {
                    if (!Array.isArray(t)) {
                        if (!_(t)) return t;
                        try {
                            return a(t);
                        } catch (e) {
                            throw new i("Number", t);
                        }
                    }
                    return t.map(function(t) {
                        if (!_(t)) return t;
                        try {
                            return a(t);
                        } catch (e) {
                            throw new i("Number", t);
                        }
                    });
                }
                function v(t, e, r) {
                    if (!Array.isArray(t) || 2 !== t.length) throw new Error("Comparison operator must be an array of length 2");
                    t[0] = y(t[0], e, r);
                    var s = t[0];
                    if (_(t[1])) {
                        var u = null, c = null, f = null;
                        if (g(s)) u = s.slice(1), c = e.path(u);
                        else if ("object" === n(s) && null != s) for(var l = 0, d = Object.keys(s); l < d.length; l++){
                            var b = d[l];
                            p.has(b) && g(s[b]) ? (u = s[b].slice(1) + "." + b, f = a) : h.has(b) && g(s[b]) && (u = s[b].slice(1) + "." + b, null != (c = e.path(s[b].slice(1))) && (c.$isMongooseDocumentArray ? c = c.$embeddedSchemaType : c.$isMongooseArray && (c = c.caster)));
                        }
                        var m = "object" === n(t[1]) && null != t[1] && null != t[1].$literal;
                        if (null != c) t[1] = m ? {
                            $literal: c.cast(t[1].$literal)
                        } : c.cast(t[1]);
                        else if (null != f) {
                            if (m) try {
                                t[1] = {
                                    $literal: f(t[1].$literal)
                                };
                            } catch (e) {
                                throw new i(f.name.replace(/^cast/, ""), t[1], u + ".$literal");
                            }
                            else try {
                                t[1] = f(t[1]);
                            } catch (e) {
                                throw new i(f.name.replace(/^cast/, ""), t[1], u);
                            }
                        } else {
                            if (null != u && !0 === r) return;
                            if (null != u && "throw" === r) throw new o(u);
                        }
                    } else t[1] = y(t[1]);
                    return t;
                }
                function g(t) {
                    return "string" == typeof t && "$" === t[0];
                }
                function _(t) {
                    return !("string" == typeof t && "$" === t[0] || "object" === n(t) && null !== t && Object.keys(t).find(function(t) {
                        return "$" === t[0];
                    }) && null == t.$literal);
                }
                t.exports = function(t, e, r) {
                    if ("object" !== n(t) || null === t) throw new Error("`$expr` must be an object");
                    return y(t, e, r);
                };
            },
            5289: (t)=>{
                "use strict";
                t.exports = function(t) {
                    switch(t){
                        case "p":
                            t = "primary";
                            break;
                        case "pp":
                            t = "primaryPreferred";
                            break;
                        case "s":
                            t = "secondary";
                            break;
                        case "sp":
                            t = "secondaryPreferred";
                            break;
                        case "n":
                            t = "nearest";
                    }
                    return t;
                };
            },
            5110: (t)=>{
                "use strict";
                var e = new Set([
                    "$ref",
                    "$id",
                    "$db"
                ]);
                t.exports = function(t) {
                    return "$" === t[0] && !e.has(t);
                };
            },
            7291: (t, e)=>{
                "use strict";
                function r(t) {
                    return r = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, r(t);
                }
                var n = Symbol("mongoose#trustedSymbol");
                e.trustedSymbol = n, e.trusted = function(t) {
                    return null == t || "object" !== r(t) || (t[n] = !0), t;
                };
            },
            486: (t)=>{
                "use strict";
                t.exports = function(t) {
                    var e = {
                        _id: {
                            auto: !0
                        }
                    };
                    e._id[t.options.typeKey] = "ObjectId", t.add(e);
                };
            },
            8442: (t, e, r)=>{
                "use strict";
                var n = r(1898);
                t.exports = function(t) {
                    for(var e = 0, r = Object.values(n); e < r.length; e++)(0, r[e])(t, {
                        deduplicate: !0
                    });
                    t.plugins = Object.values(n).map(function(t) {
                        return {
                            fn: t,
                            opts: {
                                deduplicate: !0
                            }
                        };
                    }).concat(t.plugins);
                };
            },
            8759: (t)=>{
                "use strict";
                t.exports = function(t) {
                    return t.replace(/\.\$(\[[^\]]*\])?(?=\.)/g, ".0").replace(/\.\$(\[[^\]]*\])?$/g, ".0");
                };
            },
            2003: (t, e, r)=>{
                "use strict";
                var n = r(3703), i = r(608), o = r(2423);
                t.exports = function(t) {
                    var e = [], r = new WeakMap, a = t.constructor.indexTypes, s = new Map;
                    return function t(u, c, f) {
                        if (!r.has(u)) {
                            r.set(u, !0), c = c || "";
                            for(var l = 0, h = Object.keys(u.paths); l < h.length; l++){
                                var p = h[l], d = u.paths[p];
                                if (null == f || !f.paths[p]) {
                                    if (null != d._duplicateKeyErrorMessage && (u._duplicateKeyErrorMessagesByPath = u._duplicateKeyErrorMessagesByPath || {}, u._duplicateKeyErrorMessagesByPath[p] = d._duplicateKeyErrorMessage), d.$isMongooseDocumentArray || d.$isSingleNested) {
                                        if (!0 !== n(d, "options.excludeIndexes") && !0 !== n(d, "schemaOptions.excludeIndexes") && !0 !== n(d, "schema.options.excludeIndexes") && t(d.schema, c + p + "."), null != d.schema.discriminators) for(var y = d.schema.discriminators, b = 0, m = Object.keys(y); b < m.length; b++)t(y[m[b]], c + p + ".", d.schema);
                                        if (d.$isMongooseDocumentArray) continue;
                                    }
                                    var v = d._index || d.caster && d.caster._index;
                                    if (!1 !== v && null != v) {
                                        var g = {}, _ = i(v), w = _ ? v : {}, S = "string" == typeof v ? v : !!_ && v.type;
                                        if (S && -1 !== a.indexOf(S)) g[c + p] = S;
                                        else if (w.text) g[c + p] = "text", delete w.text;
                                        else {
                                            var O;
                                            O = "descending" === v || "desc" === v || "ascending" !== v && "asc" !== v && -1 === Number(v), g[c + p] = O ? -1 : 1;
                                        }
                                        delete w.type, "background" in w || (w.background = !0), null != u.options.autoIndex && (w._autoIndex = u.options.autoIndex);
                                        var j = w && w.name;
                                        "string" == typeof j && s.has(j) ? Object.assign(s.get(j), g) : (e.push([
                                            g,
                                            w
                                        ]), s.set(j, g));
                                    }
                                }
                            }
                            r.delete(u), c ? function(t, r) {
                                for(var n = t._indexes, i = n.length, o = 0; o < i; ++o){
                                    for(var a = n[o][0], s = n[o][1], u = Object.keys(a), c = u.length, f = {}, l = 0; l < c; ++l){
                                        var h = u[l];
                                        f[r + h] = a[h];
                                    }
                                    var p = Object.assign({}, s);
                                    if (null != s && null != s.partialFilterExpression) {
                                        p.partialFilterExpression = {};
                                        for(var d = s.partialFilterExpression, y = 0, b = Object.keys(d); y < b.length; y++){
                                            var m = b[y];
                                            p.partialFilterExpression[r + m] = d[m];
                                        }
                                    }
                                    e.push([
                                        f,
                                        p
                                    ]);
                                }
                            }(u, c) : (u._indexes.forEach(function(t) {
                                var e = t[1];
                                "background" in e || (e.background = !0), o(u, e);
                            }), e = e.concat(u._indexes));
                        }
                    }(t), e;
                };
            },
            791: (t, e, r)=>{
                "use strict";
                function n(t, e) {
                    var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                    if (!r) {
                        if (Array.isArray(t) || (r = function(t, e) {
                            if (t) {
                                if ("string" == typeof t) return i(t, e);
                                var r = ({}).toString.call(t).slice(8, -1);
                                return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? i(t, e) : void 0;
                            }
                        }(t)) || e && t && "number" == typeof t.length) {
                            r && (t = r);
                            var n = 0, o = function() {};
                            return {
                                s: o,
                                n: function() {
                                    return n >= t.length ? {
                                        done: !0
                                    } : {
                                        done: !1,
                                        value: t[n++]
                                    };
                                },
                                e: function(t) {
                                    throw t;
                                },
                                f: o
                            };
                        }
                        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    }
                    var a, s = !0, u = !1;
                    return {
                        s: function() {
                            r = r.call(t);
                        },
                        n: function() {
                            var t = r.next();
                            return s = t.done, t;
                        },
                        e: function(t) {
                            u = !0, a = t;
                        },
                        f: function() {
                            try {
                                s || null == r.return || r.return();
                            } finally{
                                if (u) throw a;
                            }
                        }
                    };
                }
                function i(t, e) {
                    (null == e || e > t.length) && (e = t.length);
                    for(var r = 0, n = Array(e); r < e; r++)n[r] = t[r];
                    return n;
                }
                var o = r(3703);
                t.exports = function(t, e, r) {
                    var i, a = null != r ? Object.keys(o(t.tree, r, {})) : Object.keys(t.tree), s = new Set(Object.keys(e));
                    if (s.size > 1) {
                        i = new Set;
                        var u, c = n(a);
                        try {
                            for(c.s(); !(u = c.n()).done;){
                                var f = u.value;
                                s.has(f) && i.add(f);
                            }
                        } catch (t) {
                            c.e(t);
                        } finally{
                            c.f();
                        }
                        var l, h = n(s);
                        try {
                            for(h.s(); !(l = h.n()).done;){
                                var p = l.value;
                                i.has(p) || i.add(p);
                            }
                        } catch (t) {
                            h.e(t);
                        } finally{
                            h.f();
                        }
                        i = Array.from(i);
                    } else i = Array.from(s);
                    return i;
                };
            },
            2692: (t)=>{
                "use strict";
                t.exports = function(t, e) {
                    if (1 !== e.length) {
                        for(var r = e[0], n = void 0, i = 0; i < e.length - 1; ++i){
                            var o = t.path(r);
                            o && o.schema ? (n = o.schema.options.strict, t = o.schema, r = o.$isMongooseDocumentArray && !isNaN(e[i + 1]) ? "" : e[i + 1]) : r += r.length ? "." + e[i + 1] : e[i + 1];
                        }
                        return n;
                    }
                };
            },
            3694: (t, e, r)=>{
                "use strict";
                var n = r(486);
                t.exports = function(t, e) {
                    return null == e || null == e._id || (t = t.clone(), e._id ? t.paths._id || (n(t), t.options._id = !0) : (t.remove("_id"), t.options._id = !1)), t;
                };
            },
            3696: (t)=>{
                "use strict";
                t.exports = function(t, e) {
                    return null == t ? null : "boolean" == typeof t ? e : "boolean" == typeof t[e] ? t[e] ? e : null : e in t ? t[e] : e;
                };
            },
            3381: (t)=>{
                "use strict";
                function e() {
                    return null != this._id ? this._id.toString() : null;
                }
                t.exports = function(t) {
                    return !t.paths.id && t.paths._id && t.options.id ? (t.aliases && t.aliases.id || t.virtual("id").get(e), t) : t;
                };
            },
            9539: (t)=>{
                "use strict";
                function e(t, e) {
                    (null == e || e > t.length) && (e = t.length);
                    for(var r = 0, n = Array(e); r < e; r++)n[r] = t[r];
                    return n;
                }
                t.exports = function(t, r, n) {
                    for(var i = {}, o = 0, a = Object.keys(r.tree); o < a.length; o++){
                        var s = a[o];
                        n && (t.paths[s] || t.nested[s] || t.singleNestedPaths[s]) || (i[s] = r.tree[s]);
                    }
                    t.options._isMerging = !0, t.add(i, null), delete t.options._isMerging, t.callQueue = t.callQueue.concat(r.callQueue), t.method(r.methods), t.static(r.statics);
                    for(var u = 0, c = Object.entries(r._userProvidedOptions); u < c.length; u++){
                        var f = (p = c[u], d = 2, function(t) {
                            if (Array.isArray(t)) return t;
                        }(p) || function(t, e) {
                            var r = null == t ? null : "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                            if (null != r) {
                                var n, i, o, a, s = [], u = !0, c = !1;
                                try {
                                    if (o = (r = r.call(t)).next, 0 === e) {
                                        if (Object(r) !== r) return;
                                        u = !1;
                                    } else for(; !(u = (n = o.call(r)).done) && (s.push(n.value), s.length !== e); u = !0);
                                } catch (t) {
                                    c = !0, i = t;
                                } finally{
                                    try {
                                        if (!u && null != r.return && (a = r.return(), Object(a) !== a)) return;
                                    } finally{
                                        if (c) throw i;
                                    }
                                }
                                return s;
                            }
                        }(p, d) || function(t, r) {
                            if (t) {
                                if ("string" == typeof t) return e(t, r);
                                var n = ({}).toString.call(t).slice(8, -1);
                                return "Object" === n && t.constructor && (n = t.constructor.name), "Map" === n || "Set" === n ? Array.from(t) : "Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? e(t, r) : void 0;
                            }
                        }(p, d) || function() {
                            throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                        }()), l = f[0], h = f[1];
                        l in t._userProvidedOptions || t.set(l, h);
                    }
                    var p, d;
                    for(var y in r.query)t.query[y] = r.query[y];
                    for(var b in r.virtuals)t.virtuals[b] = r.virtuals[b].clone();
                    t._indexes = t._indexes.concat(r._indexes || []), t.s.hooks.merge(r.s.hooks, !1);
                };
            },
            8133: (t, e, r)=>{
                "use strict";
                var n = r(8995);
                t.exports = function(t) {
                    var e, r;
                    t.$immutable ? (t.$immutableSetter = (e = t.path, r = t.options.immutable, function(t, i, o, a) {
                        if (null == this || null == this.$__) return t;
                        if (this.isNew) return t;
                        if (a && a.overwriteImmutable) return t;
                        if (!("function" == typeof r ? r.call(this, this) : r)) return t;
                        var s = null != this.$__.priorDoc ? this.$__.priorDoc.$__getValue(e) : this.$__getValue(e);
                        if ("throw" === this.$__.strictMode && t !== s) throw new n(e, "Path `" + e + "` is immutable and strict mode is set to throw.", !0);
                        return s;
                    }), t.set(t.$immutableSetter)) : t.$immutableSetter && (t.setters = t.setters.filter(function(e) {
                        return e !== t.$immutableSetter;
                    }), delete t.$immutableSetter);
                };
            },
            2793: (t)=>{
                "use strict";
                t.exports = new Set([
                    "__proto__",
                    "constructor",
                    "prototype"
                ]);
            },
            7930: (t, e)=>{
                "use strict";
                e.arrayAtomicsBackupSymbol = Symbol("mongoose#Array#atomicsBackup"), e.arrayAtomicsSymbol = Symbol("mongoose#Array#_atomics"), e.arrayParentSymbol = Symbol("mongoose#Array#_parent"), e.arrayPathSymbol = Symbol("mongoose#Array#_path"), e.arraySchemaSymbol = Symbol("mongoose#Array#_schema"), e.documentArrayParent = Symbol("mongoose#documentArrayParent"), e.documentIsSelected = Symbol("mongoose#Document#isSelected"), e.documentIsModified = Symbol("mongoose#Document#isModified"), e.documentModifiedPaths = Symbol("mongoose#Document#modifiedPaths"), e.documentSchemaSymbol = Symbol("mongoose#Document#schema"), e.getSymbol = Symbol("mongoose#Document#get"), e.modelSymbol = Symbol("mongoose#Model"), e.objectIdSymbol = Symbol("mongoose#ObjectId"), e.populateModelSymbol = Symbol("mongoose#PopulateOptions#Model"), e.schemaTypeSymbol = Symbol("mongoose#schemaType"), e.sessionNewDocuments = Symbol("mongoose#ClientSession#newDocuments"), e.scopeSymbol = Symbol("mongoose#Document#scope"), e.validatorErrorSymbol = Symbol("mongoose#validatorError");
            },
            1505: (t)=>{
                "use strict";
                t.exports = function(t, e, r, n, i) {
                    var o = null != e && !1 === e.updatedAt, a = null != e && !1 === e.createdAt, s = null != r ? r() : t.ownerDocument().constructor.base.now();
                    if (!a && (t.isNew || t.$isSubdocument) && n && !t.$__getValue(n) && t.$__isSelected(n) && t.$set(n, s, void 0, {
                        overwriteImmutable: !0
                    }), !o && i && (t.isNew || t.$isModified())) {
                        var u = s;
                        t.isNew && null != n && (u = t.$__getValue(n)), t.$set(i, u);
                    }
                };
            },
            2097: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i(t, e) {
                    (null == e || e > t.length) && (e = t.length);
                    for(var r = 0, n = Array(e); r < e; r++)n[r] = t[r];
                    return n;
                }
                function o(t, e, r) {
                    return (e = function(t) {
                        var e = function(t) {
                            if ("object" != n(t) || !t) return t;
                            var e = t[Symbol.toPrimitive];
                            if (void 0 !== e) {
                                var r = e.call(t, "string");
                                if ("object" != n(r)) return r;
                                throw new TypeError("@@toPrimitive must return a primitive value.");
                            }
                            return String(t);
                        }(t);
                        return "symbol" == n(e) ? e : e + "";
                    }(e)) in t ? Object.defineProperty(t, e, {
                        value: r,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0
                    }) : t[e] = r, t;
                }
                var a = r(9166), s = r(1824), u = r(3703), c = r(3696), f = r(1505), l = r(7160), h = new Set([
                    "replaceOne",
                    "findOneAndReplace"
                ]);
                t.exports = function(t, e) {
                    var r = t.childSchemas.find(function(t) {
                        return !!t.schema.options.timestamps;
                    });
                    if (e || r) {
                        var n = c(e, "createdAt"), p = c(e, "updatedAt"), d = null != e && e.hasOwnProperty("currentTime") ? e.currentTime : null, y = {};
                        if (t.$timestamps = {
                            createdAt: n,
                            updatedAt: p
                        }, n && !t.paths[n]) {
                            var b = null != t.base ? t.base.get("timestamps.createdAt.immutable") : null, m = null == b || b;
                            y[n] = o(o({}, t.options.typeKey || "type", Date), "immutable", m);
                        }
                        p && !t.paths[p] && (y[p] = Date), t.add(y), t.pre("save", function(t) {
                            var e = u(this, "$__.saveOptions.timestamps");
                            if (!1 === e) return t();
                            f(this, e, d, n, p), t();
                        }), t.methods.initializeTimestamps = function() {
                            var t = null != d ? d() : this.constructor.base.now();
                            if (n && !this.get(n) && this.$set(n, t), p && !this.get(p) && this.$set(p, t), this.$isSubdocument) return this;
                            var e, r = function(t, e) {
                                var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                                if (!r) {
                                    if (Array.isArray(t) || (r = function(t, e) {
                                        if (t) {
                                            if ("string" == typeof t) return i(t, e);
                                            var r = ({}).toString.call(t).slice(8, -1);
                                            return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? i(t, e) : void 0;
                                        }
                                    }(t)) || e && t && "number" == typeof t.length) {
                                        r && (t = r);
                                        var n = 0, o = function() {};
                                        return {
                                            s: o,
                                            n: function() {
                                                return n >= t.length ? {
                                                    done: !0
                                                } : {
                                                    done: !1,
                                                    value: t[n++]
                                                };
                                            },
                                            e: function(t) {
                                                throw t;
                                            },
                                            f: o
                                        };
                                    }
                                    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                                }
                                var a, s = !0, u = !1;
                                return {
                                    s: function() {
                                        r = r.call(t);
                                    },
                                    n: function() {
                                        var t = r.next();
                                        return s = t.done, t;
                                    },
                                    e: function(t) {
                                        u = !0, a = t;
                                    },
                                    f: function() {
                                        try {
                                            s || null == r.return || r.return();
                                        } finally{
                                            if (u) throw a;
                                        }
                                    }
                                };
                            }(this.$getAllSubdocs());
                            try {
                                for(r.s(); !(e = r.n()).done;){
                                    var o = e.value;
                                    o.initializeTimestamps && o.initializeTimestamps();
                                }
                            } catch (t) {
                                r.e(t);
                            } finally{
                                r.f();
                            }
                            return this;
                        }, g[l.builtInMiddleware] = !0;
                        var v = {
                            query: !0,
                            model: !1
                        };
                        t.pre("findOneAndReplace", v, g), t.pre("findOneAndUpdate", v, g), t.pre("replaceOne", v, g), t.pre("update", v, g), t.pre("updateOne", v, g), t.pre("updateMany", v, g);
                    }
                    function g(t) {
                        var e = null != d ? d() : this.model.base.now();
                        h.has(this.op) && null == this.getUpdate() && this.setUpdate({}), s(e, n, p, this.getUpdate(), this._mongooseOptions, h.has(this.op)), a(e, this.getUpdate(), this.model.schema), t();
                    }
                };
            },
            2900: (t, e, r)=>{
                "use strict";
                var n = r(5879);
                t.exports = function(t) {
                    if ("TopologyDescription" !== n(t)) return !1;
                    var e = Array.from(t.servers.values());
                    return e.length > 0 && e.every(function(t) {
                        return "Unknown" === t.type;
                    });
                };
            },
            4070: (t, e, r)=>{
                "use strict";
                function n(t, e) {
                    (null == e || e > t.length) && (e = t.length);
                    for(var r = 0, n = Array(e); r < e; r++)n[r] = t[r];
                    return n;
                }
                var i = r(5879);
                t.exports = function(t) {
                    if ("TopologyDescription" !== i(t)) return !1;
                    if (0 === t.servers.size) return !1;
                    var e, r = function(t, e) {
                        var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                        if (!r) {
                            if (Array.isArray(t) || (r = function(t, e) {
                                if (t) {
                                    if ("string" == typeof t) return n(t, e);
                                    var r = ({}).toString.call(t).slice(8, -1);
                                    return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? n(t, e) : void 0;
                                }
                            }(t)) || e && t && "number" == typeof t.length) {
                                r && (t = r);
                                var i = 0, o = function() {};
                                return {
                                    s: o,
                                    n: function() {
                                        return i >= t.length ? {
                                            done: !0
                                        } : {
                                            done: !1,
                                            value: t[i++]
                                        };
                                    },
                                    e: function(t) {
                                        throw t;
                                    },
                                    f: o
                                };
                            }
                            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                        }
                        var a, s = !0, u = !1;
                        return {
                            s: function() {
                                r = r.call(t);
                            },
                            n: function() {
                                var t = r.next();
                                return s = t.done, t;
                            },
                            e: function(t) {
                                u = !0, a = t;
                            },
                            f: function() {
                                try {
                                    s || null == r.return || r.return();
                                } finally{
                                    if (u) throw a;
                                }
                            }
                        };
                    }(t.servers.values());
                    try {
                        for(r.s(); !(e = r.n()).done;){
                            var o = e.value;
                            if (!1 === o.host.endsWith(".mongodb.net") || 27017 !== o.port) return !1;
                        }
                    } catch (t) {
                        r.e(t);
                    } finally{
                        r.f();
                    }
                    return !0;
                };
            },
            5497: (t, e, r)=>{
                "use strict";
                var n = r(5879);
                t.exports = function(t) {
                    if ("TopologyDescription" !== n(t)) return !1;
                    var e = Array.from(t.servers.values());
                    return e.length > 0 && e.every(function(t) {
                        return t.error && -1 !== t.error.message.indexOf("Client network socket disconnected before secure TLS connection was established");
                    });
                };
            },
            9166: (t, e, r)=>{
                "use strict";
                function n(t, e) {
                    var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                    if (!r) {
                        if (Array.isArray(t) || (r = function(t, e) {
                            if (t) {
                                if ("string" == typeof t) return i(t, e);
                                var r = ({}).toString.call(t).slice(8, -1);
                                return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? i(t, e) : void 0;
                            }
                        }(t)) || e && t && "number" == typeof t.length) {
                            r && (t = r);
                            var n = 0, o = function() {};
                            return {
                                s: o,
                                n: function() {
                                    return n >= t.length ? {
                                        done: !0
                                    } : {
                                        done: !1,
                                        value: t[n++]
                                    };
                                },
                                e: function(t) {
                                    throw t;
                                },
                                f: o
                            };
                        }
                        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    }
                    var a, s = !0, u = !1;
                    return {
                        s: function() {
                            r = r.call(t);
                        },
                        n: function() {
                            var t = r.next();
                            return s = t.done, t;
                        },
                        e: function(t) {
                            u = !0, a = t;
                        },
                        f: function() {
                            try {
                                s || null == r.return || r.return();
                            } finally{
                                if (u) throw a;
                            }
                        }
                    };
                }
                function i(t, e) {
                    (null == e || e > t.length) && (e = t.length);
                    for(var r = 0, n = Array(e); r < e; r++)n[r] = t[r];
                    return n;
                }
                var o = r(8759), a = r(3696);
                function s(t, e, r) {
                    if (null != e) {
                        var i = Object.keys(e).some(function(t) {
                            return "$" === t[0];
                        });
                        if (i) {
                            if (e.$push && v(e.$push), e.$addToSet && v(e.$addToSet), null != e.$set) for(var o = 0, c = Object.keys(e.$set); o < c.length; o++){
                                var f = c[o];
                                u(r, f, e.$set, t);
                            }
                            if (null != e.$setOnInsert) for(var l = 0, h = Object.keys(e.$setOnInsert); l < h.length; l++){
                                var p = h[l];
                                u(r, p, e.$setOnInsert, t);
                            }
                        }
                        var d, y = Object.keys(e).filter(function(t) {
                            return "$" !== t[0];
                        }), b = n(y);
                        try {
                            for(b.s(); !(d = b.n()).done;){
                                var m = d.value;
                                u(r, m, e, t);
                            }
                        } catch (t) {
                            b.e(t);
                        } finally{
                            b.f();
                        }
                    }
                    function v(e) {
                        for(var n = function() {
                            var n = o[i], u = r.path(n.replace(/\.\$\./i, ".").replace(/.\$$/, ""));
                            if (e[n] && u && u.$isMongooseDocumentArray && u.schema.options.timestamps) {
                                var c = u.schema.options.timestamps, f = a(c, "createdAt"), l = a(c, "updatedAt");
                                e[n].$each ? e[n].$each.forEach(function(e) {
                                    null != l && (e[l] = t), null != f && (e[f] = t), s(t, e, u.schema);
                                }) : (null != l && (e[n][l] = t), null != f && (e[n][f] = t), s(t, e[n], u.schema));
                            }
                        }, i = 0, o = Object.keys(e); i < o.length; i++)n();
                    }
                }
                function u(t, e, r, i) {
                    var u = o(e), c = t.path(u);
                    if (c) {
                        for(var f = [], l = u.split("."), h = l.length - 1; h > 0; --h){
                            var p = t.path(l.slice(0, h).join("."));
                            null != p && (p.$isMongooseDocumentArray || p.$isSingleNested) && f.push({
                                parentPath: e.split(".").slice(0, h).join("."),
                                parentSchemaType: p
                            });
                        }
                        if (Array.isArray(r[e]) && c.$isMongooseDocumentArray) !function(t, e, r) {
                            var n = e.schema.options.timestamps, i = t.length;
                            if (n) for(var o = a(n, "createdAt"), u = a(n, "updatedAt"), c = 0; c < i; ++c)null != u && (t[c][u] = r), null != o && (t[c][o] = r), s(r, t[c], e.schema);
                            else for(var f = 0; f < i; ++f)s(r, t[f], e.schema);
                        }(r[e], c, i);
                        else if (r[e] && c.$isSingleNested) !function(t, e, r) {
                            var n = e.schema.options.timestamps;
                            if (n) {
                                var i = a(n, "createdAt"), o = a(n, "updatedAt");
                                null != o && (t[o] = r), null != i && (t[i] = r), s(r, t, e.schema);
                            } else s(r, t, e.schema);
                        }(r[e], c, i);
                        else if (f.length > 0) {
                            var d, y = n(f);
                            try {
                                for(y.s(); !(d = y.n()).done;){
                                    var b = d.value, m = b.parentPath, v = b.parentSchemaType, g = v.schema.options.timestamps, _ = a(g, "updatedAt");
                                    if (g && null != _) {
                                        if (v.$isSingleNested) r[m + "." + _] = i;
                                        else if (v.$isMongooseDocumentArray) {
                                            var w = e.substring(m.length + 1);
                                            if (/^\d+$/.test(w)) {
                                                r[m + "." + w][_] = i;
                                                continue;
                                            }
                                            var S = w.indexOf(".");
                                            r[m + "." + (w = -1 !== S ? w.substring(0, S) : w) + "." + _] = i;
                                        }
                                    }
                                }
                            } catch (t) {
                                y.e(t);
                            } finally{
                                y.f();
                            }
                        } else if (null != c.schema && c.schema != t && r[e]) {
                            var O = c.schema.options.timestamps, j = a(O, "createdAt"), $ = a(O, "updatedAt");
                            if (!O) return;
                            null != $ && (r[e][$] = i), null != j && (r[e][j] = i);
                        }
                    }
                }
                t.exports = s;
            },
            1824: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                var i = r(3703);
                t.exports = function(t, e, r, o, a, s) {
                    var u = o, c = u, f = i(a, "timestamps", !0);
                    if (!f || null == u) return o;
                    var l, h, p, d = null != f && !1 === f.createdAt, y = null != f && !1 === f.updatedAt;
                    if (s) return o && o.$set && (o = o.$set, u.$set = {}, c = u.$set), y || !r || o[r] || (c[r] = t), d || !e || o[e] || (c[e] = t), u;
                    if (o = o || {}, Array.isArray(u)) return null == r || u.push({
                        $set: (l = {}, h = r, p = t, (h = function(t) {
                            var e = function(t) {
                                if ("object" != n(t) || !t) return t;
                                var e = t[Symbol.toPrimitive];
                                if (void 0 !== e) {
                                    var r = e.call(t, "string");
                                    if ("object" != n(r)) return r;
                                    throw new TypeError("@@toPrimitive must return a primitive value.");
                                }
                                return String(t);
                            }(t);
                            return "symbol" == n(e) ? e : e + "";
                        }(h)) in l ? Object.defineProperty(l, h, {
                            value: p,
                            enumerable: !0,
                            configurable: !0,
                            writable: !0
                        }) : l[h] = p, l)
                    }), u;
                    if (u.$set = u.$set || {}, !y && r && (!o.$currentDate || !o.$currentDate[r])) {
                        var b = !1;
                        if (-1 !== r.indexOf(".")) for(var m = r.split("."), v = 1; v < m.length; ++v){
                            var g = m.slice(-v).join("."), _ = m.slice(0, -v).join(".");
                            if (null != o[_]) {
                                o[_][g] = t, b = !0;
                                break;
                            }
                            if (o.$set && o.$set[_]) {
                                o.$set[_][g] = t, b = !0;
                                break;
                            }
                        }
                        b || (u.$set[r] = t), u.hasOwnProperty(r) && delete u[r];
                    }
                    if (!d && e) {
                        o[e] && delete o[e], o.$set && o.$set[e] && delete o.$set[e];
                        var w = !1;
                        if (-1 !== e.indexOf(".")) for(var S = e.split("."), O = 1; O < S.length; ++O){
                            var j = S.slice(-O).join("."), $ = S.slice(0, -O).join(".");
                            if (null != o[$]) {
                                o[$][j] = t, w = !0;
                                break;
                            }
                            if (o.$set && o.$set[$]) {
                                o.$set[$][j] = t, w = !0;
                                break;
                            }
                        }
                        w || (u.$setOnInsert = u.$setOnInsert || {}, u.$setOnInsert[e] = t);
                    }
                    return 0 === Object.keys(u.$set).length && delete u.$set, u;
                };
            },
            4224: (t, e, r)=>{
                "use strict";
                var n = r(6511).ctor("require", "modify", "init", "default", "ignore");
                function i() {
                    this.activePaths = new n;
                }
                t.exports = i, i.prototype.strictMode = !0, i.prototype.fullPath = void 0, i.prototype.selected = void 0, i.prototype.shardval = void 0, i.prototype.saveError = void 0, i.prototype.validationError = void 0, i.prototype.adhocPaths = void 0, i.prototype.removing = void 0, i.prototype.inserting = void 0, i.prototype.saving = void 0, i.prototype.version = void 0, i.prototype._id = void 0, i.prototype.ownerDocument = void 0, i.prototype.populate = void 0, i.prototype.populated = void 0, i.prototype.primitiveAtomics = void 0, i.prototype.wasPopulated = !1, i.prototype.scope = void 0, i.prototype.session = null, i.prototype.pathsToScopes = null, i.prototype.cachedRequired = null;
            },
            6140: (t)=>{
                "use strict";
                function e(t) {
                    return e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, e(t);
                }
                function r(t, e) {
                    for(var r = 0; r < e.length; r++){
                        var n = e[r];
                        n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, i(n.key), n);
                    }
                }
                function n(t, e, n) {
                    return e && r(t.prototype, e), n && r(t, n), Object.defineProperty(t, "prototype", {
                        writable: !1
                    }), t;
                }
                function i(t) {
                    var r = function(t) {
                        if ("object" != e(t) || !t) return t;
                        var r = t[Symbol.toPrimitive];
                        if (void 0 !== r) {
                            var n = r.call(t, "string");
                            if ("object" != e(n)) return n;
                            throw new TypeError("@@toPrimitive must return a primitive value.");
                        }
                        return String(t);
                    }(t);
                    return "symbol" == e(r) ? r : r + "";
                }
                t.exports = n(function t(e, r, n) {
                    !function(t, e) {
                        if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                    }(this, t), this.subdocSnapshot = e, this.activePaths = r, this.version = n;
                });
            },
            3303: (t, e)=>{
                "use strict";
                e._ = {
                    transform: !1,
                    virtuals: !1,
                    getters: !1,
                    _skipDepopulateTopLevel: !0,
                    depopulate: !0,
                    flattenDecimals: !1,
                    useProjection: !1,
                    versionKey: !0,
                    flattenObjectIds: !1
                };
            },
            6948: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i(t, e) {
                    for(var r = 0; r < e.length; r++){
                        var n = e[r];
                        n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, a(n.key), n);
                    }
                }
                function o(t, e, r) {
                    return e && i(t.prototype, e), r && i(t, r), Object.defineProperty(t, "prototype", {
                        writable: !1
                    }), t;
                }
                function a(t) {
                    var e = function(t) {
                        if ("object" != n(t) || !t) return t;
                        var e = t[Symbol.toPrimitive];
                        if (void 0 !== e) {
                            var r = e.call(t, "string");
                            if ("object" != n(r)) return r;
                            throw new TypeError("@@toPrimitive must return a primitive value.");
                        }
                        return String(t);
                    }(t);
                    return "symbol" == n(e) ? e : e + "";
                }
                var s = r(4450), u = o(function t(e) {
                    if (function(t, e) {
                        if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                    }(this, t), this._docs = {}, this._childDocs = [], null != e && (e = s(e), Object.assign(this, e), "object" === n(e.subPopulate) && (this.populate = e.subPopulate), null != e.perDocumentLimit && null != e.limit)) throw new Error("Can not use `limit` and `perDocumentLimit` at the same time. Path: `" + e.path + "`.");
                });
                t.exports = u;
            },
            5761: (t)=>{
                "use strict";
                t.exports = Object.freeze({
                    enumerable: !0,
                    configurable: !0,
                    writable: !0,
                    value: void 0
                });
            },
            4592: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
                    } catch (t) {}
                    return (i = function() {
                        return !!t;
                    })();
                }
                function o(t) {
                    return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                        return t.__proto__ || Object.getPrototypeOf(t);
                    }, o(t);
                }
                function a(t, e) {
                    return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                        return t.__proto__ = e, t;
                    }, a(t, e);
                }
                var s = function(t) {
                    function e() {
                        return function(t, e) {
                            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                        }(this, e), function(t, e, r) {
                            return e = o(e), function(t, e) {
                                if (e && ("object" == n(e) || "function" == typeof e)) return e;
                                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                                return function(t) {
                                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                                    return t;
                                }(t);
                            }(t, i() ? Reflect.construct(e, r || [], o(t).constructor) : e.apply(t, r));
                        }(this, e, arguments);
                    }
                    var r;
                    return function(t, e) {
                        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                        t.prototype = Object.create(e && e.prototype, {
                            constructor: {
                                value: t,
                                writable: !0,
                                configurable: !0
                            }
                        }), Object.defineProperty(t, "prototype", {
                            writable: !1
                        }), e && a(t, e);
                    }(e, t), r = e, Object.defineProperty(r, "prototype", {
                        writable: !1
                    }), r;
                }(r(8879)), u = r(5761);
                Object.defineProperty(s.prototype, "enum", u), Object.defineProperty(s.prototype, "of", u), Object.defineProperty(s.prototype, "castNonArrays", u), t.exports = s;
            },
            2945: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
                    } catch (t) {}
                    return (i = function() {
                        return !!t;
                    })();
                }
                function o(t) {
                    return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                        return t.__proto__ || Object.getPrototypeOf(t);
                    }, o(t);
                }
                function a(t, e) {
                    return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                        return t.__proto__ = e, t;
                    }, a(t, e);
                }
                var s = function(t) {
                    function e() {
                        return function(t, e) {
                            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                        }(this, e), function(t, e, r) {
                            return e = o(e), function(t, e) {
                                if (e && ("object" == n(e) || "function" == typeof e)) return e;
                                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                                return function(t) {
                                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                                    return t;
                                }(t);
                            }(t, i() ? Reflect.construct(e, r || [], o(t).constructor) : e.apply(t, r));
                        }(this, e, arguments);
                    }
                    var r;
                    return function(t, e) {
                        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                        t.prototype = Object.create(e && e.prototype, {
                            constructor: {
                                value: t,
                                writable: !0,
                                configurable: !0
                            }
                        }), Object.defineProperty(t, "prototype", {
                            writable: !1
                        }), e && a(t, e);
                    }(e, t), r = e, Object.defineProperty(r, "prototype", {
                        writable: !1
                    }), r;
                }(r(8879)), u = r(5761);
                Object.defineProperty(s.prototype, "subtype", u), t.exports = s;
            },
            3731: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
                    } catch (t) {}
                    return (i = function() {
                        return !!t;
                    })();
                }
                function o(t) {
                    return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                        return t.__proto__ || Object.getPrototypeOf(t);
                    }, o(t);
                }
                function a(t, e) {
                    return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                        return t.__proto__ = e, t;
                    }, a(t, e);
                }
                var s = function(t) {
                    function e() {
                        return function(t, e) {
                            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                        }(this, e), function(t, e, r) {
                            return e = o(e), function(t, e) {
                                if (e && ("object" == n(e) || "function" == typeof e)) return e;
                                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                                return function(t) {
                                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                                    return t;
                                }(t);
                            }(t, i() ? Reflect.construct(e, r || [], o(t).constructor) : e.apply(t, r));
                        }(this, e, arguments);
                    }
                    var r;
                    return function(t, e) {
                        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                        t.prototype = Object.create(e && e.prototype, {
                            constructor: {
                                value: t,
                                writable: !0,
                                configurable: !0
                            }
                        }), Object.defineProperty(t, "prototype", {
                            writable: !1
                        }), e && a(t, e);
                    }(e, t), r = e, Object.defineProperty(r, "prototype", {
                        writable: !1
                    }), r;
                }(r(8879)), u = r(5761);
                Object.defineProperty(s.prototype, "min", u), Object.defineProperty(s.prototype, "max", u), Object.defineProperty(s.prototype, "expires", u), t.exports = s;
            },
            4561: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
                    } catch (t) {}
                    return (i = function() {
                        return !!t;
                    })();
                }
                function o(t) {
                    return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                        return t.__proto__ || Object.getPrototypeOf(t);
                    }, o(t);
                }
                function a(t, e) {
                    return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                        return t.__proto__ = e, t;
                    }, a(t, e);
                }
                var s = function(t) {
                    function e() {
                        return function(t, e) {
                            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                        }(this, e), function(t, e, r) {
                            return e = o(e), function(t, e) {
                                if (e && ("object" == n(e) || "function" == typeof e)) return e;
                                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                                return function(t) {
                                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                                    return t;
                                }(t);
                            }(t, i() ? Reflect.construct(e, r || [], o(t).constructor) : e.apply(t, r));
                        }(this, e, arguments);
                    }
                    var r;
                    return function(t, e) {
                        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                        t.prototype = Object.create(e && e.prototype, {
                            constructor: {
                                value: t,
                                writable: !0,
                                configurable: !0
                            }
                        }), Object.defineProperty(t, "prototype", {
                            writable: !1
                        }), e && a(t, e);
                    }(e, t), r = e, Object.defineProperty(r, "prototype", {
                        writable: !1
                    }), r;
                }(r(8879)), u = r(5761);
                Object.defineProperty(s.prototype, "excludeIndexes", u), Object.defineProperty(s.prototype, "_id", u), t.exports = s;
            },
            241: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
                    } catch (t) {}
                    return (i = function() {
                        return !!t;
                    })();
                }
                function o(t) {
                    return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                        return t.__proto__ || Object.getPrototypeOf(t);
                    }, o(t);
                }
                function a(t, e) {
                    return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                        return t.__proto__ = e, t;
                    }, a(t, e);
                }
                var s = function(t) {
                    function e() {
                        return function(t, e) {
                            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                        }(this, e), function(t, e, r) {
                            return e = o(e), function(t, e) {
                                if (e && ("object" == n(e) || "function" == typeof e)) return e;
                                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                                return function(t) {
                                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                                    return t;
                                }(t);
                            }(t, i() ? Reflect.construct(e, r || [], o(t).constructor) : e.apply(t, r));
                        }(this, e, arguments);
                    }
                    var r;
                    return function(t, e) {
                        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                        t.prototype = Object.create(e && e.prototype, {
                            constructor: {
                                value: t,
                                writable: !0,
                                configurable: !0
                            }
                        }), Object.defineProperty(t, "prototype", {
                            writable: !1
                        }), e && a(t, e);
                    }(e, t), r = e, Object.defineProperty(r, "prototype", {
                        writable: !1
                    }), r;
                }(r(8879)), u = r(5761);
                Object.defineProperty(s.prototype, "of", u), t.exports = s;
            },
            1007: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
                    } catch (t) {}
                    return (i = function() {
                        return !!t;
                    })();
                }
                function o(t) {
                    return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                        return t.__proto__ || Object.getPrototypeOf(t);
                    }, o(t);
                }
                function a(t, e) {
                    return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                        return t.__proto__ = e, t;
                    }, a(t, e);
                }
                var s = function(t) {
                    function e() {
                        return function(t, e) {
                            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                        }(this, e), function(t, e, r) {
                            return e = o(e), function(t, e) {
                                if (e && ("object" == n(e) || "function" == typeof e)) return e;
                                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                                return function(t) {
                                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                                    return t;
                                }(t);
                            }(t, i() ? Reflect.construct(e, r || [], o(t).constructor) : e.apply(t, r));
                        }(this, e, arguments);
                    }
                    var r;
                    return function(t, e) {
                        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                        t.prototype = Object.create(e && e.prototype, {
                            constructor: {
                                value: t,
                                writable: !0,
                                configurable: !0
                            }
                        }), Object.defineProperty(t, "prototype", {
                            writable: !1
                        }), e && a(t, e);
                    }(e, t), r = e, Object.defineProperty(r, "prototype", {
                        writable: !1
                    }), r;
                }(r(8879)), u = r(5761);
                Object.defineProperty(s.prototype, "min", u), Object.defineProperty(s.prototype, "max", u), Object.defineProperty(s.prototype, "enum", u), Object.defineProperty(s.prototype, "populate", u), t.exports = s;
            },
            4625: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
                    } catch (t) {}
                    return (i = function() {
                        return !!t;
                    })();
                }
                function o(t) {
                    return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                        return t.__proto__ || Object.getPrototypeOf(t);
                    }, o(t);
                }
                function a(t, e) {
                    return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                        return t.__proto__ = e, t;
                    }, a(t, e);
                }
                var s = function(t) {
                    function e() {
                        return function(t, e) {
                            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                        }(this, e), function(t, e, r) {
                            return e = o(e), function(t, e) {
                                if (e && ("object" == n(e) || "function" == typeof e)) return e;
                                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                                return function(t) {
                                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                                    return t;
                                }(t);
                            }(t, i() ? Reflect.construct(e, r || [], o(t).constructor) : e.apply(t, r));
                        }(this, e, arguments);
                    }
                    var r;
                    return function(t, e) {
                        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                        t.prototype = Object.create(e && e.prototype, {
                            constructor: {
                                value: t,
                                writable: !0,
                                configurable: !0
                            }
                        }), Object.defineProperty(t, "prototype", {
                            writable: !1
                        }), e && a(t, e);
                    }(e, t), r = e, Object.defineProperty(r, "prototype", {
                        writable: !1
                    }), r;
                }(r(8879)), u = r(5761);
                Object.defineProperty(s.prototype, "auto", u), Object.defineProperty(s.prototype, "populate", u), t.exports = s;
            },
            9528: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
                    } catch (t) {}
                    return (i = function() {
                        return !!t;
                    })();
                }
                function o(t) {
                    return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                        return t.__proto__ || Object.getPrototypeOf(t);
                    }, o(t);
                }
                function a(t, e) {
                    return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                        return t.__proto__ = e, t;
                    }, a(t, e);
                }
                var s = function(t) {
                    function e() {
                        return function(t, e) {
                            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                        }(this, e), function(t, e, r) {
                            return e = o(e), function(t, e) {
                                if (e && ("object" == n(e) || "function" == typeof e)) return e;
                                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                                return function(t) {
                                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                                    return t;
                                }(t);
                            }(t, i() ? Reflect.construct(e, r || [], o(t).constructor) : e.apply(t, r));
                        }(this, e, arguments);
                    }
                    var r;
                    return function(t, e) {
                        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                        t.prototype = Object.create(e && e.prototype, {
                            constructor: {
                                value: t,
                                writable: !0,
                                configurable: !0
                            }
                        }), Object.defineProperty(t, "prototype", {
                            writable: !1
                        }), e && a(t, e);
                    }(e, t), r = e, Object.defineProperty(r, "prototype", {
                        writable: !1
                    }), r;
                }(r(8879)), u = r(5761);
                Object.defineProperty(s.prototype, "enum", u), Object.defineProperty(s.prototype, "match", u), Object.defineProperty(s.prototype, "lowercase", u), Object.defineProperty(s.prototype, "trim", u), Object.defineProperty(s.prototype, "uppercase", u), Object.defineProperty(s.prototype, "minLength", u), Object.defineProperty(s.prototype, "minlength", u), Object.defineProperty(s.prototype, "maxLength", u), Object.defineProperty(s.prototype, "maxlength", u), Object.defineProperty(s.prototype, "populate", u), t.exports = s;
            },
            7494: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
                    } catch (t) {}
                    return (i = function() {
                        return !!t;
                    })();
                }
                function o(t) {
                    return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                        return t.__proto__ || Object.getPrototypeOf(t);
                    }, o(t);
                }
                function a(t, e) {
                    return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                        return t.__proto__ = e, t;
                    }, a(t, e);
                }
                var s = function(t) {
                    function e() {
                        return function(t, e) {
                            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                        }(this, e), function(t, e, r) {
                            return e = o(e), function(t, e) {
                                if (e && ("object" == n(e) || "function" == typeof e)) return e;
                                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                                return function(t) {
                                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                                    return t;
                                }(t);
                            }(t, i() ? Reflect.construct(e, r || [], o(t).constructor) : e.apply(t, r));
                        }(this, e, arguments);
                    }
                    var r;
                    return function(t, e) {
                        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                        t.prototype = Object.create(e && e.prototype, {
                            constructor: {
                                value: t,
                                writable: !0,
                                configurable: !0
                            }
                        }), Object.defineProperty(t, "prototype", {
                            writable: !1
                        }), e && a(t, e);
                    }(e, t), r = e, Object.defineProperty(r, "prototype", {
                        writable: !1
                    }), r;
                }(r(8879)), u = r(5761);
                Object.defineProperty(s.prototype, "_id", u), t.exports = s;
            },
            8879: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i(t, e) {
                    for(var r = 0; r < e.length; r++){
                        var n = e[r];
                        n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, a(n.key), n);
                    }
                }
                function o(t, e, r) {
                    return e && i(t.prototype, e), r && i(t, r), Object.defineProperty(t, "prototype", {
                        writable: !1
                    }), t;
                }
                function a(t) {
                    var e = function(t) {
                        if ("object" != n(t) || !t) return t;
                        var e = t[Symbol.toPrimitive];
                        if (void 0 !== e) {
                            var r = e.call(t, "string");
                            if ("object" != n(r)) return r;
                            throw new TypeError("@@toPrimitive must return a primitive value.");
                        }
                        return String(t);
                    }(t);
                    return "symbol" == n(e) ? e : e + "";
                }
                var s = r(4450), u = o(function t(e) {
                    if (function(t, e) {
                        if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                    }(this, t), null == e) return this;
                    Object.assign(this, s(e));
                }), c = r(5761);
                Object.defineProperty(u.prototype, "type", c), Object.defineProperty(u.prototype, "validate", c), Object.defineProperty(u.prototype, "cast", c), Object.defineProperty(u.prototype, "required", c), Object.defineProperty(u.prototype, "default", c), Object.defineProperty(u.prototype, "ref", c), Object.defineProperty(u.prototype, "refPath", c), Object.defineProperty(u.prototype, "select", c), Object.defineProperty(u.prototype, "index", c), Object.defineProperty(u.prototype, "unique", c), Object.defineProperty(u.prototype, "immutable", c), Object.defineProperty(u.prototype, "sparse", c), Object.defineProperty(u.prototype, "text", c), Object.defineProperty(u.prototype, "transform", c), t.exports = u;
            },
            2069: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i(t, e) {
                    for(var r = 0; r < e.length; r++){
                        var n = e[r];
                        n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, a(n.key), n);
                    }
                }
                function o(t, e, r) {
                    return e && i(t.prototype, e), r && i(t, r), Object.defineProperty(t, "prototype", {
                        writable: !1
                    }), t;
                }
                function a(t) {
                    var e = function(t) {
                        if ("object" != n(t) || !t) return t;
                        var e = t[Symbol.toPrimitive];
                        if (void 0 !== e) {
                            var r = e.call(t, "string");
                            if ("object" != n(r)) return r;
                            throw new TypeError("@@toPrimitive must return a primitive value.");
                        }
                        return String(t);
                    }(t);
                    return "symbol" == n(e) ? e : e + "";
                }
                var s = r(5761), u = o(function t(e) {
                    !function(t, e) {
                        if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                    }(this, t), Object.assign(this, e), null != e && null != e.options && (this.options = Object.assign({}, e.options));
                });
                Object.defineProperty(u.prototype, "ref", s), Object.defineProperty(u.prototype, "refPath", s), Object.defineProperty(u.prototype, "localField", s), Object.defineProperty(u.prototype, "foreignField", s), Object.defineProperty(u.prototype, "justOne", s), Object.defineProperty(u.prototype, "count", s), Object.defineProperty(u.prototype, "match", s), Object.defineProperty(u.prototype, "options", s), Object.defineProperty(u.prototype, "skip", s), Object.defineProperty(u.prototype, "limit", s), Object.defineProperty(u.prototype, "perDocumentLimit", s), t.exports = u;
            },
            1898: (t, e, r)=>{
                "use strict";
                e.saveSubdocs = r(4432), e.sharding = r(2824), e.trackTransaction = r(5889), e.validateBeforeSave = r(9848);
            },
            4432: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i() {
                    i = function() {
                        return e;
                    };
                    var t, e = {}, r = Object.prototype, o = r.hasOwnProperty, a = Object.defineProperty || function(t, e, r) {
                        t[e] = r.value;
                    }, s = "function" == typeof Symbol ? Symbol : {}, u = s.iterator || "@@iterator", c = s.asyncIterator || "@@asyncIterator", f = s.toStringTag || "@@toStringTag";
                    function l(t, e, r) {
                        return Object.defineProperty(t, e, {
                            value: r,
                            enumerable: !0,
                            configurable: !0,
                            writable: !0
                        }), t[e];
                    }
                    try {
                        l({}, "");
                    } catch (t) {
                        l = function(t, e, r) {
                            return t[e] = r;
                        };
                    }
                    function h(t, e, r, n) {
                        var i = e && e.prototype instanceof g ? e : g, o = Object.create(i.prototype), s = new T(n || []);
                        return a(o, "_invoke", {
                            value: P(t, r, s)
                        }), o;
                    }
                    function p(t, e, r) {
                        try {
                            return {
                                type: "normal",
                                arg: t.call(e, r)
                            };
                        } catch (t) {
                            return {
                                type: "throw",
                                arg: t
                            };
                        }
                    }
                    e.wrap = h;
                    var d = "suspendedStart", y = "suspendedYield", b = "executing", m = "completed", v = {};
                    function g() {}
                    function _() {}
                    function w() {}
                    var S = {};
                    l(S, u, function() {
                        return this;
                    });
                    var O = Object.getPrototypeOf, j = O && O(O(B([])));
                    j && j !== r && o.call(j, u) && (S = j);
                    var $ = w.prototype = g.prototype = Object.create(S);
                    function E(t) {
                        [
                            "next",
                            "throw",
                            "return"
                        ].forEach(function(e) {
                            l(t, e, function(t) {
                                return this._invoke(e, t);
                            });
                        });
                    }
                    function A(t, e) {
                        function r(i, a, s, u) {
                            var c = p(t[i], t, a);
                            if ("throw" !== c.type) {
                                var f = c.arg, l = f.value;
                                return l && "object" == n(l) && o.call(l, "__await") ? e.resolve(l.__await).then(function(t) {
                                    r("next", t, s, u);
                                }, function(t) {
                                    r("throw", t, s, u);
                                }) : e.resolve(l).then(function(t) {
                                    f.value = t, s(f);
                                }, function(t) {
                                    return r("throw", t, s, u);
                                });
                            }
                            u(c.arg);
                        }
                        var i;
                        a(this, "_invoke", {
                            value: function(t, n) {
                                function o() {
                                    return new e(function(e, i) {
                                        r(t, n, e, i);
                                    });
                                }
                                return i = i ? i.then(o, o) : o();
                            }
                        });
                    }
                    function P(e, r, n) {
                        var i = d;
                        return function(o, a) {
                            if (i === b) throw Error("Generator is already running");
                            if (i === m) {
                                if ("throw" === o) throw a;
                                return {
                                    value: t,
                                    done: !0
                                };
                            }
                            for(n.method = o, n.arg = a;;){
                                var s = n.delegate;
                                if (s) {
                                    var u = x(s, n);
                                    if (u) {
                                        if (u === v) continue;
                                        return u;
                                    }
                                }
                                if ("next" === n.method) n.sent = n._sent = n.arg;
                                else if ("throw" === n.method) {
                                    if (i === d) throw i = m, n.arg;
                                    n.dispatchException(n.arg);
                                } else "return" === n.method && n.abrupt("return", n.arg);
                                i = b;
                                var c = p(e, r, n);
                                if ("normal" === c.type) {
                                    if (i = n.done ? m : y, c.arg === v) continue;
                                    return {
                                        value: c.arg,
                                        done: n.done
                                    };
                                }
                                "throw" === c.type && (i = m, n.method = "throw", n.arg = c.arg);
                            }
                        };
                    }
                    function x(e, r) {
                        var n = r.method, i = e.iterator[n];
                        if (i === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, x(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), v;
                        var o = p(i, e.iterator, r.arg);
                        if ("throw" === o.type) return r.method = "throw", r.arg = o.arg, r.delegate = null, v;
                        var a = o.arg;
                        return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, v) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, v);
                    }
                    function k(t) {
                        var e = {
                            tryLoc: t[0]
                        };
                        1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
                    }
                    function M(t) {
                        var e = t.completion || {};
                        e.type = "normal", delete e.arg, t.completion = e;
                    }
                    function T(t) {
                        this.tryEntries = [
                            {
                                tryLoc: "root"
                            }
                        ], t.forEach(k, this), this.reset(!0);
                    }
                    function B(e) {
                        if (e || "" === e) {
                            var r = e[u];
                            if (r) return r.call(e);
                            if ("function" == typeof e.next) return e;
                            if (!isNaN(e.length)) {
                                var i = -1, a = function r() {
                                    for(; ++i < e.length;)if (o.call(e, i)) return r.value = e[i], r.done = !1, r;
                                    return r.value = t, r.done = !0, r;
                                };
                                return a.next = a;
                            }
                        }
                        throw new TypeError(n(e) + " is not iterable");
                    }
                    return _.prototype = w, a($, "constructor", {
                        value: w,
                        configurable: !0
                    }), a(w, "constructor", {
                        value: _,
                        configurable: !0
                    }), _.displayName = l(w, f, "GeneratorFunction"), e.isGeneratorFunction = function(t) {
                        var e = "function" == typeof t && t.constructor;
                        return !!e && (e === _ || "GeneratorFunction" === (e.displayName || e.name));
                    }, e.mark = function(t) {
                        return Object.setPrototypeOf ? Object.setPrototypeOf(t, w) : (t.__proto__ = w, l(t, f, "GeneratorFunction")), t.prototype = Object.create($), t;
                    }, e.awrap = function(t) {
                        return {
                            __await: t
                        };
                    }, E(A.prototype), l(A.prototype, c, function() {
                        return this;
                    }), e.AsyncIterator = A, e.async = function(t, r, n, i, o) {
                        void 0 === o && (o = Promise);
                        var a = new A(h(t, r, n, i), o);
                        return e.isGeneratorFunction(r) ? a : a.next().then(function(t) {
                            return t.done ? t.value : a.next();
                        });
                    }, E($), l($, f, "Generator"), l($, u, function() {
                        return this;
                    }), l($, "toString", function() {
                        return "[object Generator]";
                    }), e.keys = function(t) {
                        var e = Object(t), r = [];
                        for(var n in e)r.push(n);
                        return r.reverse(), function t() {
                            for(; r.length;){
                                var n = r.pop();
                                if (n in e) return t.value = n, t.done = !1, t;
                            }
                            return t.done = !0, t;
                        };
                    }, e.values = B, T.prototype = {
                        constructor: T,
                        reset: function(e) {
                            if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(M), !e) for(var r in this)"t" === r.charAt(0) && o.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
                        },
                        stop: function() {
                            this.done = !0;
                            var t = this.tryEntries[0].completion;
                            if ("throw" === t.type) throw t.arg;
                            return this.rval;
                        },
                        dispatchException: function(e) {
                            if (this.done) throw e;
                            var r = this;
                            function n(n, i) {
                                return s.type = "throw", s.arg = e, r.next = n, i && (r.method = "next", r.arg = t), !!i;
                            }
                            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                                var a = this.tryEntries[i], s = a.completion;
                                if ("root" === a.tryLoc) return n("end");
                                if (a.tryLoc <= this.prev) {
                                    var u = o.call(a, "catchLoc"), c = o.call(a, "finallyLoc");
                                    if (u && c) {
                                        if (this.prev < a.catchLoc) return n(a.catchLoc, !0);
                                        if (this.prev < a.finallyLoc) return n(a.finallyLoc);
                                    } else if (u) {
                                        if (this.prev < a.catchLoc) return n(a.catchLoc, !0);
                                    } else {
                                        if (!c) throw Error("try statement without catch or finally");
                                        if (this.prev < a.finallyLoc) return n(a.finallyLoc);
                                    }
                                }
                            }
                        },
                        abrupt: function(t, e) {
                            for(var r = this.tryEntries.length - 1; r >= 0; --r){
                                var n = this.tryEntries[r];
                                if (n.tryLoc <= this.prev && o.call(n, "finallyLoc") && this.prev < n.finallyLoc) {
                                    var i = n;
                                    break;
                                }
                            }
                            i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);
                            var a = i ? i.completion : {};
                            return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, v) : this.complete(a);
                        },
                        complete: function(t, e) {
                            if ("throw" === t.type) throw t.arg;
                            return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), v;
                        },
                        finish: function(t) {
                            for(var e = this.tryEntries.length - 1; e >= 0; --e){
                                var r = this.tryEntries[e];
                                if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), M(r), v;
                            }
                        },
                        catch: function(t) {
                            for(var e = this.tryEntries.length - 1; e >= 0; --e){
                                var r = this.tryEntries[e];
                                if (r.tryLoc === t) {
                                    var n = r.completion;
                                    if ("throw" === n.type) {
                                        var i = n.arg;
                                        M(r);
                                    }
                                    return i;
                                }
                            }
                            throw Error("illegal catch attempt");
                        },
                        delegateYield: function(e, r, n) {
                            return this.delegate = {
                                iterator: B(e),
                                resultName: r,
                                nextLoc: n
                            }, "next" === this.method && (this.arg = t), v;
                        }
                    }, e;
                }
                function o(t, e) {
                    var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                    if (!r) {
                        if (Array.isArray(t) || (r = function(t, e) {
                            if (t) {
                                if ("string" == typeof t) return a(t, e);
                                var r = ({}).toString.call(t).slice(8, -1);
                                return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? a(t, e) : void 0;
                            }
                        }(t)) || e && t && "number" == typeof t.length) {
                            r && (t = r);
                            var n = 0, i = function() {};
                            return {
                                s: i,
                                n: function() {
                                    return n >= t.length ? {
                                        done: !0
                                    } : {
                                        done: !1,
                                        value: t[n++]
                                    };
                                },
                                e: function(t) {
                                    throw t;
                                },
                                f: i
                            };
                        }
                        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    }
                    var o, s = !0, u = !1;
                    return {
                        s: function() {
                            r = r.call(t);
                        },
                        n: function() {
                            var t = r.next();
                            return s = t.done, t;
                        },
                        e: function(t) {
                            u = !0, o = t;
                        },
                        f: function() {
                            try {
                                s || null == r.return || r.return();
                            } finally{
                                if (u) throw o;
                            }
                        }
                    };
                }
                function a(t, e) {
                    (null == e || e > t.length) && (e = t.length);
                    for(var r = 0, n = Array(e); r < e; r++)n[r] = t[r];
                    return n;
                }
                function s(t, e, r, n, i, o, a) {
                    try {
                        var s = t[o](a), u = s.value;
                    } catch (t) {
                        return void r(t);
                    }
                    s.done ? e(u) : Promise.resolve(u).then(n, i);
                }
                function u(t) {
                    return function() {
                        var e = this, r = arguments;
                        return new Promise(function(n, i) {
                            var o = t.apply(e, r);
                            function a(t) {
                                s(o, n, i, a, u, "next", t);
                            }
                            function u(t) {
                                s(o, n, i, a, u, "throw", t);
                            }
                            a(void 0);
                        });
                    };
                }
                var c = r(5782);
                t.exports = function(t) {
                    var e = !0;
                    t.s.hooks.pre("save", !1, function(t) {
                        if (this.$isSubdocument) t();
                        else {
                            var e = this, r = this.$getAllSubdocs({
                                useCache: !0
                            });
                            r.length ? c(r, function(t, e) {
                                t.$__schema.s.hooks.execPre("save", t, function(t) {
                                    e(t);
                                });
                            }, function(r) {
                                if (e.$__.saveOptions && (e.$__.saveOptions.__subdocs = null), r) return e.$__schema.s.hooks.execPost("save:error", e, [
                                    e
                                ], {
                                    error: r
                                }, function(e) {
                                    t(e);
                                });
                                t();
                            }) : t();
                        }
                    }, null, e), t.s.hooks.post("save", function() {
                        var t = u(i().mark(function t() {
                            var e, r, n, a, s;
                            return i().wrap(function(t) {
                                for(;;)switch(t.prev = t.next){
                                    case 0:
                                        if ((e = this.$__.removedSubdocs) && e.length) {
                                            t.next = 3;
                                            break;
                                        }
                                        return t.abrupt("return");
                                    case 3:
                                        r = [], n = o(e), t.prev = 5, s = i().mark(function t() {
                                            var e;
                                            return i().wrap(function(t) {
                                                for(;;)switch(t.prev = t.next){
                                                    case 0:
                                                        e = a.value, r.push(new Promise(function(t, r) {
                                                            e.$__schema.s.hooks.execPost("deleteOne", e, [
                                                                e
                                                            ], function(e) {
                                                                if (e) return r(e);
                                                                t();
                                                            });
                                                        }));
                                                    case 2:
                                                    case "end":
                                                        return t.stop();
                                                }
                                            }, t);
                                        }), n.s();
                                    case 8:
                                        if ((a = n.n()).done) {
                                            t.next = 12;
                                            break;
                                        }
                                        return t.delegateYield(s(), "t0", 10);
                                    case 10:
                                        t.next = 8;
                                        break;
                                    case 12:
                                        t.next = 17;
                                        break;
                                    case 14:
                                        t.prev = 14, t.t1 = t.catch(5), n.e(t.t1);
                                    case 17:
                                        return t.prev = 17, n.f(), t.finish(17);
                                    case 20:
                                        return this.$__.removedSubdocs = null, t.next = 23, Promise.all(r);
                                    case 23:
                                    case "end":
                                        return t.stop();
                                }
                            }, t, this, [
                                [
                                    5,
                                    14,
                                    17,
                                    20
                                ]
                            ]);
                        }));
                        return function() {
                            return t.apply(this, arguments);
                        };
                    }()), t.s.hooks.post("save", function() {
                        var t = u(i().mark(function t() {
                            var e, r, n, a, s, u, c = this;
                            return i().wrap(function(t) {
                                for(;;)switch(t.prev = t.next){
                                    case 0:
                                        if (!this.$isSubdocument) {
                                            t.next = 2;
                                            break;
                                        }
                                        return t.abrupt("return");
                                    case 2:
                                        if (e = this, (r = this.$getAllSubdocs({
                                            useCache: !0
                                        })).length) {
                                            t.next = 6;
                                            break;
                                        }
                                        return t.abrupt("return");
                                    case 6:
                                        n = [], a = o(r), t.prev = 8, u = i().mark(function t() {
                                            var e;
                                            return i().wrap(function(t) {
                                                for(;;)switch(t.prev = t.next){
                                                    case 0:
                                                        e = s.value, n.push(new Promise(function(t, r) {
                                                            e.$__schema.s.hooks.execPost("save", e, [
                                                                e
                                                            ], function(e) {
                                                                if (e) return r(e);
                                                                t();
                                                            });
                                                        }));
                                                    case 2:
                                                    case "end":
                                                        return t.stop();
                                                }
                                            }, t);
                                        }), a.s();
                                    case 11:
                                        if ((s = a.n()).done) {
                                            t.next = 15;
                                            break;
                                        }
                                        return t.delegateYield(u(), "t0", 13);
                                    case 13:
                                        t.next = 11;
                                        break;
                                    case 15:
                                        t.next = 20;
                                        break;
                                    case 17:
                                        t.prev = 17, t.t1 = t.catch(8), a.e(t.t1);
                                    case 20:
                                        return t.prev = 20, a.f(), t.finish(20);
                                    case 23:
                                        return t.prev = 23, t.next = 26, Promise.all(n);
                                    case 26:
                                        t.next = 32;
                                        break;
                                    case 28:
                                        return t.prev = 28, t.t2 = t.catch(23), t.next = 32, new Promise(function(r, n) {
                                            c.$__schema.s.hooks.execPost("save:error", e, [
                                                e
                                            ], {
                                                error: t.t2
                                            }, function(t) {
                                                if (t) return n(t);
                                                r();
                                            });
                                        });
                                    case 32:
                                    case "end":
                                        return t.stop();
                                }
                            }, t, this, [
                                [
                                    8,
                                    17,
                                    20,
                                    23
                                ],
                                [
                                    23,
                                    28
                                ]
                            ]);
                        }));
                        return function() {
                            return t.apply(this, arguments);
                        };
                    }(), null, e);
                };
            },
            2824: (t, e, r)=>{
                "use strict";
                var n = r(7930).objectIdSymbol, i = r(8768);
                function o() {
                    var t, e;
                    if (this.$__.shardval) {
                        e = (t = Object.keys(this.$__.shardval)).length, this.$where = this.$where || {};
                        for(var r = 0; r < e; ++r)this.$where[t[r]] = this.$__.shardval[t[r]];
                    }
                }
                function a() {
                    var t = this.$__schema.options.shardKey || this.$__schema.options.shardkey;
                    if (i.isPOJO(t)) for(var e, r = this.$__.shardval = {}, o = Object.keys(t), a = o.length, s = 0; s < a; ++s)null == (e = this.$__getValue(o[s])) ? r[o[s]] = e : i.isMongooseObject(e) ? r[o[s]] = e.toObject({
                        depopulate: !0,
                        _isNested: !0
                    }) : e instanceof Date || e[n] ? r[o[s]] = e : "function" == typeof e.valueOf ? r[o[s]] = e.valueOf() : r[o[s]] = e;
                }
                t.exports = function(t) {
                    t.post("init", function() {
                        return a.call(this), this;
                    }), t.pre("save", function(t) {
                        o.call(this), t();
                    }), t.pre("remove", function(t) {
                        o.call(this), t();
                    }), t.post("save", function() {
                        a.call(this);
                    });
                }, t.exports.storeShard = a;
            },
            5889: (t, e, r)=>{
                "use strict";
                function n(t, e) {
                    var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                    if (!r) {
                        if (Array.isArray(t) || (r = i(t)) || e && t && "number" == typeof t.length) {
                            r && (t = r);
                            var n = 0, o = function() {};
                            return {
                                s: o,
                                n: function() {
                                    return n >= t.length ? {
                                        done: !0
                                    } : {
                                        done: !1,
                                        value: t[n++]
                                    };
                                },
                                e: function(t) {
                                    throw t;
                                },
                                f: o
                            };
                        }
                        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    }
                    var a, s = !0, u = !1;
                    return {
                        s: function() {
                            r = r.call(t);
                        },
                        n: function() {
                            var t = r.next();
                            return s = t.done, t;
                        },
                        e: function(t) {
                            u = !0, a = t;
                        },
                        f: function() {
                            try {
                                s || null == r.return || r.return();
                            } finally{
                                if (u) throw a;
                            }
                        }
                    };
                }
                function i(t, e) {
                    if (t) {
                        if ("string" == typeof t) return o(t, e);
                        var r = ({}).toString.call(t).slice(8, -1);
                        return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? o(t, e) : void 0;
                    }
                }
                function o(t, e) {
                    (null == e || e > t.length) && (e = t.length);
                    for(var r = 0, n = Array(e); r < e; r++)n[r] = t[r];
                    return n;
                }
                var a = r(7930).arrayAtomicsSymbol, s = r(7930).sessionNewDocuments, u = r(8768);
                function c(t, e) {
                    var r;
                    return t = t || {}, null != e.$pullAll && (t.$pullAll = (t.$pullAll || []).concat(e.$pullAll)), null != e.$push && (t.$push = t.$push || {}, t.$push.$each = (t.$push.$each || []).concat(e.$push.$each)), null != e.$addToSet && (t.$addToSet = (t.$addToSet || []).concat(e.$addToSet)), null != e.$set && (t.$set = Array.isArray(e.$set) ? function(t) {
                        if (Array.isArray(t)) return o(t);
                    }(r = e.$set) || function(t) {
                        if ("undefined" != typeof Symbol && null != t[Symbol.iterator] || null != t["@@iterator"]) return Array.from(t);
                    }(r) || i(r) || function() {
                        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    }() : Object.assign({}, e.$set)), t;
                }
                t.exports = function(t) {
                    t.pre("save", function() {
                        var t = this.$session();
                        if (null != t && null != t.transaction && null != t[s] && !t[s].has(this)) {
                            var e = {};
                            this.isNew && (e.isNew = !0), this.$__schema.options.versionKey && (e.versionKey = this.get(this.$__schema.options.versionKey)), e.modifiedPaths = new Set(Object.keys(this.$__.activePaths.getStatePaths("modify"))), e.atomics = function(t, e) {
                                var r = new Map;
                                e = e || new Map;
                                var i, o = n(Object.keys(t.$__.activePaths.init).concat(Object.keys(t.$__.activePaths.modify)));
                                try {
                                    for(o.s(); !(i = o.n()).done;){
                                        var s = i.value, f = t.$__getValue(s);
                                        if (null != f && Array.isArray(f) && u.isMongooseDocumentArray(f) && f.length && null != f[a] && 0 !== Object.keys(f[a]).length) {
                                            var l = e.get(s) || {};
                                            r.set(s, c(l, f[a]));
                                        }
                                    }
                                } catch (t) {
                                    o.e(t);
                                } finally{
                                    o.f();
                                }
                                var h, p = n(t.$__dirty());
                                try {
                                    for(p.s(); !(h = p.n()).done;){
                                        var d = h.value, y = d.path, b = d.value;
                                        if (null != b && null != b[a] && 0 !== Object.keys(b[a]).length) {
                                            var m = e.get(y) || {};
                                            r.set(y, c(m, b[a]));
                                        }
                                    }
                                } catch (t) {
                                    p.e(t);
                                } finally{
                                    p.f();
                                }
                                return r;
                            }(this), t[s].set(this, e);
                        }
                    });
                };
            },
            9848: (t)=>{
                "use strict";
                function e(t) {
                    return e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, e(t);
                }
                t.exports = function(t) {
                    t.pre("save", !1, function(t, r) {
                        var n = this, i = this;
                        if (this.$isSubdocument) return t();
                        if (r && "object" === e(r) && "validateBeforeSave" in r ? r.validateBeforeSave : this.$__schema.options.validateBeforeSave) {
                            var o = r && "object" === e(r) && "validateModifiedOnly" in r ? {
                                validateModifiedOnly: r.validateModifiedOnly
                            } : null;
                            this.$validate(o).then(function() {
                                n.$op = "save", t();
                            }, function(e) {
                                i.$__schema.s.hooks.execPost("save:error", i, [
                                    i
                                ], {
                                    error: e
                                }, function(e) {
                                    i.$op = "save", t(e);
                                });
                            });
                        } else t();
                    }, null, !0);
                };
            },
            3892: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i(t, e) {
                    var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                    if (!r) {
                        if (Array.isArray(t) || (r = function(t, e) {
                            if (t) {
                                if ("string" == typeof t) return o(t, e);
                                var r = ({}).toString.call(t).slice(8, -1);
                                return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? o(t, e) : void 0;
                            }
                        }(t)) || e && t && "number" == typeof t.length) {
                            r && (t = r);
                            var n = 0, i = function() {};
                            return {
                                s: i,
                                n: function() {
                                    return n >= t.length ? {
                                        done: !0
                                    } : {
                                        done: !1,
                                        value: t[n++]
                                    };
                                },
                                e: function(t) {
                                    throw t;
                                },
                                f: i
                            };
                        }
                        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    }
                    var a, s = !0, u = !1;
                    return {
                        s: function() {
                            r = r.call(t);
                        },
                        n: function() {
                            var t = r.next();
                            return s = t.done, t;
                        },
                        e: function(t) {
                            u = !0, a = t;
                        },
                        f: function() {
                            try {
                                s || null == r.return || r.return();
                            } finally{
                                if (u) throw a;
                            }
                        }
                    };
                }
                function o(t, e) {
                    (null == e || e > t.length) && (e = t.length);
                    for(var r = 0, n = Array(e); r < e; r++)n[r] = t[r];
                    return n;
                }
                function a(t, e) {
                    var r = Object.keys(t);
                    if (Object.getOwnPropertySymbols) {
                        var n = Object.getOwnPropertySymbols(t);
                        e && (n = n.filter(function(e) {
                            return Object.getOwnPropertyDescriptor(t, e).enumerable;
                        })), r.push.apply(r, n);
                    }
                    return r;
                }
                function s(t) {
                    for(var e = 1; e < arguments.length; e++){
                        var r = null != arguments[e] ? arguments[e] : {};
                        e % 2 ? a(Object(r), !0).forEach(function(e) {
                            u(t, e, r[e]);
                        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : a(Object(r)).forEach(function(e) {
                            Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));
                        });
                    }
                    return t;
                }
                function u(t, e, r) {
                    return (e = function(t) {
                        var e = function(t) {
                            if ("object" != n(t) || !t) return t;
                            var e = t[Symbol.toPrimitive];
                            if (void 0 !== e) {
                                var r = e.call(t, "string");
                                if ("object" != n(r)) return r;
                                throw new TypeError("@@toPrimitive must return a primitive value.");
                            }
                            return String(t);
                        }(t);
                        return "symbol" == n(e) ? e : e + "";
                    }(e)) in t ? Object.defineProperty(t, e, {
                        value: r,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0
                    }) : t[e] = r, t;
                }
                var c = r(6948), f = r(3916), l = r(3703), h = r(8677), p = r(7300), d = r(4450), y = r(6665);
                e.preparePopulationOptionsMQ = function(t, e) {
                    var r, n = t._mongooseOptions.populate, i = Object.keys(n).reduce(function(t, e) {
                        return t.concat([
                            n[e]
                        ]);
                    }, []);
                    null != e.lean && i.filter(function(t) {
                        return null == (t && t.options && t.options.lean);
                    }).forEach((r = e.lean, function(t) {
                        t.options || (t.options = {}), null != r && Array.isArray(r.virtuals) && ((r = Object.assign({}, r)).virtuals = r.virtuals.filter(function(e) {
                            return "string" == typeof e && e.startsWith(t.path + ".");
                        }).map(function(e) {
                            return e.slice(t.path.length + 1);
                        })), t.options.lean = r;
                    }));
                    var o = t && t.options && t.options.session || null;
                    null != o && i.forEach(function(t) {
                        null != t.options ? "session" in t.options || (t.options.session = o) : t.options = {
                            session: o
                        };
                    });
                    for(var a = t._fieldsForExec(), u = 0; u < i.length; ++u)i[u] instanceof c ? i[u] = new c(s(s({}, i[u]), {}, {
                        _queryProjection: a,
                        _localModel: t.model
                    })) : (i[u]._queryProjection = a, i[u]._localModel = t.model);
                    return i;
                }, e.createModel = function(t, r, n, i, o) {
                    t.hooks.execPreSync("createModel", r);
                    var a = t.schema ? t.schema.discriminatorMapping : null, s = a && a.isRoot ? a.key : null, u = r[s];
                    if (s && u && t.discriminators) {
                        var c = t.discriminators[u] || h(t.discriminators, u);
                        if (c) {
                            var f = d(i);
                            return e.applyPaths(f, c.schema), new c(void 0, f, !0);
                        }
                    }
                    var l = {
                        skipId: !0,
                        isNew: !1,
                        willInit: !0
                    };
                    return null != o && "defaults" in o && (l.defaults = o.defaults), new t(void 0, n, l);
                }, e.createModelAndInit = function(t, r, n, i, o, a, s) {
                    var u = a ? {
                        populated: a
                    } : void 0, c = e.createModel(t, r, n, i, o);
                    try {
                        c.$init(r, u, s);
                    } catch (t) {
                        s(t, c);
                    }
                }, e.applyPaths = function(t, e, r) {
                    var o, a, s = new Set;
                    if (t) {
                        a = Object.keys(t);
                        for(var u = [], c = 0; c < a.length; ++c){
                            var h = a[c];
                            "-" === a[c][0] && (delete t[h], "-_id" === h ? t._id = 0 : u.push(h.slice(1)));
                        }
                        a = Object.keys(t);
                        for(var d = 0; d < a.length; ++d)if ("+" !== a[d][0]) {
                            var b = t[a[d]];
                            if (p(b) && !("_id" === a[d] && a.length > 1) && (!(a[d] === e.options.discriminatorKey && a.length > 1 && null != b) || b)) {
                                o = !b;
                                break;
                            }
                        }
                        for(var m = 0, v = u; m < v.length; m++){
                            var g = v[m], _ = e.path(g);
                            _ && _.selected && !1 === o ? _ && _.selected && !1 === o && s.add(g) : (t[g] = 0, o = !0);
                        }
                    }
                    var w = [], S = [], O = [];
                    switch(function e(r, n) {
                        if (n || (n = ""), -1 !== O.indexOf(r)) return [];
                        O.push(r);
                        var i = [];
                        return r.eachPath(function(r, a) {
                            if (n && (r = n + "." + r), a.$isSchemaMap || r.endsWith(".$*")) {
                                var s = t && "+" + r in t;
                                a.options && !1 === a.options.select && !s && S.push(r);
                            } else {
                                var u = N(r, a);
                                if (null != u || Array.isArray(a) || !a.$isMongooseArray || a.$isMongooseDocumentArray || (u = N(r, a.caster)), null != u && i.push(u), a.schema) {
                                    var c = e(a.schema, r);
                                    !1 === o && f(t, r, a.schema, w, c);
                                }
                            }
                        }), O.pop(), i;
                    }(e), o){
                        case !0:
                            var j, $ = i(S);
                            try {
                                for($.s(); !(j = $.n()).done;){
                                    var E = j.value;
                                    t[E] = 0;
                                }
                            } catch (t) {
                                $.e(t);
                            } finally{
                                $.f();
                            }
                            break;
                        case !1:
                            e && e.paths._id && e.paths._id.options && !1 === e.paths._id.options.select && (t._id = 0);
                            var A, P = i(w);
                            try {
                                for(P.s(); !(A = P.n()).done;){
                                    var x = A.value;
                                    s.has(x) || y(t, x) || (t[x] = t[x] || 1);
                                }
                            } catch (t) {
                                P.e(t);
                            } finally{
                                P.f();
                            }
                            break;
                        case void 0:
                            if (null == t) break;
                            for(var k = 0, M = Object.keys(t || {}); k < M.length; k++){
                                var T = M[k];
                                T.startsWith("+") && delete t[T];
                            }
                            var B, I = i(S);
                            try {
                                for(I.s(); !(B = I.n()).done;){
                                    var R = B.value;
                                    null == t[R] && (t[R] = 0);
                                }
                            } catch (t) {
                                I.e(t);
                            } finally{
                                I.f();
                            }
                    }
                    function N(i, s) {
                        if (null != t && "boolean" == typeof s.selected) {
                            if (!1 === s.selected && t[i]) r && (t[i] = 0);
                            else if (o || !s.selected || i !== e.options.discriminatorKey || null == t[i] || t[i]) {
                                if (!1 !== o || !s.selected || null == t[i] || t[i]) {
                                    var u = "+" + i;
                                    if (t && u in t) return delete t[u], void (!1 === o && a.length > 1 && !~a.indexOf(i) && !r ? t[i] = 1 : null == o && r && !1 === s.selected && (t[i] = 0));
                                    for(var c = i.split("."), f = "", h = 0; h < c.length; ++h)if (f += f.length ? "." + c[h] : c[h], -1 !== S.indexOf(f)) return;
                                    if (!o && s && s.options && s.options.$skipDiscriminatorCheck) for(var p = "", d = 0; d < c.length; ++d){
                                        p += (0 === p.length ? "" : ".") + c[d];
                                        var y = l(t, p, !1) || l(t, p + ".$", !1);
                                        if (y && "object" !== n(y)) return;
                                    }
                                    return (s.selected ? w : S).push(i), i;
                                }
                                delete t[i];
                            } else delete t[i];
                        }
                    }
                };
            },
            7058: (t, e, r)=>{
                "use strict";
                var n = r(5832).Buffer;
                function i(t, e) {
                    var r = Object.keys(t);
                    if (Object.getOwnPropertySymbols) {
                        var n = Object.getOwnPropertySymbols(t);
                        e && (n = n.filter(function(e) {
                            return Object.getOwnPropertyDescriptor(t, e).enumerable;
                        })), r.push.apply(r, n);
                    }
                    return r;
                }
                function o(t) {
                    for(var e = 1; e < arguments.length; e++){
                        var r = null != arguments[e] ? arguments[e] : {};
                        e % 2 ? i(Object(r), !0).forEach(function(e) {
                            a(t, e, r[e]);
                        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : i(Object(r)).forEach(function(e) {
                            Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));
                        });
                    }
                    return t;
                }
                function a(t, e, r) {
                    return (e = function(t) {
                        var e = function(t) {
                            if ("object" != s(t) || !t) return t;
                            var e = t[Symbol.toPrimitive];
                            if (void 0 !== e) {
                                var r = e.call(t, "string");
                                if ("object" != s(r)) return r;
                                throw new TypeError("@@toPrimitive must return a primitive value.");
                            }
                            return String(t);
                        }(t);
                        return "symbol" == s(e) ? e : e + "";
                    }(e)) in t ? Object.defineProperty(t, e, {
                        value: r,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0
                    }) : t[e] = r, t;
                }
                function s(t) {
                    return s = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, s(t);
                }
                function u(t, e) {
                    return function(t) {
                        if (Array.isArray(t)) return t;
                    }(t) || function(t, e) {
                        var r = null == t ? null : "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                        if (null != r) {
                            var n, i, o, a, s = [], u = !0, c = !1;
                            try {
                                if (o = (r = r.call(t)).next, 0 === e) {
                                    if (Object(r) !== r) return;
                                    u = !1;
                                } else for(; !(u = (n = o.call(r)).done) && (s.push(n.value), s.length !== e); u = !0);
                            } catch (t) {
                                c = !0, i = t;
                            } finally{
                                try {
                                    if (!u && null != r.return && (a = r.return(), Object(a) !== a)) return;
                                } finally{
                                    if (c) throw i;
                                }
                            }
                            return s;
                        }
                    }(t, e) || f(t, e) || function() {
                        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    }();
                }
                function c(t, e) {
                    var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                    if (!r) {
                        if (Array.isArray(t) || (r = f(t)) || e && t && "number" == typeof t.length) {
                            r && (t = r);
                            var n = 0, i = function() {};
                            return {
                                s: i,
                                n: function() {
                                    return n >= t.length ? {
                                        done: !0
                                    } : {
                                        done: !1,
                                        value: t[n++]
                                    };
                                },
                                e: function(t) {
                                    throw t;
                                },
                                f: i
                            };
                        }
                        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    }
                    var o, a = !0, s = !1;
                    return {
                        s: function() {
                            r = r.call(t);
                        },
                        n: function() {
                            var t = r.next();
                            return a = t.done, t;
                        },
                        e: function(t) {
                            s = !0, o = t;
                        },
                        f: function() {
                            try {
                                a || null == r.return || r.return();
                            } finally{
                                if (s) throw o;
                            }
                        }
                    };
                }
                function f(t, e) {
                    if (t) {
                        if ("string" == typeof t) return l(t, e);
                        var r = ({}).toString.call(t).slice(8, -1);
                        return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? l(t, e) : void 0;
                    }
                }
                function l(t, e) {
                    (null == e || e > t.length) && (e = t.length);
                    for(var r = 0, n = Array(e); r < e; r++)n[r] = t[r];
                    return n;
                }
                var h, p = r(3550).EventEmitter, d = r(8297), y = r(8213), b = r(6426), m = r(8879), v = r(2069), g = r(622), _ = r(486), w = r(4450), S = r(3703), O = r(5879), j = r(2003), $ = r(5289), E = r(3381), A = r(1199), P = r(9539), x = r(5678), k = r(7834), M = r(2097), T = r(8768), B = r(533), I = /\.\d+(\.|$)/, R = r(1260).Ut, N = r(4957).middlewareFunctions, D = R.concat(N).reduce(function(t, e) {
                    return t.add(e);
                }, new Set), L = T.isPOJO, C = 0, U = /^\d+$/;
                function q(t, e) {
                    if (!(this instanceof q)) return new q(t, e);
                    if (this.obj = t, this.paths = {}, this.aliases = {}, this.subpaths = {}, this.virtuals = {}, this.singleNestedPaths = {}, this.nested = {}, this.inherits = {}, this.callQueue = [], this._indexes = [], this._searchIndexes = [], this.methods = e && e.methods || {}, this.methodOptions = {}, this.statics = e && e.statics || {}, this.tree = {}, this.query = e && e.query || {}, this.childSchemas = [], this.plugins = [], this.$id = ++C, this.mapPaths = [], this.s = {
                        hooks: new d
                    }, this.options = this.defaultOptions(e), Array.isArray(t)) {
                        var r, n = c(t);
                        try {
                            for(n.s(); !(r = n.n()).done;){
                                var i = r.value;
                                this.add(i);
                            }
                        } catch (t) {
                            n.e(t);
                        } finally{
                            n.f();
                        }
                    } else t && this.add(t);
                    if (e && e.virtuals) for(var o = e.virtuals, a = 0, s = Object.keys(o); a < s.length; a++){
                        var u = s[a], f = o[u].options ? o[u].options : void 0, l = this.virtual(u, f);
                        o[u].get && l.get(o[u].get), o[u].set && l.set(o[u].set);
                    }
                    var h = t && t._id && T.isObject(t._id);
                    !this.paths._id && this.options._id && !h && _(this), this.setupTimestamp(this.options.timestamps);
                }
                function F(t, e) {
                    for(var r = 0, n = Object.keys(e); r < n.length; r++){
                        var i = n[r], o = null;
                        if (null != e[i]) o = e[i];
                        else {
                            var a = S(t.paths[i], "options");
                            if (null == a) continue;
                            o = a.alias;
                        }
                        if (o) {
                            var s = t.paths[i].path;
                            if (Array.isArray(o)) {
                                var u, f = c(o);
                                try {
                                    for(f.s(); !(u = f.n()).done;){
                                        var l = u.value;
                                        if ("string" != typeof l) throw new Error("Invalid value for alias option on " + s + ", got " + l);
                                        t.aliases[l] = s, t.virtual(l).get(function(t) {
                                            return function() {
                                                return "function" == typeof this.get ? this.get(t) : this[t];
                                            };
                                        }(s)).set(function(t) {
                                            return function(e) {
                                                return this.$set(t, e);
                                            };
                                        }(s));
                                    }
                                } catch (t) {
                                    f.e(t);
                                } finally{
                                    f.f();
                                }
                            } else {
                                if ("string" != typeof o) throw new Error("Invalid value for alias option on " + s + ", got " + o);
                                t.aliases[o] = s, t.virtual(o).get(function(t) {
                                    return function() {
                                        return "function" == typeof this.get ? this.get(t) : this[t];
                                    };
                                }(s)).set(function(t) {
                                    return function(e) {
                                        return this.$set(t, e);
                                    };
                                }(s));
                            }
                        }
                    }
                }
                q.prototype = Object.create(p.prototype), q.prototype.constructor = q, q.prototype.instanceOfSchema = !0, Object.defineProperty(q.prototype, "$schemaType", {
                    configurable: !1,
                    enumerable: !1,
                    writable: !0
                }), Object.defineProperty(q.prototype, "childSchemas", {
                    configurable: !1,
                    enumerable: !0,
                    writable: !0
                }), Object.defineProperty(q.prototype, "virtuals", {
                    configurable: !1,
                    enumerable: !0,
                    writable: !0
                }), q.prototype.obj, q.prototype.paths, q.prototype.tree, q.prototype.clone = function() {
                    var t = this, e = this._clone();
                    return e.on("init", function(e) {
                        return t.emit("init", e);
                    }), e;
                }, q.prototype._clone = function(t) {
                    var e = new (t = t || (null == this.base ? q : this.base.Schema))({}, this._userProvidedOptions);
                    e.base = this.base, e.obj = this.obj, e.options = w(this.options), e.callQueue = this.callQueue.map(function(t) {
                        return t;
                    }), e.methods = w(this.methods), e.methodOptions = w(this.methodOptions), e.statics = w(this.statics), e.query = w(this.query), e.plugins = Array.prototype.slice.call(this.plugins), e._indexes = w(this._indexes), e._searchIndexes = w(this._searchIndexes), e.s.hooks = this.s.hooks.clone(), e.tree = w(this.tree), e.paths = Object.fromEntries(Object.entries(this.paths).map(function(t) {
                        var e = u(t, 2);
                        return [
                            e[0],
                            e[1].clone()
                        ];
                    })), e.nested = w(this.nested), e.subpaths = w(this.subpaths);
                    for(var r = 0, n = Object.values(e.paths); r < n.length; r++){
                        var i = n[r];
                        if (i.$isSingleNested) {
                            for(var o = i.path, a = 0, s = Object.keys(i.schema.paths); a < s.length; a++){
                                var c = s[a];
                                e.singleNestedPaths[o + "." + c] = i.schema.paths[c];
                            }
                            for(var f = 0, l = Object.keys(i.schema.singleNestedPaths); f < l.length; f++){
                                var h = l[f];
                                e.singleNestedPaths[o + "." + h] = i.schema.singleNestedPaths[h];
                            }
                            for(var p = 0, d = Object.keys(i.schema.subpaths); p < d.length; p++){
                                var y = d[p];
                                e.singleNestedPaths[o + "." + y] = i.schema.subpaths[y];
                            }
                            for(var b = 0, m = Object.keys(i.schema.nested); b < m.length; b++){
                                var v = m[b];
                                e.singleNestedPaths[o + "." + v] = "nested";
                            }
                        }
                    }
                    return e._gatherChildSchemas(), e.virtuals = w(this.virtuals), e.$globalPluginsApplied = this.$globalPluginsApplied, e.$isRootDiscriminator = this.$isRootDiscriminator, e.$implicitlyCreated = this.$implicitlyCreated, e.$id = ++C, e.$originalSchemaId = this.$id, e.mapPaths = [].concat(this.mapPaths), null != this.discriminatorMapping && (e.discriminatorMapping = Object.assign({}, this.discriminatorMapping)), null != this.discriminators && (e.discriminators = Object.assign({}, this.discriminators)), null != this._applyDiscriminators && (e._applyDiscriminators = new Map(this._applyDiscriminators)), e.aliases = Object.assign({}, this.aliases), e;
                }, q.prototype.pick = function(t, e) {
                    var r = new q({}, e || this.options);
                    if (!Array.isArray(t)) throw new y('Schema#pick() only accepts an array argument, got "' + s(t) + '"');
                    var n, i = c(t);
                    try {
                        for(i.s(); !(n = i.n()).done;){
                            var o = n.value;
                            if (this.nested[o]) r.add(a({}, o, S(this.tree, o)));
                            else {
                                var u = this.path(o);
                                if (null == u) throw new y("Path `" + o + "` is not in the schema");
                                r.add(a({}, o, u));
                            }
                        }
                    } catch (t) {
                        i.e(t);
                    } finally{
                        i.f();
                    }
                    return r;
                }, q.prototype.omit = function(t, e) {
                    var r = new q(this, e || this.options);
                    if (!Array.isArray(t)) throw new y('Schema#omit() only accepts an array argument, got "' + s(t) + '"');
                    for(var n in r.remove(t), r.singleNestedPaths)t.includes(n) && delete r.singleNestedPaths[n];
                    return r;
                }, q.prototype.defaultOptions = function(t) {
                    this._userProvidedOptions = null == t ? {} : w(t);
                    var e = this.base && this.base.options || {};
                    if ((t = o({
                        strict: !("strict" in e) || e.strict,
                        strictQuery: "strictQuery" in e && e.strictQuery,
                        bufferCommands: !0,
                        capped: !1,
                        versionKey: "__v",
                        optimisticConcurrency: !1,
                        minimize: !0,
                        autoIndex: null,
                        discriminatorKey: "__t",
                        shardKey: null,
                        read: null,
                        validateBeforeSave: !0,
                        validateModifiedOnly: !1,
                        _id: !0,
                        id: !("id" in e) || e.id,
                        typeKey: "type"
                    }, t)).versionKey && "string" != typeof t.versionKey) throw new y("`versionKey` must be falsy or string, got `" + s(t.versionKey) + "`");
                    if ("string" == typeof t.read ? t.read = $(t.read) : Array.isArray(t.read) && "string" == typeof t.read[0] && (t.read = {
                        mode: $(t.read[0]),
                        tags: t.read[1]
                    }), t.optimisticConcurrency && !t.versionKey) throw new y("Must set `versionKey` if using `optimisticConcurrency`");
                    return t;
                }, q.prototype.discriminator = function(t, e, r) {
                    return this._applyDiscriminators = this._applyDiscriminators || new Map, this._applyDiscriminators.set(t, {
                        schema: e,
                        options: r
                    }), this;
                }, q.prototype._defaultToObjectOptions = function(t) {
                    var e = t ? "toJSON" : "toObject";
                    if (this._defaultToObjectOptionsMap && this._defaultToObjectOptionsMap[e]) return this._defaultToObjectOptionsMap[e];
                    var r = this.base && this.base.options && this.base.options[e] || {}, n = this.options[e] || {}, i = Object.assign({}, r, n);
                    return this._defaultToObjectOptionsMap = this._defaultToObjectOptionsMap || {}, this._defaultToObjectOptionsMap[e] = i, i;
                }, q.prototype.add = function(t, e) {
                    if (t instanceof q || null != t && t.instanceOfSchema) return P(this, t), this;
                    if (!1 === t._id && null == e && (this.options._id = !1), "__proto__." === (e = e || "") || "constructor." === e || "prototype." === e) return this;
                    for(var r = Object.keys(t), n = this.options.typeKey, i = 0, o = r; i < o.length; i++){
                        var c = o[i];
                        if (!T.specialProperties.has(c)) {
                            var f = e + c, l = t[c];
                            if (null == l) throw new TypeError("Invalid value for schema path `" + f + '`, got value "' + l + '"');
                            if ("_id" !== c || !1 !== l) {
                                var h = !1;
                                if ("string" == typeof l && (h = null != (null != this.base ? this.base.Schema.Types : q.Types)[l.charAt(0).toUpperCase() + l.substring(1)]), "_id" !== c && ("object" !== s(l) && "function" != typeof l && !h || null == l)) throw new TypeError("Invalid schema configuration: `".concat(l, "` is not ") + "a valid type at path `".concat(c, "`. See ") + "https://bit.ly/mongoose-schematypes for a list of valid schema types.");
                                if (l instanceof g || "VirtualType" === (l.constructor && l.constructor.name || null)) this.virtual(l);
                                else {
                                    if (Array.isArray(l) && 1 === l.length && null == l[0]) throw new TypeError("Invalid value for schema Array path `" + f + '`, got value "' + l[0] + '"');
                                    if (L(l) || l instanceof m) {
                                        if (Object.keys(l).length < 1) e && (this.nested[e.substring(0, e.length - 1)] = !0), this.path(f, l);
                                        else if (!l[n] || "type" === n && L(l.type) && l.type.type) this.nested[f] = !0, this.add(l, f + ".");
                                        else {
                                            var p = l[n];
                                            if (L(p) && Object.keys(p).length > 0) {
                                                e && (this.nested[e.substring(0, e.length - 1)] = !0);
                                                var d = {};
                                                this._userProvidedOptions.typeKey && (d.typeKey = this._userProvidedOptions.typeKey), null != this._userProvidedOptions.strict && (d.strict = this._userProvidedOptions.strict), null != this._userProvidedOptions.toObject && (d.toObject = T.omit(this._userProvidedOptions.toObject, [
                                                    "transform"
                                                ])), null != this._userProvidedOptions.toJSON && (d.toJSON = T.omit(this._userProvidedOptions.toJSON, [
                                                    "transform"
                                                ]));
                                                var y = new q(p, d);
                                                y.$implicitlyCreated = !0;
                                                var b = Object.assign({}, l, a({}, n, y));
                                                this.path(e + c, b);
                                            } else if (e && (this.nested[e.substring(0, e.length - 1)] = !0), this.path(e + c, l), null != l && !l.instanceOfSchema && T.isPOJO(l.discriminators)) {
                                                var v = this.path(e + c);
                                                for(var _ in l.discriminators)v.discriminator(_, l.discriminators[_]);
                                            }
                                        }
                                    } else if (e && (this.nested[e.substring(0, e.length - 1)] = !0), this.path(e + c, l), null != l[0] && !l[0].instanceOfSchema && T.isPOJO(l[0].discriminators)) {
                                        var w = this.path(e + c);
                                        for(var S in l[0].discriminators)w.discriminator(S, l[0].discriminators[S]);
                                    }
                                }
                            }
                        }
                    }
                    var O = Object.fromEntries(Object.entries(t).map(function(t) {
                        var r = u(t, 1)[0];
                        return [
                            e + r,
                            null
                        ];
                    }));
                    return F(this, O), this;
                }, q.prototype.alias = function(t, e) {
                    return F(this, a({}, t, e)), this;
                }, q.prototype.removeIndex = function(t) {
                    if (arguments.length > 1) throw new Error("removeIndex() takes only 1 argument");
                    if ("object" !== s(t) && "string" != typeof t) throw new Error("removeIndex() may only take either an object or a string as an argument");
                    if ("object" === s(t)) for(var e = this._indexes.length - 1; e >= 0; --e)A(this._indexes[e][0], t) && this._indexes.splice(e, 1);
                    else for(var r = this._indexes.length - 1; r >= 0; --r)null != this._indexes[r][1] && this._indexes[r][1].name === t && this._indexes.splice(r, 1);
                    return this;
                }, q.prototype.clearIndexes = function() {
                    return this._indexes.length = 0, this;
                }, q.prototype.searchIndex = function(t) {
                    return this._searchIndexes.push(t), this;
                }, q.reserved = Object.create(null), q.prototype.reserved = q.reserved;
                var V = q.reserved;
                function z(t) {
                    return /\.\d+/.test(t) ? t.replace(/\.\d+\./g, ".$.").replace(/\.\d+$/, ".$") : t;
                }
                function K(t, e) {
                    if (0 === t.mapPaths.length) return null;
                    var r, n = c(t.mapPaths);
                    try {
                        for(n.s(); !(r = n.n()).done;){
                            var i = r.value.path;
                            if (new RegExp("^" + i.replace(/\.\$\*/g, "\\.[^.]+") + "$").test(e)) return t.paths[i];
                        }
                    } catch (t) {
                        n.e(t);
                    } finally{
                        n.f();
                    }
                    return null;
                }
                function H(t, e, r) {
                    var n = e.split(/\.(\d+)\.|\.(\d+)$/).filter(Boolean);
                    if (n.length < 2) return t.paths.hasOwnProperty(n[0]) ? t.paths[n[0]] : "adhocOrUndefined";
                    var i = t.path(n[0]), o = !1;
                    if (!i) return "adhocOrUndefined";
                    for(var a = n.length - 1, s = 1; s < n.length; ++s){
                        o = !1;
                        var u = n[s];
                        if (s === a && i && !/\D/.test(u)) {
                            i = i.$isMongooseDocumentArray ? i.$embeddedSchemaType : i instanceof h.Array ? i.caster : void 0;
                            break;
                        }
                        if (/\D/.test(u)) {
                            if (!i || !i.schema) {
                                i = void 0;
                                break;
                            }
                            o = "nested" === i.schema.pathType(u), i = i.schema.path(u);
                        } else i instanceof h.Array && s !== a && (i = i.caster);
                    }
                    return t.subpaths[r] = i, i ? "real" : o ? "nested" : "adhocOrUndefined";
                }
                function W(t, e) {
                    var r, n = c(t.childSchemas);
                    try {
                        for(n.s(); !(r = n.n()).done;){
                            var i = r.value.schema;
                            i.$implicitlyCreated && (Object.assign(i.options, e), W(i, e));
                        }
                    } catch (t) {
                        n.e(t);
                    } finally{
                        n.f();
                    }
                }
                V.prototype = V.emit = V.listeners = V.removeListener = V.collection = V.errors = V.get = V.init = V.isModified = V.isNew = V.populated = V.remove = V.save = V.toObject = V.validate = 1, V.collection = 1, q.prototype.path = function(t, e) {
                    if (void 0 === e) {
                        if (null != this.paths[t]) return this.paths[t];
                        var r = z(t), n = function(t, e, r) {
                            if (t.paths.hasOwnProperty(e)) return t.paths[e];
                            if (t.subpaths.hasOwnProperty(r)) {
                                var n = t.subpaths[r];
                                if ("nested" === n) return;
                                return n;
                            }
                            if (t.singleNestedPaths.hasOwnProperty(r) && "object" === s(t.singleNestedPaths[r])) {
                                var i = t.singleNestedPaths[r];
                                if ("nested" === i) return;
                                return i;
                            }
                            return null;
                        }(this, t, r);
                        if (null != n) return n;
                        var i = K(this, t);
                        return null != i ? i : null != (n = this.hasMixedParent(r)) ? n : I.test(t) ? function(t, e, r) {
                            return H(t, e, r), t.subpaths[r];
                        }(this, t, r) : void 0;
                    }
                    var o = t.split(".")[0];
                    if (V[o] && !this.options.suppressReservedKeysWarning) {
                        var a = "`".concat(o, "` is a reserved schema pathname and may break some functionality. ") + "You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.";
                        T.warn(a);
                    }
                    "object" === s(e) && T.hasUserDefinedProperty(e, "ref") && B(e.ref, t);
                    var u, f = t.split(/\./), l = f.pop(), h = this.tree, p = "", d = c(f);
                    try {
                        for(d.s(); !(u = d.n()).done;){
                            var y = u.value;
                            if (T.specialProperties.has(y)) throw new Error("Cannot set special property `" + y + "` on a schema");
                            if (p = p += (p.length > 0 ? "." : "") + y, h[y] || (this.nested[p] = !0, h[y] = {}), "object" !== s(h[y])) {
                                var m = "Cannot set nested path `" + t + "`. Parent path `" + p + "` already set to type " + h[y].name + ".";
                                throw new Error(m);
                            }
                            h = h[y];
                        }
                    } catch (t) {
                        d.e(t);
                    } finally{
                        d.f();
                    }
                    h[l] = w(e), this.paths[t] = this.interpretAsType(t, e, this.options);
                    var v = this.paths[t];
                    if (this.childSchemas = this.childSchemas.filter(function(e) {
                        return e.path !== t;
                    }), v.$isSchemaMap) {
                        var g = t + ".$*";
                        this.paths[g] = v.$__schemaType, this.mapPaths.push(this.paths[g]), v.$__schemaType.$isSingleNested && this.childSchemas.push({
                            schema: v.$__schemaType.schema,
                            model: v.$__schemaType.caster,
                            path: t
                        });
                    }
                    if (v.$isSingleNested) {
                        for(var _ = 0, S = Object.keys(v.schema.paths); _ < S.length; _++){
                            var O = S[_];
                            this.singleNestedPaths[t + "." + O] = v.schema.paths[O];
                        }
                        for(var j = 0, $ = Object.keys(v.schema.singleNestedPaths); j < $.length; j++){
                            var E = $[j];
                            this.singleNestedPaths[t + "." + E] = v.schema.singleNestedPaths[E];
                        }
                        for(var A = 0, P = Object.keys(v.schema.subpaths); A < P.length; A++){
                            var x = P[A];
                            this.singleNestedPaths[t + "." + x] = v.schema.subpaths[x];
                        }
                        for(var k = 0, M = Object.keys(v.schema.nested); k < M.length; k++){
                            var R = M[k];
                            this.singleNestedPaths[t + "." + R] = "nested";
                        }
                        Object.defineProperty(v.schema, "base", {
                            configurable: !0,
                            enumerable: !1,
                            writable: !1,
                            value: this.base
                        }), v.caster.base = this.base, this.childSchemas.push({
                            schema: v.schema,
                            model: v.caster,
                            path: t
                        });
                    } else v.$isMongooseDocumentArray && (Object.defineProperty(v.schema, "base", {
                        configurable: !0,
                        enumerable: !1,
                        writable: !1,
                        value: this.base
                    }), v.casterConstructor.base = this.base, this.childSchemas.push({
                        schema: v.schema,
                        model: v.casterConstructor,
                        path: t
                    }));
                    if (v.$isMongooseArray && v.caster instanceof b) {
                        for(var N = t, D = v; D.$isMongooseArray;)N += ".$", D.$isMongooseDocumentArray ? (D.$embeddedSchemaType._arrayPath = N, D.$embeddedSchemaType._arrayParentPath = t, D = D.$embeddedSchemaType) : (D.caster._arrayPath = N, D.caster._arrayParentPath = t, D = D.caster), this.subpaths[N] = D;
                        for(var L = 0, C = []; L < C.length; L++){
                            var U = C[L];
                            this.subpaths[U.path] = U;
                        }
                    }
                    if (v.$isMongooseDocumentArray) {
                        for(var q = 0, F = Object.keys(v.schema.paths); q < F.length; q++){
                            var W = F[q], J = v.schema.paths[W];
                            this.subpaths[t + "." + W] = J, "object" === s(J) && null != J && null == J.$parentSchemaDocArray && (J.$parentSchemaDocArray = v);
                        }
                        for(var G = 0, Y = Object.keys(v.schema.subpaths); G < Y.length; G++){
                            var Q = Y[G], X = v.schema.subpaths[Q];
                            this.subpaths[t + "." + Q] = X, "object" === s(X) && null != X && null == X.$parentSchemaDocArray && (X.$parentSchemaDocArray = v);
                        }
                        for(var Z = 0, tt = Object.keys(v.schema.singleNestedPaths); Z < tt.length; Z++){
                            var et = tt[Z], rt = v.schema.singleNestedPaths[et];
                            this.subpaths[t + "." + et] = rt, "object" === s(rt) && null != rt && null == rt.$parentSchemaDocArray && (rt.$parentSchemaDocArray = v);
                        }
                    }
                    return this;
                }, q.prototype._gatherChildSchemas = function() {
                    for(var t = [], e = 0, r = Object.keys(this.paths); e < r.length; e++){
                        var n = r[e];
                        if ("string" == typeof n) {
                            var i = this.paths[n];
                            i.$isMongooseDocumentArray || i.$isSingleNested ? t.push({
                                schema: i.schema,
                                model: i.caster,
                                path: n
                            }) : i.$isSchemaMap && i.$__schemaType.$isSingleNested && t.push({
                                schema: i.$__schemaType.schema,
                                model: i.$__schemaType.caster,
                                path: n
                            });
                        }
                    }
                    return this.childSchemas = t, t;
                }, Object.defineProperty(q.prototype, "base", {
                    configurable: !0,
                    enumerable: !1,
                    writable: !0,
                    value: null
                }), q.prototype.interpretAsType = function(t, e, i) {
                    if (e instanceof b) {
                        if (e.path === t) return e;
                        var o = e.clone();
                        return o.path = t, o;
                    }
                    var u = null != this.base ? this.base.Schema.Types : q.Types, c = null != this.base ? this.base.Types : r(9600);
                    if (!(T.isPOJO(e) || e instanceof m) && "Object" !== T.getFunctionName(e.constructor)) {
                        var f = e;
                        (e = {})[i.typeKey] = f;
                    }
                    var l, h = e[i.typeKey] && (e[i.typeKey] instanceof Function || "type" !== i.typeKey || !e.type.type) ? e[i.typeKey] : {};
                    if (T.isPOJO(h) || "mixed" === h) return new u.Mixed(t, e);
                    if (Array.isArray(h) || h === Array || "array" === h || h === u.Array) {
                        var p = h === Array || "array" === h ? e.cast || e.of : h[0];
                        if (p && p.instanceOfSchema) {
                            if (!(p instanceof q)) {
                                if (!this.options._isMerging) throw new TypeError("Schema for array path `" + t + "` is from a different copy of the Mongoose module. Please make sure you're using the same version of Mongoose everywhere with `npm list mongoose`. If you are still getting this error, please add `new Schema()` around the path: " + "".concat(t, ": new Schema(...)"));
                                p = new q(p);
                            }
                            return new u.DocumentArray(t, p, e);
                        }
                        if (p && p[i.typeKey] && p[i.typeKey].instanceOfSchema) {
                            if (!(p[i.typeKey] instanceof q)) {
                                if (!this.options._isMerging) throw new TypeError("Schema for array path `" + t + "` is from a different copy of the Mongoose module. Please make sure you're using the same version of Mongoose everywhere with `npm list mongoose`. If you are still getting this error, please add `new Schema()` around the path: " + "".concat(t, ": new Schema(...)"));
                                p[i.typeKey] = new q(p[i.typeKey]);
                            }
                            return new u.DocumentArray(t, p[i.typeKey], e, p);
                        }
                        if (void 0 !== p && (Array.isArray(p) || p.type === Array || "Array" == p.type)) return p && "Array" == p.type && (p.type = Array), new u.Array(t, this.interpretAsType(t, p, i), e);
                        var d = null == p || !p[i.typeKey] || "type" === i.typeKey && p.type.type ? p : p[i.typeKey];
                        if ("string" == typeof p) p = u[p.charAt(0).toUpperCase() + p.substring(1)];
                        else if (T.isPOJO(d)) {
                            if (Object.keys(d).length) {
                                var v = {
                                    minimize: i.minimize
                                };
                                i.typeKey && (v.typeKey = i.typeKey), i.hasOwnProperty("strict") && (v.strict = i.strict), i.hasOwnProperty("strictQuery") && (v.strictQuery = i.strictQuery), i.hasOwnProperty("toObject") && (v.toObject = T.omit(i.toObject, [
                                    "transform"
                                ])), i.hasOwnProperty("toJSON") && (v.toJSON = T.omit(i.toJSON, [
                                    "transform"
                                ])), this._userProvidedOptions.hasOwnProperty("_id") ? v._id = this._userProvidedOptions._id : null != q.Types.DocumentArray.defaultOptions._id && (v._id = q.Types.DocumentArray.defaultOptions._id);
                                var g = new q(d, v);
                                return g.$implicitlyCreated = !0, new u.DocumentArray(t, g, e);
                            }
                            return new u.Array(t, u.Mixed, e);
                        }
                        if (p) {
                            if (h = !p[i.typeKey] || "type" === i.typeKey && p.type.type ? p : p[i.typeKey], Array.isArray(h)) return new u.Array(t, this.interpretAsType(t, h, i), e);
                            if ("ClockDate" === (l = "string" == typeof h ? h : h.schemaName || T.getFunctionName(h)) && (l = "Date"), void 0 === l) throw new TypeError("Invalid schema configuration: " + "Could not determine the embedded type for array `".concat(t, "`. ") + "See https://mongoosejs.com/docs/guide.html#definition for more info on supported schema syntaxes.");
                            if (!u.hasOwnProperty(l)) throw new TypeError("Invalid schema configuration: " + "`".concat(l, "` is not a valid type within the array `").concat(t, "`.") + "See https://bit.ly/mongoose-schematypes for a list of valid schema types.");
                        }
                        return new u.Array(t, p || u.Mixed, e, i);
                    }
                    if (h && h.instanceOfSchema) return new u.Subdocument(h, t, e);
                    if ((l = n.isBuffer(h) ? "Buffer" : "function" == typeof h || "object" === s(h) ? h.schemaName || T.getFunctionName(h) : h === c.ObjectId ? "ObjectId" : h === c.Decimal128 ? "Decimal128" : null == h ? "" + h : h.toString()) && (l = l.charAt(0).toUpperCase() + l.substring(1)), "ObjectID" === l && (l = "ObjectId"), "ClockDate" === l && (l = "Date"), void 0 === l) throw new TypeError("Invalid schema configuration: `".concat(t, "` schematype definition is ") + "invalid. See https://mongoosejs.com/docs/guide.html#definition for more info on supported schema syntaxes.");
                    if (null == u[l]) throw new TypeError("Invalid schema configuration: `".concat(l, "` is not ") + "a valid type at path `".concat(t, "`. See ") + "https://bit.ly/mongoose-schematypes for a list of valid schema types.");
                    var _ = new u[l](t, e);
                    return _.$isSchemaMap && function(t, e, r, n, i) {
                        var o = r + ".$*", s = {
                            type: {}
                        };
                        T.hasUserDefinedProperty(n, "of") && ((s = T.isPOJO(n.of) && Object.keys(n.of).length > 0 && !T.hasUserDefinedProperty(n.of, t.options.typeKey) ? a({}, t.options.typeKey, new q(n.of)) : T.isPOJO(n.of) ? Object.assign({}, n.of) : a({}, t.options.typeKey, n.of))[t.options.typeKey] && s[t.options.typeKey].instanceOfSchema && s[t.options.typeKey].eachPath(function(t, e) {
                            if (!0 === e.options.select || !1 === e.options.select) throw new y('Cannot use schema-level projections (`select: true` or `select: false`) within maps at path "' + r + "." + t + '"');
                        }), T.hasUserDefinedProperty(n, "ref") && (s.ref = n.ref)), e.$__schemaType = t.interpretAsType(o, s, i);
                    }(this, _, t, e, i), _;
                }, q.prototype.eachPath = function(t) {
                    for(var e = Object.keys(this.paths), r = e.length, n = 0; n < r; ++n)t(e[n], this.paths[e[n]]);
                    return this;
                }, q.prototype.requiredPaths = function(t) {
                    if (this._requiredpaths && !t) return this._requiredpaths;
                    for(var e = Object.keys(this.paths), r = e.length, n = []; r--;){
                        var i = e[r];
                        this.paths[i].isRequired && n.push(i);
                    }
                    return this._requiredpaths = n, this._requiredpaths;
                }, q.prototype.indexedPaths = function() {
                    return this._indexedpaths || (this._indexedpaths = this.indexes()), this._indexedpaths;
                }, q.prototype.pathType = function(t) {
                    if (this.paths.hasOwnProperty(t)) return "real";
                    if (this.virtuals.hasOwnProperty(t)) return "virtual";
                    if (this.nested.hasOwnProperty(t)) return "nested";
                    var e = z(t);
                    if (this.subpaths.hasOwnProperty(e) || this.subpaths.hasOwnProperty(t)) return "real";
                    var r = this.singleNestedPaths.hasOwnProperty(e) || this.singleNestedPaths.hasOwnProperty(t);
                    return r ? "nested" === r ? "nested" : "real" : null != K(this, t) ? "real" : /\.\d+\.|\.\d+$/.test(t) ? H(this, t, e) : "adhocOrUndefined";
                }, q.prototype.hasMixedParent = function(t) {
                    var e = t.split(/\./g);
                    t = "";
                    for(var r = 0; r < e.length; ++r)if (t = r > 0 ? t + "." + e[r] : e[r], this.paths.hasOwnProperty(t) && this.paths[t] instanceof h.Mixed) return this.paths[t];
                    return null;
                }, q.prototype.setupTimestamp = function(t) {
                    return M(this, t);
                }, q.prototype.queue = function(t, e) {
                    return this.callQueue.push([
                        t,
                        e
                    ]), this;
                }, q.prototype.pre = function(t) {
                    if (t instanceof RegExp) {
                        var e, r = Array.prototype.slice.call(arguments, 1), n = c(D);
                        try {
                            for(n.s(); !(e = n.n()).done;){
                                var i = e.value;
                                t.test(i) && this.pre.apply(this, [
                                    i
                                ].concat(r));
                            }
                        } catch (t) {
                            n.e(t);
                        } finally{
                            n.f();
                        }
                        return this;
                    }
                    if (Array.isArray(t)) {
                        var o, a = Array.prototype.slice.call(arguments, 1), s = c(t);
                        try {
                            for(s.s(); !(o = s.n()).done;){
                                var u = o.value;
                                this.pre.apply(this, [
                                    u
                                ].concat(a));
                            }
                        } catch (t) {
                            s.e(t);
                        } finally{
                            s.f();
                        }
                        return this;
                    }
                    return this.s.hooks.pre.apply(this.s.hooks, arguments), this;
                }, q.prototype.post = function(t) {
                    if (t instanceof RegExp) {
                        var e, r = Array.prototype.slice.call(arguments, 1), n = c(D);
                        try {
                            for(n.s(); !(e = n.n()).done;){
                                var i = e.value;
                                t.test(i) && this.post.apply(this, [
                                    i
                                ].concat(r));
                            }
                        } catch (t) {
                            n.e(t);
                        } finally{
                            n.f();
                        }
                        return this;
                    }
                    if (Array.isArray(t)) {
                        var o, a = Array.prototype.slice.call(arguments, 1), s = c(t);
                        try {
                            for(s.s(); !(o = s.n()).done;){
                                var u = o.value;
                                this.post.apply(this, [
                                    u
                                ].concat(a));
                            }
                        } catch (t) {
                            s.e(t);
                        } finally{
                            s.f();
                        }
                        return this;
                    }
                    return this.s.hooks.post.apply(this.s.hooks, arguments), this;
                }, q.prototype.plugin = function(t, e) {
                    if ("function" != typeof t) throw new Error('First param to `schema.plugin()` must be a function, got "' + s(t) + '"');
                    if (e && e.deduplicate) {
                        var r, n = c(this.plugins);
                        try {
                            for(n.s(); !(r = n.n()).done;)if (r.value.fn === t) return this;
                        } catch (t) {
                            n.e(t);
                        } finally{
                            n.f();
                        }
                    }
                    return this.plugins.push({
                        fn: t,
                        opts: e
                    }), t(this, e), this;
                }, q.prototype.method = function(t, e, r) {
                    if ("string" != typeof t) for(var n in t)this.methods[n] = t[n], this.methodOptions[n] = w(r);
                    else this.methods[t] = e, this.methodOptions[t] = w(r);
                    return this;
                }, q.prototype.static = function(t, e) {
                    if ("string" != typeof t) for(var r in t)this.statics[r] = t[r];
                    else this.statics[t] = e;
                    return this;
                }, q.prototype.index = function(t, e) {
                    for(var r in t || (t = {}), e || (e = {}), e.expires && T.expires(e), t)this.aliases[r] && (t = T.renameObjKey(t, r, this.aliases[r]));
                    for(var n = 0, i = Object.keys(t); n < i.length; n++){
                        var o = i[n];
                        "ascending" === t[o] || "asc" === t[o] ? t[o] = 1 : "descending" !== t[o] && "desc" !== t[o] || (t[o] = -1);
                    }
                    var a, s = c(this.indexes());
                    try {
                        for(s.s(); !(a = s.n()).done;){
                            var u = a.value;
                            null == e.name && null == u[1].name && A(u[0], t) && T.warn("Duplicate schema index on ".concat(JSON.stringify(t), ' found. This is often due to declaring an index using both "index: true" and "schema.index()". Please remove the duplicate index definition.'));
                        }
                    } catch (t) {
                        s.e(t);
                    } finally{
                        s.f();
                    }
                    return this._indexes.push([
                        t,
                        e
                    ]), this;
                }, q.prototype.set = function(t, e, r) {
                    if (1 === arguments.length) return this.options[t];
                    switch(t){
                        case "read":
                            "string" == typeof e ? this.options[t] = {
                                mode: $(e),
                                tags: r
                            } : Array.isArray(e) && "string" == typeof e[0] ? this.options[t] = {
                                mode: $(e[0]),
                                tags: e[1]
                            } : this.options[t] = e, this._userProvidedOptions[t] = this.options[t];
                            break;
                        case "timestamps":
                            this.setupTimestamp(e), this.options[t] = e, this._userProvidedOptions[t] = this.options[t];
                            break;
                        case "_id":
                            this.options[t] = e, this._userProvidedOptions[t] = this.options[t], e && !this.paths._id ? _(this) : !e && null != this.paths._id && this.paths._id.auto && this.remove("_id");
                            break;
                        default:
                            this.options[t] = e, this._userProvidedOptions[t] = this.options[t];
                    }
                    return "strict" === t && W(this, {
                        strict: e
                    }), "strictQuery" === t && W(this, {
                        strictQuery: e
                    }), "toObject" === t && (delete (e = o({}, e)).transform, W(this, {
                        toObject: e
                    })), "toJSON" === t && (delete (e = o({}, e)).transform, W(this, {
                        toJSON: e
                    })), this;
                }, q.prototype.get = function(t) {
                    return this.options[t];
                };
                var J = "2d 2dsphere hashed text".split(" ");
                function G(t, e) {
                    var r, n = e.split("."), i = n.pop(), o = t.tree, a = c(n);
                    try {
                        for(a.s(); !(r = a.n()).done;)o = o[r.value];
                    } catch (t) {
                        a.e(t);
                    } finally{
                        a.f();
                    }
                    delete o[i];
                }
                function Y(t) {
                    return t.startsWith("$[") && t.endsWith("]");
                }
                Object.defineProperty(q, "indexTypes", {
                    get: function() {
                        return J;
                    },
                    set: function() {
                        throw new Error("Cannot overwrite Schema.indexTypes");
                    }
                }), q.prototype.indexes = function() {
                    return j(this);
                }, q.prototype.virtual = function(t, e) {
                    if (t instanceof g || "VirtualType" === O(t)) return this.virtual(t.path, t.options);
                    if (e = new v(e), T.hasUserDefinedProperty(e, [
                        "ref",
                        "refPath"
                    ])) {
                        if (null == e.localField) throw new Error("Reference virtuals require `localField` option");
                        if (null == e.foreignField) throw new Error("Reference virtuals require `foreignField` option");
                        var r = this.virtual(t);
                        r.options = e, this.pre("init", function(n, i) {
                            if (x.has(t, n)) {
                                var o = x.get(t, n);
                                if (this.$$populatedVirtuals || (this.$$populatedVirtuals = {}), e.justOne || e.count ? this.$$populatedVirtuals[t] = Array.isArray(o) ? o[0] : o : this.$$populatedVirtuals[t] = Array.isArray(o) ? o : null == o ? [] : [
                                    o
                                ], null != i && i.hydratedPopulatedDocs && !e.count) {
                                    var a = r._getModelNamesForPopulate(this), s = this.$$populatedVirtuals[t];
                                    if (Array.isArray(s) || s.$__ || 1 !== (null == a ? void 0 : a.length)) {
                                        if (Array.isArray(s) && 1 === (null == a ? void 0 : a.length)) {
                                            for(var u = this.db.model(a[0]), c = 0; c < s.length; ++c)s[c].$__ || (s[c] = u.hydrate(s[c], null, {
                                                hydratedPopulatedDocs: !0
                                            }));
                                            var f = e.foreignField;
                                            this.$populated(t, s.map(function(t) {
                                                return null == t ? t : t.get("function" == typeof f ? f.call(t, t) : f);
                                            }), {
                                                populateModelSymbol: u
                                            });
                                        }
                                    } else {
                                        var l = this.db.model(a[0]);
                                        this.$$populatedVirtuals[t] = l.hydrate(s);
                                    }
                                }
                                x.unset(t, n);
                            }
                        }), r.set(function(r) {
                            return this.$$populatedVirtuals || (this.$$populatedVirtuals = {}), k(this.$$populatedVirtuals, t, r, e);
                        }), "function" == typeof e.get && r.get(e.get);
                        for(var n = t.split("."), i = n[0], o = 0; o < n.length - 1; ++o)if (null != this.paths[i]) {
                            if (this.paths[i].$isMongooseDocumentArray || this.paths[i].$isSingleNested) {
                                var a = n.slice(o + 1).join(".");
                                this.paths[i].schema.virtual(a, e);
                                break;
                            }
                            i += "." + n[o + 1];
                        }
                        return r;
                    }
                    var s = this.virtuals, u = t.split(".");
                    if ("real" === this.pathType(t)) throw new Error('Virtual path "' + t + '" conflicts with a real path in the schema');
                    if (s[t] = u.reduce(function(r, n, i) {
                        return r[n] || (r[n] = i === u.length - 1 ? new g(e, t) : {}), r[n];
                    }, this.tree), e && e.applyToArray && u.length > 1) {
                        var c = this.path(u.slice(0, -1).join("."));
                        if (c && c.$isMongooseArray) return c.virtual(u[u.length - 1], e);
                        throw new y('Path "'.concat(c, '" is not an array'));
                    }
                    return s[t];
                }, q.prototype.virtualpath = function(t) {
                    return this.virtuals.hasOwnProperty(t) ? this.virtuals[t] : null;
                }, q.prototype.remove = function(t) {
                    return "string" == typeof t && (t = [
                        t
                    ]), Array.isArray(t) && t.forEach(function(t) {
                        if (null != this.path(t) || this.nested[t]) {
                            if (this.nested[t]) {
                                var e, r = c(Object.keys(this.paths).concat(Object.keys(this.nested)));
                                try {
                                    for(r.s(); !(e = r.n()).done;){
                                        var n = e.value;
                                        n.startsWith(t + ".") && (delete this.paths[n], delete this.nested[n], G(this, n));
                                    }
                                } catch (t) {
                                    r.e(t);
                                } finally{
                                    r.f();
                                }
                                return delete this.nested[t], void G(this, t);
                            }
                            delete this.paths[t], G(this, t);
                        }
                    }, this), this;
                }, q.prototype.removeVirtual = function(t) {
                    if ("string" == typeof t && (t = [
                        t
                    ]), Array.isArray(t)) {
                        var e, r = c(t);
                        try {
                            for(r.s(); !(e = r.n()).done;){
                                var n = e.value;
                                if (null == this.virtuals[n]) throw new y('Attempting to remove virtual "'.concat(n, '" that does not exist.'));
                            }
                        } catch (t) {
                            r.e(t);
                        } finally{
                            r.f();
                        }
                        var i, o = c(t);
                        try {
                            for(o.s(); !(i = o.n()).done;){
                                var a = i.value;
                                delete this.paths[a], delete this.virtuals[a], -1 !== a.indexOf(".") ? x.unset(a, this.tree) : delete this.tree[a];
                            }
                        } catch (t) {
                            o.e(t);
                        } finally{
                            o.f();
                        }
                    }
                    return this;
                }, q.prototype.loadClass = function(t, e) {
                    return t === Object.prototype || t === Function.prototype || t.prototype.hasOwnProperty("$isMongooseModelPrototype") || t.prototype.hasOwnProperty("$isMongooseDocumentPrototype") || (this.loadClass(Object.getPrototypeOf(t), e), e || Object.getOwnPropertyNames(t).forEach(function(e) {
                        if (!e.match(/^(length|name|prototype|constructor|__proto__)$/)) {
                            var r = Object.getOwnPropertyDescriptor(t, e);
                            r.hasOwnProperty("value") && this.static(e, r.value);
                        }
                    }, this), Object.getOwnPropertyNames(t.prototype).forEach(function(r) {
                        if (!r.match(/^(constructor)$/)) {
                            var n = Object.getOwnPropertyDescriptor(t.prototype, r);
                            e || "function" == typeof n.value && this.method(r, n.value), "function" == typeof n.get && (this.virtuals[r] && (this.virtuals[r].getters = []), this.virtual(r).get(n.get)), "function" == typeof n.set && (this.virtuals[r] && (this.virtuals[r].setters = []), this.virtual(r).set(n.set));
                        }
                    }, this)), this;
                }, q.prototype._getSchema = function(t) {
                    var e = this.path(t), r = [];
                    if (e) return e.$fullPath = t, e;
                    for(var n = t.split("."), i = 0; i < n.length; ++i)("$" === n[i] || Y(n[i])) && (n[i] = "0"), U.test(n[i]) && (n[i] = "$");
                    return function t(e, n) {
                        for(var i, o, a = e.length + 1; a--;)if (o = e.slice(0, a).join("."), i = n.path(o)) {
                            if (r.push(o), i.caster) {
                                if (i.caster instanceof h.Mixed) return i.caster.$fullPath = r.join("."), i.caster;
                                if (a !== e.length) {
                                    if (a + 1 === e.length && i.$embeddedSchemaType && ("$" === e[a] || Y(e[a]))) return i.$embeddedSchemaType;
                                    if (i.schema) {
                                        var s = void 0;
                                        return "$" === e[a] || Y(e[a]) ? a + 1 === e.length ? i.$embeddedSchemaType : ((s = t(e.slice(a + 1), i.schema)) && (s.$parentSchemaDocArray = s.$parentSchemaDocArray || (i.schema.$isSingleNested ? null : i)), s) : ((s = t(e.slice(a), i.schema)) && (s.$parentSchemaDocArray = s.$parentSchemaDocArray || (i.schema.$isSingleNested ? null : i)), s);
                                    }
                                }
                            } else if (i.$isSchemaMap) {
                                if (a >= e.length) return i;
                                if (a + 1 >= e.length) return i.$__schemaType;
                                if (i.$__schemaType instanceof h.Mixed) return i.$__schemaType;
                                if (null != i.$__schemaType.schema) return t(e.slice(a + 1), i.$__schemaType.schema);
                            }
                            return i.$fullPath = r.join("."), i;
                        }
                    }(n, this);
                }, q.prototype._getPathType = function(t) {
                    return this.path(t) ? "real" : function t(e, r) {
                        for(var n, i, o = e.length + 1; o--;){
                            if (i = e.slice(0, o).join("."), n = r.path(i)) return n.caster ? n.caster instanceof h.Mixed ? {
                                schema: n,
                                pathType: "mixed"
                            } : o !== e.length && n.schema ? "$" === e[o] || Y(e[o]) ? o === e.length - 1 ? {
                                schema: n,
                                pathType: "nested"
                            } : t(e.slice(o + 1), n.schema) : t(e.slice(o), n.schema) : {
                                schema: n,
                                pathType: n.$isSingleNested ? "nested" : "array"
                            } : {
                                schema: n,
                                pathType: "real"
                            };
                            if (o === e.length && r.nested[i]) return {
                                schema: r,
                                pathType: "nested"
                            };
                        }
                        return {
                            schema: n || r,
                            pathType: "undefined"
                        };
                    }(t.split("."), this);
                }, q.prototype._transformDuplicateKeyError = function(t) {
                    if (!this._duplicateKeyErrorMessagesByPath) return t;
                    if (11e3 !== t.code && 11001 !== t.code) return t;
                    if (null != t.keyPattern) {
                        var e = t.keyPattern, r = Object.keys(e);
                        if (1 !== r.length) return t;
                        var n = r[0];
                        return this._duplicateKeyErrorMessagesByPath.hasOwnProperty(n) ? new y(this._duplicateKeyErrorMessagesByPath[n], {
                            cause: t
                        }) : t;
                    }
                    return t;
                }, q.prototype._preCompile = function() {
                    this.plugin(E, {
                        deduplicate: !0
                    });
                }, q.prototype.toJSONSchema = function(t) {
                    for(var e, r = null !== (e = null == t ? void 0 : t.useBsonType) && void 0 !== e && e, n = r ? {
                        required: [],
                        properties: {}
                    } : {
                        type: "object",
                        required: [],
                        properties: {}
                    }, i = 0, o = Object.keys(this.paths); i < o.length; i++){
                        var a = o[i], s = this.paths[a];
                        if (-1 === s._presplitPath.indexOf("$*")) {
                            var u = n;
                            if (s._presplitPath.length > 1) for(var c = 0; c < s._presplitPath.length - 1; ++c){
                                var h = s._presplitPath[c];
                                null == u.properties[h] && (u.properties[h] = r ? {
                                    bsonType: [
                                        "object",
                                        "null"
                                    ],
                                    properties: {}
                                } : {
                                    type: [
                                        "object",
                                        "null"
                                    ],
                                    properties: {}
                                }), u = u.properties[h];
                            }
                            var p = s._presplitPath[s._presplitPath.length - 1], d = !1;
                            "_id" === a ? (u.required || (u.required = []), u.required.push("_id"), d = !0) : s.options.required && "function" != typeof s.options.required && (u.required || (u.required = []), u.required.push(p), d = !0), u.properties[p] = s.toJSONSchema(t), s.options.enum && (u.properties[p].enum = d ? s.options.enum : [].concat(function(t) {
                                if (Array.isArray(t)) return l(t);
                            }(y = s.options.enum) || function(t) {
                                if ("undefined" != typeof Symbol && null != t[Symbol.iterator] || null != t["@@iterator"]) return Array.from(t);
                            }(y) || f(y) || function() {
                                throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                            }(), [
                                null
                            ]));
                        }
                    }
                    var y;
                    return 0 === n.required.length && delete n.required, n;
                }, t.exports = e = q, q.Types = h = r(7953), e.ObjectId = h.ObjectId;
            },
            7760: (t, e, r)=>{
                "use strict";
                function n(t, e) {
                    var r = Object.keys(t);
                    if (Object.getOwnPropertySymbols) {
                        var n = Object.getOwnPropertySymbols(t);
                        e && (n = n.filter(function(e) {
                            return Object.getOwnPropertyDescriptor(t, e).enumerable;
                        })), r.push.apply(r, n);
                    }
                    return r;
                }
                function i(t) {
                    for(var e = 1; e < arguments.length; e++){
                        var r = null != arguments[e] ? arguments[e] : {};
                        e % 2 ? n(Object(r), !0).forEach(function(e) {
                            o(t, e, r[e]);
                        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : n(Object(r)).forEach(function(e) {
                            Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));
                        });
                    }
                    return t;
                }
                function o(t, e, r) {
                    return (e = function(t) {
                        var e = function(t) {
                            if ("object" != s(t) || !t) return t;
                            var e = t[Symbol.toPrimitive];
                            if (void 0 !== e) {
                                var r = e.call(t, "string");
                                if ("object" != s(r)) return r;
                                throw new TypeError("@@toPrimitive must return a primitive value.");
                            }
                            return String(t);
                        }(t);
                        return "symbol" == s(e) ? e : e + "";
                    }(e)) in t ? Object.defineProperty(t, e, {
                        value: r,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0
                    }) : t[e] = r, t;
                }
                function a(t, e) {
                    (null == e || e > t.length) && (e = t.length);
                    for(var r = 0, n = Array(e); r < e; r++)n[r] = t[r];
                    return n;
                }
                function s(t) {
                    return s = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, s(t);
                }
                var u, c, f = r(8499), l = r(2555), h = r(8213), p = r(4592), d = r(6426), y = d.CastError, b = r(5022), m = r(2069), v = r(622), g = r(2073), _ = r(7982), w = r(4450), S = r(5879), O = r(5110), j = r(7352), $ = r(8768), E = r(5558).G, A = r(4327), P = r(9604), x = r(8677), k = Symbol("mongoose#isNestedArray"), M = Object.freeze({});
                function T(t, e, n, i) {
                    c || (c = r(9600).Embedded);
                    var o, a, s = "type";
                    if (i && i.typeKey && (s = i.typeKey), this.schemaOptions = i, e) {
                        var u = {};
                        $.isPOJO(e) && (e[s] ? (delete (u = w(e))[s], e = e[s]) : e = b), null != n && null != n.ref && null == u.ref && (u.ref = n.ref), e === Object && (e = b);
                        var f = "string" == typeof e ? e : $.getFunctionName(e), l = r(7953), h = l.hasOwnProperty(f) ? l[f] : e;
                        if (this.casterConstructor = h, this.casterConstructor instanceof T && (this.casterConstructor[k] = !0), "function" != typeof h || h.$isArraySubdocument || h.$isSchemaMap) this.caster = h, this.caster instanceof c || (this.caster.path = t);
                        else {
                            var p = this.caster instanceof c ? null : t;
                            this.caster = new h(p, u);
                        }
                        this.$embeddedSchemaType = this.caster;
                    }
                    if (this.$isMongooseArray = !0, d.call(this, t, n, "Array"), null != this.defaultValue && (o = this.defaultValue, a = "function" == typeof o), !("defaultValue" in this) || null != this.defaultValue) {
                        var y = function() {
                            return a ? o.call(this) : null != o ? [].concat(o) : [];
                        };
                        y.$runBeforeSetters = !a, this.default(y);
                    }
                }
                T.schemaName = "Array", T.options = {
                    castNonArrays: !0
                }, T.defaultOptions = {}, T.set = d.set, T.setters = [], T.get = d.get, T.prototype = Object.create(d.prototype), T.prototype.constructor = T, T.prototype.OptionsConstructor = p, T._checkRequired = d.prototype.checkRequired, T.checkRequired = d.checkRequired, T.prototype.virtuals = null, T.prototype.checkRequired = function(t, e) {
                    return "object" === s(t) && d._isRef(this, t, e, !0) ? !!t : ("function" == typeof this.constructor.checkRequired ? this.constructor.checkRequired() : T.checkRequired())(t);
                }, T.prototype.enum = function() {
                    for(var t = this;;){
                        var e = t && t.caster && t.caster.instance;
                        if ("Array" !== e) {
                            if ("String" !== e && "Number" !== e) throw new Error("`enum` can only be set on an array of strings or numbers , not " + e);
                            break;
                        }
                        t = t.caster;
                    }
                    var r = arguments;
                    return !Array.isArray(arguments) && $.isObject(arguments) && (r = $.object.vals(r)), t.caster.enum.apply(t.caster, r), this;
                }, T.prototype.applyGetters = function(t, e) {
                    return null != e && null != e.$__ && e.$populated(this.path) ? t : d.prototype.applyGetters.call(this, t, e);
                }, T.prototype._applySetters = function(t, e, r, n) {
                    if (this.casterConstructor.$isMongooseArray && T.options.castNonArrays && !this[k]) {
                        for(var i = 0, o = this; null != o && o.$isMongooseArray && !o.$isMongooseDocumentArray;)++i, o = o.casterConstructor;
                        if (null != t && 0 !== t.length) {
                            var a = g(t);
                            if (a.min === a.max && a.max < i && a.containsNonArrayItem) for(var s = a.max; s < i; ++s)t = [
                                t
                            ];
                        }
                    }
                    return d.prototype._applySetters.call(this, t, e, r, n);
                }, T.prototype.cast = function(t, e, n, i, o) {
                    var a, s;
                    if (u || (u = r(9600).Array), Array.isArray(t)) {
                        if (!t.length && e) {
                            var c = e.schema.indexedPaths(), f = this.path;
                            for(a = 0, s = c.length; a < s; ++a){
                                var l = c[a][0][f];
                                if ("2dsphere" === l || "2d" === l) return;
                            }
                            var h = this.path.endsWith(".coordinates") ? this.path.substring(0, this.path.lastIndexOf(".")) : null;
                            if (null != h) {
                                for(a = 0, s = c.length; a < s; ++a)if ("2dsphere" === c[a][0][h]) return;
                            }
                        }
                        o = o || M;
                        var p = $.isMongooseArray(t) ? t.__array : t, d = o.path || this.path;
                        if (null != o.arrayPathIndex && (d += "." + o.arrayPathIndex), p = (t = u(p, d, e, this)).__array, n && null != e && null != e.$__ && e.$populated(this.path)) return t;
                        var m = this.caster, v = m.$isMongooseArray;
                        if (m && this.casterConstructor !== b) try {
                            var g = p.length;
                            for(a = 0; a < g; a++){
                                var _ = {};
                                v && (null != o.arrayPath || null != m._arrayParentPath) && (_.arrayPathIndex = a), o.hydratedPopulatedDocs && (_.hydratedPopulatedDocs = o.hydratedPopulatedDocs), p[a] = m.applySetters(p[a], e, n, void 0, _);
                            }
                        } catch (e) {
                            throw new y("[" + e.kind + "]", j.inspect(t), this.path + "." + a, e, this);
                        }
                        return t;
                    }
                    var w = null != this.options.castNonArrays ? this.options.castNonArrays : T.options.castNonArrays;
                    if (n || w) return e && n && e.markModified(this.path), this.cast([
                        t
                    ], e, n);
                    throw new y("Array", j.inspect(t), this.path, null, this);
                }, T.prototype._castForPopulate = function(t, e) {
                    if (u || (u = r(9600).Array), Array.isArray(t)) {
                        var n, i = t.__array ? t.__array : t, o = i.length, a = this.caster;
                        if (a && this.casterConstructor !== b) try {
                            for(n = 0; n < o; n++){
                                var s = {};
                                a.$isMongooseArray && null != a._arrayParentPath && (s.arrayPathIndex = n), i[n] = a.cast(i[n], e, !1, void 0, s);
                            }
                        } catch (e) {
                            throw new y("[" + e.kind + "]", j.inspect(t), this.path + "." + n, e, this);
                        }
                        return t;
                    }
                    throw new y("Array", j.inspect(t), this.path, null, this);
                }, T.prototype.$toObject = T.prototype.toObject, T.prototype.discriminator = function() {
                    for(var t, e = this; e.$isMongooseArray && !e.$isMongooseDocumentArray;)if (null == (e = e.casterConstructor) || "function" == typeof e) throw new h("You can only add an embedded discriminator on a document array, " + this.path + " is a plain array");
                    return (t = e).discriminator.apply(t, arguments);
                }, T.prototype.clone = function() {
                    var t = Object.assign({}, this.options), e = new this.constructor(this.path, this.caster, t, this.schemaOptions);
                    return e.validators = this.validators.slice(), void 0 !== this.requiredValidator && (e.requiredValidator = this.requiredValidator), e;
                }, T.prototype._castForQuery = function(t, e) {
                    var r = this, n = this.casterConstructor;
                    if (t && n.discriminators && n.schema && n.schema.options && n.schema.options.discriminatorKey) {
                        if ("string" == typeof t[n.schema.options.discriminatorKey] && n.discriminators[t[n.schema.options.discriminatorKey]]) n = n.discriminators[t[n.schema.options.discriminatorKey]];
                        else {
                            var i = x(n.discriminators, t[n.schema.options.discriminatorKey]);
                            i && (n = i);
                        }
                    }
                    var o = this.casterConstructor.prototype, a = o && o.castForQuery, s = o && o.cast, u = n.castForQuery, c = this.caster;
                    return Array.isArray(t) ? (this.setters.reverse().forEach(function(e) {
                        t = e.call(r, t, r);
                    }), t = t.map(function(t) {
                        return $.isObject(t) && t.$elemMatch ? t : a ? t = a.call(c, null, t, e) : s ? t = s.call(c, t) : u ? t = u.call(c, null, t, e) : null != t ? t = new n(t) : t;
                    })) : a ? t = a.call(c, null, t, e) : s ? t = s.call(c, t) : u ? t = u.call(c, null, t, e) : null != t && (t = new n(t)), t;
                }, T.prototype.castForQuery = function(t, e, r) {
                    var n;
                    if (null != t) {
                        if (!(n = this.$conditionalHandlers[t])) throw new Error("Can't use " + t + " with Array.");
                        return n.call(this, e, r);
                    }
                    return this._castForQuery(e, r);
                }, T.prototype.virtual = function(t, e) {
                    if (t instanceof v || "VirtualType" === S(t)) return this.virtual(t.path, t.options);
                    if (e = new m(e), $.hasUserDefinedProperty(e, [
                        "ref",
                        "refPath"
                    ])) throw new h("Cannot set populate virtual as a property of an array");
                    var r = new v(e, t);
                    return null === this.virtuals && (this.virtuals = {}), this.virtuals[t] = r, r;
                };
                var B = T.prototype.$conditionalHandlers = {};
                function I(t) {
                    return function(e, r) {
                        if (!Array.isArray(e)) throw new TypeError("conditional " + t + " requires an array");
                        var n, i = [], o = function(t, e) {
                            var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                            if (!r) {
                                if (Array.isArray(t) || (r = function(t, e) {
                                    if (t) {
                                        if ("string" == typeof t) return a(t, e);
                                        var r = ({}).toString.call(t).slice(8, -1);
                                        return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? a(t, e) : void 0;
                                    }
                                }(t)) || e && t && "number" == typeof t.length) {
                                    r && (t = r);
                                    var n = 0, i = function() {};
                                    return {
                                        s: i,
                                        n: function() {
                                            return n >= t.length ? {
                                                done: !0
                                            } : {
                                                done: !1,
                                                value: t[n++]
                                            };
                                        },
                                        e: function(t) {
                                            throw t;
                                        },
                                        f: i
                                    };
                                }
                                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                            }
                            var o, s = !0, u = !1;
                            return {
                                s: function() {
                                    r = r.call(t);
                                },
                                n: function() {
                                    var t = r.next();
                                    return s = t.done, t;
                                },
                                e: function(t) {
                                    u = !0, o = t;
                                },
                                f: function() {
                                    try {
                                        s || null == r.return || r.return();
                                    } finally{
                                        if (u) throw o;
                                    }
                                }
                            };
                        }(e);
                        try {
                            for(o.s(); !(n = o.n()).done;){
                                var s, u = n.value;
                                i.push(_(null !== (s = this.casterConstructor.schema) && void 0 !== s ? s : r.schema, u, null, this && this.$$context));
                            }
                        } catch (t) {
                            o.e(t);
                        } finally{
                            o.f();
                        }
                        return i;
                    };
                }
                B.$all = function(t, e) {
                    var r = this;
                    return Array.isArray(t) || (t = [
                        t
                    ]), t = t.map(function(t) {
                        if (!$.isObject(t)) return t;
                        if (null != t.$elemMatch) return {
                            $elemMatch: _(r.casterConstructor.schema, t.$elemMatch, null, r && r.$$context)
                        };
                        var e = {};
                        return e[r.path] = t, _(r.casterConstructor.schema, e, null, r && r.$$context)[r.path];
                    }, this), this.castForQuery(null, t, e);
                }, B.$options = String, B.$elemMatch = function(t, e) {
                    for(var r = Object.keys(t), n = r.length, i = 0; i < n; ++i){
                        var o = r[i], a = t[o];
                        O(o) && null != a && (t[o] = this.castForQuery(o, a, e));
                    }
                    return t;
                }, B.$geoIntersects = P.cast$geoIntersects, B.$or = I("$or"), B.$and = I("$and"), B.$nor = I("$nor"), B.$near = B.$nearSphere = P.cast$near, B.$within = B.$geoWithin = P.cast$within, B.$size = B.$minDistance = B.$maxDistance = E, B.$exists = f, B.$type = l, B.$eq = B.$gt = B.$gte = B.$lt = B.$lte = B.$not = B.$regex = B.$ne = T.prototype._castForQuery, B.$nin = d.prototype.$conditionalHandlers.$nin, B.$in = d.prototype.$conditionalHandlers.$in, T.prototype.toJSONSchema = function(t) {
                    var e = this.getEmbeddedSchemaType(), r = this.options.required && "function" != typeof this.options.required;
                    return i(i({}, A("array", "array", null == t ? void 0 : t.useBsonType, r)), {}, {
                        items: e.toJSONSchema(t)
                    });
                }, t.exports = T;
            },
            3318: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i(t, e) {
                    var r = Object.keys(t);
                    if (Object.getOwnPropertySymbols) {
                        var n = Object.getOwnPropertySymbols(t);
                        e && (n = n.filter(function(e) {
                            return Object.getOwnPropertyDescriptor(t, e).enumerable;
                        })), r.push.apply(r, n);
                    }
                    return r;
                }
                function o(t) {
                    for(var e = 1; e < arguments.length; e++){
                        var r = null != arguments[e] ? arguments[e] : {};
                        e % 2 ? i(Object(r), !0).forEach(function(e) {
                            a(t, e, r[e]);
                        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : i(Object(r)).forEach(function(e) {
                            Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));
                        });
                    }
                    return t;
                }
                function a(t, e, r) {
                    return (e = function(t) {
                        var e = function(t) {
                            if ("object" != n(t) || !t) return t;
                            var e = t[Symbol.toPrimitive];
                            if (void 0 !== e) {
                                var r = e.call(t, "string");
                                if ("object" != n(r)) return r;
                                throw new TypeError("@@toPrimitive must return a primitive value.");
                            }
                            return String(t);
                        }(t);
                        return "symbol" == n(e) ? e : e + "";
                    }(e)) in t ? Object.defineProperty(t, e, {
                        value: r,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0
                    }) : t[e] = r, t;
                }
                var s = r(3609), u = r(6426), c = r(4058), f = r(4327);
                function l(t, e) {
                    u.call(this, t, e, "BigInt");
                }
                function h(t, e) {
                    return this.castForQuery(null, t, e);
                }
                l.schemaName = "BigInt", l.defaultOptions = {}, l.prototype = Object.create(u.prototype), l.prototype.constructor = l, l._cast = c, l.set = u.set, l.setters = [], l.get = u.get, l.cast = function(t) {
                    return 0 === arguments.length || (!1 === t && (t = this._defaultCaster), this._cast = t), this._cast;
                }, l._checkRequired = function(t) {
                    return null != t;
                }, l.checkRequired = u.checkRequired, l.prototype.checkRequired = function(t) {
                    return this.constructor._checkRequired(t);
                }, l.prototype.cast = function(t) {
                    var e;
                    e = "function" == typeof this._castFunction ? this._castFunction : "function" == typeof this.constructor.cast ? this.constructor.cast() : l.cast();
                    try {
                        return e(t);
                    } catch (e) {
                        throw new s("BigInt", t, this.path, e, this);
                    }
                }, l.$conditionalHandlers = o(o({}, u.prototype.$conditionalHandlers), {}, {
                    $gt: h,
                    $gte: h,
                    $lt: h,
                    $lte: h
                }), l.prototype.castForQuery = function(t, e, r) {
                    var n;
                    if (null != t) return (n = l.$conditionalHandlers[t]) ? n.call(this, e) : this.applySetters(e, r);
                    try {
                        return this.applySetters(e, r);
                    } catch (t) {
                        throw t instanceof s && t.path === this.path && null != this.$fullPath && (t.path = this.$fullPath), t;
                    }
                }, l.prototype._castNullish = function(t) {
                    return void 0 === t || ("function" == typeof this.constructor.cast ? this.constructor.cast() : l.cast()), t;
                }, l.prototype.toJSONSchema = function(t) {
                    var e = this.options.required && "function" != typeof this.options.required;
                    return f("string", "long", null == t ? void 0 : t.useBsonType, e);
                }, t.exports = l;
            },
            6413: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i(t, e) {
                    var r = Object.keys(t);
                    if (Object.getOwnPropertySymbols) {
                        var n = Object.getOwnPropertySymbols(t);
                        e && (n = n.filter(function(e) {
                            return Object.getOwnPropertyDescriptor(t, e).enumerable;
                        })), r.push.apply(r, n);
                    }
                    return r;
                }
                function o(t, e, r) {
                    return (e = function(t) {
                        var e = function(t) {
                            if ("object" != n(t) || !t) return t;
                            var e = t[Symbol.toPrimitive];
                            if (void 0 !== e) {
                                var r = e.call(t, "string");
                                if ("object" != n(r)) return r;
                                throw new TypeError("@@toPrimitive must return a primitive value.");
                            }
                            return String(t);
                        }(t);
                        return "symbol" == n(e) ? e : e + "";
                    }(e)) in t ? Object.defineProperty(t, e, {
                        value: r,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0
                    }) : t[e] = r, t;
                }
                var a = r(3609), s = r(6426), u = r(8953), c = r(4327);
                function f(t, e) {
                    s.call(this, t, e, "Boolean");
                }
                f.schemaName = "Boolean", f.defaultOptions = {}, f.prototype = Object.create(s.prototype), f.prototype.constructor = f, f._cast = u, f.set = s.set, f.setters = [], f.get = s.get, f.cast = function(t) {
                    return 0 === arguments.length || (!1 === t && (t = this._defaultCaster), this._cast = t), this._cast;
                }, f._defaultCaster = function(t) {
                    if (null != t && "boolean" != typeof t) throw new Error;
                    return t;
                }, f._checkRequired = function(t) {
                    return !0 === t || !1 === t;
                }, f.checkRequired = s.checkRequired, f.prototype.checkRequired = function(t) {
                    return this.constructor._checkRequired(t);
                }, Object.defineProperty(f, "convertToTrue", {
                    get: function() {
                        return u.convertToTrue;
                    },
                    set: function(t) {
                        u.convertToTrue = t;
                    }
                }), Object.defineProperty(f, "convertToFalse", {
                    get: function() {
                        return u.convertToFalse;
                    },
                    set: function(t) {
                        u.convertToFalse = t;
                    }
                }), f.prototype.cast = function(t) {
                    var e;
                    e = "function" == typeof this._castFunction ? this._castFunction : "function" == typeof this.constructor.cast ? this.constructor.cast() : f.cast();
                    try {
                        return e(t);
                    } catch (e) {
                        throw new a("Boolean", t, this.path, e, this);
                    }
                }, f.$conditionalHandlers = function(t) {
                    for(var e = 1; e < arguments.length; e++){
                        var r = null != arguments[e] ? arguments[e] : {};
                        e % 2 ? i(Object(r), !0).forEach(function(e) {
                            o(t, e, r[e]);
                        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : i(Object(r)).forEach(function(e) {
                            Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));
                        });
                    }
                    return t;
                }({}, s.prototype.$conditionalHandlers), f.prototype.castForQuery = function(t, e, r) {
                    var n;
                    if (null != t) return (n = f.$conditionalHandlers[t]) ? n.call(this, e) : this.applySetters(e, r);
                    try {
                        return this.applySetters(e, r);
                    } catch (t) {
                        throw t instanceof a && t.path === this.path && null != this.$fullPath && (t.path = this.$fullPath), t;
                    }
                }, f.prototype._castNullish = function(t) {
                    if (void 0 === t) return t;
                    var e = "function" == typeof this.constructor.cast ? this.constructor.cast() : f.cast();
                    return null == e ? t : !(e.convertToFalse instanceof Set && e.convertToFalse.has(t)) && (!!(e.convertToTrue instanceof Set && e.convertToTrue.has(t)) || t);
                }, f.prototype.toJSONSchema = function(t) {
                    var e = this.options.required && "function" != typeof this.options.required;
                    return c("boolean", "bool", null == t ? void 0 : t.useBsonType, e);
                }, t.exports = f;
            },
            2307: (t, e, r)=>{
                "use strict";
                var n = r(5832).Buffer;
                function i(t, e) {
                    var r = Object.keys(t);
                    if (Object.getOwnPropertySymbols) {
                        var n = Object.getOwnPropertySymbols(t);
                        e && (n = n.filter(function(e) {
                            return Object.getOwnPropertyDescriptor(t, e).enumerable;
                        })), r.push.apply(r, n);
                    }
                    return r;
                }
                function o(t) {
                    for(var e = 1; e < arguments.length; e++){
                        var r = null != arguments[e] ? arguments[e] : {};
                        e % 2 ? i(Object(r), !0).forEach(function(e) {
                            a(t, e, r[e]);
                        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : i(Object(r)).forEach(function(e) {
                            Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));
                        });
                    }
                    return t;
                }
                function a(t, e, r) {
                    return (e = function(t) {
                        var e = function(t) {
                            if ("object" != s(t) || !t) return t;
                            var e = t[Symbol.toPrimitive];
                            if (void 0 !== e) {
                                var r = e.call(t, "string");
                                if ("object" != s(r)) return r;
                                throw new TypeError("@@toPrimitive must return a primitive value.");
                            }
                            return String(t);
                        }(t);
                        return "symbol" == s(e) ? e : e + "";
                    }(e)) in t ? Object.defineProperty(t, e, {
                        value: r,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0
                    }) : t[e] = r, t;
                }
                function s(t) {
                    return s = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, s(t);
                }
                var u = r(6365), c = r(2945), f = r(6426), l = r(4327), h = r(9460), p = r(8768), d = u.Binary, y = f.CastError;
                function b(t, e) {
                    f.call(this, t, e, "Buffer");
                }
                function m(t, e) {
                    return this.castForQuery(null, t, e);
                }
                b.schemaName = "Buffer", b.defaultOptions = {}, b.prototype = Object.create(f.prototype), b.prototype.constructor = b, b.prototype.OptionsConstructor = c, b._checkRequired = function(t) {
                    return !(!t || !t.length);
                }, b.set = f.set, b.setters = [], b.get = f.get, b.checkRequired = f.checkRequired, b.prototype.checkRequired = function(t, e) {
                    return f._isRef(this, t, e, !0) ? !!t : this.constructor._checkRequired(t);
                }, b.prototype.cast = function(t, e, r, i, o) {
                    var a;
                    if (f._isRef(this, t, e, r)) {
                        if (t && t.isMongooseBuffer) return t;
                        if (n.isBuffer(t)) return t && t.isMongooseBuffer || (t = new u(t, [
                            this.path,
                            e
                        ]), null != this.options.subtype && (t._subtype = this.options.subtype)), t;
                        if (t instanceof d) {
                            if (a = new u(t.value(!0), [
                                this.path,
                                e
                            ]), "number" != typeof t.sub_type) throw new y("Buffer", t, this.path, null, this);
                            return a._subtype = t.sub_type, a;
                        }
                        if (null == t || p.isNonBuiltinObject(t)) return this._castRef(t, e, r, o);
                    }
                    if (t && t._id && (t = t._id), t && t.isMongooseBuffer) return t;
                    if (n.isBuffer(t)) return t && t.isMongooseBuffer || (t = new u(t, [
                        this.path,
                        e
                    ]), null != this.options.subtype && (t._subtype = this.options.subtype)), t;
                    if (t instanceof d) {
                        if (a = new u(t.value(!0), [
                            this.path,
                            e
                        ]), "number" != typeof t.sub_type) throw new y("Buffer", t, this.path, null, this);
                        return a._subtype = t.sub_type, a;
                    }
                    if (null === t) return t;
                    var c = s(t);
                    if ("string" === c || "number" === c || Array.isArray(t) || "object" === c && "Buffer" === t.type && Array.isArray(t.data)) return "number" === c && (t = [
                        t
                    ]), a = new u(t, [
                        this.path,
                        e
                    ]), null != this.options.subtype && (a._subtype = this.options.subtype), a;
                    if (p.isPOJO(t) && (t.$binary instanceof d || "string" == typeof t.$binary)) {
                        var l = this.cast(n.from(t.$binary, "base64"));
                        if (null != t.$type) return l._subtype = t.$type, l;
                    }
                    throw new y("Buffer", t, this.path, null, this);
                }, b.prototype.subtype = function(t) {
                    return this.options.subtype = t, this;
                }, b.prototype.$conditionalHandlers = o(o({}, f.prototype.$conditionalHandlers), {}, {
                    $bitsAllClear: h,
                    $bitsAnyClear: h,
                    $bitsAllSet: h,
                    $bitsAnySet: h,
                    $gt: m,
                    $gte: m,
                    $lt: m,
                    $lte: m
                }), b.prototype.castForQuery = function(t, e, r) {
                    var n, i;
                    if (null != t) {
                        if (!(n = this.$conditionalHandlers[t])) throw new Error("Can't use " + t + " with Buffer.");
                        return n.call(this, e);
                    }
                    try {
                        i = this.applySetters(e, r);
                    } catch (t) {
                        throw t instanceof y && t.path === this.path && null != this.$fullPath && (t.path = this.$fullPath), t;
                    }
                    return i ? i.toObject({
                        transform: !1,
                        virtuals: !1
                    }) : i;
                }, b.prototype.toJSONSchema = function(t) {
                    var e = this.options.required && "function" != typeof this.options.required;
                    return l("string", "binData", null == t ? void 0 : t.useBsonType, e);
                }, t.exports = b;
            },
            2345: (t, e, r)=>{
                "use strict";
                function n(t, e) {
                    var r = Object.keys(t);
                    if (Object.getOwnPropertySymbols) {
                        var n = Object.getOwnPropertySymbols(t);
                        e && (n = n.filter(function(e) {
                            return Object.getOwnPropertyDescriptor(t, e).enumerable;
                        })), r.push.apply(r, n);
                    }
                    return r;
                }
                function i(t) {
                    for(var e = 1; e < arguments.length; e++){
                        var r = null != arguments[e] ? arguments[e] : {};
                        e % 2 ? n(Object(r), !0).forEach(function(e) {
                            o(t, e, r[e]);
                        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : n(Object(r)).forEach(function(e) {
                            Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));
                        });
                    }
                    return t;
                }
                function o(t, e, r) {
                    return (e = function(t) {
                        var e = function(t) {
                            if ("object" != a(t) || !t) return t;
                            var e = t[Symbol.toPrimitive];
                            if (void 0 !== e) {
                                var r = e.call(t, "string");
                                if ("object" != a(r)) return r;
                                throw new TypeError("@@toPrimitive must return a primitive value.");
                            }
                            return String(t);
                        }(t);
                        return "symbol" == a(e) ? e : e + "";
                    }(e)) in t ? Object.defineProperty(t, e, {
                        value: r,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0
                    }) : t[e] = r, t;
                }
                function a(t) {
                    return a = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, a(t);
                }
                var s = r(3672), u = r(3731), c = r(6426), f = r(2477), l = r(4327), h = r(5879), p = r(8768), d = c.CastError;
                function y(t, e) {
                    c.call(this, t, e, "Date");
                }
                function b(t) {
                    return this.cast(t);
                }
                y.schemaName = "Date", y.defaultOptions = {}, y.prototype = Object.create(c.prototype), y.prototype.constructor = y, y.prototype.OptionsConstructor = u, y._cast = f, y.set = c.set, y.setters = [], y.get = c.get, y.cast = function(t) {
                    return 0 === arguments.length || (!1 === t && (t = this._defaultCaster), this._cast = t), this._cast;
                }, y._defaultCaster = function(t) {
                    if (null != t && !(t instanceof Date)) throw new Error;
                    return t;
                }, y.prototype.expires = function(t) {
                    return "Object" !== h(this._index) && (this._index = {}), this._index.expires = t, p.expires(this._index), this;
                }, y._checkRequired = function(t) {
                    return t instanceof Date;
                }, y.checkRequired = c.checkRequired, y.prototype.checkRequired = function(t, e) {
                    return "object" === a(t) && c._isRef(this, t, e, !0) ? null != t : ("function" == typeof this.constructor.checkRequired ? this.constructor.checkRequired() : y.checkRequired())(t);
                }, y.prototype.min = function(t, e) {
                    if (this.minValidator && (this.validators = this.validators.filter(function(t) {
                        return t.validator !== this.minValidator;
                    }, this)), t) {
                        var r = e || s.messages.Date.min;
                        "string" == typeof r && (r = r.replace(/{MIN}/, t === Date.now ? "Date.now()" : t.toString()));
                        var n = this;
                        this.validators.push({
                            validator: this.minValidator = function(e) {
                                var r = t;
                                "function" == typeof t && t !== Date.now && (r = r.call(this));
                                var i = r === Date.now ? r() : n.cast(r);
                                return null === e || e.valueOf() >= i.valueOf();
                            },
                            message: r,
                            type: "min",
                            min: t
                        });
                    }
                    return this;
                }, y.prototype.max = function(t, e) {
                    if (this.maxValidator && (this.validators = this.validators.filter(function(t) {
                        return t.validator !== this.maxValidator;
                    }, this)), t) {
                        var r = e || s.messages.Date.max;
                        "string" == typeof r && (r = r.replace(/{MAX}/, t === Date.now ? "Date.now()" : t.toString()));
                        var n = this;
                        this.validators.push({
                            validator: this.maxValidator = function(e) {
                                var r = t;
                                "function" == typeof r && r !== Date.now && (r = r.call(this));
                                var i = r === Date.now ? r() : n.cast(r);
                                return null === e || e.valueOf() <= i.valueOf();
                            },
                            message: r,
                            type: "max",
                            max: t
                        });
                    }
                    return this;
                }, y.prototype.cast = function(t) {
                    var e;
                    e = "function" == typeof this._castFunction ? this._castFunction : "function" == typeof this.constructor.cast ? this.constructor.cast() : y.cast();
                    try {
                        return e(t);
                    } catch (e) {
                        throw new d("date", t, this.path, e, this);
                    }
                }, y.prototype.$conditionalHandlers = i(i({}, c.prototype.$conditionalHandlers), {}, {
                    $gt: b,
                    $gte: b,
                    $lt: b,
                    $lte: b
                }), y.prototype.castForQuery = function(t, e, r) {
                    if (null == t) try {
                        return this.applySetters(e, r);
                    } catch (t) {
                        throw t instanceof d && t.path === this.path && null != this.$fullPath && (t.path = this.$fullPath), t;
                    }
                    var n = this.$conditionalHandlers[t];
                    if (!n) throw new Error("Can't use " + t + " with Date.");
                    return n.call(this, e);
                }, y.prototype.toJSONSchema = function(t) {
                    var e = this.options.required && "function" != typeof this.options.required;
                    return l("string", "date", null == t ? void 0 : t.useBsonType, e);
                }, t.exports = y;
            },
            7045: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i(t, e) {
                    var r = Object.keys(t);
                    if (Object.getOwnPropertySymbols) {
                        var n = Object.getOwnPropertySymbols(t);
                        e && (n = n.filter(function(e) {
                            return Object.getOwnPropertyDescriptor(t, e).enumerable;
                        })), r.push.apply(r, n);
                    }
                    return r;
                }
                function o(t) {
                    for(var e = 1; e < arguments.length; e++){
                        var r = null != arguments[e] ? arguments[e] : {};
                        e % 2 ? i(Object(r), !0).forEach(function(e) {
                            a(t, e, r[e]);
                        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : i(Object(r)).forEach(function(e) {
                            Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));
                        });
                    }
                    return t;
                }
                function a(t, e, r) {
                    return (e = function(t) {
                        var e = function(t) {
                            if ("object" != n(t) || !t) return t;
                            var e = t[Symbol.toPrimitive];
                            if (void 0 !== e) {
                                var r = e.call(t, "string");
                                if ("object" != n(r)) return r;
                                throw new TypeError("@@toPrimitive must return a primitive value.");
                            }
                            return String(t);
                        }(t);
                        return "symbol" == n(e) ? e : e + "";
                    }(e)) in t ? Object.defineProperty(t, e, {
                        value: r,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0
                    }) : t[e] = r, t;
                }
                var s = r(6426), u = s.CastError, c = r(9553), f = r(4327), l = r(3305);
                function h(t, e) {
                    s.call(this, t, e, "Decimal128");
                }
                function p(t) {
                    return this.cast(t);
                }
                h.schemaName = "Decimal128", h.defaultOptions = {}, h.prototype = Object.create(s.prototype), h.prototype.constructor = h, h._cast = c, h.set = s.set, h.setters = [], h.get = s.get, h.cast = function(t) {
                    return 0 === arguments.length || (!1 === t && (t = this._defaultCaster), this._cast = t), this._cast;
                }, h._defaultCaster = function(t) {
                    if (null != t && !l(t, "Decimal128")) throw new Error;
                    return t;
                }, h._checkRequired = function(t) {
                    return l(t, "Decimal128");
                }, h.checkRequired = s.checkRequired, h.prototype.checkRequired = function(t, e) {
                    return s._isRef(this, t, e, !0) ? !!t : ("function" == typeof this.constructor.checkRequired ? this.constructor.checkRequired() : h.checkRequired())(t);
                }, h.prototype.cast = function(t, e, r, n, i) {
                    if (s._isRef(this, t, e, r)) return l(t, "Decimal128") ? t : this._castRef(t, e, r, i);
                    var o;
                    o = "function" == typeof this._castFunction ? this._castFunction : "function" == typeof this.constructor.cast ? this.constructor.cast() : h.cast();
                    try {
                        return o(t);
                    } catch (e) {
                        throw new u("Decimal128", t, this.path, e, this);
                    }
                }, h.prototype.$conditionalHandlers = o(o({}, s.prototype.$conditionalHandlers), {}, {
                    $gt: p,
                    $gte: p,
                    $lt: p,
                    $lte: p
                }), h.prototype.toJSONSchema = function(t) {
                    var e = this.options.required && "function" != typeof this.options.required;
                    return f("string", "decimal", null == t ? void 0 : t.useBsonType, e);
                }, t.exports = h;
            },
            9123: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i(t, e) {
                    var r = Object.keys(t);
                    if (Object.getOwnPropertySymbols) {
                        var n = Object.getOwnPropertySymbols(t);
                        e && (n = n.filter(function(e) {
                            return Object.getOwnPropertyDescriptor(t, e).enumerable;
                        })), r.push.apply(r, n);
                    }
                    return r;
                }
                function o(t) {
                    for(var e = 1; e < arguments.length; e++){
                        var r = null != arguments[e] ? arguments[e] : {};
                        e % 2 ? i(Object(r), !0).forEach(function(e) {
                            a(t, e, r[e]);
                        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : i(Object(r)).forEach(function(e) {
                            Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));
                        });
                    }
                    return t;
                }
                function a(t, e, r) {
                    return (e = function(t) {
                        var e = function(t) {
                            if ("object" != n(t) || !t) return t;
                            var e = t[Symbol.toPrimitive];
                            if (void 0 !== e) {
                                var r = e.call(t, "string");
                                if ("object" != n(r)) return r;
                                throw new TypeError("@@toPrimitive must return a primitive value.");
                            }
                            return String(t);
                        }(t);
                        return "symbol" == n(e) ? e : e + "";
                    }(e)) in t ? Object.defineProperty(t, e, {
                        value: r,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0
                    }) : t[e] = r, t;
                }
                var s, u, c = r(3609), f = r(8235), l = r(3550).EventEmitter, h = r(7760), p = r(4561), d = r(6426), y = r(7982), b = r(4327), m = r(1469), v = r(3694), g = r(3216), _ = r(5110), w = r(8768), S = r(7910), O = r(5537), j = r(7930).arrayAtomicsSymbol, $ = r(7930).arrayPathSymbol, E = r(7930).documentArrayParent;
                function A(t, e, r, n) {
                    if (e.options && e.options.timeseries) throw new O(t, "timeseries");
                    var i = A.defaultOptions && A.defaultOptions._id;
                    null != i && ((n = n || {})._id = i), null != n && null != n._id ? e = v(e, n) : null != r && null != r._id && (e = v(e, r));
                    var o = P(e, r);
                    o.prototype.$basePath = t, h.call(this, t, o, r), this.schema = e, this.schemaOptions = n || {}, this.$isMongooseDocumentArray = !0, this.Constructor = o, o.base = e.base;
                    var a = this.defaultValue;
                    "defaultValue" in this && null == a || this.default(function() {
                        var t = a.call(this);
                        return null == t || Array.isArray(t) || (t = [
                            t
                        ]), t;
                    }), this.$embeddedSchemaType = new f(t + ".$", {
                        required: this && this.schemaOptions && this.schemaOptions.required || !1,
                        $parentSchemaType: this
                    }), this.$embeddedSchemaType.caster = this.Constructor, this.$embeddedSchemaType.schema = this.schema;
                }
                function P(t, e, n) {
                    function i() {
                        u.apply(this, arguments), null != this.__parentArray && null != this.__parentArray.getArrayParent() && this.$session(this.__parentArray.getArrayParent().$session());
                    }
                    u || (u = r(6547)), t._preCompile();
                    var o = null != n ? n.prototype : u.prototype;
                    for(var a in i.prototype = Object.create(o), i.prototype.$__setSchema(t), i.schema = t, i.prototype.constructor = i, i.$isArraySubdocument = !0, i.events = new l, i.base = t.base, t.methods)i.prototype[a] = t.methods[a];
                    for(var s in t.statics)i[s] = t.statics[s];
                    for(var c in l.prototype)i[c] = l.prototype[c];
                    return i.options = e, i;
                }
                A.schemaName = "DocumentArray", A.options = {
                    castNonArrays: !0
                }, A.prototype = Object.create(h.prototype), A.prototype.constructor = A, A.prototype.OptionsConstructor = p, A.prototype.$conditionalHandlers = o({}, h.prototype.$conditionalHandlers), A.prototype.discriminator = function(t, e, r) {
                    var n;
                    "function" == typeof t && (t = w.getFunctionName(t)), r = r || {};
                    var i = w.isPOJO(r) ? r.value : r, o = "boolean" != typeof r.clone || r.clone;
                    e.instanceOfSchema && o && (e = e.clone());
                    var a = P(e = m(this.casterConstructor, t, e, i, null, null, null === (n = r) || void 0 === n ? void 0 : n.overwriteExisting), null, this.casterConstructor);
                    a.baseCasterConstructor = this.casterConstructor;
                    try {
                        Object.defineProperty(a, "name", {
                            value: t
                        });
                    } catch (t) {}
                    return this.casterConstructor.discriminators[t] = a, this.casterConstructor.discriminators[t];
                }, A.prototype.doValidate = function(t, e, n, i) {
                    s || (s = r(4878));
                    var o = this;
                    try {
                        d.prototype.doValidate.call(this, t, function(r) {
                            if (r) return e(r);
                            var a, c = t && t.length;
                            if (!c) return e();
                            if (i && i.updateValidator) return e();
                            function f(t) {
                                null != t && (a = t), --c || e(a);
                            }
                            w.isMongooseDocumentArray(t) || (t = new s(t, o.path, n));
                            for(var l = 0, h = c; l < h; ++l){
                                var p = t[l];
                                if (null != p) {
                                    if (!(p instanceof u)) {
                                        var d = S(o.casterConstructor, t[l]);
                                        p = t[l] = new d(p, t, void 0, void 0, l);
                                    }
                                    null == i || !i.validateModifiedOnly || p.$isModified() ? p.$__validate(null, i, f) : --c || e(a);
                                } else --c || e(a);
                            }
                        }, n);
                    } catch (t) {
                        return e(t);
                    }
                }, A.prototype.doValidateSync = function(t, e, r) {
                    var n = d.prototype.doValidateSync.call(this, t, e);
                    if (null != n) return n;
                    var i = t && t.length, o = null;
                    if (i) {
                        for(var a = 0, s = i; a < s; ++a){
                            var c = t[a];
                            if (c) {
                                if (!(c instanceof u)) {
                                    var f = S(this.casterConstructor, t[a]);
                                    c = t[a] = new f(c, t, void 0, void 0, a);
                                }
                                if (null == r || !r.validateModifiedOnly || c.$isModified()) {
                                    var l = c.validateSync(r);
                                    l && null == o && (o = l);
                                }
                            }
                        }
                        return o;
                    }
                }, A.prototype.getDefault = function(t, e, n) {
                    var i = "function" == typeof this.defaultValue ? this.defaultValue.call(t) : this.defaultValue;
                    if (null == i) return i;
                    if (n && n.skipCast) return i;
                    s || (s = r(4878)), Array.isArray(i) || (i = [
                        i
                    ]), i = new s(i, this.path, t);
                    for(var o = 0; o < i.length; ++o){
                        var a = new (S(this.casterConstructor, i[o]))({}, i, void 0, void 0, o);
                        a.$init(i[o]), a.isNew = !0, Object.assign(a.$__.activePaths.default, a.$__.activePaths.init), a.$__.activePaths.init = {}, i[o] = a;
                    }
                    return i;
                };
                var x = Object.freeze({
                    transform: !1,
                    virtuals: !1
                }), k = Object.freeze({
                    skipId: !1,
                    willInit: !0
                });
                function M(t, e, r) {
                    if (r && e) {
                        for(var n, i, o, a = t.path + ".", s = Object.keys(e), u = s.length, c = {}; u--;)if ((i = s[u]).startsWith(a)) {
                            if ("$" === (o = i.substring(a.length))) continue;
                            o.startsWith("$.") && (o = o.substring(2)), n || (n = !0), c[o] = e[i];
                        }
                        return n && c || void 0;
                    }
                }
                A.prototype.cast = function(t, e, n, i, o) {
                    if (s || (s = r(4878)), null != t && null != t[$] && t === i) return t;
                    var a, f, l = (o = o || {}).path || this.path;
                    if (!Array.isArray(t)) {
                        if (!n && !A.options.castNonArrays) throw new c("DocumentArray", t, this.path, null, this);
                        return e && n && e.markModified(l), this.cast([
                            t
                        ], e, n, i, o);
                    }
                    o.skipDocumentArrayCast && !w.isMongooseDocumentArray(t) || (t = new s(t, l, e, this)), null != i && (t[j] = i[j] || {}), null != o.arrayPathIndex && (t[$] = l + "." + o.arrayPathIndex);
                    for(var h = w.isMongooseDocumentArray(t) ? t.__array : t, p = h.length, d = 0; d < p; ++d)if (h[d]) {
                        var y = S(this.casterConstructor, h[d]), b = g(h[d], !0);
                        if (h[d] !== b && (h[d] = b), h[d] instanceof u) {
                            if (h[d][E] !== e) {
                                if (n) {
                                    var m = new y(null, t, k, a, d);
                                    h[d] = m.$init(h[d]);
                                } else {
                                    var v = new y(h[d], t, void 0, void 0, d);
                                    h[d] = v;
                                }
                            }
                            null == h[d].__index && h[d].$setIndex(d);
                        } else if (null != h[d]) {
                            if (n) e ? a || (a = M(this, e.$__.selected, n)) : a = !0, f = new y(null, t, k, a, d), h[d] = f.$init(h[d]);
                            else if (i && "function" == typeof i.id && (f = i.id(h[d]._id)), i && f && w.deepEqual(f.toObject(x), h[d])) f.set(h[d]), h[d] = f;
                            else try {
                                f = new y(h[d], t, void 0, void 0, d), h[d] = f;
                            } catch (e) {
                                throw new c("embedded", h[d], t[$], e, this);
                            }
                        }
                    }
                    return t;
                }, A.prototype.clone = function() {
                    var t = Object.assign({}, this.options), e = new this.constructor(this.path, this.schema, t, this.schemaOptions);
                    return e.validators = this.validators.slice(), void 0 !== this.requiredValidator && (e.requiredValidator = this.requiredValidator), e.Constructor.discriminators = Object.assign({}, this.Constructor.discriminators), e._appliedDiscriminators = this._appliedDiscriminators, e;
                }, A.prototype.applyGetters = function(t, e) {
                    return d.prototype.applyGetters.call(this, t, e);
                }, A.defaultOptions = {}, A.set = d.set, A.setters = [], A.get = d.get, A.prototype.$conditionalHandlers.$elemMatch = function(t, e) {
                    for(var r, n = Object.keys(t), i = n.length, o = 0; o < i; ++o){
                        var a = n[o], s = t[a];
                        _(a) && null != s && (t[a] = this.castForQuery(a, s, e));
                    }
                    var u = this && this.casterConstructor && this.casterConstructor.schema && this.casterConstructor.schema.options && this.casterConstructor.schema.options.discriminatorKey, c = this && this.casterConstructor && this.casterConstructor.schema && this.casterConstructor.schema.discriminators || {};
                    if (null != u && null != t[u] && null != c[t[u]]) return y(c[t[u]], t, null, this && this.$$context);
                    var f = null !== (r = this.casterConstructor.schema) && void 0 !== r ? r : e.schema;
                    return y(f, t, null, this && this.$$context);
                }, A.prototype.toJSONSchema = function(t) {
                    var e = b("object", "object", null == t ? void 0 : t.useBsonType, !1), r = this.options.required && "function" != typeof this.options.required;
                    return o(o({}, b("array", "array", null == t ? void 0 : t.useBsonType, r)), {}, {
                        items: o(o({}, e), this.schema.toJSONSchema(t))
                    });
                }, t.exports = A;
            },
            8235: (t, e, r)=>{
                "use strict";
                var n = r(8213), i = r(6426), o = r(5098), a = r(7910);
                function s(t, e) {
                    if (this.$parentSchemaType = e && e.$parentSchemaType, !this.$parentSchemaType) throw new n("Cannot create DocumentArrayElement schematype without a parent");
                    delete e.$parentSchemaType, i.call(this, t, e, "DocumentArrayElement"), this.$isMongooseDocumentArrayElement = !0;
                }
                s.schemaName = "DocumentArrayElement", s.defaultOptions = {}, s.prototype = Object.create(i.prototype), s.prototype.constructor = s, s.prototype.cast = function() {
                    var t;
                    return (t = this.$parentSchemaType).cast.apply(t, arguments)[0];
                }, s.prototype.doValidate = function(t, e, r, n) {
                    var i = a(this.caster, t);
                    return !t || t instanceof i || (t = new i(t, r, null, null, n && null != n.index ? n.index : null)), o.prototype.doValidate.call(this, t, e, r, n);
                }, s.prototype.clone = function() {
                    this.options.$parentSchemaType = this.$parentSchemaType;
                    var t = i.prototype.clone.apply(this, arguments);
                    return delete this.options.$parentSchemaType, t.caster = this.caster, t.schema = this.schema, t;
                }, t.exports = s;
            },
            1732: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i(t, e) {
                    var r = Object.keys(t);
                    if (Object.getOwnPropertySymbols) {
                        var n = Object.getOwnPropertySymbols(t);
                        e && (n = n.filter(function(e) {
                            return Object.getOwnPropertyDescriptor(t, e).enumerable;
                        })), r.push.apply(r, n);
                    }
                    return r;
                }
                function o(t) {
                    for(var e = 1; e < arguments.length; e++){
                        var r = null != arguments[e] ? arguments[e] : {};
                        e % 2 ? i(Object(r), !0).forEach(function(e) {
                            a(t, e, r[e]);
                        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : i(Object(r)).forEach(function(e) {
                            Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));
                        });
                    }
                    return t;
                }
                function a(t, e, r) {
                    return (e = function(t) {
                        var e = function(t) {
                            if ("object" != n(t) || !t) return t;
                            var e = t[Symbol.toPrimitive];
                            if (void 0 !== e) {
                                var r = e.call(t, "string");
                                if ("object" != n(r)) return r;
                                throw new TypeError("@@toPrimitive must return a primitive value.");
                            }
                            return String(t);
                        }(t);
                        return "symbol" == n(e) ? e : e + "";
                    }(e)) in t ? Object.defineProperty(t, e, {
                        value: r,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0
                    }) : t[e] = r, t;
                }
                var s = r(3609), u = r(6426), c = r(3704), f = r(4327);
                function l(t, e) {
                    u.call(this, t, e, "Double");
                }
                function h(t) {
                    return this.cast(t);
                }
                l.schemaName = "Double", l.defaultOptions = {}, l.prototype = Object.create(u.prototype), l.prototype.constructor = l, l._cast = c, l.set = u.set, l.setters = [], l.get = u.get, l._defaultCaster = function(t) {
                    if (null != t && "Double" !== t._bsontype) throw new Error;
                    return t;
                }, l.cast = function(t) {
                    return 0 === arguments.length || (!1 === t && (t = this._defaultCaster), this._cast = t), this._cast;
                }, l._checkRequired = function(t) {
                    return null != t;
                }, l.checkRequired = u.checkRequired, l.prototype.checkRequired = function(t) {
                    return this.constructor._checkRequired(t);
                }, l.prototype.cast = function(t) {
                    var e;
                    e = "function" == typeof this._castFunction ? this._castFunction : "function" == typeof this.constructor.cast ? this.constructor.cast() : l.cast();
                    try {
                        return e(t);
                    } catch (e) {
                        throw new s("Double", t, this.path, e, this);
                    }
                }, l.prototype.$conditionalHandlers = o(o({}, u.prototype.$conditionalHandlers), {}, {
                    $gt: h,
                    $gte: h,
                    $lt: h,
                    $lte: h
                }), l.prototype.toJSONSchema = function(t) {
                    var e = this.options.required && "function" != typeof this.options.required;
                    return f("number", "double", null == t ? void 0 : t.useBsonType, e);
                }, t.exports = l;
            },
            7953: (t, e, r)=>{
                "use strict";
                e.Array = r(7760), e.BigInt = r(3318), e.Boolean = r(6413), e.Buffer = r(2307), e.Date = r(2345), e.Decimal128 = e.Decimal = r(7045), e.DocumentArray = r(9123), e.Map = r(6867), e.Mixed = r(5022), e.Number = r(3660), e.ObjectId = r(3091), e.String = r(8728), e.Subdocument = r(5098), e.UUID = r(2134), e.Double = r(1732), e.Int32 = r(433), e.Oid = e.ObjectId, e.Object = e.Mixed, e.Bool = e.Boolean, e.ObjectID = e.ObjectId;
            },
            433: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i(t, e) {
                    var r = Object.keys(t);
                    if (Object.getOwnPropertySymbols) {
                        var n = Object.getOwnPropertySymbols(t);
                        e && (n = n.filter(function(e) {
                            return Object.getOwnPropertyDescriptor(t, e).enumerable;
                        })), r.push.apply(r, n);
                    }
                    return r;
                }
                function o(t) {
                    for(var e = 1; e < arguments.length; e++){
                        var r = null != arguments[e] ? arguments[e] : {};
                        e % 2 ? i(Object(r), !0).forEach(function(e) {
                            a(t, e, r[e]);
                        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : i(Object(r)).forEach(function(e) {
                            Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));
                        });
                    }
                    return t;
                }
                function a(t, e, r) {
                    return (e = function(t) {
                        var e = function(t) {
                            if ("object" != n(t) || !t) return t;
                            var e = t[Symbol.toPrimitive];
                            if (void 0 !== e) {
                                var r = e.call(t, "string");
                                if ("object" != n(r)) return r;
                                throw new TypeError("@@toPrimitive must return a primitive value.");
                            }
                            return String(t);
                        }(t);
                        return "symbol" == n(e) ? e : e + "";
                    }(e)) in t ? Object.defineProperty(t, e, {
                        value: r,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0
                    }) : t[e] = r, t;
                }
                var s = r(3609), u = r(6426), c = r(5413), f = r(4327), l = r(9460);
                function h(t, e) {
                    u.call(this, t, e, "Int32");
                }
                function p(t, e) {
                    return this.castForQuery(null, t, e);
                }
                h.schemaName = "Int32", h.defaultOptions = {}, h.prototype = Object.create(u.prototype), h.prototype.constructor = h, h._cast = c, h.set = u.set, h.setters = [], h.get = u.get, h._defaultCaster = function(t) {
                    if (null != t && ("number" != typeof t || t !== (0 | t) || t < -2147483648 || t > 2147483647)) throw new Error;
                    return t;
                }, h.cast = function(t) {
                    return 0 === arguments.length || (!1 === t && (t = this._defaultCaster), this._cast = t), this._cast;
                }, h._checkRequired = function(t) {
                    return null != t;
                }, h.checkRequired = u.checkRequired, h.prototype.checkRequired = function(t) {
                    return this.constructor._checkRequired(t);
                }, h.prototype.cast = function(t) {
                    var e;
                    e = "function" == typeof this._castFunction ? this._castFunction : "function" == typeof this.constructor.cast ? this.constructor.cast() : h.cast();
                    try {
                        return e(t);
                    } catch (e) {
                        throw new s("Int32", t, this.path, e, this);
                    }
                }, h.$conditionalHandlers = o(o({}, u.prototype.$conditionalHandlers), {}, {
                    $gt: p,
                    $gte: p,
                    $lt: p,
                    $lte: p,
                    $bitsAllClear: l,
                    $bitsAnyClear: l,
                    $bitsAllSet: l,
                    $bitsAnySet: l
                }), h.prototype.castForQuery = function(t, e, r) {
                    var n;
                    if (null != t) return (n = h.$conditionalHandlers[t]) ? n.call(this, e) : this.applySetters(e, r);
                    try {
                        return this.applySetters(e, r);
                    } catch (t) {
                        throw t instanceof s && t.path === this.path && null != this.$fullPath && (t.path = this.$fullPath), t;
                    }
                }, h.prototype.toJSONSchema = function(t) {
                    var e = this.options.required && "function" != typeof this.options.required;
                    return f("number", "int", null == t ? void 0 : t.useBsonType, e);
                }, t.exports = h;
            },
            6867: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i(t, e) {
                    (null == e || e > t.length) && (e = t.length);
                    for(var r = 0, n = Array(e); r < e; r++)n[r] = t[r];
                    return n;
                }
                function o(t, e) {
                    for(var r = 0; r < e.length; r++){
                        var n = e[r];
                        n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, a(n.key), n);
                    }
                }
                function a(t) {
                    var e = function(t) {
                        if ("object" != n(t) || !t) return t;
                        var e = t[Symbol.toPrimitive];
                        if (void 0 !== e) {
                            var r = e.call(t, "string");
                            if ("object" != n(r)) return r;
                            throw new TypeError("@@toPrimitive must return a primitive value.");
                        }
                        return String(t);
                    }(t);
                    return "symbol" == n(e) ? e : e + "";
                }
                function s() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
                    } catch (t) {}
                    return (s = function() {
                        return !!t;
                    })();
                }
                function u() {
                    return u = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function(t, e, r) {
                        var n = function(t, e) {
                            for(; !({}).hasOwnProperty.call(t, e) && null !== (t = c(t)););
                            return t;
                        }(t, e);
                        if (n) {
                            var i = Object.getOwnPropertyDescriptor(n, e);
                            return i.get ? i.get.call(arguments.length < 3 ? t : r) : i.value;
                        }
                    }, u.apply(null, arguments);
                }
                function c(t) {
                    return c = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                        return t.__proto__ || Object.getPrototypeOf(t);
                    }, c(t);
                }
                function f(t, e) {
                    return f = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                        return t.__proto__ = e, t;
                    }, f(t, e);
                }
                var l = r(2081), h = r(241), p = r(6426), d = r(4327), y = function(t) {
                    function e(t, r) {
                        var i;
                        return function(t, e) {
                            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                        }(this, e), (i = function(t, e, r) {
                            return e = c(e), function(t, e) {
                                if (e && ("object" == n(e) || "function" == typeof e)) return e;
                                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                                return function(t) {
                                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                                    return t;
                                }(t);
                            }(t, s() ? Reflect.construct(e, r || [], c(t).constructor) : e.apply(t, r));
                        }(this, e, [
                            t,
                            r,
                            "Map"
                        ])).$isSchemaMap = !0, i;
                    }
                    var a, h;
                    return function(t, e) {
                        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                        t.prototype = Object.create(e && e.prototype, {
                            constructor: {
                                value: t,
                                writable: !0,
                                configurable: !0
                            }
                        }), Object.defineProperty(t, "prototype", {
                            writable: !1
                        }), e && f(t, e);
                    }(e, t), a = e, h = [
                        {
                            key: "set",
                            value: function(t, e) {
                                return p.set(t, e);
                            }
                        },
                        {
                            key: "cast",
                            value: function(t, e, n) {
                                if (t instanceof l) return t;
                                var o = this.path;
                                if (n) {
                                    var a = new l({}, o, e, this.$__schemaType);
                                    if (t instanceof r.g.Map) {
                                        var s, u = function(t, e) {
                                            var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                                            if (!r) {
                                                if (Array.isArray(t) || (r = function(t, e) {
                                                    if (t) {
                                                        if ("string" == typeof t) return i(t, e);
                                                        var r = ({}).toString.call(t).slice(8, -1);
                                                        return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? i(t, e) : void 0;
                                                    }
                                                }(t)) || e && t && "number" == typeof t.length) {
                                                    r && (t = r);
                                                    var n = 0, o = function() {};
                                                    return {
                                                        s: o,
                                                        n: function() {
                                                            return n >= t.length ? {
                                                                done: !0
                                                            } : {
                                                                done: !1,
                                                                value: t[n++]
                                                            };
                                                        },
                                                        e: function(t) {
                                                            throw t;
                                                        },
                                                        f: o
                                                    };
                                                }
                                                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                                            }
                                            var a, s = !0, u = !1;
                                            return {
                                                s: function() {
                                                    r = r.call(t);
                                                },
                                                n: function() {
                                                    var t = r.next();
                                                    return s = t.done, t;
                                                },
                                                e: function(t) {
                                                    u = !0, a = t;
                                                },
                                                f: function() {
                                                    try {
                                                        s || null == r.return || r.return();
                                                    } finally{
                                                        if (u) throw a;
                                                    }
                                                }
                                            };
                                        }(t.keys());
                                        try {
                                            for(u.s(); !(s = u.n()).done;){
                                                var c = s.value, f = t.get(c);
                                                f = null == f ? a.$__schemaType._castNullish(f) : a.$__schemaType.cast(f, e, !0, null, {
                                                    path: o + "." + c
                                                }), a.$init(c, f);
                                            }
                                        } catch (t) {
                                            u.e(t);
                                        } finally{
                                            u.f();
                                        }
                                    } else for(var h = 0, p = Object.keys(t); h < p.length; h++){
                                        var d = p[h], y = t[d];
                                        y = null == y ? a.$__schemaType._castNullish(y) : a.$__schemaType.cast(y, e, !0, null, {
                                            path: o + "." + d
                                        }), a.$init(d, y);
                                    }
                                    return a;
                                }
                                return new l(t, o, e, this.$__schemaType);
                            }
                        },
                        {
                            key: "clone",
                            value: function() {
                                var t, r, n, i = (t = e, r = this, "function" == typeof (n = u(c(1 & 3 ? t.prototype : t), "clone", r)) ? function(t) {
                                    return n.apply(r, t);
                                } : n)([]);
                                return null != this.$__schemaType && (i.$__schemaType = this.$__schemaType.clone()), i;
                            }
                        },
                        {
                            key: "getEmbeddedSchemaType",
                            value: function() {
                                return this.$__schemaType;
                            }
                        },
                        {
                            key: "toJSONSchema",
                            value: function(t) {
                                var e = null == t ? void 0 : t.useBsonType, r = this.getEmbeddedSchemaType(), n = this.options.required && "function" != typeof this.options.required, i = d("object", "object", e, n);
                                return i.additionalProperties = r.toJSONSchema(t), i;
                            }
                        }
                    ], h && o(a.prototype, h), Object.defineProperty(a, "prototype", {
                        writable: !1
                    }), a;
                }(p);
                y.schemaName = "Map", y.prototype.OptionsConstructor = h, y.defaultOptions = {}, t.exports = y;
            },
            5022: (t, e, r)=>{
                "use strict";
                var n = r(6426), i = r(7160), o = r(608), a = r(8768);
                function s(t, e) {
                    if (e && e.default) {
                        var r = e.default;
                        Array.isArray(r) && 0 === r.length ? e.default = Array : !e.shared && o(r) && 0 === Object.keys(r).length && (e.default = function() {
                            return {};
                        });
                    }
                    n.call(this, t, e, "Mixed"), this[i.schemaMixedSymbol] = !0;
                }
                s.schemaName = "Mixed", s.defaultOptions = {}, s.prototype = Object.create(n.prototype), s.prototype.constructor = s, s.get = n.get, s.set = n.set, s.setters = [], s.prototype.cast = function(t) {
                    return t instanceof Error ? a.errorToPOJO(t) : t;
                }, s.prototype.castForQuery = function(t, e) {
                    return e;
                }, t.exports = s;
            },
            3660: (t, e, r)=>{
                "use strict";
                function n(t, e) {
                    var r = Object.keys(t);
                    if (Object.getOwnPropertySymbols) {
                        var n = Object.getOwnPropertySymbols(t);
                        e && (n = n.filter(function(e) {
                            return Object.getOwnPropertyDescriptor(t, e).enumerable;
                        })), r.push.apply(r, n);
                    }
                    return r;
                }
                function i(t) {
                    for(var e = 1; e < arguments.length; e++){
                        var r = null != arguments[e] ? arguments[e] : {};
                        e % 2 ? n(Object(r), !0).forEach(function(e) {
                            o(t, e, r[e]);
                        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : n(Object(r)).forEach(function(e) {
                            Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));
                        });
                    }
                    return t;
                }
                function o(t, e, r) {
                    return (e = function(t) {
                        var e = function(t) {
                            if ("object" != a(t) || !t) return t;
                            var e = t[Symbol.toPrimitive];
                            if (void 0 !== e) {
                                var r = e.call(t, "string");
                                if ("object" != a(r)) return r;
                                throw new TypeError("@@toPrimitive must return a primitive value.");
                            }
                            return String(t);
                        }(t);
                        return "symbol" == a(e) ? e : e + "";
                    }(e)) in t ? Object.defineProperty(t, e, {
                        value: r,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0
                    }) : t[e] = r, t;
                }
                function a(t) {
                    return a = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, a(t);
                }
                var s = r(3672), u = r(1007), c = r(6426), f = r(7768), l = r(4327), h = r(9460), p = r(8768), d = c.CastError;
                function y(t, e) {
                    c.call(this, t, e, "Number");
                }
                function b(t) {
                    return this.cast(t);
                }
                y.get = c.get, y.set = c.set, y.setters = [], y._cast = f, y.cast = function(t) {
                    return 0 === arguments.length || (!1 === t && (t = this._defaultCaster), this._cast = t), this._cast;
                }, y._defaultCaster = function(t) {
                    if ("number" != typeof t) throw new Error;
                    return t;
                }, y.schemaName = "Number", y.defaultOptions = {}, y.prototype = Object.create(c.prototype), y.prototype.constructor = y, y.prototype.OptionsConstructor = u, y._checkRequired = function(t) {
                    return "number" == typeof t || t instanceof Number;
                }, y.checkRequired = c.checkRequired, y.prototype.checkRequired = function(t, e) {
                    return "object" === a(t) && c._isRef(this, t, e, !0) ? null != t : ("function" == typeof this.constructor.checkRequired ? this.constructor.checkRequired() : y.checkRequired())(t);
                }, y.prototype.min = function(t, e) {
                    if (this.minValidator && (this.validators = this.validators.filter(function(t) {
                        return t.validator !== this.minValidator;
                    }, this)), null != t) {
                        var r = e || s.messages.Number.min;
                        r = r.replace(/{MIN}/, t), this.validators.push({
                            validator: this.minValidator = function(e) {
                                return null == e || e >= t;
                            },
                            message: r,
                            type: "min",
                            min: t
                        });
                    }
                    return this;
                }, y.prototype.max = function(t, e) {
                    if (this.maxValidator && (this.validators = this.validators.filter(function(t) {
                        return t.validator !== this.maxValidator;
                    }, this)), null != t) {
                        var r = e || s.messages.Number.max;
                        r = r.replace(/{MAX}/, t), this.validators.push({
                            validator: this.maxValidator = function(e) {
                                return null == e || e <= t;
                            },
                            message: r,
                            type: "max",
                            max: t
                        });
                    }
                    return this;
                }, y.prototype.enum = function(t, e) {
                    return this.enumValidator && (this.validators = this.validators.filter(function(t) {
                        return t.validator !== this.enumValidator;
                    }, this)), Array.isArray(t) || (p.isPOJO(t) && null != t.values ? (e = t.message, t = t.values) : "number" == typeof t && (t = Array.prototype.slice.call(arguments), e = null), p.isPOJO(t) && (t = Object.values(t)), e = e || s.messages.Number.enum), e = null == e ? s.messages.Number.enum : e, this.enumValidator = function(e) {
                        return null == e || -1 !== t.indexOf(e);
                    }, this.validators.push({
                        validator: this.enumValidator,
                        message: e,
                        type: "enum",
                        enumValues: t
                    }), this;
                }, y.prototype.cast = function(t, e, r, n, i) {
                    if ("number" != typeof t && c._isRef(this, t, e, r) && (null == t || p.isNonBuiltinObject(t))) return this._castRef(t, e, r, i);
                    var o, a = t && void 0 !== t._id ? t._id : t;
                    o = "function" == typeof this._castFunction ? this._castFunction : "function" == typeof this.constructor.cast ? this.constructor.cast() : y.cast();
                    try {
                        return o(a);
                    } catch (t) {
                        throw new d("Number", a, this.path, t, this);
                    }
                }, y.prototype.$conditionalHandlers = i(i({}, c.prototype.$conditionalHandlers), {}, {
                    $bitsAllClear: h,
                    $bitsAnyClear: h,
                    $bitsAllSet: h,
                    $bitsAnySet: h,
                    $gt: b,
                    $gte: b,
                    $lt: b,
                    $lte: b,
                    $mod: function(t) {
                        var e = this;
                        return Array.isArray(t) ? t.map(function(t) {
                            return e.cast(t);
                        }) : [
                            this.cast(t)
                        ];
                    }
                }), y.prototype.castForQuery = function(t, e, r) {
                    var n;
                    if (null != t) {
                        if (!(n = this.$conditionalHandlers[t])) throw new d("number", e, this.path, null, this);
                        return n.call(this, e, r);
                    }
                    try {
                        e = this.applySetters(e, r);
                    } catch (t) {
                        throw t instanceof d && t.path === this.path && null != this.$fullPath && (t.path = this.$fullPath), t;
                    }
                    return e;
                }, y.prototype.toJSONSchema = function(t) {
                    var e = this.options.required && "function" != typeof this.options.required || "_id" === this.path;
                    return l("number", "number", null == t ? void 0 : t.useBsonType, e);
                }, t.exports = y;
            },
            3091: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i(t, e) {
                    var r = Object.keys(t);
                    if (Object.getOwnPropertySymbols) {
                        var n = Object.getOwnPropertySymbols(t);
                        e && (n = n.filter(function(e) {
                            return Object.getOwnPropertyDescriptor(t, e).enumerable;
                        })), r.push.apply(r, n);
                    }
                    return r;
                }
                function o(t) {
                    for(var e = 1; e < arguments.length; e++){
                        var r = null != arguments[e] ? arguments[e] : {};
                        e % 2 ? i(Object(r), !0).forEach(function(e) {
                            a(t, e, r[e]);
                        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : i(Object(r)).forEach(function(e) {
                            Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));
                        });
                    }
                    return t;
                }
                function a(t, e, r) {
                    return (e = function(t) {
                        var e = function(t) {
                            if ("object" != n(t) || !t) return t;
                            var e = t[Symbol.toPrimitive];
                            if (void 0 !== e) {
                                var r = e.call(t, "string");
                                if ("object" != n(r)) return r;
                                throw new TypeError("@@toPrimitive must return a primitive value.");
                            }
                            return String(t);
                        }(t);
                        return "symbol" == n(e) ? e : e + "";
                    }(e)) in t ? Object.defineProperty(t, e, {
                        value: r,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0
                    }) : t[e] = r, t;
                }
                var s, u = r(4625), c = r(6426), f = r(863), l = r(4327), h = r(5879), p = r(5549), d = r(3305), y = r(8768), b = c.CastError;
                function m(t, e) {
                    var r = "string" == typeof t && 24 === t.length && /^[a-f0-9]+$/i.test(t), n = e && e.suppressWarning;
                    !r && void 0 !== t || n || y.warn("mongoose: To create a new ObjectId please try `Mongoose.Types.ObjectId` instead of using `Mongoose.Schema.ObjectId`. Set the `suppressWarning` option if you're trying to create a hex char path in your schema."), c.call(this, t, e, "ObjectId");
                }
                function v(t) {
                    return this.cast(t);
                }
                function g() {
                    return new p;
                }
                function _(t) {
                    return s || (s = r(2400)), this instanceof s && void 0 === t ? new p : t;
                }
                m.schemaName = "ObjectId", m.defaultOptions = {}, m.prototype = Object.create(c.prototype), m.prototype.constructor = m, m.prototype.OptionsConstructor = u, m.get = c.get, m.set = c.set, m.setters = [], m.prototype.auto = function(t) {
                    return t && (this.default(g), this.set(_)), this;
                }, m._checkRequired = function(t) {
                    return d(t, "ObjectId");
                }, m._cast = f, m.cast = function(t) {
                    return 0 === arguments.length || (!1 === t && (t = this._defaultCaster), this._cast = t), this._cast;
                }, m._defaultCaster = function(t) {
                    if (!d(t, "ObjectId")) throw new Error(t + " is not an instance of ObjectId");
                    return t;
                }, m.checkRequired = c.checkRequired, m.prototype.checkRequired = function(t, e) {
                    return c._isRef(this, t, e, !0) ? !!t : ("function" == typeof this.constructor.checkRequired ? this.constructor.checkRequired() : m.checkRequired())(t);
                }, m.prototype.cast = function(t, e, r, n, i) {
                    if (!d(t, "ObjectId") && c._isRef(this, t, e, r)) {
                        if ("objectid" === (h(t) || "").toLowerCase()) return new p(t.toHexString());
                        if (null == t || y.isNonBuiltinObject(t)) return this._castRef(t, e, r, i);
                    }
                    var o;
                    o = "function" == typeof this._castFunction ? this._castFunction : "function" == typeof this.constructor.cast ? this.constructor.cast() : m.cast();
                    try {
                        return o(t);
                    } catch (e) {
                        throw new b("ObjectId", t, this.path, e, this);
                    }
                }, m.prototype.$conditionalHandlers = o(o({}, c.prototype.$conditionalHandlers), {}, {
                    $gt: v,
                    $gte: v,
                    $lt: v,
                    $lte: v
                }), g.$runBeforeSetters = !0, m.prototype.toJSONSchema = function(t) {
                    var e = this.options.required && "function" != typeof this.options.required || "_id" === this.path;
                    return l("string", "objectId", null == t ? void 0 : t.useBsonType, e);
                }, t.exports = m;
            },
            9460: (t, e, r)=>{
                "use strict";
                var n = r(5832).Buffer, i = r(3609);
                function o(t, e) {
                    var r = Number(e);
                    if (isNaN(r)) throw new i("number", e, t);
                    return r;
                }
                t.exports = function(t) {
                    var e = this;
                    return Array.isArray(t) ? t.map(function(t) {
                        return o(e.path, t);
                    }) : n.isBuffer(t) ? t : o(e.path, t);
                };
            },
            8499: (t, e, r)=>{
                "use strict";
                var n = r(8953);
                t.exports = function(t) {
                    var e = null != this ? this.path : null;
                    return n(t, e);
                };
            },
            9604: (t, e, r)=>{
                "use strict";
                var n = r(5558).p, i = r(5558).G;
                function o(t, e) {
                    switch(t.$geometry.type){
                        case "Polygon":
                        case "LineString":
                        case "Point":
                            n(t.$geometry.coordinates, e);
                    }
                    return a(e, t), t;
                }
                function a(t, e) {
                    e.$maxDistance && (e.$maxDistance = i.call(t, e.$maxDistance)), e.$minDistance && (e.$minDistance = i.call(t, e.$minDistance));
                }
                e.cast$geoIntersects = function(t) {
                    if (t.$geometry) return o(t, this), t;
                }, e.cast$near = function(t) {
                    var e = r(7760);
                    if (Array.isArray(t)) return n(t, this), t;
                    if (a(this, t), t && t.$geometry) return o(t, this);
                    if (!Array.isArray(t)) throw new TypeError("$near must be either an array or an object with a $geometry property");
                    return e.prototype.castForQuery.call(this, null, t);
                }, e.cast$within = function(t) {
                    var e = this;
                    if (a(this, t), t.$box || t.$polygon) {
                        var r = t.$box ? "$box" : "$polygon";
                        t[r].forEach(function(t) {
                            if (!Array.isArray(t)) throw new TypeError("Invalid $within $box argument. Expected an array, received " + t);
                            t.forEach(function(r, n) {
                                t[n] = i.call(e, r);
                            });
                        });
                    } else if (t.$center || t.$centerSphere) {
                        var n = t.$center ? "$center" : "$centerSphere";
                        t[n].forEach(function(r, o) {
                            Array.isArray(r) ? r.forEach(function(t, n) {
                                r[n] = i.call(e, t);
                            }) : t[n][o] = i.call(e, r);
                        });
                    } else t.$geometry && o(t, this);
                    return t;
                };
            },
            5558: (t, e, r)=>{
                "use strict";
                var n = r(3660);
                function i(t) {
                    return n.cast()(t);
                }
                e.G = i, e.p = function t(e, r) {
                    e.forEach(function(n, o) {
                        Array.isArray(n) ? t(n, r) : e[o] = i.call(r, n);
                    });
                };
            },
            9064: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                var i = r(3609), o = r(8953), a = r(1244);
                t.exports = function(t, e) {
                    if (null == t || "object" !== n(t)) throw new i("$text", t, e);
                    return null != t.$search && (t.$search = a(t.$search, e + ".$search")), null != t.$language && (t.$language = a(t.$language, e + ".$language")), null != t.$caseSensitive && (t.$caseSensitive = o(t.$caseSensitive, e + ".$castSensitive")), null != t.$diacriticSensitive && (t.$diacriticSensitive = o(t.$diacriticSensitive, e + ".$diacriticSensitive")), t;
                };
            },
            2555: (t)=>{
                "use strict";
                t.exports = function(t) {
                    if (Array.isArray(t)) {
                        if (!t.every(function(t) {
                            return "number" == typeof t || "string" == typeof t;
                        })) throw new Error("$type array values must be strings or numbers");
                        return t;
                    }
                    if ("number" != typeof t && "string" != typeof t) throw new Error("$type parameter must be number, string, or array of numbers and strings");
                    return t;
                };
            },
            8728: (t, e, r)=>{
                "use strict";
                function n(t, e) {
                    var r = Object.keys(t);
                    if (Object.getOwnPropertySymbols) {
                        var n = Object.getOwnPropertySymbols(t);
                        e && (n = n.filter(function(e) {
                            return Object.getOwnPropertyDescriptor(t, e).enumerable;
                        })), r.push.apply(r, n);
                    }
                    return r;
                }
                function i(t) {
                    for(var e = 1; e < arguments.length; e++){
                        var r = null != arguments[e] ? arguments[e] : {};
                        e % 2 ? n(Object(r), !0).forEach(function(e) {
                            o(t, e, r[e]);
                        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : n(Object(r)).forEach(function(e) {
                            Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));
                        });
                    }
                    return t;
                }
                function o(t, e, r) {
                    return (e = function(t) {
                        var e = function(t) {
                            if ("object" != a(t) || !t) return t;
                            var e = t[Symbol.toPrimitive];
                            if (void 0 !== e) {
                                var r = e.call(t, "string");
                                if ("object" != a(r)) return r;
                                throw new TypeError("@@toPrimitive must return a primitive value.");
                            }
                            return String(t);
                        }(t);
                        return "symbol" == a(e) ? e : e + "";
                    }(e)) in t ? Object.defineProperty(t, e, {
                        value: r,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0
                    }) : t[e] = r, t;
                }
                function a(t) {
                    return a = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, a(t);
                }
                function s(t, e) {
                    (null == e || e > t.length) && (e = t.length);
                    for(var r = 0, n = Array(e); r < e; r++)n[r] = t[r];
                    return n;
                }
                var u = r(6426), c = r(3672), f = r(9528), l = r(1244), h = r(4327), p = r(8768), d = r(3305), y = u.CastError;
                function b(t, e) {
                    this.enumValues = [], this.regExp = null, u.call(this, t, e, "String");
                }
                function m(t, e) {
                    return this.castForQuery(null, t, e);
                }
                function v(t) {
                    return null == t ? this._castNullish(t) : this.cast(t, this);
                }
                b.schemaName = "String", b.defaultOptions = {}, b.prototype = Object.create(u.prototype), b.prototype.constructor = b, Object.defineProperty(b.prototype, "OptionsConstructor", {
                    configurable: !1,
                    enumerable: !1,
                    writable: !1,
                    value: f
                }), b._cast = l, b.cast = function(t) {
                    return 0 === arguments.length || (!1 === t && (t = this._defaultCaster), this._cast = t), this._cast;
                }, b._defaultCaster = function(t) {
                    if (null != t && "string" != typeof t) throw new Error;
                    return t;
                }, b.get = u.get, b.set = u.set, b.setters = [], b._checkRequired = function(t) {
                    return (t instanceof String || "string" == typeof t) && t.length;
                }, b.checkRequired = u.checkRequired, b.prototype.enum = function() {
                    if (this.enumValidator && (this.validators = this.validators.filter(function(t) {
                        return t.validator !== this.enumValidator;
                    }, this), this.enumValidator = !1), void 0 === arguments[0] || !1 === arguments[0]) return this;
                    var t, e;
                    p.isObject(arguments[0]) ? Array.isArray(arguments[0].values) ? (t = arguments[0].values, e = arguments[0].message) : (t = p.object.vals(arguments[0]), e = c.messages.String.enum) : (t = arguments, e = c.messages.String.enum);
                    var r, n = function(t, e) {
                        var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                        if (!r) {
                            if (Array.isArray(t) || (r = function(t, e) {
                                if (t) {
                                    if ("string" == typeof t) return s(t, e);
                                    var r = ({}).toString.call(t).slice(8, -1);
                                    return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? s(t, e) : void 0;
                                }
                            }(t)) || e && t && "number" == typeof t.length) {
                                r && (t = r);
                                var n = 0, i = function() {};
                                return {
                                    s: i,
                                    n: function() {
                                        return n >= t.length ? {
                                            done: !0
                                        } : {
                                            done: !1,
                                            value: t[n++]
                                        };
                                    },
                                    e: function(t) {
                                        throw t;
                                    },
                                    f: i
                                };
                            }
                            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                        }
                        var o, a = !0, u = !1;
                        return {
                            s: function() {
                                r = r.call(t);
                            },
                            n: function() {
                                var t = r.next();
                                return a = t.done, t;
                            },
                            e: function(t) {
                                u = !0, o = t;
                            },
                            f: function() {
                                try {
                                    a || null == r.return || r.return();
                                } finally{
                                    if (u) throw o;
                                }
                            }
                        };
                    }(t);
                    try {
                        for(n.s(); !(r = n.n()).done;){
                            var i = r.value;
                            void 0 !== i && this.enumValues.push(this.cast(i));
                        }
                    } catch (t) {
                        n.e(t);
                    } finally{
                        n.f();
                    }
                    var o = this.enumValues;
                    return this.enumValidator = function(t) {
                        return null == t || ~o.indexOf(t);
                    }, this.validators.push({
                        validator: this.enumValidator,
                        message: e,
                        type: "enum",
                        enumValues: o
                    }), this;
                }, b.prototype.lowercase = function(t) {
                    var e = this;
                    return arguments.length > 0 && !t ? this : this.set(function(t) {
                        return "string" != typeof t && (t = e.cast(t)), t ? t.toLowerCase() : t;
                    });
                }, b.prototype.uppercase = function(t) {
                    var e = this;
                    return arguments.length > 0 && !t ? this : this.set(function(t) {
                        return "string" != typeof t && (t = e.cast(t)), t ? t.toUpperCase() : t;
                    });
                }, b.prototype.trim = function(t) {
                    var e = this;
                    return arguments.length > 0 && !t ? this : this.set(function(t) {
                        return "string" != typeof t && (t = e.cast(t)), t ? t.trim() : t;
                    });
                }, b.prototype.minlength = function(t, e) {
                    if (this.minlengthValidator && (this.validators = this.validators.filter(function(t) {
                        return t.validator !== this.minlengthValidator;
                    }, this)), null != t) {
                        var r = e || c.messages.String.minlength;
                        r = r.replace(/{MINLENGTH}/, t), this.validators.push({
                            validator: this.minlengthValidator = function(e) {
                                return null === e || e.length >= t;
                            },
                            message: r,
                            type: "minlength",
                            minlength: t
                        });
                    }
                    return this;
                }, b.prototype.minLength = b.prototype.minlength, b.prototype.maxlength = function(t, e) {
                    if (this.maxlengthValidator && (this.validators = this.validators.filter(function(t) {
                        return t.validator !== this.maxlengthValidator;
                    }, this)), null != t) {
                        var r = e || c.messages.String.maxlength;
                        r = r.replace(/{MAXLENGTH}/, t), this.validators.push({
                            validator: this.maxlengthValidator = function(e) {
                                return null === e || e.length <= t;
                            },
                            message: r,
                            type: "maxlength",
                            maxlength: t
                        });
                    }
                    return this;
                }, b.prototype.maxLength = b.prototype.maxlength, b.prototype.match = function(t, e) {
                    var r = e || c.messages.String.match;
                    return this.validators.push({
                        validator: function(e) {
                            return !!t && (t.lastIndex = 0, null == e || "" === e || t.test(e));
                        },
                        message: r,
                        type: "regexp",
                        regexp: t
                    }), this;
                }, b.prototype.checkRequired = function(t, e) {
                    return "object" === a(t) && u._isRef(this, t, e, !0) ? null != t : ("function" == typeof this.constructor.checkRequired ? this.constructor.checkRequired() : b.checkRequired())(t);
                }, b.prototype.cast = function(t, e, r, n, i) {
                    if ("string" != typeof t && u._isRef(this, t, e, r)) return this._castRef(t, e, r, i);
                    var o;
                    o = "function" == typeof this._castFunction ? this._castFunction : "function" == typeof this.constructor.cast ? this.constructor.cast() : b.cast();
                    try {
                        return o(t);
                    } catch (e) {
                        throw new y("string", t, this.path, null, this);
                    }
                };
                var g = i(i({}, u.prototype.$conditionalHandlers), {}, {
                    $all: function(t, e) {
                        var r = this;
                        return Array.isArray(t) ? t.map(function(t) {
                            return r.castForQuery(null, t, e);
                        }) : [
                            this.castForQuery(null, t, e)
                        ];
                    },
                    $gt: m,
                    $gte: m,
                    $lt: m,
                    $lte: m,
                    $options: v,
                    $regex: function(t) {
                        return "[object RegExp]" === Object.prototype.toString.call(t) ? t : v.call(this, t);
                    },
                    $not: m
                });
                Object.defineProperty(b.prototype, "$conditionalHandlers", {
                    configurable: !1,
                    enumerable: !1,
                    writable: !1,
                    value: Object.freeze(g)
                }), b.prototype.castForQuery = function(t, e, r) {
                    var n;
                    if (null != t) {
                        if (!(n = this.$conditionalHandlers[t])) throw new Error("Can't use " + t + " with String.");
                        return n.call(this, e, r);
                    }
                    if ("[object RegExp]" === Object.prototype.toString.call(e) || d(e, "BSONRegExp")) return e;
                    try {
                        return this.applySetters(e, r);
                    } catch (t) {
                        throw t instanceof y && t.path === this.path && null != this.$fullPath && (t.path = this.$fullPath), t;
                    }
                }, b.prototype.toJSONSchema = function(t) {
                    var e = this.options.required && "function" != typeof this.options.required;
                    return h("string", "string", null == t ? void 0 : t.useBsonType, e);
                }, t.exports = b;
            },
            5098: (t, e, r)=>{
                "use strict";
                function n(t, e) {
                    var r = Object.keys(t);
                    if (Object.getOwnPropertySymbols) {
                        var n = Object.getOwnPropertySymbols(t);
                        e && (n = n.filter(function(e) {
                            return Object.getOwnPropertyDescriptor(t, e).enumerable;
                        })), r.push.apply(r, n);
                    }
                    return r;
                }
                function i(t) {
                    for(var e = 1; e < arguments.length; e++){
                        var r = null != arguments[e] ? arguments[e] : {};
                        e % 2 ? n(Object(r), !0).forEach(function(e) {
                            o(t, e, r[e]);
                        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : n(Object(r)).forEach(function(e) {
                            Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));
                        });
                    }
                    return t;
                }
                function o(t, e, r) {
                    return (e = function(t) {
                        var e = function(t) {
                            if ("object" != a(t) || !t) return t;
                            var e = t[Symbol.toPrimitive];
                            if (void 0 !== e) {
                                var r = e.call(t, "string");
                                if ("object" != a(r)) return r;
                                throw new TypeError("@@toPrimitive must return a primitive value.");
                            }
                            return String(t);
                        }(t);
                        return "symbol" == a(e) ? e : e + "";
                    }(e)) in t ? Object.defineProperty(t, e, {
                        value: r,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0
                    }) : t[e] = r, t;
                }
                function a(t) {
                    return a = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, a(t);
                }
                var s, u = r(3609), c = r(3550).EventEmitter, f = r(3441), l = r(7494), h = r(6426), p = r(5335), d = r(8499), y = r(5558).G, b = r(4327), m = r(1469), v = r(9604), g = r(7910), _ = r(3694), w = r(3303)._, S = r(1793), O = r(8768), j = r(5537);
                function $(t, e, r) {
                    if (t.options.timeseries) throw new j(e, "timeseries");
                    var n = $.defaultOptions && $.defaultOptions._id;
                    null != n && ((r = r || {})._id = n), t = _(t, r), this.caster = E(t, null, r), this.caster.path = e, this.caster.prototype.$basePath = e, this.schema = t, this.$isSingleNested = !0, this.base = t.base, h.call(this, e, r, "Embedded");
                }
                function E(t, e, n) {
                    s || (s = r(9380));
                    var i = function(t, e, r) {
                        this.$__parent = r, s.apply(this, arguments), null != r && this.$session(r.$session());
                    };
                    t._preCompile();
                    var o = null != e ? e.prototype : s.prototype;
                    for(var a in (i.prototype = Object.create(o)).$__setSchema(t), i.prototype.constructor = i, i.$__required = null == n ? void 0 : n.required, i.base = t.base, i.schema = t, i.$isSingleNested = !0, i.events = new c, i.prototype.toBSON = function() {
                        return this.toObject(w);
                    }, t.methods)i.prototype[a] = t.methods[a];
                    for(var u in t.statics)i[u] = t.statics[u];
                    for(var f in c.prototype)i[f] = c.prototype[f];
                    return i;
                }
                t.exports = $, $.prototype = Object.create(h.prototype), $.prototype.constructor = $, $.prototype.OptionsConstructor = l, $.prototype.$conditionalHandlers.$geoWithin = function(t, e) {
                    return {
                        $geometry: this.castForQuery(null, t.$geometry, e)
                    };
                }, $.prototype.$conditionalHandlers.$near = $.prototype.$conditionalHandlers.$nearSphere = v.cast$near, $.prototype.$conditionalHandlers.$within = $.prototype.$conditionalHandlers.$geoWithin = v.cast$within, $.prototype.$conditionalHandlers.$geoIntersects = v.cast$geoIntersects, $.prototype.$conditionalHandlers.$minDistance = y, $.prototype.$conditionalHandlers.$maxDistance = y, $.prototype.$conditionalHandlers.$exists = d, $.prototype.cast = function(t, e, r, n, i) {
                    if (t && t.$isSingleNested && t.parent === e) return t;
                    if (null != t && ("object" !== a(t) || Array.isArray(t))) throw new f(this.path, t);
                    var o, s = this.schema.path(this.schema.options.discriminatorKey), u = null == s ? null : s.getDefault(e), c = g(this.caster, t, u), l = e && e.$__ && e.$__.selected, h = this.path, d = null == l ? null : Object.keys(l).reduce(function(t, e) {
                        return e.startsWith(h + ".") && ((t = t || {})[e.substring(h.length + 1)] = l[e]), t;
                    }, null);
                    if (!r) return i = Object.assign({}, i, {
                        priorDoc: n
                    }), 0 === Object.keys(t).length ? new c({}, d, e, void 0, i) : new c(t, d, e, void 0, i);
                    delete (o = new c(void 0, d, e, !1, {
                        defaults: !1
                    })).$__.defaults, o.$init(t);
                    var y = S(d);
                    return p(o, d, y), o;
                }, $.prototype.castForQuery = function(t, e, r, n) {
                    var i;
                    if (null != t) {
                        if (!(i = this.$conditionalHandlers[t])) throw new Error("Can't use " + t);
                        return i.call(this, e);
                    }
                    if (null == e) return e;
                    var o = g(this.caster, e);
                    if (e instanceof o) return e;
                    this.options.runSetters && (e = this._applySetters(e, r));
                    var a = null != n && null != n.strict ? n.strict : void 0;
                    try {
                        e = new o(e, a);
                    } catch (t) {
                        if (!(t instanceof u)) throw new u("Embedded", e, this.path, t, this);
                        throw t;
                    }
                    return e;
                }, $.prototype.doValidate = function(t, e, r, n) {
                    var i = g(this.caster, t);
                    if (!t || t instanceof i || (t = new i(t, null, null != r && null != r.$__ ? r : null)), n && n.skipSchemaValidators) return t ? t.validate().then(function() {
                        return e(null);
                    }, function(t) {
                        return e(t);
                    }) : e(null);
                    h.prototype.doValidate.call(this, t, function(r) {
                        return r ? e(r) : t ? void t.validate().then(function() {
                            return e(null);
                        }, function(t) {
                            return e(t);
                        }) : e(null);
                    }, r, n);
                }, $.prototype.doValidateSync = function(t, e, r) {
                    if (!r || !r.skipSchemaValidators) {
                        var n = h.prototype.doValidateSync.call(this, t, e);
                        if (n) return n;
                    }
                    if (t) return t.validateSync();
                }, $.prototype.discriminator = function(t, e, r) {
                    r = r || {};
                    var n = O.isPOJO(r) ? r.value : r, i = "boolean" != typeof r.clone || r.clone;
                    return e.instanceOfSchema && i && (e = e.clone()), e = m(this.caster, t, e, n, null, null, r.overwriteExisting), this.caster.discriminators[t] = E(e, this.caster), this.caster.discriminators[t];
                }, $.defaultOptions = {}, $.set = h.set, $.setters = [], $.get = h.get, $.prototype.toJSON = function() {
                    return {
                        path: this.path,
                        options: this.options
                    };
                }, $.prototype.clone = function() {
                    var t = new this.constructor(this.schema, this.path, i(i({}, this.options), {}, {
                        _skipApplyDiscriminators: !0
                    }));
                    return t.validators = this.validators.slice(), void 0 !== this.requiredValidator && (t.requiredValidator = this.requiredValidator), t.caster.discriminators = Object.assign({}, this.caster.discriminators), t._appliedDiscriminators = this._appliedDiscriminators, t;
                }, $.prototype.toJSONSchema = function(t) {
                    var e = this.options.required && "function" != typeof this.options.required;
                    return i(i({}, this.schema.toJSONSchema(t)), b("object", "object", null == t ? void 0 : t.useBsonType, e));
                };
            },
            7160: (t, e)=>{
                "use strict";
                e.schemaMixedSymbol = Symbol.for("mongoose:schema_mixed"), e.builtInMiddleware = Symbol.for("mongoose:built-in-middleware");
            },
            2134: (t, e, r)=>{
                "use strict";
                var n = r(5832).Buffer;
                function i(t) {
                    return i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, i(t);
                }
                function o(t, e) {
                    var r = Object.keys(t);
                    if (Object.getOwnPropertySymbols) {
                        var n = Object.getOwnPropertySymbols(t);
                        e && (n = n.filter(function(e) {
                            return Object.getOwnPropertyDescriptor(t, e).enumerable;
                        })), r.push.apply(r, n);
                    }
                    return r;
                }
                function a(t) {
                    for(var e = 1; e < arguments.length; e++){
                        var r = null != arguments[e] ? arguments[e] : {};
                        e % 2 ? o(Object(r), !0).forEach(function(e) {
                            s(t, e, r[e]);
                        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : o(Object(r)).forEach(function(e) {
                            Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));
                        });
                    }
                    return t;
                }
                function s(t, e, r) {
                    return (e = function(t) {
                        var e = function(t) {
                            if ("object" != i(t) || !t) return t;
                            var e = t[Symbol.toPrimitive];
                            if (void 0 !== e) {
                                var r = e.call(t, "string");
                                if ("object" != i(r)) return r;
                                throw new TypeError("@@toPrimitive must return a primitive value.");
                            }
                            return String(t);
                        }(t);
                        return "symbol" == i(e) ? e : e + "";
                    }(e)) in t ? Object.defineProperty(t, e, {
                        value: r,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0
                    }) : t[e] = r, t;
                }
                var u = r(6365), c = r(6426), f = c.CastError, l = r(8250), h = r(4327), p = r(8768), d = r(9460), y = l.UUID_FORMAT, b = u.Binary;
                function m(t) {
                    var e;
                    return "string" != typeof t && null != t ? (e = t.toString("hex")).substring(0, 8) + "-" + e.substring(8, 12) + "-" + e.substring(12, 16) + "-" + e.substring(16, 20) + "-" + e.substring(20, 32) : t;
                }
                function v(t, e) {
                    c.call(this, t, e, "UUID"), this.getters.push(function(t) {
                        return null != t && null != t.$__ ? t : n.isBuffer(t) ? m(t) : t instanceof b ? m(t.buffer) : p.isPOJO(t) && "Buffer" === t.type && Array.isArray(t.data) ? m(n.from(t.data)) : t;
                    });
                }
                function g(t) {
                    return this.cast(t);
                }
                function _(t) {
                    var e = this;
                    return t.map(function(t) {
                        return e.cast(t);
                    });
                }
                v.schemaName = "UUID", v.defaultOptions = {}, v.prototype = Object.create(c.prototype), v.prototype.constructor = v, v._cast = l, v.get = c.get, v.set = c.set, v.setters = [], v.cast = function(t) {
                    return 0 === arguments.length || (!1 === t && (t = this._defaultCaster), this._cast = t), this._cast;
                }, v._checkRequired = function(t) {
                    return null != t;
                }, v.checkRequired = c.checkRequired, v.prototype.checkRequired = function(t) {
                    return n.isBuffer(t) && (t = m(t)), null != t && y.test(t);
                }, v.prototype.cast = function(t, e, r, n, i) {
                    if (p.isNonBuiltinObject(t) && c._isRef(this, t, e, r)) return this._castRef(t, e, r, i);
                    var o;
                    o = "function" == typeof this._castFunction ? this._castFunction : "function" == typeof this.constructor.cast ? this.constructor.cast() : v.cast();
                    try {
                        return o(t);
                    } catch (e) {
                        throw new f(v.schemaName, t, this.path, e, this);
                    }
                }, v.prototype.$conditionalHandlers = a(a({}, c.prototype.$conditionalHandlers), {}, {
                    $bitsAllClear: d,
                    $bitsAnyClear: d,
                    $bitsAllSet: d,
                    $bitsAnySet: d,
                    $all: _,
                    $gt: g,
                    $gte: g,
                    $in: _,
                    $lt: g,
                    $lte: g,
                    $ne: g,
                    $nin: _
                }), v.prototype.castForQuery = function(t, e, r) {
                    var n;
                    if (null != t) {
                        if (!(n = this.$conditionalHandlers[t])) throw new Error("Can't use " + t + " with UUID.");
                        return n.call(this, e, r);
                    }
                    try {
                        return this.applySetters(e, r);
                    } catch (t) {
                        throw t instanceof f && t.path === this.path && null != this.$fullPath && (t.path = this.$fullPath), t;
                    }
                }, v.prototype.toJSONSchema = function(t) {
                    var e = this.options.required && "function" != typeof this.options.required;
                    return h("string", "binData", null == t ? void 0 : t.useBsonType, e);
                }, t.exports = v;
            },
            6426: (t, e, r)=>{
                "use strict";
                var n = r(5832).Buffer;
                function i(t) {
                    return i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, i(t);
                }
                var o = r(3672), a = r(8879), s = r(8499), u = r(2555), c = r(4450), f = r(8133), l = r(9183), h = r(6155), p = r(2746), d = r(7930).schemaTypeSymbol, y = r(8768), b = r(7930).validatorErrorSymbol, m = r(7930).documentIsModified, v = r(7930).populateModelSymbol, g = o.CastError, _ = o.ValidatorError, w = {
                    _skipMarkModified: !0
                };
                function S(t, e, r) {
                    this[d] = !0, this.path = t, this.instance = r, this.validators = [], this.getters = this.constructor.hasOwnProperty("getters") ? this.constructor.getters.slice() : [], this.setters = this.constructor.hasOwnProperty("setters") ? this.constructor.setters.slice() : [], this.splitPath(), e = e || {};
                    for(var n = this.constructor.defaultOptions || {}, o = 0, s = Object.keys(n); o < s.length; o++){
                        var u = s[o];
                        "validate" === u ? this.validate(n.validate) : n.hasOwnProperty(u) && !Object.prototype.hasOwnProperty.call(e, u) && (e[u] = n[u]);
                    }
                    null == e.select && delete e.select;
                    var c = this.OptionsConstructor || a;
                    this.options = new c(e), this._index = null, y.hasUserDefinedProperty(this.options, "immutable") && (this.$immutable = this.options.immutable, f(this));
                    for(var l = 0, h = Object.keys(this.options); l < h.length; l++){
                        var p = h[l];
                        if ("cast" !== p) {
                            if (y.hasUserDefinedProperty(this.options, p) && "function" == typeof this[p]) {
                                if ("index" === p && this._index) {
                                    if (!1 === e.index) {
                                        var b = this._index;
                                        if ("object" === i(b) && null != b) {
                                            if (b.unique) throw new Error('Path "' + this.path + '" may not have `index` set to false and `unique` set to true');
                                            if (b.sparse) throw new Error('Path "' + this.path + '" may not have `index` set to false and `sparse` set to true');
                                        }
                                        this._index = !1;
                                    }
                                    continue;
                                }
                                var m = e[p];
                                if ("default" === p) {
                                    this.default(m);
                                    continue;
                                }
                                var v = Array.isArray(m) ? m : [
                                    m
                                ];
                                this[p].apply(this, v);
                            }
                        } else Array.isArray(this.options[p]) ? this.castFunction.apply(this, this.options[p]) : this.castFunction(this.options[p]);
                    }
                    Object.defineProperty(this, "$$context", {
                        enumerable: !1,
                        configurable: !1,
                        writable: !0,
                        value: null
                    });
                }
                function O(t, e) {
                    if (void 0 !== t && !t) {
                        var r = new (e.ErrorConstructor || _)(e);
                        return r[b] = !0, r;
                    }
                }
                function j(t, e) {
                    return this.castForQuery(null, t, e);
                }
                function $(t, e) {
                    var r = this;
                    return Array.isArray(t) ? t.map(function(t) {
                        return Array.isArray(t) && 0 === t.length ? t : r.castForQuery(null, t, e);
                    }) : [
                        this.castForQuery(null, t, e)
                    ];
                }
                S.prototype.OptionsConstructor = a, S.prototype.path, S.prototype.validators, S.prototype.isRequired, S.prototype.splitPath = function() {
                    return null != this._presplitPath ? this._presplitPath : null != this.path ? (this._presplitPath = -1 === this.path.indexOf(".") ? [
                        this.path
                    ] : this.path.split("."), this._presplitPath) : void 0;
                }, S.cast = function(t) {
                    return 0 === arguments.length || (!1 === t && (t = function(t) {
                        return t;
                    }), this._cast = t), this._cast;
                }, S.prototype.castFunction = function(t, e) {
                    return 0 === arguments.length ? this._castFunction : (!1 === t && (t = this.constructor._defaultCaster || function(t) {
                        return t;
                    }), "string" == typeof t ? (this._castErrorMessage = t, this._castFunction) : (null != t && (this._castFunction = t), null != e && (this._castErrorMessage = e), this._castFunction));
                }, S.prototype.cast = function() {
                    throw new Error("Base SchemaType class does not implement a `cast()` function");
                }, S.set = function(t, e) {
                    this.hasOwnProperty("defaultOptions") || (this.defaultOptions = Object.assign({}, this.defaultOptions)), this.defaultOptions[t] = e;
                }, S.get = function(t) {
                    this.getters = this.hasOwnProperty("getters") ? this.getters : [], this.getters.push(t);
                }, S.prototype.default = function(t) {
                    if (1 === arguments.length) {
                        if (void 0 === t) return void (this.defaultValue = void 0);
                        if (null != t && t.instanceOfSchema) throw new o("Cannot set default value of path `" + this.path + "` to a mongoose Schema instance.");
                        return this.defaultValue = t, this.defaultValue;
                    }
                    return arguments.length > 1 && (this.defaultValue = Array.prototype.slice.call(arguments)), this.defaultValue;
                }, S.prototype.index = function(t) {
                    return this._index = t, y.expires(this._index), this;
                }, S.prototype.unique = function(t, e) {
                    if (!1 === this._index) {
                        if (!t) return;
                        throw new Error('Path "' + this.path + '" may not have `index` set to false and `unique` set to true');
                    }
                    return this.options.hasOwnProperty("index") || !1 !== t ? (null == this._index || !0 === this._index ? this._index = {} : "string" == typeof this._index && (this._index = {
                        type: this._index
                    }), this._index.unique = !!t, "string" == typeof e && (this._duplicateKeyErrorMessage = e), this) : this;
                }, S.prototype.text = function(t) {
                    if (!1 === this._index) {
                        if (!t) return this;
                        throw new Error('Path "' + this.path + '" may not have `index` set to false and `text` set to true');
                    }
                    return this.options.hasOwnProperty("index") || !1 !== t ? (null === this._index || void 0 === this._index || "boolean" == typeof this._index ? this._index = {} : "string" == typeof this._index && (this._index = {
                        type: this._index
                    }), this._index.text = t, this) : this;
                }, S.prototype.sparse = function(t) {
                    if (!1 === this._index) {
                        if (!t) return this;
                        throw new Error('Path "' + this.path + '" may not have `index` set to false and `sparse` set to true');
                    }
                    return this.options.hasOwnProperty("index") || !1 !== t ? (null == this._index || "boolean" == typeof this._index ? this._index = {} : "string" == typeof this._index && (this._index = {
                        type: this._index
                    }), this._index.sparse = t, this) : this;
                }, S.prototype.immutable = function(t) {
                    return this.$immutable = t, f(this), this;
                }, S.prototype.transform = function(t) {
                    return this.options.transform = t, this;
                }, S.prototype.set = function(t) {
                    if ("function" != typeof t) throw new TypeError("A setter must be a function.");
                    return this.setters.push(t), this;
                }, S.prototype.get = function(t) {
                    if ("function" != typeof t) throw new TypeError("A getter must be a function.");
                    return this.getters.push(t), this;
                }, S.prototype.validateAll = function(t) {
                    for(var e = 0; e < t.length; e++)this.validate(t[e]);
                    return this;
                }, S.prototype.validate = function(t, e, r) {
                    var n, a, s, u;
                    if ("function" == typeof t || t && "RegExp" === y.getFunctionName(t.constructor)) return "function" == typeof e ? (n = {
                        validator: t,
                        message: e
                    }).type = r || "user defined" : e instanceof Object && !r ? ((n = h(e) ? Object.assign({}, e) : c(e)).message || (n.message = n.msg), n.validator = t, n.type = n.type || "user defined") : (null == e && (e = o.messages.general.default), r || (r = "user defined"), n = {
                        message: e,
                        type: r,
                        validator: t
                    }), this.validators.push(n), this;
                    for(a = 0, s = arguments.length; a < s; a++){
                        if (u = arguments[a], !y.isPOJO(u)) {
                            var f = "Invalid validator. Received (" + i(u) + ") " + u + ". See https://mongoosejs.com/docs/api/schematype.html#SchemaType.prototype.validate()";
                            throw new Error(f);
                        }
                        this.validate(u.validator, u);
                    }
                    return this;
                }, S.prototype.required = function(t, e) {
                    var r = {};
                    if (arguments.length > 0 && null == t) return this.validators = this.validators.filter(function(t) {
                        return t.validator !== this.requiredValidator;
                    }, this), this.isRequired = !1, delete this.originalRequiredValue, this;
                    if ("object" === i(t) && (e = (r = t).message || e, t = t.isRequired), !1 === t) return this.validators = this.validators.filter(function(t) {
                        return t.validator !== this.requiredValidator;
                    }, this), this.isRequired = !1, delete this.originalRequiredValue, this;
                    var n = this;
                    this.isRequired = !0, this.requiredValidator = function(e) {
                        var r = this && this.$__ && this.$__.cachedRequired;
                        if (null != r && !this.$__isSelected(n.path) && !this[m](n.path)) return !0;
                        if (null != r && n.path in r) {
                            var i = !r[n.path] || n.checkRequired(e, this);
                            return delete r[n.path], i;
                        }
                        return "function" == typeof t && !t.apply(this) || n.checkRequired(e, this);
                    }, this.originalRequiredValue = t, "string" == typeof t && (e = t, t = void 0);
                    var a = e || o.messages.general.required;
                    return this.validators.unshift(Object.assign({}, r, {
                        validator: this.requiredValidator,
                        message: a,
                        type: "required"
                    })), this;
                }, S.prototype.ref = function(t) {
                    return this.options.ref = t, this;
                }, S.prototype.getDefault = function(t, e, r) {
                    var n;
                    if (null != (n = "function" == typeof this.defaultValue ? this.defaultValue === Date.now || this.defaultValue === Array || "objectid" === this.defaultValue.name.toLowerCase() ? this.defaultValue.call(t) : this.defaultValue.call(t, t) : this.defaultValue)) {
                        if ("object" !== i(n) || this.options && this.options.shared || (n = c(n)), r && r.skipCast) return this._applySetters(n, t);
                        var o = this.applySetters(n, t, e, void 0, w);
                        return o && !Array.isArray(o) && o.$isSingleNested && (o.$__parent = t), o;
                    }
                    return n;
                }, S.prototype._applySetters = function(t, e, r, n, i) {
                    var o = t;
                    if (r) return o;
                    for(var a = this.setters, s = a.length - 1; s >= 0; s--)o = a[s].call(e, o, n, this, i);
                    return o;
                }, S.prototype._castNullish = function(t) {
                    return t;
                }, S.prototype.applySetters = function(t, e, r, n, i) {
                    var o = this._applySetters(t, e, r, n, i);
                    return null == o ? this._castNullish(o) : o = this.cast(o, e, r, n, i);
                }, S.prototype.applyGetters = function(t, e) {
                    var r = t, n = this.getters, i = n.length;
                    if (0 === i) return r;
                    for(var o = 0; o < i; ++o)r = n[o].call(e, r, this);
                    return r;
                }, S.prototype.select = function(t) {
                    return this.selected = !!t, this;
                }, S.prototype.doValidate = function(t, e, r, n) {
                    var o = this, a = !1, s = this.path;
                    if ("function" != typeof e) throw new TypeError("Must pass callback function to doValidate(), got ".concat(i(e)));
                    var u = this.validators.filter(function(t) {
                        return "object" === i(t) && null !== t;
                    }), f = u.length;
                    if (!f) return e(null);
                    for(var l = function() {
                        if (a) return 0;
                        var e, i = u[d], f = i.validator, l = h(i) ? Object.assign({}, i) : c(i);
                        if (l.path = n && n.path ? n.path : s, l.fullPath = o.$fullPath, l.value = t, f instanceof RegExp) return m(f.test(t), l, r), 1;
                        if ("function" != typeof f) return 1;
                        if (void 0 === t && f !== o.requiredValidator) return m(!0, l, r), 1;
                        try {
                            e = l.propsParameter ? f.call(r, t, l) : f.call(r, t);
                        } catch (t) {
                            e = !1, l.reason = t, t.message && (l.message = t.message);
                        }
                        null != e && "function" == typeof e.then ? e.then(function(t) {
                            m(t, l, r);
                        }, function(t) {
                            l.reason = t, l.message = t.message, m(e = !1, l, r);
                        }) : m(e, l, r);
                    }, d = 0, y = u.length; d < y && 0 !== l(); ++d);
                    function m(t, r, n) {
                        if (!a) {
                            if (void 0 === t || t) --f <= 0 && p(function() {
                                e(null);
                            });
                            else {
                                var i = r.ErrorConstructor || _;
                                (a = new i(r, n))[b] = !0, p(function() {
                                    e(a);
                                });
                            }
                        }
                    }
                }, S.prototype.doValidateSync = function(t, e, r) {
                    var n = this.path;
                    if (!this.validators.length) return null;
                    var o = this.validators;
                    if (void 0 === t) {
                        if (0 === this.validators.length || "required" !== this.validators[0].type) return null;
                        o = [
                            this.validators[0]
                        ];
                    }
                    var a = null, s = 0, u = o.length;
                    for(s = 0; s < u; ++s){
                        var f = o[s];
                        if (null !== f && "object" === i(f)) {
                            var p = f.validator, d = h(f) ? Object.assign({}, f) : c(f);
                            d.path = r && r.path ? r.path : n, d.fullPath = this.$fullPath, d.value = t;
                            var y = !1;
                            if (!l(p)) {
                                if (p instanceof RegExp) a = O(p.test(t), d);
                                else if ("function" == typeof p) {
                                    try {
                                        y = d.propsParameter ? p.call(e, t, d) : p.call(e, t);
                                    } catch (t) {
                                        y = !1, d.reason = t;
                                    }
                                    if ((null == y || "function" != typeof y.then) && (a = O(y, d))) break;
                                }
                            }
                        }
                    }
                    return a;
                }, S._isRef = function(t, e, r, i) {
                    var o = i && t.options && (t.options.ref || t.options.refPath);
                    if (!o && r && null != r.$__) {
                        var a = r.$__fullPath(t.path, !0), s = r.ownerDocument();
                        o = null != a && s.$populated(a) || r.$populated(t.path);
                    }
                    return !!o && (null == e || !(n.isBuffer(e) || "Binary" === e._bsontype || !y.isObject(e)) || i);
                }, S.prototype._castRef = function(t, e, r, o) {
                    if (null == t) return t;
                    if (null != t.$__) return t.$__.wasPopulated = t.$__.wasPopulated || {
                        value: t._doc._id
                    }, t;
                    if (n.isBuffer(t) || !y.isObject(t)) {
                        if (r) return t;
                        throw new g(this.instance, t, this.path, null, this);
                    }
                    var a, s, u, c = e.$__fullPath(this.path, !0), f = e.ownerDocument().$populated(c, !0), l = t;
                    if (!(e.$__.populated && e.$__.populated[c] && e.$__.populated[c].options && e.$__.populated[c].options.options && e.$__.populated[c].options.options.lean)) {
                        var h = f ? f.options[v] : e.constructor.db.model(this.options.ref);
                        (l = h.hydrate(t, null, o)).$__.wasPopulated = {
                            value: l._doc._id,
                            options: (a = {}, s = v, u = h, (s = function(t) {
                                var e = function(t) {
                                    if ("object" != i(t) || !t) return t;
                                    var e = t[Symbol.toPrimitive];
                                    if (void 0 !== e) {
                                        var r = e.call(t, "string");
                                        if ("object" != i(r)) return r;
                                        throw new TypeError("@@toPrimitive must return a primitive value.");
                                    }
                                    return String(t);
                                }(t);
                                return "symbol" == i(e) ? e : e + "";
                            }(s)) in a ? Object.defineProperty(a, s, {
                                value: u,
                                enumerable: !0,
                                configurable: !0,
                                writable: !0
                            }) : a[s] = u, a)
                        };
                    }
                    return l;
                }, S.prototype.$conditionalHandlers = {
                    $all: function(t, e) {
                        var r = this;
                        return Array.isArray(t) ? t.map(function(t) {
                            return r.castForQuery(null, t, e);
                        }) : [
                            this.castForQuery(null, t, e)
                        ];
                    },
                    $eq: j,
                    $in: $,
                    $ne: j,
                    $nin: $,
                    $exists: s,
                    $type: u
                }, S.prototype.castForQuery = function(t, e, r) {
                    var n;
                    if (null != t) {
                        if (!(n = this.$conditionalHandlers[t])) throw new Error("Can't use " + t);
                        return n.call(this, e, r);
                    }
                    try {
                        return this.applySetters(e, r);
                    } catch (t) {
                        throw t instanceof g && t.path === this.path && null != this.$fullPath && (t.path = this.$fullPath), t;
                    }
                }, S.checkRequired = function(t) {
                    return 0 !== arguments.length && (this._checkRequired = t), this._checkRequired;
                }, S.prototype.checkRequired = function(t) {
                    return null != t;
                }, S.prototype.clone = function() {
                    var t = Object.assign({}, this.options), e = new this.constructor(this.path, t, this.instance);
                    return e.validators = this.validators.slice(), void 0 !== this.requiredValidator && (e.requiredValidator = this.requiredValidator), void 0 !== this.defaultValue && (e.defaultValue = this.defaultValue), void 0 !== this.$immutable && void 0 === this.options.immutable && (e.$immutable = this.$immutable, f(e)), void 0 !== this._index && (e._index = this._index), void 0 !== this.selected && (e.selected = this.selected), void 0 !== this.isRequired && (e.isRequired = this.isRequired), void 0 !== this.originalRequiredValue && (e.originalRequiredValue = this.originalRequiredValue), e.getters = this.getters.slice(), e.setters = this.setters.slice(), e;
                }, S.prototype.getEmbeddedSchemaType = function() {
                    return this.$embeddedSchemaType;
                }, S.prototype._duplicateKeyErrorMessage = null, S.prototype.toJSONSchema = function() {
                    throw new Error("Converting unsupported SchemaType to JSON Schema: " + this.instance);
                }, t.exports = e = S, e.CastError = g, e.ValidatorError = _;
            },
            6511: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i(t, e) {
                    (null == e || e > t.length) && (e = t.length);
                    for(var r = 0, n = Array(e); r < e; r++)n[r] = t[r];
                    return n;
                }
                function o(t, e) {
                    var r = Object.keys(t);
                    if (Object.getOwnPropertySymbols) {
                        var n = Object.getOwnPropertySymbols(t);
                        e && (n = n.filter(function(e) {
                            return Object.getOwnPropertyDescriptor(t, e).enumerable;
                        })), r.push.apply(r, n);
                    }
                    return r;
                }
                function a(t) {
                    for(var e = 1; e < arguments.length; e++){
                        var r = null != arguments[e] ? arguments[e] : {};
                        e % 2 ? o(Object(r), !0).forEach(function(e) {
                            s(t, e, r[e]);
                        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : o(Object(r)).forEach(function(e) {
                            Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));
                        });
                    }
                    return t;
                }
                function s(t, e, r) {
                    return (e = function(t) {
                        var e = function(t) {
                            if ("object" != n(t) || !t) return t;
                            var e = t[Symbol.toPrimitive];
                            if (void 0 !== e) {
                                var r = e.call(t, "string");
                                if ("object" != n(r)) return r;
                                throw new TypeError("@@toPrimitive must return a primitive value.");
                            }
                            return String(t);
                        }(t);
                        return "symbol" == n(e) ? e : e + "";
                    }(e)) in t ? Object.defineProperty(t, e, {
                        value: r,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0
                    }) : t[e] = r, t;
                }
                r(8768);
                var u = t.exports = function() {};
                u.ctor = function() {
                    var t = Array.prototype.slice.call(arguments), e = function() {
                        u.apply(this, arguments), this.paths = {}, this.states = {};
                    };
                    return (e.prototype = new u).constructor = e, e.prototype.stateNames = t, t.forEach(function(t) {
                        e.prototype[t] = function(e) {
                            this._changeState(e, t);
                        };
                    }), e;
                }, u.prototype._changeState = function(t, e) {
                    var r = this.paths[t];
                    if (r !== e) {
                        var n = this.states[r];
                        n && delete n[t], this.paths[t] = e, this.states[e] = this.states[e] || {}, this.states[e][t] = !0;
                    }
                }, u.prototype.clear = function(t) {
                    if (null != this.states[t]) for(var e, r = Object.keys(this.states[t]), n = r.length; n--;)e = r[n], delete this.states[t][e], delete this.paths[e];
                }, u.prototype.clearPath = function(t) {
                    var e = this.paths[t];
                    e && (delete this.paths[t], delete this.states[e][t]);
                }, u.prototype.getStatePaths = function(t) {
                    return null != this.states[t] ? this.states[t] : {};
                }, u.prototype.some = function() {
                    var t = this, e = arguments.length ? arguments : this.stateNames;
                    return Array.prototype.some.call(e, function(e) {
                        return null != t.states[e] && Object.keys(t.states[e]).length;
                    });
                }, u.prototype._iter = function(t) {
                    return function() {
                        var e = Array.prototype.slice.call(arguments), r = e.pop();
                        e.length || (e = this.stateNames);
                        var n = this;
                        return e.reduce(function(t, e) {
                            return null == n.states[e] ? t : t.concat(Object.keys(n.states[e]));
                        }, [])[t](function(t, e, n) {
                            return r(t, e, n);
                        });
                    };
                }, u.prototype.forEach = function() {
                    return this.forEach = this._iter("forEach"), this.forEach.apply(this, arguments);
                }, u.prototype.map = function() {
                    return this.map = this._iter("map"), this.map.apply(this, arguments);
                }, u.prototype.clone = function() {
                    var t = new this.constructor;
                    t.paths = a({}, this.paths);
                    var e, r = function(t, e) {
                        var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                        if (!r) {
                            if (Array.isArray(t) || (r = function(t, e) {
                                if (t) {
                                    if ("string" == typeof t) return i(t, e);
                                    var r = ({}).toString.call(t).slice(8, -1);
                                    return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? i(t, e) : void 0;
                                }
                            }(t)) || e && t && "number" == typeof t.length) {
                                r && (t = r);
                                var n = 0, o = function() {};
                                return {
                                    s: o,
                                    n: function() {
                                        return n >= t.length ? {
                                            done: !0
                                        } : {
                                            done: !1,
                                            value: t[n++]
                                        };
                                    },
                                    e: function(t) {
                                        throw t;
                                    },
                                    f: o
                                };
                            }
                            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                        }
                        var a, s = !0, u = !1;
                        return {
                            s: function() {
                                r = r.call(t);
                            },
                            n: function() {
                                var t = r.next();
                                return s = t.done, t;
                            },
                            e: function(t) {
                                u = !0, a = t;
                            },
                            f: function() {
                                try {
                                    s || null == r.return || r.return();
                                } finally{
                                    if (u) throw a;
                                }
                            }
                        };
                    }(this.stateNames);
                    try {
                        for(r.s(); !(e = r.n()).done;){
                            var n = e.value;
                            n in this.states && (t.states[n] = null == this.states[n] ? this.states[n] : a({}, this.states[n]));
                        }
                    } catch (t) {
                        r.e(t);
                    } finally{
                        r.f();
                    }
                    return t;
                };
            },
            7557: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i(t, e, r) {
                    return (e = function(t) {
                        var e = function(t) {
                            if ("object" != n(t) || !t) return t;
                            var e = t[Symbol.toPrimitive];
                            if (void 0 !== e) {
                                var r = e.call(t, "string");
                                if ("object" != n(r)) return r;
                                throw new TypeError("@@toPrimitive must return a primitive value.");
                            }
                            return String(t);
                        }(t);
                        return "symbol" == n(e) ? e : e + "";
                    }(e)) in t ? Object.defineProperty(t, e, {
                        value: r,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0
                    }) : t[e] = r, t;
                }
                var o = r(2400), a = r(8920), s = r(7930).arrayAtomicsSymbol, u = r(7930).arrayAtomicsBackupSymbol, c = r(7930).arrayParentSymbol, f = r(7930).arrayPathSymbol, l = r(7930).arraySchemaSymbol, h = Array.prototype.push, p = /^\d+$/;
                t.exports = function(t, e, r, n) {
                    var d;
                    if (Array.isArray(t)) {
                        var y = t.length;
                        if (0 === y) d = new Array;
                        else if (1 === y) (d = new Array(1))[0] = t[0];
                        else if (y < 1e4) d = new Array, h.apply(d, t);
                        else {
                            d = new Array;
                            for(var b = 0; b < y; ++b)h.call(d, t[b]);
                        }
                    } else d = [];
                    var m = i(i(i(i(i(i(i(i({}, s, {}), u, void 0), f, e), l, n), c, void 0), "isMongooseArray", !0), "isMongooseArrayProxy", !0), "__array", d);
                    t && null != t[s] && (m[s] = t[s]), null != r && r instanceof o && (m[c] = r, m[l] = n || r.schema.path(e));
                    var v = new Proxy(d, {
                        get: function(t, e) {
                            return m.hasOwnProperty(e) ? m[e] : a.hasOwnProperty(e) ? a[e] : n && n.virtuals && n.virtuals.hasOwnProperty(e) ? n.virtuals[e].applyGetters(void 0, t) : "string" == typeof e && p.test(e) && null != (null == n ? void 0 : n.$embeddedSchemaType) ? n.$embeddedSchemaType.applyGetters(d[e], r) : d[e];
                        },
                        set: function(t, e, r) {
                            return "string" == typeof e && p.test(e) ? a.set.call(v, e, r, !1) : m.hasOwnProperty(e) ? m[e] = r : n && n.virtuals && n.virtuals.hasOwnProperty(e) ? n.virtuals[e].applySetters(r, t) : d[e] = r, !0;
                        }
                    });
                    return v;
                };
            },
            1243: (t, e)=>{
                "use strict";
                e.isMongooseArray = function(t) {
                    return Array.isArray(t) && t.isMongooseArray;
                };
            },
            8920: (t, e, r)=>{
                "use strict";
                var n = r(5832).Buffer;
                function i(t) {
                    return i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, i(t);
                }
                function o(t, e) {
                    var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                    if (!r) {
                        if (Array.isArray(t) || (r = a(t)) || e && t && "number" == typeof t.length) {
                            r && (t = r);
                            var n = 0, i = function() {};
                            return {
                                s: i,
                                n: function() {
                                    return n >= t.length ? {
                                        done: !0
                                    } : {
                                        done: !1,
                                        value: t[n++]
                                    };
                                },
                                e: function(t) {
                                    throw t;
                                },
                                f: i
                            };
                        }
                        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    }
                    var o, s = !0, u = !1;
                    return {
                        s: function() {
                            r = r.call(t);
                        },
                        n: function() {
                            var t = r.next();
                            return s = t.done, t;
                        },
                        e: function(t) {
                            u = !0, o = t;
                        },
                        f: function() {
                            try {
                                s || null == r.return || r.return();
                            } finally{
                                if (u) throw o;
                            }
                        }
                    };
                }
                function a(t, e) {
                    if (t) {
                        if ("string" == typeof t) return s(t, e);
                        var r = ({}).toString.call(t).slice(8, -1);
                        return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? s(t, e) : void 0;
                    }
                }
                function s(t, e) {
                    (null == e || e > t.length) && (e = t.length);
                    for(var r = 0, n = Array(e); r < e; r++)n[r] = t[r];
                    return n;
                }
                var u = r(2400), c = r(6547), f = r(8213), l = r(4473), h = r(4450), p = r(3303)._, d = r(5678), y = r(8768), b = r(3305), m = r(7930).arrayAtomicsSymbol, v = r(7930).arrayParentSymbol, g = r(7930).arrayPathSymbol, _ = r(7930).arraySchemaSymbol, w = r(7930).populateModelSymbol, S = Symbol("mongoose#Array#sliced"), O = Array.prototype.push, j = {
                    $__getAtomics: function() {
                        var t = [], e = Object.keys(this[m] || {}), r = e.length, n = Object.assign({}, p, {
                            _isNested: !0
                        });
                        if (0 === r) return t[0] = [
                            "$set",
                            this.toObject(n)
                        ], t;
                        for(; r--;){
                            var i = e[r], o = this[m][i];
                            y.isMongooseObject(o) ? o = o.toObject(n) : Array.isArray(o) ? o = this.toObject.call(o, n) : null != o && Array.isArray(o.$each) ? o.$each = this.toObject.call(o.$each, n) : null != o && "function" == typeof o.valueOf && (o = o.valueOf()), "$addToSet" === i && (o = {
                                $each: o
                            }), t.push([
                                i,
                                o
                            ]);
                        }
                        return t;
                    },
                    $atomics: function() {
                        return this[m];
                    },
                    $parent: function() {
                        return this[v];
                    },
                    $path: function() {
                        return this[g];
                    },
                    $shift: function() {
                        this._registerAtomic("$pop", -1), this._markModified();
                        var t = this.__array;
                        if (!t._shifted) return t._shifted = !0, [].shift.call(t);
                    },
                    $pop: function() {
                        if (this._registerAtomic("$pop", 1), this._markModified(), !this._popped) return this._popped = !0, [].pop.call(this);
                    },
                    $schema: function() {
                        return this[_];
                    },
                    _cast: function(t) {
                        var e, r = !1, i = this[v];
                        if (i && (r = i.$populated(this[g], !0)), r && null != t) {
                            if (null == (e = r.options[w])) throw new f("No populated model found for path `" + this[g] + "`. This is likely a bug in Mongoose, please report an issue on github.com/Automattic/mongoose.");
                            return (n.isBuffer(t) || b(t, "ObjectId") || !y.isObject(t)) && (t = {
                                _id: t
                            }), t.schema && t.schema.discriminatorMapping && void 0 !== t.schema.discriminatorMapping.key || (t = new e(t)), this[_].caster.applySetters(t, i, !0);
                        }
                        return this[_].caster.applySetters(t, i, !1);
                    },
                    _mapCast: function(t, e) {
                        return this._cast(t, this.length + e);
                    },
                    _markModified: function(t) {
                        var e, r = this[v];
                        if (r) {
                            if (e = this[g], arguments.length && (e = e + "." + t), null != e && e.endsWith(".$")) return this;
                            r.markModified(e, 0 !== arguments.length ? t : r);
                        }
                        return this;
                    },
                    _registerAtomic: function(t, e) {
                        if (!this[S]) {
                            if ("$set" === t) return this[m] = {
                                $set: e
                            }, l(this[v], this[g]), this._markModified(), this;
                            var r, n = this[m];
                            if ("$pop" === t && !("$pop" in n)) {
                                var i = this;
                                this[v].once("save", function() {
                                    i._popped = i._shifted = null;
                                });
                            }
                            if (n.$set || Object.keys(n).length && !(t in n)) return this[m] = {
                                $set: this
                            }, this;
                            if ("$pullAll" === t || "$addToSet" === t) n[t] || (n[t] = []), n[t] = n[t].concat(e);
                            else if ("$pullDocs" === t) {
                                var u = n.$pull || (n.$pull = {});
                                e[0] instanceof c ? (r = u.$or || (u.$or = []), Array.prototype.push.apply(r, e.map(function(t) {
                                    return t.toObject({
                                        transform: function(e, r) {
                                            return null == t || null == t.$__ || Object.keys(t.$__.activePaths.getStatePaths("default")).forEach(function(t) {
                                                d.unset(t, r), $(r, t);
                                            }), r;
                                        },
                                        virtuals: !1
                                    });
                                }))) : (r = u._id || (u._id = {
                                    $in: []
                                })).$in = r.$in.concat(e);
                            } else if ("$push" === t) {
                                if (n.$push = n.$push || {
                                    $each: []
                                }, null != e && y.hasUserDefinedProperty(e, "$each")) n.$push = e;
                                else if (1 === e.length) n.$push.$each.push(e[0]);
                                else if (e.length < 1e4) {
                                    var f;
                                    (f = n.$push.$each).push.apply(f, function(t) {
                                        if (Array.isArray(t)) return s(t);
                                    }(_ = e) || function(t) {
                                        if ("undefined" != typeof Symbol && null != t[Symbol.iterator] || null != t["@@iterator"]) return Array.from(t);
                                    }(_) || a(_) || function() {
                                        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                                    }());
                                } else {
                                    var h, p = o(e);
                                    try {
                                        for(p.s(); !(h = p.n()).done;){
                                            var b = h.value;
                                            n.$push.$each.push(b);
                                        }
                                    } catch (t) {
                                        p.e(t);
                                    } finally{
                                        p.f();
                                    }
                                }
                            } else n[t] = e;
                            return this;
                        }
                        var _;
                    },
                    addToSet: function() {
                        E(this, arguments), A(this, arguments);
                        var t = [].map.call(arguments, this._mapCast, this), e = [], r = "";
                        t[0] instanceof c ? r = "doc" : t[0] instanceof Date ? r = "date" : b(t[0], "ObjectId") && (r = "ObjectId");
                        var n = y.isMongooseArray(t) ? t.__array : t, i = y.isMongooseArray(this) ? this.__array : this;
                        return n.forEach(function(t) {
                            var n, o = +t;
                            switch(r){
                                case "doc":
                                    n = this.some(function(e) {
                                        return e.equals(t);
                                    });
                                    break;
                                case "date":
                                    n = this.some(function(t) {
                                        return +t === o;
                                    });
                                    break;
                                case "ObjectId":
                                    n = this.find(function(e) {
                                        return e.toString() === t.toString();
                                    });
                                    break;
                                default:
                                    n = ~this.indexOf(t);
                            }
                            n || (this._markModified(), i.push(t), this._registerAtomic("$addToSet", t), [].push.call(e, t));
                        }, this), e;
                    },
                    hasAtomics: function() {
                        return y.isPOJO(this[m]) ? Object.keys(this[m]).length : 0;
                    },
                    includes: function(t, e) {
                        return -1 !== this.indexOf(t, e);
                    },
                    indexOf: function(t, e) {
                        b(t, "ObjectId") && (t = t.toString()), e = null == e ? 0 : e;
                        for(var r = this.length, n = e; n < r; ++n)if (t == this[n]) return n;
                        return -1;
                    },
                    inspect: function() {
                        return JSON.stringify(this);
                    },
                    nonAtomicPush: function() {
                        var t = [].map.call(arguments, this._mapCast, this);
                        this._markModified();
                        var e = [].push.apply(this, t);
                        return this._registerAtomic("$set", this), e;
                    },
                    pop: function() {
                        this._markModified();
                        var t = [].pop.call(this);
                        return this._registerAtomic("$set", this), t;
                    },
                    pull: function() {
                        var t = this, e = [].map.call(arguments, function(e, r) {
                            return t._cast(e, r, {
                                defaults: !1
                            });
                        }, this), r = this[v].get(this[g]);
                        y.isMongooseArray(r) && (r = r.__array);
                        var n, i = r.length;
                        for(this._markModified(); i--;)(n = r[i]) instanceof u ? e.some(function(t) {
                            return n.equals(t);
                        }) && r.splice(i, 1) : ~this.indexOf.call(e, n) && r.splice(i, 1);
                        return e[0] instanceof c ? this._registerAtomic("$pullDocs", e.map(function(t) {
                            var e = t.$__getValue("_id");
                            return void 0 === e || t.$isDefault("_id") ? t : e;
                        })) : this._registerAtomic("$pullAll", e), l(this[v], this[g]) > 0 && this._registerAtomic("$set", this), this;
                    },
                    push: function() {
                        var t, e = arguments, r = e, n = null != e[0] && y.hasUserDefinedProperty(e[0], "$each"), i = y.isMongooseArray(this) ? this.__array : this;
                        if (n && (r = e[0], e = e[0].$each), null == this[_]) return O.apply(this, e);
                        E(this, e), A(this, e), e = [].map.call(e, this._mapCast, this);
                        var o = this[m];
                        return this._markModified(), n ? (r.$each = e, 0 !== (o.$push && o.$push.$each && o.$push.$each.length || 0) && o.$push.$position != r.$position ? (null != r.$position ? ([].splice.apply(i, [
                            r.$position,
                            0
                        ].concat(e)), t = i.length) : t = [].push.apply(i, e), this._registerAtomic("$set", this)) : null != r.$position ? ([].splice.apply(i, [
                            r.$position,
                            0
                        ].concat(e)), t = this.length) : t = [].push.apply(i, e)) : (r = e, t = O.apply(i, e)), this._registerAtomic("$push", r), t;
                    },
                    remove: function() {
                        return this.pull.apply(this, arguments);
                    },
                    set: function(t, e, r) {
                        var n = this.__array;
                        if (r) return n[t] = e, this;
                        var i = j._cast.call(this, e, t);
                        return j._markModified.call(this, t), n[t] = i, this;
                    },
                    shift: function() {
                        var t = y.isMongooseArray(this) ? this.__array : this;
                        this._markModified();
                        var e = [].shift.call(t);
                        return this._registerAtomic("$set", this), e;
                    },
                    sort: function() {
                        var t = y.isMongooseArray(this) ? this.__array : this, e = [].sort.apply(t, arguments);
                        return this._registerAtomic("$set", this), e;
                    },
                    splice: function() {
                        var t, e = y.isMongooseArray(this) ? this.__array : this;
                        if (this._markModified(), E(this, Array.prototype.slice.call(arguments, 2)), arguments.length) {
                            var r;
                            if (null == this[_]) r = arguments;
                            else {
                                r = [];
                                for(var n = 0; n < arguments.length; ++n)r[n] = n < 2 ? arguments[n] : this._cast(arguments[n], arguments[0] + (n - 2));
                            }
                            t = [].splice.apply(e, r), this._registerAtomic("$set", this);
                        }
                        return t;
                    },
                    toBSON: function() {
                        return this.toObject(p);
                    },
                    toObject: function(t) {
                        var e = y.isMongooseArray(this) ? this.__array : this;
                        return t && t.depopulate ? ((t = h(t))._isNested = !0, [].concat(e).map(function(e) {
                            return e instanceof u ? e.toObject(t) : e;
                        })) : [].concat(e);
                    },
                    $toObject: function() {
                        return this.constructor.prototype.toObject.apply(this, arguments);
                    },
                    unshift: function() {
                        var t;
                        E(this, arguments), t = null == this[_] ? arguments : [].map.call(arguments, this._cast, this);
                        var e = y.isMongooseArray(this) ? this.__array : this;
                        return this._markModified(), [].unshift.apply(e, t), this._registerAtomic("$set", this), this.length;
                    }
                };
                function $(t, e, r) {
                    if ("string" == typeof e) {
                        if (-1 === e.indexOf(".")) return;
                        e = d.stringToParts(e);
                    }
                    (r = r || 0) >= e.length || null != t && "object" === i(t) && ($(t[e[0]], e, r + 1), null != t[e[0]] && "object" === i(t[e[0]]) && 0 === Object.keys(t[e[0]]).length && delete t[e[0]]);
                }
                function E(t, e) {
                    var r, n, a, s = null == t ? null : t[_] && t[_].caster && t[_].caster.options && t[_].caster.options.ref || null;
                    0 === t.length && 0 !== e.length && function(t, e) {
                        if (!e) return !1;
                        var r, n = o(t);
                        try {
                            for(n.s(); !(r = n.n()).done;){
                                var i = r.value;
                                if (null == i) return !1;
                                var a = i.constructor;
                                if (!(i instanceof u) || a.modelName !== e && a.baseModelName !== e) return !1;
                            }
                        } catch (t) {
                            n.e(t);
                        } finally{
                            n.f();
                        }
                        return !0;
                    }(e, s) && t[v].$populated(t[g], [], (r = {}, n = w, a = e[0].constructor, (n = function(t) {
                        var e = function(t) {
                            if ("object" != i(t) || !t) return t;
                            var e = t[Symbol.toPrimitive];
                            if (void 0 !== e) {
                                var r = e.call(t, "string");
                                if ("object" != i(r)) return r;
                                throw new TypeError("@@toPrimitive must return a primitive value.");
                            }
                            return String(t);
                        }(t);
                        return "symbol" == i(e) ? e : e + "";
                    }(n)) in r ? Object.defineProperty(r, n, {
                        value: a,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0
                    }) : r[n] = a, r));
                }
                function A(t, e) {
                    var r = null == t ? null : t[_] && t[_].caster && t[_].caster.options && t[_].caster.options.ref || null, a = t[v], s = t[g];
                    if (r && a.populated(s)) {
                        var u, c = o(e);
                        try {
                            for(c.s(); !(u = c.n()).done;){
                                var f = u.value;
                                if (null != f && ("object" !== i(f) || f instanceof String || f instanceof Number || f instanceof n || y.isMongooseType(f))) {
                                    a.depopulate(s);
                                    break;
                                }
                            }
                        } catch (t) {
                            c.e(t);
                        } finally{
                            c.f();
                        }
                    }
                }
                for(var P = function() {
                    var t = k[x];
                    if (null == Array.prototype[t]) return 1;
                    j[t] = function() {
                        var e = y.isMongooseArray(this) ? this.__array : this, r = [].concat(e);
                        return r[t].apply(r, arguments);
                    };
                }, x = 0, k = [
                    "filter",
                    "flat",
                    "flatMap",
                    "map",
                    "slice"
                ]; x < k.length; x++)P();
                t.exports = j;
            },
            6547: (t, e, r)=>{
                "use strict";
                function n(t, e) {
                    var r = Object.keys(t);
                    if (Object.getOwnPropertySymbols) {
                        var n = Object.getOwnPropertySymbols(t);
                        e && (n = n.filter(function(e) {
                            return Object.getOwnPropertyDescriptor(t, e).enumerable;
                        })), r.push.apply(r, n);
                    }
                    return r;
                }
                function i(t, e, r) {
                    return (e = function(t) {
                        var e = function(t) {
                            if ("object" != o(t) || !t) return t;
                            var e = t[Symbol.toPrimitive];
                            if (void 0 !== e) {
                                var r = e.call(t, "string");
                                if ("object" != o(r)) return r;
                                throw new TypeError("@@toPrimitive must return a primitive value.");
                            }
                            return String(t);
                        }(t);
                        return "symbol" == o(e) ? e : e + "";
                    }(e)) in t ? Object.defineProperty(t, e, {
                        value: r,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0
                    }) : t[e] = r, t;
                }
                function o(t) {
                    return o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, o(t);
                }
                var a = r(3550).EventEmitter, s = r(9380), u = r(8768), c = r(7930).documentArrayParent;
                function f(t, e, r, a, f) {
                    var l;
                    u.isMongooseDocumentArray(e) ? (this.__parentArray = e, this[c] = e.$parent()) : (this.__parentArray = void 0, this[c] = void 0), this.$setIndex(f), this.$__parent = this[c], "object" === o(r) && null != r ? (l = function(t) {
                        for(var e = 1; e < arguments.length; e++){
                            var r = null != arguments[e] ? arguments[e] : {};
                            e % 2 ? n(Object(r), !0).forEach(function(e) {
                                i(t, e, r[e]);
                            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : n(Object(r)).forEach(function(e) {
                                Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));
                            });
                        }
                        return t;
                    }({
                        isNew: !0
                    }, r), r = void 0) : l = {
                        isNew: !0
                    }, s.call(this, t, a, this[c], r, l);
                }
                for(var l in f.prototype = Object.create(s.prototype), f.prototype.constructor = f, Object.defineProperty(f.prototype, "$isSingleNested", {
                    configurable: !1,
                    writable: !1,
                    value: !1
                }), Object.defineProperty(f.prototype, "$isDocumentArrayElement", {
                    configurable: !1,
                    writable: !1,
                    value: !0
                }), a.prototype)f[l] = a.prototype[l];
                f.prototype.$setIndex = function(t) {
                    if (this.__index = t, null != this.$__ && null != this.$__.validationError) for(var e = 0, r = Object.keys(this.$__.validationError.errors); e < r.length; e++){
                        var n = r[e];
                        this.invalidate(n, this.$__.validationError.errors[n]);
                    }
                }, f.prototype.populate = function() {
                    throw new Error('Mongoose does not support calling populate() on nested docs. Instead of `doc.arr[0].populate("path")`, use `doc.populate("arr.0.path")`');
                }, f.prototype.$__removeFromParent = function() {
                    var t = this._doc._id;
                    if (!t) throw new Error("For your own good, Mongoose does not know how to remove an ArraySubdocument that has no _id");
                    this.__parentArray.pull({
                        _id: t
                    });
                }, f.prototype.$__fullPath = function(t, e) {
                    return null == this.__index ? null : (this.$__.fullPath || this.ownerDocument(), e ? t ? this.$__.fullPath + "." + t : this.$__.fullPath : t ? this.$__.fullPath + "." + this.__index + "." + t : this.$__.fullPath + "." + this.__index);
                }, f.prototype.$__pathRelativeToParent = function(t, e) {
                    return null != this.__index && this.__parentArray && this.__parentArray.$path ? e ? null == t ? this.__parentArray.$path() : this.__parentArray.$path() + "." + t : null == t ? this.__parentArray.$path() + "." + this.__index : this.__parentArray.$path() + "." + this.__index + "." + t : null;
                }, f.prototype.$parent = function() {
                    return this[c];
                }, f.prototype.parentArray = function() {
                    return this.__parentArray;
                }, t.exports = f;
            },
            6365: (t, e, r)=>{
                "use strict";
                var n = r(5832).Buffer, i = r(3633).Binary, o = r(8768);
                function a(t, e, r) {
                    var i, s, c, f, l = t;
                    return null == t && (l = 0), Array.isArray(e) ? (s = e[0], c = e[1]) : i = e, f = "number" == typeof l || l instanceof Number ? n.alloc(l) : n.from(l, i, r), o.decorate(f, a.mixin), f.isMongooseBuffer = !0, f[a.pathSymbol] = s, f[u] = c, f._subtype = 0, f;
                }
                var s = Symbol.for("mongoose#Buffer#_path"), u = Symbol.for("mongoose#Buffer#_parent");
                a.pathSymbol = s, a.mixin = {
                    _subtype: void 0,
                    _markModified: function() {
                        var t = this[u];
                        return t && t.markModified(this[a.pathSymbol]), this;
                    },
                    write: function() {
                        var t = n.prototype.write.apply(this, arguments);
                        return t > 0 && this._markModified(), t;
                    },
                    copy: function(t) {
                        var e = n.prototype.copy.apply(this, arguments);
                        return t && t.isMongooseBuffer && t._markModified(), e;
                    }
                }, o.each([
                    "writeUInt8",
                    "writeUInt16",
                    "writeUInt32",
                    "writeInt8",
                    "writeInt16",
                    "writeInt32",
                    "writeFloat",
                    "writeDouble",
                    "fill",
                    "utf8Write",
                    "binaryWrite",
                    "asciiWrite",
                    "set",
                    "writeUInt16LE",
                    "writeUInt16BE",
                    "writeUInt32LE",
                    "writeUInt32BE",
                    "writeInt16LE",
                    "writeInt16BE",
                    "writeInt32LE",
                    "writeInt32BE",
                    "writeFloatLE",
                    "writeFloatBE",
                    "writeDoubleLE",
                    "writeDoubleBE"
                ], function(t) {
                    n.prototype[t] && (a.mixin[t] = function() {
                        var e = n.prototype[t].apply(this, arguments);
                        return this._markModified(), e;
                    });
                }), a.mixin.toObject = function(t) {
                    var e = "number" == typeof t ? t : this._subtype || 0;
                    return new i(n.from(this), e);
                }, a.mixin.$toObject = a.mixin.toObject, a.mixin.toBSON = function() {
                    return new i(this, this._subtype || 0);
                }, a.mixin.equals = function(t) {
                    if (!n.isBuffer(t)) return !1;
                    if (this.length !== t.length) return !1;
                    for(var e = 0; e < this.length; ++e)if (this[e] !== t[e]) return !1;
                    return !0;
                }, a.mixin.subtype = function(t) {
                    if ("number" != typeof t) throw new TypeError("Invalid subtype. Expected a number");
                    this._subtype !== t && this._markModified(), this._subtype = t;
                }, a.Binary = i, t.exports = a;
            },
            9639: (t, e, r)=>{
                "use strict";
                t.exports = r(3633).Decimal128;
            },
            4878: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i(t, e, r) {
                    return (e = function(t) {
                        var e = function(t) {
                            if ("object" != n(t) || !t) return t;
                            var e = t[Symbol.toPrimitive];
                            if (void 0 !== e) {
                                var r = e.call(t, "string");
                                if ("object" != n(r)) return r;
                                throw new TypeError("@@toPrimitive must return a primitive value.");
                            }
                            return String(t);
                        }(t);
                        return "symbol" == n(e) ? e : e + "";
                    }(e)) in t ? Object.defineProperty(t, e, {
                        value: r,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0
                    }) : t[e] = r, t;
                }
                var o = r(8920), a = r(4859), s = r(2400), u = r(7930).arrayAtomicsSymbol, c = r(7930).arrayAtomicsBackupSymbol, f = r(7930).arrayParentSymbol, l = r(7930).arrayPathSymbol, h = r(7930).arraySchemaSymbol, p = Array.prototype.push, d = /^\d+$/;
                t.exports = function(t, e, r, n) {
                    var y = [], b = i(i(i(i(i({}, u, {}), c, void 0), l, e), h, void 0), f, void 0);
                    if (Array.isArray(t) && (t[l] === e && t[f] === r && (b[u] = Object.assign({}, t[u])), t.forEach(function(t) {
                        p.call(y, t);
                    })), b[l] = e, b.__array = y, r && r instanceof s) for(b[f] = r, b[h] = r.$__schema.path(e); null != b[h] && b[h].$isMongooseArray && !b[h].$isMongooseDocumentArray;)b[h] = b[h].casterConstructor;
                    var m = new Proxy(y, {
                        get: function(t, e) {
                            return "isMongooseArray" === e || "isMongooseArrayProxy" === e || "isMongooseDocumentArray" === e || "isMongooseDocumentArrayProxy" === e || (b.hasOwnProperty(e) ? b[e] : a.hasOwnProperty(e) ? a[e] : n && n.virtuals && n.virtuals.hasOwnProperty(e) ? n.virtuals[e].applyGetters(void 0, t) : o.hasOwnProperty(e) ? o[e] : y[e]);
                        },
                        set: function(t, e, r) {
                            return "string" == typeof e && d.test(e) ? a.set.call(m, e, r, !1) : b.hasOwnProperty(e) ? b[e] = r : n && n.virtuals && n.virtuals.hasOwnProperty(e) ? n.virtuals[e].applySetters(r, t) : y[e] = r, !0;
                        }
                    });
                    return m;
                };
            },
            1347: (t, e)=>{
                "use strict";
                e.isMongooseDocumentArray = function(t) {
                    return Array.isArray(t) && t.isMongooseDocumentArray;
                };
            },
            4859: (t, e, r)=>{
                "use strict";
                var n = r(5832).Buffer;
                function i(t, e) {
                    var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                    if (!r) {
                        if (Array.isArray(t) || (r = function(t, e) {
                            if (t) {
                                if ("string" == typeof t) return o(t, e);
                                var r = ({}).toString.call(t).slice(8, -1);
                                return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? o(t, e) : void 0;
                            }
                        }(t)) || e && t && "number" == typeof t.length) {
                            r && (t = r);
                            var n = 0, i = function() {};
                            return {
                                s: i,
                                n: function() {
                                    return n >= t.length ? {
                                        done: !0
                                    } : {
                                        done: !1,
                                        value: t[n++]
                                    };
                                },
                                e: function(t) {
                                    throw t;
                                },
                                f: i
                            };
                        }
                        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    }
                    var a, s = !0, u = !1;
                    return {
                        s: function() {
                            r = r.call(t);
                        },
                        n: function() {
                            var t = r.next();
                            return s = t.done, t;
                        },
                        e: function(t) {
                            u = !0, a = t;
                        },
                        f: function() {
                            try {
                                s || null == r.return || r.return();
                            } finally{
                                if (u) throw a;
                            }
                        }
                    };
                }
                function o(t, e) {
                    (null == e || e > t.length) && (e = t.length);
                    for(var r = 0, n = Array(e); r < e; r++)n[r] = t[r];
                    return n;
                }
                var a = r(8920), s = r(2400), u = r(863), c = r(8677), f = r(3303)._, l = r(8768), h = r(3305), p = r(7930).arrayParentSymbol, d = r(7930).arrayPathSymbol, y = r(7930).arraySchemaSymbol, b = r(7930).documentArrayParent, m = Array.prototype.toString, v = {
                    toBSON: function() {
                        return this.toObject(f);
                    },
                    toString: function() {
                        return m.call(this.__array.map(function(t) {
                            return null != t && null != t.$__ ? t.toString() : t;
                        }));
                    },
                    getArrayParent: function() {
                        return this[p];
                    },
                    _cast: function(t, e, r) {
                        if (null == this[y]) return t;
                        var i = this[y].casterConstructor;
                        if ((i.$isMongooseDocumentArray ? l.isMongooseDocumentArray(t) : t instanceof i) || t && t.constructor && t.constructor.baseCasterConstructor === i) return t[b] && t.__parentArray || (t[b] = this[p], t.__parentArray = this), t.$setIndex(e), t;
                        if (null == t) return null;
                        if ((n.isBuffer(t) || h(t, "ObjectId") || !l.isObject(t)) && (t = {
                            _id: t
                        }), t && i.discriminators && i.schema && i.schema.options && i.schema.options.discriminatorKey) {
                            if ("string" == typeof t[i.schema.options.discriminatorKey] && i.discriminators[t[i.schema.options.discriminatorKey]]) i = i.discriminators[t[i.schema.options.discriminatorKey]];
                            else {
                                var o = c(i.discriminators, t[i.schema.options.discriminatorKey]);
                                o && (i = o);
                            }
                        }
                        if (i.$isMongooseDocumentArray) return i.cast(t, this, void 0, void 0, e);
                        var a = new i(t, this, r, void 0, e);
                        return a.isNew = !0, a;
                    },
                    id: function(t) {
                        var e, r, n;
                        try {
                            e = u(t).toString();
                        } catch (t) {
                            e = null;
                        }
                        var o, a = i(this);
                        try {
                            for(a.s(); !(o = a.n()).done;){
                                var c = o.value;
                                if (c && null != (n = c.get("_id"))) {
                                    if (n instanceof s) {
                                        if (r || (r = String(t)), r == n._id) return c;
                                    } else if (h(t, "ObjectId") || h(n, "ObjectId")) {
                                        if (e == n) return c;
                                    } else if (t == n || l.deepEqual(t, n)) return c;
                                }
                            }
                        } catch (t) {
                            a.e(t);
                        } finally{
                            a.f();
                        }
                        return null;
                    },
                    toObject: function(t) {
                        return [].concat(this.map(function(e) {
                            return null == e ? null : "function" != typeof e.toObject ? e : e.toObject(t);
                        }));
                    },
                    $toObject: function() {
                        return this.constructor.prototype.toObject.apply(this, arguments);
                    },
                    push: function() {
                        var t = a.push.apply(this, arguments);
                        return g(this), t;
                    },
                    pull: function() {
                        var t = a.pull.apply(this, arguments);
                        return g(this), t;
                    },
                    shift: function() {
                        var t = a.shift.apply(this, arguments);
                        return g(this), t;
                    },
                    splice: function() {
                        var t = a.splice.apply(this, arguments);
                        return g(this), t;
                    },
                    inspect: function() {
                        return this.toObject();
                    },
                    create: function(t) {
                        var e = this[y].casterConstructor;
                        if (t && e.discriminators && e.schema && e.schema.options && e.schema.options.discriminatorKey) {
                            if ("string" == typeof t[e.schema.options.discriminatorKey] && e.discriminators[t[e.schema.options.discriminatorKey]]) e = e.discriminators[t[e.schema.options.discriminatorKey]];
                            else {
                                var r = c(e.discriminators, t[e.schema.options.discriminatorKey]);
                                r && (e = r);
                            }
                        }
                        return new e(t, this);
                    },
                    notify: function(t) {
                        var e = this;
                        return function r(n, i) {
                            for(var o = (i = i || e).length; o--;)null != i[o] && ("save" === t && (n = e[o]), l.isMongooseArray(i[o]) ? r(n, i[o]) : i[o] && i[o].emit(t, n));
                        };
                    },
                    set: function(t, e, r) {
                        var n = this.__array;
                        if (r) return n[t] = e, this;
                        var i = v._cast.call(this, e, t);
                        return v._markModified.call(this, t), n[t] = i, this;
                    },
                    _markModified: function(t, e) {
                        var r, n = this[p];
                        if (n) {
                            if (r = this[d], arguments.length && (r = null != e ? r + "." + t.__index + "." + e : r + "." + t), null != r && r.endsWith(".$")) return this;
                            n.markModified(r, 0 !== arguments.length ? t : n);
                        }
                        return this;
                    }
                };
                function g(t) {
                    var e = t[p];
                    if (e && null != e.$__.populated) {
                        var r, n = i(Object.keys(e.$__.populated).filter(function(e) {
                            return e.startsWith(t[d] + ".");
                        }));
                        try {
                            var o = function() {
                                var n = r.value, i = n.slice((t[d] + ".").length);
                                if (!Array.isArray(e.$__.populated[n].value)) return 1;
                                e.$__.populated[n].value = t.map(function(t) {
                                    return t.$populated(i);
                                });
                            };
                            for(n.s(); !(r = n.n()).done;)o();
                        } catch (t) {
                            n.e(t);
                        } finally{
                            n.f();
                        }
                    }
                }
                t.exports = v;
            },
            9600: (t, e, r)=>{
                "use strict";
                e.Array = r(7557), e.Buffer = r(6365), e.Document = e.Embedded = r(6547), e.DocumentArray = r(4878), e.Decimal128 = r(9639), e.ObjectId = r(5549), e.Map = r(2081), e.Subdocument = r(9380), e.UUID = r(1344);
            },
            2081: (t, e, r)=>{
                "use strict";
                function n(t) {
                    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, n(t);
                }
                function i(t, e) {
                    var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                    if (!r) {
                        if (Array.isArray(t) || (r = function(t, e) {
                            if (t) {
                                if ("string" == typeof t) return o(t, e);
                                var r = ({}).toString.call(t).slice(8, -1);
                                return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? o(t, e) : void 0;
                            }
                        }(t)) || e && t && "number" == typeof t.length) {
                            r && (t = r);
                            var n = 0, i = function() {};
                            return {
                                s: i,
                                n: function() {
                                    return n >= t.length ? {
                                        done: !0
                                    } : {
                                        done: !1,
                                        value: t[n++]
                                    };
                                },
                                e: function(t) {
                                    throw t;
                                },
                                f: i
                            };
                        }
                        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    }
                    var a, s = !0, u = !1;
                    return {
                        s: function() {
                            r = r.call(t);
                        },
                        n: function() {
                            var t = r.next();
                            return s = t.done, t;
                        },
                        e: function(t) {
                            u = !0, a = t;
                        },
                        f: function() {
                            try {
                                s || null == r.return || r.return();
                            } finally{
                                if (u) throw a;
                            }
                        }
                    };
                }
                function o(t, e) {
                    (null == e || e > t.length) && (e = t.length);
                    for(var r = 0, n = Array(e); r < e; r++)n[r] = t[r];
                    return n;
                }
                function a(t, e) {
                    for(var r = 0; r < e.length; r++){
                        var n = e[r];
                        n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, s(n.key), n);
                    }
                }
                function s(t) {
                    var e = function(t) {
                        if ("object" != n(t) || !t) return t;
                        var e = t[Symbol.toPrimitive];
                        if (void 0 !== e) {
                            var r = e.call(t, "string");
                            if ("object" != n(r)) return r;
                            throw new TypeError("@@toPrimitive must return a primitive value.");
                        }
                        return String(t);
                    }(t);
                    return "symbol" == n(e) ? e : e + "";
                }
                function u(t, e, r, n) {
                    var i = c(p(1 & n ? t.prototype : t), e, r);
                    return 2 & n && "function" == typeof i ? function(t) {
                        return i.apply(r, t);
                    } : i;
                }
                function c() {
                    return c = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function(t, e, r) {
                        var n = function(t, e) {
                            for(; !({}).hasOwnProperty.call(t, e) && null !== (t = p(t)););
                            return t;
                        }(t, e);
                        if (n) {
                            var i = Object.getOwnPropertyDescriptor(n, e);
                            return i.get ? i.get.call(arguments.length < 3 ? t : r) : i.value;
                        }
                    }, c.apply(null, arguments);
                }
                function f(t) {
                    var e = "function" == typeof Map ? new Map : void 0;
                    return f = function(t) {
                        if (null === t || !function(t) {
                            try {
                                return -1 !== Function.toString.call(t).indexOf("[native code]");
                            } catch (e) {
                                return "function" == typeof t;
                            }
                        }(t)) return t;
                        if ("function" != typeof t) throw new TypeError("Super expression must either be null or a function");
                        if (void 0 !== e) {
                            if (e.has(t)) return e.get(t);
                            e.set(t, r);
                        }
                        function r() {
                            return function(t, e, r) {
                                if (l()) return Reflect.construct.apply(null, arguments);
                                var n = [
                                    null
                                ];
                                n.push.apply(n, e);
                                var i = new (t.bind.apply(t, n));
                                return r && h(i, r.prototype), i;
                            }(t, arguments, p(this).constructor);
                        }
                        return r.prototype = Object.create(t.prototype, {
                            constructor: {
                                value: r,
                                enumerable: !1,
                                writable: !0,
                                configurable: !0
                            }
                        }), h(r, t);
                    }, f(t);
                }
                function l() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
                    } catch (t) {}
                    return (l = function() {
                        return !!t;
                    })();
                }
                function h(t, e) {
                    return h = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                        return t.__proto__ = e, t;
                    }, h(t, e);
                }
                function p(t) {
                    return p = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                        return t.__proto__ || Object.getPrototypeOf(t);
                    }, p(t);
                }
                var d = r(5022), y = r(8213), b = r(4450), m = r(8768).deepEqual, v = r(5879), g = r(3216), _ = r(7352), w = r(2793), S = r(3305), O = r(4473), j = r(7930).populateModelSymbol, $ = function(t) {
                    function e(t, r, i, o) {
                        var a;
                        return function(t, e) {
                            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                        }(this, e), "Object" === v(t) && (t = Object.keys(t).reduce(function(e, r) {
                            return e.concat([
                                [
                                    r,
                                    t[r]
                                ]
                            ]);
                        }, [])), (a = function(t, e, r) {
                            return e = p(e), function(t, e) {
                                if (e && ("object" == n(e) || "function" == typeof e)) return e;
                                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                                return function(t) {
                                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                                    return t;
                                }(t);
                            }(t, l() ? Reflect.construct(e, r || [], p(t).constructor) : e.apply(t, r));
                        }(this, e, [
                            t
                        ])).$__parent = null != i && null != i.$__ ? i : null, a.$__path = r, a.$__schemaType = null == o ? new d(r) : o, a.$__runDeferred(), a;
                    }
                    var r, o;
                    return function(t, e) {
                        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                        t.prototype = Object.create(e && e.prototype, {
                            constructor: {
                                value: t,
                                writable: !0,
                                configurable: !0
                            }
                        }), Object.defineProperty(t, "prototype", {
                            writable: !1
                        }), e && h(t, e);
                    }(e, t), r = e, o = [
                        {
                            key: "$init",
                            value: function(t, r) {
                                E(t), u(e, "set", this, 3)([
                                    t,
                                    r
                                ]), null != r && r.$isSingleNested && (r.$basePath = this.$__path + "." + t);
                            }
                        },
                        {
                            key: "$__set",
                            value: function(t, r) {
                                u(e, "set", this, 3)([
                                    t,
                                    r
                                ]);
                            }
                        },
                        {
                            key: "get",
                            value: function(t, r) {
                                return S(t, "ObjectId") && (t = t.toString()), !1 === (r = r || {}).getters ? u(e, "get", this, 3)([
                                    t
                                ]) : this.$__schemaType.applyGetters(u(e, "get", this, 3)([
                                    t
                                ]), this.$__parent);
                            }
                        },
                        {
                            key: "set",
                            value: function(t, r) {
                                if (S(t, "ObjectId") && (t = t.toString()), E(t), r = g(r), null == this.$__schemaType) return this.$__deferred = this.$__deferred || [], void this.$__deferred.push({
                                    key: t,
                                    value: r
                                });
                                var n, i = this.$__parent, o = null != i && i.$__ && i.$__.populated ? i.$populated(f.call(this), !0) || i.$populated(this.$__path, !0) : null, a = this.get(t);
                                if (null != o) {
                                    if (this.$__schemaType.$isSingleNested) throw new y("Cannot manually populate single nested subdoc underneath Map " + 'at path "'.concat(this.$__path, '". Try using an array instead of a Map.'));
                                    Array.isArray(r) && this.$__schemaType.$isMongooseArray ? r = r.map(function(t) {
                                        return null == t.$__ && (t = new o.options[j](t)), t.$__.wasPopulated = {
                                            value: t._doc._id
                                        }, t;
                                    }) : null != r && (null == r.$__ && (r = new o.options[j](r)), r.$__.wasPopulated = {
                                        value: r._doc._id
                                    });
                                } else try {
                                    var s = this.$__schemaType.$isMongooseDocumentArray || this.$__schemaType.$isSingleNested ? {
                                        path: f.call(this)
                                    } : null;
                                    r = this.$__schemaType.applySetters(r, this.$__parent, !1, this.get(t), s);
                                } catch (t) {
                                    if (null != this.$__parent && null != this.$__parent.$__) return void this.$__parent.invalidate(f.call(this), t);
                                    throw t;
                                }
                                if (u(e, "set", this, 3)([
                                    t,
                                    r
                                ]), null != i && null != i.$__ && !m(r, a)) {
                                    var c = f.call(this);
                                    i.markModified(c), (this.$__schemaType.$isMongooseDocumentArray || this.$__schemaType.$isSingleNested) && O(i, c);
                                }
                                function f() {
                                    return n || (n = this.$__path + "." + t);
                                }
                            }
                        },
                        {
                            key: "clear",
                            value: function() {
                                u(e, "clear", this, 3)([]);
                                var t = this.$__parent;
                                null != t && t.markModified(this.$__path);
                            }
                        },
                        {
                            key: "delete",
                            value: function(t) {
                                return S(t, "ObjectId") && (t = t.toString()), this.set(t, void 0), u(e, "delete", this, 3)([
                                    t
                                ]);
                            }
                        },
                        {
                            key: "toBSON",
                            value: function() {
                                return new Map(this);
                            }
                        },
                        {
                            key: "toObject",
                            value: function(t) {
                                if (t && t.flattenMaps) {
                                    var e, r = {}, n = i(this.keys());
                                    try {
                                        for(n.s(); !(e = n.n()).done;){
                                            var o = e.value;
                                            r[o] = b(this.get(o), t);
                                        }
                                    } catch (t) {
                                        n.e(t);
                                    } finally{
                                        n.f();
                                    }
                                    return r;
                                }
                                return new Map(this);
                            }
                        },
                        {
                            key: "$toObject",
                            value: function() {
                                return this.constructor.prototype.toObject.apply(this, arguments);
                            }
                        },
                        {
                            key: "toJSON",
                            value: function(t) {
                                if ("boolean" != typeof (t && t.flattenMaps) || t.flattenMaps) {
                                    var e, r = {}, n = i(this.keys());
                                    try {
                                        for(n.s(); !(e = n.n()).done;){
                                            var o = e.value;
                                            r[o] = b(this.get(o), t);
                                        }
                                    } catch (t) {
                                        n.e(t);
                                    } finally{
                                        n.f();
                                    }
                                    return r;
                                }
                                return new Map(this);
                            }
                        },
                        {
                            key: "inspect",
                            value: function() {
                                return new Map(this);
                            }
                        },
                        {
                            key: "$__runDeferred",
                            value: function() {
                                if (this.$__deferred) {
                                    var t, e = i(this.$__deferred);
                                    try {
                                        for(e.s(); !(t = e.n()).done;){
                                            var r = t.value;
                                            this.set(r.key, r.value);
                                        }
                                    } catch (t) {
                                        e.e(t);
                                    } finally{
                                        e.f();
                                    }
                                    this.$__deferred = null;
                                }
                            }
                        }
                    ], o && a(r.prototype, o), Object.defineProperty(r, "prototype", {
                        writable: !1
                    }), r;
                }(f(Map));
                function E(t) {
                    var e = n(t);
                    if ("string" !== e) throw new TypeError("Mongoose maps only support string keys, got ".concat(e));
                    if (t.startsWith("$")) throw new Error('Mongoose maps do not support keys that start with "$", got "'.concat(t, '"'));
                    if (t.includes(".")) throw new Error('Mongoose maps do not support keys that contain ".", got "'.concat(t, '"'));
                    if (w.has(t)) throw new Error('Mongoose maps do not support reserved key name "'.concat(t, '"'));
                }
                _.inspect.custom && Object.defineProperty($.prototype, _.inspect.custom, {
                    enumerable: !1,
                    writable: !1,
                    configurable: !1,
                    value: $.prototype.inspect
                }), Object.defineProperty($.prototype, "$__set", {
                    enumerable: !1,
                    writable: !0,
                    configurable: !1
                }), Object.defineProperty($.prototype, "$__parent", {
                    enumerable: !1,
                    writable: !0,
                    configurable: !1
                }), Object.defineProperty($.prototype, "$__path", {
                    enumerable: !1,
                    writable: !0,
                    configurable: !1
                }), Object.defineProperty($.prototype, "$__schemaType", {
                    enumerable: !1,
                    writable: !0,
                    configurable: !1
                }), Object.defineProperty($.prototype, "$isMongooseMap", {
                    enumerable: !1,
                    writable: !1,
                    configurable: !1,
                    value: !0
                }), Object.defineProperty($.prototype, "$__deferredCalls", {
                    enumerable: !1,
                    writable: !1,
                    configurable: !1,
                    value: !0
                }), t.exports = $;
            },
            5549: (t, e, r)=>{
                "use strict";
                var n = r(3633).ObjectId, i = r(7930).objectIdSymbol;
                Object.defineProperty(n.prototype, "_id", {
                    enumerable: !1,
                    configurable: !0,
                    get: function() {
                        return this;
                    }
                }), n.prototype.hasOwnProperty("valueOf") || (n.prototype.valueOf = function() {
                    return this.toString();
                }), n.prototype[i] = !0, t.exports = n;
            },
            9380: (t, e, r)=>{
                "use strict";
                function n() {
                    n = function() {
                        return e;
                    };
                    var t, e = {}, r = Object.prototype, i = r.hasOwnProperty, a = Object.defineProperty || function(t, e, r) {
                        t[e] = r.value;
                    }, s = "function" == typeof Symbol ? Symbol : {}, u = s.iterator || "@@iterator", c = s.asyncIterator || "@@asyncIterator", f = s.toStringTag || "@@toStringTag";
                    function l(t, e, r) {
                        return Object.defineProperty(t, e, {
                            value: r,
                            enumerable: !0,
                            configurable: !0,
                            writable: !0
                        }), t[e];
                    }
                    try {
                        l({}, "");
                    } catch (t) {
                        l = function(t, e, r) {
                            return t[e] = r;
                        };
                    }
                    function h(t, e, r, n) {
                        var i = e && e.prototype instanceof g ? e : g, o = Object.create(i.prototype), s = new T(n || []);
                        return a(o, "_invoke", {
                            value: P(t, r, s)
                        }), o;
                    }
                    function p(t, e, r) {
                        try {
                            return {
                                type: "normal",
                                arg: t.call(e, r)
                            };
                        } catch (t) {
                            return {
                                type: "throw",
                                arg: t
                            };
                        }
                    }
                    e.wrap = h;
                    var d = "suspendedStart", y = "suspendedYield", b = "executing", m = "completed", v = {};
                    function g() {}
                    function _() {}
                    function w() {}
                    var S = {};
                    l(S, u, function() {
                        return this;
                    });
                    var O = Object.getPrototypeOf, j = O && O(O(B([])));
                    j && j !== r && i.call(j, u) && (S = j);
                    var $ = w.prototype = g.prototype = Object.create(S);
                    function E(t) {
                        [
                            "next",
                            "throw",
                            "return"
                        ].forEach(function(e) {
                            l(t, e, function(t) {
                                return this._invoke(e, t);
                            });
                        });
                    }
                    function A(t, e) {
                        function r(n, a, s, u) {
                            var c = p(t[n], t, a);
                            if ("throw" !== c.type) {
                                var f = c.arg, l = f.value;
                                return l && "object" == o(l) && i.call(l, "__await") ? e.resolve(l.__await).then(function(t) {
                                    r("next", t, s, u);
                                }, function(t) {
                                    r("throw", t, s, u);
                                }) : e.resolve(l).then(function(t) {
                                    f.value = t, s(f);
                                }, function(t) {
                                    return r("throw", t, s, u);
                                });
                            }
                            u(c.arg);
                        }
                        var n;
                        a(this, "_invoke", {
                            value: function(t, i) {
                                function o() {
                                    return new e(function(e, n) {
                                        r(t, i, e, n);
                                    });
                                }
                                return n = n ? n.then(o, o) : o();
                            }
                        });
                    }
                    function P(e, r, n) {
                        var i = d;
                        return function(o, a) {
                            if (i === b) throw Error("Generator is already running");
                            if (i === m) {
                                if ("throw" === o) throw a;
                                return {
                                    value: t,
                                    done: !0
                                };
                            }
                            for(n.method = o, n.arg = a;;){
                                var s = n.delegate;
                                if (s) {
                                    var u = x(s, n);
                                    if (u) {
                                        if (u === v) continue;
                                        return u;
                                    }
                                }
                                if ("next" === n.method) n.sent = n._sent = n.arg;
                                else if ("throw" === n.method) {
                                    if (i === d) throw i = m, n.arg;
                                    n.dispatchException(n.arg);
                                } else "return" === n.method && n.abrupt("return", n.arg);
                                i = b;
                                var c = p(e, r, n);
                                if ("normal" === c.type) {
                                    if (i = n.done ? m : y, c.arg === v) continue;
                                    return {
                                        value: c.arg,
                                        done: n.done
                                    };
                                }
                                "throw" === c.type && (i = m, n.method = "throw", n.arg = c.arg);
                            }
                        };
                    }
                    function x(e, r) {
                        var n = r.method, i = e.iterator[n];
                        if (i === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, x(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), v;
                        var o = p(i, e.iterator, r.arg);
                        if ("throw" === o.type) return r.method = "throw", r.arg = o.arg, r.delegate = null, v;
                        var a = o.arg;
                        return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, v) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, v);
                    }
                    function k(t) {
                        var e = {
                            tryLoc: t[0]
                        };
                        1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
                    }
                    function M(t) {
                        var e = t.completion || {};
                        e.type = "normal", delete e.arg, t.completion = e;
                    }
                    function T(t) {
                        this.tryEntries = [
                            {
                                tryLoc: "root"
                            }
                        ], t.forEach(k, this), this.reset(!0);
                    }
                    function B(e) {
                        if (e || "" === e) {
                            var r = e[u];
                            if (r) return r.call(e);
                            if ("function" == typeof e.next) return e;
                            if (!isNaN(e.length)) {
                                var n = -1, a = function r() {
                                    for(; ++n < e.length;)if (i.call(e, n)) return r.value = e[n], r.done = !1, r;
                                    return r.value = t, r.done = !0, r;
                                };
                                return a.next = a;
                            }
                        }
                        throw new TypeError(o(e) + " is not iterable");
                    }
                    return _.prototype = w, a($, "constructor", {
                        value: w,
                        configurable: !0
                    }), a(w, "constructor", {
                        value: _,
                        configurable: !0
                    }), _.displayName = l(w, f, "GeneratorFunction"), e.isGeneratorFunction = function(t) {
                        var e = "function" == typeof t && t.constructor;
                        return !!e && (e === _ || "GeneratorFunction" === (e.displayName || e.name));
                    }, e.mark = function(t) {
                        return Object.setPrototypeOf ? Object.setPrototypeOf(t, w) : (t.__proto__ = w, l(t, f, "GeneratorFunction")), t.prototype = Object.create($), t;
                    }, e.awrap = function(t) {
                        return {
                            __await: t
                        };
                    }, E(A.prototype), l(A.prototype, c, function() {
                        return this;
                    }), e.AsyncIterator = A, e.async = function(t, r, n, i, o) {
                        void 0 === o && (o = Promise);
                        var a = new A(h(t, r, n, i), o);
                        return e.isGeneratorFunction(r) ? a : a.next().then(function(t) {
                            return t.done ? t.value : a.next();
                        });
                    }, E($), l($, f, "Generator"), l($, u, function() {
                        return this;
                    }), l($, "toString", function() {
                        return "[object Generator]";
                    }), e.keys = function(t) {
                        var e = Object(t), r = [];
                        for(var n in e)r.push(n);
                        return r.reverse(), function t() {
                            for(; r.length;){
                                var n = r.pop();
                                if (n in e) return t.value = n, t.done = !1, t;
                            }
                            return t.done = !0, t;
                        };
                    }, e.values = B, T.prototype = {
                        constructor: T,
                        reset: function(e) {
                            if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(M), !e) for(var r in this)"t" === r.charAt(0) && i.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
                        },
                        stop: function() {
                            this.done = !0;
                            var t = this.tryEntries[0].completion;
                            if ("throw" === t.type) throw t.arg;
                            return this.rval;
                        },
                        dispatchException: function(e) {
                            if (this.done) throw e;
                            var r = this;
                            function n(n, i) {
                                return s.type = "throw", s.arg = e, r.next = n, i && (r.method = "next", r.arg = t), !!i;
                            }
                            for(var o = this.tryEntries.length - 1; o >= 0; --o){
                                var a = this.tryEntries[o], s = a.completion;
                                if ("root" === a.tryLoc) return n("end");
                                if (a.tryLoc <= this.prev) {
                                    var u = i.call(a, "catchLoc"), c = i.call(a, "finallyLoc");
                                    if (u && c) {
                                        if (this.prev < a.catchLoc) return n(a.catchLoc, !0);
                                        if (this.prev < a.finallyLoc) return n(a.finallyLoc);
                                    } else if (u) {
                                        if (this.prev < a.catchLoc) return n(a.catchLoc, !0);
                                    } else {
                                        if (!c) throw Error("try statement without catch or finally");
                                        if (this.prev < a.finallyLoc) return n(a.finallyLoc);
                                    }
                                }
                            }
                        },
                        abrupt: function(t, e) {
                            for(var r = this.tryEntries.length - 1; r >= 0; --r){
                                var n = this.tryEntries[r];
                                if (n.tryLoc <= this.prev && i.call(n, "finallyLoc") && this.prev < n.finallyLoc) {
                                    var o = n;
                                    break;
                                }
                            }
                            o && ("break" === t || "continue" === t) && o.tryLoc <= e && e <= o.finallyLoc && (o = null);
                            var a = o ? o.completion : {};
                            return a.type = t, a.arg = e, o ? (this.method = "next", this.next = o.finallyLoc, v) : this.complete(a);
                        },
                        complete: function(t, e) {
                            if ("throw" === t.type) throw t.arg;
                            return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), v;
                        },
                        finish: function(t) {
                            for(var e = this.tryEntries.length - 1; e >= 0; --e){
                                var r = this.tryEntries[e];
                                if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), M(r), v;
                            }
                        },
                        catch: function(t) {
                            for(var e = this.tryEntries.length - 1; e >= 0; --e){
                                var r = this.tryEntries[e];
                                if (r.tryLoc === t) {
                                    var n = r.completion;
                                    if ("throw" === n.type) {
                                        var i = n.arg;
                                        M(r);
                                    }
                                    return i;
                                }
                            }
                            throw Error("illegal catch attempt");
                        },
                        delegateYield: function(e, r, n) {
                            return this.delegate = {
                                iterator: B(e),
                                resultName: r,
                                nextLoc: n
                            }, "next" === this.method && (this.arg = t), v;
                        }
                    }, e;
                }
                function i(t, e, r, n, i, o, a) {
                    try {
                        var s = t[o](a), u = s.value;
                    } catch (t) {
                        return void r(t);
                    }
                    s.done ? e(u) : Promise.resolve(u).then(n, i);
                }
                function o(t) {
                    return o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, o(t);
                }
                var a = r(2400), s = r(2746), u = r(3303)._, c = r(7352), f = r(8768);
                function l(t, e, r, n, i) {
                    if ("object" === o(n) && null != n && null == i && (i = n, n = void 0), null != r) {
                        var s = {
                            isNew: r.isNew
                        };
                        "defaults" in r.$__ && (s.defaults = r.$__.defaults), i = Object.assign(s, i);
                    }
                    null != i && null != i.path && (this.$basePath = i.path), a.call(this, t, e, n, i), delete this.$__.priorDoc;
                }
                t.exports = l, l.prototype = Object.create(a.prototype), Object.defineProperty(l.prototype, "$isSubdocument", {
                    configurable: !1,
                    writable: !1,
                    value: !0
                }), Object.defineProperty(l.prototype, "$isSingleNested", {
                    configurable: !1,
                    writable: !1,
                    value: !0
                }), l.prototype.toBSON = function() {
                    return this.toObject(u);
                }, l.prototype.save = function() {
                    var t, e = (t = n().mark(function t(e) {
                        var r = this;
                        return n().wrap(function(t) {
                            for(;;)switch(t.prev = t.next){
                                case 0:
                                    return (e = e || {}).suppressWarning || f.warn("mongoose: calling `save()` on a subdoc does **not** save the document to MongoDB, it only runs save middleware. Use `subdoc.save({ suppressWarning: true })` to hide this warning if you're sure this behavior is right for your app."), t.abrupt("return", new Promise(function(t, e) {
                                        r.$__save(function(n) {
                                            if (null != n) return e(n);
                                            t(r);
                                        });
                                    }));
                                case 3:
                                case "end":
                                    return t.stop();
                            }
                        }, t);
                    }), function() {
                        var e = this, r = arguments;
                        return new Promise(function(n, o) {
                            var a = t.apply(e, r);
                            function s(t) {
                                i(a, n, o, s, u, "next", t);
                            }
                            function u(t) {
                                i(a, n, o, s, u, "throw", t);
                            }
                            s(void 0);
                        });
                    });
                    return function(t) {
                        return e.apply(this, arguments);
                    };
                }(), l.prototype.$__fullPath = function(t) {
                    return this.$__.fullPath || this.ownerDocument(), t ? this.$__.fullPath + "." + t : this.$__.fullPath;
                }, l.prototype.$__pathRelativeToParent = function(t) {
                    return null == t ? this.$basePath : [
                        this.$basePath,
                        t
                    ].join(".");
                }, l.prototype.$__save = function(t) {
                    var e = this;
                    return s(function() {
                        return t(null, e);
                    });
                }, l.prototype.$isValid = function(t) {
                    var e = this.$parent(), r = this.$__pathRelativeToParent(t);
                    return null != e && null != r ? e.$isValid(r) : a.prototype.$isValid.call(this, t);
                }, l.prototype.markModified = function(t) {
                    a.prototype.markModified.call(this, t);
                    var e = this.$parent(), r = this.$__pathRelativeToParent(t);
                    if (null != e && null != r) {
                        var n = this.$__pathRelativeToParent().replace(/\.$/, "");
                        e.isDirectModified(n) || this.isNew || this.$__parent.markModified(r, this);
                    }
                }, l.prototype.isModified = function(t, e, r) {
                    var n = this, i = this.$parent();
                    return null != i ? (Array.isArray(t) || "string" == typeof t ? t = (t = Array.isArray(t) ? t : t.split(" ")).map(function(t) {
                        return n.$__pathRelativeToParent(t);
                    }).filter(function(t) {
                        return null != t;
                    }) : t || (t = this.$__pathRelativeToParent()), i.$isModified(t, e, r)) : a.prototype.isModified.call(this, t, e, r);
                }, l.prototype.$markValid = function(t) {
                    a.prototype.$markValid.call(this, t);
                    var e = this.$parent(), r = this.$__pathRelativeToParent(t);
                    null != e && null != r && e.$markValid(r);
                }, l.prototype.invalidate = function(t, e, r) {
                    a.prototype.invalidate.call(this, t, e, r);
                    var n = this.$parent(), i = this.$__pathRelativeToParent(t);
                    if (null != n && null != i) n.invalidate(i, e, r);
                    else if ("cast" === e.kind || "CastError" === e.name || null == i) throw e;
                    return this.ownerDocument().$__.validationError;
                }, l.prototype.$ignore = function(t) {
                    a.prototype.$ignore.call(this, t);
                    var e = this.$parent(), r = this.$__pathRelativeToParent(t);
                    null != e && null != r && e.$ignore(r);
                }, l.prototype.ownerDocument = function() {
                    if (this.$__.ownerDocument) return this.$__.ownerDocument;
                    for(var t = this, e = [], r = new Set([
                        t
                    ]); "function" == typeof t.$__pathRelativeToParent;){
                        e.unshift(t.$__pathRelativeToParent(void 0, !0));
                        var n = t.$parent();
                        if (null == n) break;
                        if (t = n, r.has(t)) throw new Error("Infinite subdocument loop: subdoc with _id " + t._id + " is a parent of itself");
                        r.add(t);
                    }
                    return this.$__.fullPath = e.join("."), this.$__.ownerDocument = t, this.$__.ownerDocument;
                }, l.prototype.$__fullPathWithIndexes = function() {
                    for(var t = this, e = [], r = new Set([
                        t
                    ]); "function" == typeof t.$__pathRelativeToParent;){
                        e.unshift(t.$__pathRelativeToParent(void 0, !1));
                        var n = t.$parent();
                        if (null == n) break;
                        if (t = n, r.has(t)) throw new Error("Infinite subdocument loop: subdoc with _id " + t._id + " is a parent of itself");
                        r.add(t);
                    }
                    return e.join(".");
                }, l.prototype.parent = function() {
                    return this.$__parent;
                }, l.prototype.$parent = l.prototype.parent, l.prototype.$__deleteOne = function(t) {
                    if (null != t) return t(null, this);
                }, l.prototype.$__removeFromParent = function() {
                    this.$__parent.set(this.$basePath, null);
                }, l.prototype.deleteOne = function(t, e) {
                    if ("function" == typeof t && (e = t, t = null), function(t) {
                        var e = t.ownerDocument();
                        function r() {
                            e.$removeListener("save", r), e.$removeListener("deleteOne", r), t.emit("deleteOne", t), t.constructor.emit("deleteOne", t);
                        }
                        e.$on("save", r), e.$on("deleteOne", r);
                    }(this), !t || !t.noop) {
                        this.$__removeFromParent();
                        var r = this.ownerDocument();
                        r.$__.removedSubdocs = r.$__.removedSubdocs || [], r.$__.removedSubdocs.push(this);
                    }
                    return this.$__deleteOne(e);
                }, l.prototype.populate = function() {
                    throw new Error('Mongoose does not support calling populate() on nested docs. Instead of `doc.nested.populate("path")`, use `doc.populate("nested.path")`');
                }, l.prototype.inspect = function() {
                    return this.toObject();
                }, c.inspect.custom && (l.prototype[c.inspect.custom] = l.prototype.inspect);
            },
            1344: (t, e, r)=>{
                "use strict";
                t.exports = r(3633).UUID;
            },
            8768: (t, e, r)=>{
                "use strict";
                var n = r(5832).Buffer;
                function i(t, e) {
                    var r = Object.keys(t);
                    if (Object.getOwnPropertySymbols) {
                        var n = Object.getOwnPropertySymbols(t);
                        e && (n = n.filter(function(e) {
                            return Object.getOwnPropertyDescriptor(t, e).enumerable;
                        })), r.push.apply(r, n);
                    }
                    return r;
                }
                function o(t) {
                    for(var e = 1; e < arguments.length; e++){
                        var r = null != arguments[e] ? arguments[e] : {};
                        e % 2 ? i(Object(r), !0).forEach(function(e) {
                            a(t, e, r[e]);
                        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : i(Object(r)).forEach(function(e) {
                            Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));
                        });
                    }
                    return t;
                }
                function a(t, e, r) {
                    return (e = function(t) {
                        var e = function(t) {
                            if ("object" != f(t) || !t) return t;
                            var e = t[Symbol.toPrimitive];
                            if (void 0 !== e) {
                                var r = e.call(t, "string");
                                if ("object" != f(r)) return r;
                                throw new TypeError("@@toPrimitive must return a primitive value.");
                            }
                            return String(t);
                        }(t);
                        return "symbol" == f(e) ? e : e + "";
                    }(e)) in t ? Object.defineProperty(t, e, {
                        value: r,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0
                    }) : t[e] = r, t;
                }
                function s(t, e) {
                    var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                    if (!r) {
                        if (Array.isArray(t) || (r = u(t)) || e && t && "number" == typeof t.length) {
                            r && (t = r);
                            var n = 0, i = function() {};
                            return {
                                s: i,
                                n: function() {
                                    return n >= t.length ? {
                                        done: !0
                                    } : {
                                        done: !1,
                                        value: t[n++]
                                    };
                                },
                                e: function(t) {
                                    throw t;
                                },
                                f: i
                            };
                        }
                        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    }
                    var o, a = !0, s = !1;
                    return {
                        s: function() {
                            r = r.call(t);
                        },
                        n: function() {
                            var t = r.next();
                            return a = t.done, t;
                        },
                        e: function(t) {
                            s = !0, o = t;
                        },
                        f: function() {
                            try {
                                a || null == r.return || r.return();
                            } finally{
                                if (s) throw o;
                            }
                        }
                    };
                }
                function u(t, e) {
                    if (t) {
                        if ("string" == typeof t) return c(t, e);
                        var r = ({}).toString.call(t).slice(8, -1);
                        return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? c(t, e) : void 0;
                    }
                }
                function c(t, e) {
                    (null == e || e > t.length) && (e = t.length);
                    for(var r = 0, n = Array(e); r < e; r++)n[r] = t[r];
                    return n;
                }
                function f(t) {
                    return f = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t;
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    }, f(t);
                }
                var l, h = r(3633).UUID, p = r(354), d = r(5678), y = r(5549), b = r(6948), m = r(4450), v = r(2746), g = r(608), _ = r(1243), w = r(1347), S = r(3305), O = r(2789), j = r(9696), $ = r(2497), E = r(5268), A = r(9539), P = r(2793), x = r(7291).trustedSymbol;
                e.specialProperties = P, e.isMongooseArray = _.isMongooseArray, e.isMongooseDocumentArray = w.isMongooseDocumentArray, e.registerMongooseArray = _.registerMongooseArray, e.registerMongooseDocumentArray = w.registerMongooseDocumentArray;
                var k = /\s/, M = /\s+/;
                e.toCollectionName = function(t, e) {
                    if ("system.profile" === t) return t;
                    if ("system.indexes" === t) return t;
                    if ("function" == typeof e) {
                        if ("string" != typeof t) throw new TypeError("Collection name must be a string");
                        if (0 === t.length) throw new TypeError("Collection name cannot be empty");
                        return e(t);
                    }
                    return t;
                }, e.deepEqual = function t(r, i) {
                    if (r === i) return !0;
                    if ("object" !== f(r) || "object" !== f(i)) return r === i;
                    if (r instanceof Date && i instanceof Date) return r.getTime() === i.getTime();
                    if (S(r, "ObjectId") && S(i, "ObjectId") || S(r, "Decimal128") && S(i, "Decimal128")) return r.toString() === i.toString();
                    if (r instanceof RegExp && i instanceof RegExp) return r.source === i.source && r.ignoreCase === i.ignoreCase && r.multiline === i.multiline && r.global === i.global && r.dotAll === i.dotAll && r.unicode === i.unicode && r.sticky === i.sticky && r.hasIndices === i.hasIndices;
                    if (null == r || null == i) return !1;
                    if (r.prototype !== i.prototype) return !1;
                    if (r instanceof Map || i instanceof Map) return r instanceof Map && i instanceof Map && t(Array.from(r.keys()), Array.from(i.keys())) && t(Array.from(r.values()), Array.from(i.values()));
                    if (r instanceof Number && i instanceof Number) return r.valueOf() === i.valueOf();
                    if (n.isBuffer(r)) return e.buffer.areEqual(r, i);
                    if (Array.isArray(r) || Array.isArray(i)) {
                        if (!Array.isArray(r) || !Array.isArray(i)) return !1;
                        var o = r.length;
                        if (o !== i.length) return !1;
                        for(var a = 0; a < o; ++a)if (!t(r[a], i[a])) return !1;
                        return !0;
                    }
                    null != r.$__ ? r = r._doc : $(r) && (r = r.toObject()), null != i.$__ ? i = i._doc : $(i) && (i = i.toObject());
                    var s = Object.keys(r), u = Object.keys(i), c = s.length;
                    if (c !== u.length) return !1;
                    for(var l = c - 1; l >= 0; l--)if (s[l] !== u[l]) return !1;
                    for(var h = 0, p = s; h < p.length; h++){
                        var d = p[h];
                        if (!t(r[d], i[d])) return !1;
                    }
                    return !0;
                }, e.last = function(t) {
                    if (t.length > 0) return t[t.length - 1];
                }, e.promiseOrCallback = E, e.cloneArrays = function(t) {
                    return Array.isArray(t) ? t.map(function(t) {
                        return e.cloneArrays(t);
                    }) : t;
                }, e.omit = function(t, e) {
                    if (null == e) return Object.assign({}, t);
                    Array.isArray(e) || (e = [
                        e
                    ]);
                    var r, n = Object.assign({}, t), i = s(e);
                    try {
                        for(i.s(); !(r = i.n()).done;)delete n[r.value];
                    } catch (t) {
                        i.e(t);
                    } finally{
                        i.f();
                    }
                    return n;
                }, e.merge = function t(r, n, i, a) {
                    i = i || {};
                    var s, f, l = Object.keys(n), h = 0, p = l.length;
                    n[x] && (r[x] = n[x]), a = a || "";
                    for(var d = i.omitNested || {}; h < p;)if (s = l[h++], !(i.omit && i.omit[s] || d[a] || P.has(s))) {
                        if (null == r[s]) O(n[s]) ? r[s] = o({}, n[s]) : Array.isArray(n[s]) ? r[s] = function(t) {
                            if (Array.isArray(t)) return c(t);
                        }(f = n[s]) || function(t) {
                            if ("undefined" != typeof Symbol && null != t[Symbol.iterator] || null != t["@@iterator"]) return Array.from(t);
                        }(f) || u(f) || function() {
                            throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                        }() : r[s] = n[s];
                        else if (e.isObject(n[s])) {
                            if (e.isObject(r[s]) || (r[s] = {}), null != n[s]) {
                                if (i.isDiscriminatorSchemaMerge && n[s].$isSingleNested && r[s].$isMongooseDocumentArray || n[s].$isMongooseDocumentArray && r[s].$isSingleNested) continue;
                                if (n[s].instanceOfSchema) {
                                    r[s].instanceOfSchema ? A(r[s], n[s].clone(), i.isDiscriminatorSchemaMerge) : r[s] = n[s].clone();
                                    continue;
                                }
                                if (S(n[s], "ObjectId")) {
                                    r[s] = new y(n[s]);
                                    continue;
                                }
                            }
                            t(r[s], n[s], i, a ? a + "." + s : s);
                        } else i.overwrite && (r[s] = n[s]);
                    }
                    return r;
                }, e.toObject = function t(n) {
                    var i;
                    if (l || (l = r(2400)), null == n) return n;
                    if (n instanceof l) return n.toObject();
                    if (Array.isArray(n)) {
                        i = [];
                        var o, a = s(n);
                        try {
                            for(a.s(); !(o = a.n()).done;){
                                var u = o.value;
                                i.push(t(u));
                            }
                        } catch (t) {
                            a.e(t);
                        } finally{
                            a.f();
                        }
                        return i;
                    }
                    if (e.isPOJO(n)) {
                        i = {}, n[x] && (i[x] = n[x]);
                        for(var c = 0, f = Object.keys(n); c < f.length; c++){
                            var h = f[c];
                            P.has(h) || (i[h] = t(n[h]));
                        }
                        return i;
                    }
                    return n;
                }, e.isObject = g, e.isPOJO = r(2789), e.isNonBuiltinObject = function(t) {
                    return !("object" !== f(t) || e.isNativeObject(t) || e.isMongooseType(t) || t instanceof h || null == t);
                }, e.isNativeObject = function(t) {
                    return Array.isArray(t) || t instanceof Date || t instanceof Boolean || t instanceof Number || t instanceof String;
                }, e.isEmptyObject = function(t) {
                    return null != t && "object" === f(t) && 0 === Object.keys(t).length;
                }, e.hasKey = function(t, r) {
                    for(var n = 0, i = Object.keys(t); n < i.length; n++){
                        var o = i[n];
                        if (o === r) return !0;
                        if (e.isPOJO(t[o]) && e.hasKey(t[o], r)) return !0;
                    }
                    return !1;
                }, e.tick = function(t) {
                    if ("function" == typeof t) return function() {
                        try {
                            t.apply(this, arguments);
                        } catch (t) {
                            v(function() {
                                throw t;
                            });
                        }
                    };
                }, e.isMongooseType = function(t) {
                    return S(t, "ObjectId") || S(t, "Decimal128") || t instanceof n;
                }, e.isMongooseObject = $, e.expires = function(t) {
                    t && "Object" === t.constructor.name && "expires" in t && (t.expireAfterSeconds = "string" != typeof t.expires ? t.expires : Math.round(p(t.expires) / 1e3), delete t.expires);
                }, e.populate = function(t, r, n, i, o, a, u, c) {
                    var l, h = null;
                    if (1 === arguments.length) {
                        if (t instanceof b) return t._docs = {}, t._childDocs = [], [
                            t
                        ];
                        if (Array.isArray(t)) {
                            var p = (l = [], t.forEach(function(t) {
                                k.test(t.path) ? t.path.split(M).forEach(function(e) {
                                    var r = Object.assign({}, t);
                                    r.path = e, l.push(r);
                                }) : l.push(t);
                            }), l);
                            return p.map(function(t) {
                                return e.populate(t)[0];
                            });
                        }
                        h = e.isObject(t) ? Object.assign({}, t) : {
                            path: t
                        };
                    } else h = "object" === f(n) ? {
                        path: t,
                        select: r,
                        match: n,
                        options: i
                    } : {
                        path: t,
                        select: r,
                        model: n,
                        match: i,
                        options: o,
                        populate: a,
                        justOne: u,
                        count: c
                    };
                    if ("string" != typeof h.path) throw new TypeError("utils.populate: invalid path. Expected string. Got typeof `" + f(t) + "`");
                    return function(t) {
                        if (Array.isArray(t.populate)) {
                            var r = [];
                            t.populate.forEach(function(t) {
                                if (k.test(t.path)) {
                                    var n = Object.assign({}, t);
                                    n.path.split(M).forEach(function(t) {
                                        n.path = t, r.push(e.populate(n)[0]);
                                    });
                                } else r.push(e.populate(t)[0]);
                            }), t.populate = e.populate(r);
                        } else null != t.populate && "object" === f(t.populate) && (t.populate = e.populate(t.populate));
                        var n = [], i = k.test(t.path) ? t.path.split(M) : [
                            t.path
                        ];
                        null != t.options && (t.options = m(t.options));
                        var o, a = s(i);
                        try {
                            for(a.s(); !(o = a.n()).done;){
                                var u = o.value;
                                n.push(new b(Object.assign({}, t, {
                                    path: u
                                })));
                            }
                        } catch (t) {
                            a.e(t);
                        } finally{
                            a.f();
                        }
                        return n;
                    }(h);
                }, e.getValue = function(t, e, r) {
                    return d.get(t, e, B, r);
                };
                var T = Object.freeze({
                    getters: !1
                });
                function B(t, e) {
                    if ("$*" === e && t instanceof Map) return t;
                    var r = (null == t ? void 0 : t._doc) || t;
                    return null != r && r.isMongooseArrayProxy && (r = r.__array), r instanceof Map ? r.get(e, T) : r[e];
                }
                e.setValue = function(t, e, r, n, i) {
                    d.set(t, e, r, "_doc", n, i);
                }, e.object = {}, e.object.vals = function(t) {
                    for(var e = Object.keys(t), r = e.length, n = []; r--;)n.push(t[e[r]]);
                    return n;
                };
                var I = Object.prototype.hasOwnProperty;
                e.object.hasOwnProperty = function(t, e) {
                    return I.call(t, e);
                }, e.isNullOrUndefined = function(t) {
                    return null == t;
                }, e.array = {}, e.array.flatten = function t(e, r, n) {
                    return n || (n = []), e.forEach(function(e) {
                        Array.isArray(e) ? t(e, r, n) : r && !r(e) || n.push(e);
                    }), n;
                };
                var R = Object.prototype.hasOwnProperty;
                e.hasUserDefinedProperty = function(t, r) {
                    if (null == t) return !1;
                    if (Array.isArray(r)) {
                        var n, i = s(r);
                        try {
                            for(i.s(); !(n = i.n()).done;){
                                var o = n.value;
                                if (e.hasUserDefinedProperty(t, o)) return !0;
                            }
                        } catch (t) {
                            i.e(t);
                        } finally{
                            i.f();
                        }
                        return !1;
                    }
                    if (R.call(t, r)) return !0;
                    if ("object" === f(t) && r in t) {
                        var a = t[r];
                        return a !== Object.prototype[r] && a !== Array.prototype[r];
                    }
                    return !1;
                };
                var N = Math.pow(2, 32) - 1;
                e.isArrayIndex = function(t) {
                    return "number" == typeof t ? t >= 0 && t <= N : "string" == typeof t && !!/^\d+$/.test(t) && (t = +t) >= 0 && t <= N;
                }, e.array.unique = function(t) {
                    var e, r = new Set, n = new Set, i = [], o = s(t);
                    try {
                        for(o.s(); !(e = o.n()).done;){
                            var a = e.value;
                            if ("number" == typeof a || "string" == typeof a || null == a) {
                                if (r.has(a)) continue;
                                i.push(a), r.add(a);
                            } else if (S(a, "ObjectId")) {
                                if (n.has(a.toString())) continue;
                                i.push(a), n.add(a.toString());
                            } else i.push(a);
                        }
                    } catch (t) {
                        o.e(t);
                    } finally{
                        o.f();
                    }
                    return i;
                }, e.buffer = {}, e.buffer.areEqual = function(t, e) {
                    if (!n.isBuffer(t)) return !1;
                    if (!n.isBuffer(e)) return !1;
                    if (t.length !== e.length) return !1;
                    for(var r = 0, i = t.length; r < i; ++r)if (t[r] !== e[r]) return !1;
                    return !0;
                }, e.getFunctionName = j, e.decorate = function(t, e) {
                    for(var r in e)P.has(r) || (t[r] = e[r]);
                }, e.mergeClone = function(t, r) {
                    $(r) && (r = r.toObject({
                        transform: !1,
                        virtuals: !1,
                        depopulate: !0,
                        getters: !1,
                        flattenDecimals: !1
                    }));
                    for(var i, o = Object.keys(r), a = o.length, s = 0; s < a;)if (i = o[s++], !P.has(i)) {
                        if (void 0 === t[i]) t[i] = m(r[i], {
                            transform: !1,
                            virtuals: !1,
                            depopulate: !0,
                            getters: !1,
                            flattenDecimals: !1
                        });
                        else {
                            var u = r[i];
                            if (null == u || !u.valueOf || u instanceof Date || (u = u.valueOf()), e.isObject(u)) {
                                var c = u;
                                $(u) && !u.isMongooseBuffer && (c = c.toObject({
                                    transform: !1,
                                    virtuals: !1,
                                    depopulate: !0,
                                    getters: !1,
                                    flattenDecimals: !1
                                })), u.isMongooseBuffer && (c = n.from(c)), e.mergeClone(t[i], c);
                            } else t[i] = m(u, {
                                flattenDecimals: !1
                            });
                        }
                    }
                }, e.each = function(t, e) {
                    var r, n = s(t);
                    try {
                        for(n.s(); !(r = n.n()).done;)e(r.value);
                    } catch (t) {
                        n.e(t);
                    } finally{
                        n.f();
                    }
                }, e.renameObjKey = function(t, e, r) {
                    return Object.keys(t).reduce(function(n, i) {
                        return i === e ? n[r] = t[e] : n[i] = t[i], n;
                    }, {});
                }, e.getOption = function(t) {
                    var e, r = s(Array.prototype.slice.call(arguments, 1));
                    try {
                        for(r.s(); !(e = r.n()).done;){
                            var n = e.value;
                            if (null != n && null != n[t]) return n[t];
                        }
                    } catch (t) {
                        r.e(t);
                    } finally{
                        r.f();
                    }
                    return null;
                }, e.noop = function() {}, e.errorToPOJO = function(t) {
                    if (!(t instanceof Error)) throw new Error("`error` must be `instanceof Error`.");
                    var e, r = {}, n = s(Object.getOwnPropertyNames(t));
                    try {
                        for(n.s(); !(e = n.n()).done;){
                            var i = e.value;
                            r[i] = t[i];
                        }
                    } catch (t) {
                        n.e(t);
                    } finally{
                        n.f();
                    }
                    return r;
                }, e.warn = function(t) {
                    return ({
                        env: {}
                    }).emitWarning(t, {
                        code: "MONGOOSE"
                    });
                }, e.injectTimestampsOption = function(t, e) {
                    null != e && (t.timestamps = e);
                };
            },
            622: (t, e, r)=>{
                "use strict";
                function n(t, e) {
                    var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                    if (!r) {
                        if (Array.isArray(t) || (r = function(t, e) {
                            if (t) {
                                if ("string" == typeof t) return i(t, e);
                                var r = ({}).toString.call(t).slice(8, -1);
                                return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? i(t, e) : void 0;
                            }
                        }(t)) || e && t && "number" == typeof t.length) {
                            r && (t = r);
                            var n = 0, o = function() {};
                            return {
                                s: o,
                                n: function() {
                                    return n >= t.length ? {
                                        done: !0
                                    } : {
                                        done: !1,
                                        value: t[n++]
                                    };
                                },
                                e: function(t) {
                                    throw t;
                                },
                                f: o
                            };
                        }
                        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    }
                    var a, s = !0, u = !1;
                    return {
                        s: function() {
                            r = r.call(t);
                        },
                        n: function() {
                            var t = r.next();
                            return s = t.done, t;
                        },
                        e: function(t) {
                            u = !0, a = t;
                        },
                        f: function() {
                            try {
                                s || null == r.return || r.return();
                            } finally{
                                if (u) throw a;
                            }
                        }
                    };
                }
                function i(t, e) {
                    (null == e || e > t.length) && (e = t.length);
                    for(var r = 0, n = Array(e); r < e; r++)n[r] = t[r];
                    return n;
                }
                var o = r(4009), a = r(8768), s = r(7930).modelSymbol;
                function u(t, e) {
                    this.path = e, this.getters = [], this.setters = [], this.options = Object.assign({}, t);
                }
                u.prototype._applyDefaultGetters = function() {
                    if (!(this.getters.length > 0 || this.setters.length > 0)) {
                        var t = "$" + this.path;
                        this.getters.push(function() {
                            return this.$locals[t];
                        }), this.setters.push(function(e) {
                            this.$locals[t] = e;
                        });
                    }
                }, u.prototype.clone = function() {
                    var t = new u(this.options, this.path);
                    return t.getters = [].concat(this.getters), t.setters = [].concat(this.setters), t;
                }, u.prototype.get = function(t) {
                    return this.getters.push(t), this;
                }, u.prototype.set = function(t) {
                    return this.setters.push(t), this;
                }, u.prototype.applyGetters = function(t, e) {
                    a.hasUserDefinedProperty(this.options, [
                        "ref",
                        "refPath"
                    ]) && e.$$populatedVirtuals && e.$$populatedVirtuals.hasOwnProperty(this.path) && (t = e.$$populatedVirtuals[this.path]);
                    var r, i = t, o = n(this.getters);
                    try {
                        for(o.s(); !(r = o.n()).done;)i = r.value.call(e, i, this, e);
                    } catch (t) {
                        o.e(t);
                    } finally{
                        o.f();
                    }
                    return i;
                }, u.prototype.applySetters = function(t, e) {
                    var r, i = t, o = n(this.setters);
                    try {
                        for(o.s(); !(r = o.n()).done;)i = r.value.call(e, i, this, e);
                    } catch (t) {
                        o.e(t);
                    } finally{
                        o.f();
                    }
                    return i;
                }, u.prototype._getModelNamesForPopulate = function(t) {
                    if (this.options.refPath) return o(this.options.refPath, t, this.path);
                    var e;
                    return null == (e = "function" != typeof this.options.ref || this.options.ref[s] ? this.options.ref : this.options.ref.call(t, t)) || Array.isArray(e) ? e : [
                        e
                    ];
                }, t.exports = u;
            },
            3426: (t, e, r)=>{
                "use strict";
                var n = r(2653), i = "undefined" == typeof globalThis ? r.g : globalThis;
                t.exports = function() {
                    for(var t = [], e = 0; e < n.length; e++)"function" == typeof i[n[e]] && (t[t.length] = n[e]);
                    return t;
                };
            },
            3633: (t, e, r)=>{
                "use strict";
                var n = r(5832).Buffer;
                const i = (()=>{
                    const t = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(Uint8Array.prototype), Symbol.toStringTag).get;
                    return (e)=>t.call(e);
                })();
                function o(t) {
                    return "Uint8Array" === i(t);
                }
                function a(t) {
                    return "object" == typeof t && null != t && Symbol.toStringTag in t && ("ArrayBuffer" === t[Symbol.toStringTag] || "SharedArrayBuffer" === t[Symbol.toStringTag]);
                }
                function s(t) {
                    return t instanceof RegExp || "[object RegExp]" === Object.prototype.toString.call(t);
                }
                function u(t) {
                    return "object" == typeof t && null != t && Symbol.toStringTag in t && "Map" === t[Symbol.toStringTag];
                }
                function c(t) {
                    return t instanceof Date || "[object Date]" === Object.prototype.toString.call(t);
                }
                function f(t, e) {
                    return JSON.stringify(t, (t, e)=>"bigint" == typeof e ? {
                            $numberLong: `${e}`
                        } : u(e) ? Object.fromEntries(e) : e);
                }
                const l = Symbol.for("@@mdb.bson.version"), h = 2147483647, p = -2147483648, d = Math.pow(2, 63) - 1, y = -Math.pow(2, 63), b = Math.pow(2, 53), m = -Math.pow(2, 53), v = Object.freeze({
                    double: 1,
                    string: 2,
                    object: 3,
                    array: 4,
                    binData: 5,
                    undefined: 6,
                    objectId: 7,
                    bool: 8,
                    date: 9,
                    null: 10,
                    regex: 11,
                    dbPointer: 12,
                    javascript: 13,
                    symbol: 14,
                    javascriptWithScope: 15,
                    int: 16,
                    timestamp: 17,
                    long: 18,
                    decimal: 19,
                    minKey: -1,
                    maxKey: 127
                });
                class g extends Error {
                    get bsonError() {
                        return !0;
                    }
                    get name() {
                        return "BSONError";
                    }
                    constructor(t, e){
                        super(t, e);
                    }
                    static isBSONError(t) {
                        return null != t && "object" == typeof t && "bsonError" in t && !0 === t.bsonError && "name" in t && "message" in t && "stack" in t;
                    }
                }
                class _ extends g {
                    get name() {
                        return "BSONVersionError";
                    }
                    constructor(){
                        super("Unsupported BSON version, bson types must be from bson 6.x.x");
                    }
                }
                class w extends g {
                    get name() {
                        return "BSONRuntimeError";
                    }
                    constructor(t){
                        super(t);
                    }
                }
                class S extends g {
                    get name() {
                        return "BSONOffsetError";
                    }
                    constructor(t, e, r){
                        super(`${t}. offset: ${e}`, r), this.offset = e;
                    }
                }
                let O, j;
                function $(t, e, r, n) {
                    if (n) {
                        O ??= new TextDecoder("utf8", {
                            fatal: !0
                        });
                        try {
                            return O.decode(t.subarray(e, r));
                        } catch (t) {
                            throw new g("Invalid UTF-8 string in BSON document", {
                                cause: t
                            });
                        }
                    }
                    return j ??= new TextDecoder("utf8", {
                        fatal: !1
                    }), j.decode(t.subarray(e, r));
                }
                function E(t, e, r) {
                    if (0 === t.length) return "";
                    const n = r - e;
                    if (0 === n) return "";
                    if (n > 20) return null;
                    if (1 === n && t[e] < 128) return String.fromCharCode(t[e]);
                    if (2 === n && t[e] < 128 && t[e + 1] < 128) return String.fromCharCode(t[e]) + String.fromCharCode(t[e + 1]);
                    if (3 === n && t[e] < 128 && t[e + 1] < 128 && t[e + 2] < 128) return String.fromCharCode(t[e]) + String.fromCharCode(t[e + 1]) + String.fromCharCode(t[e + 2]);
                    const i = [];
                    for(let n = e; n < r; n++){
                        const e = t[n];
                        if (e > 127) return null;
                        i.push(e);
                    }
                    return String.fromCharCode(...i);
                }
                function A(t) {
                    return x.fromNumberArray(Array.from({
                        length: t
                    }, ()=>Math.floor(256 * Math.random())));
                }
                const P = (()=>{
                    try {
                        return r(8872).po;
                    } catch  {
                        return A;
                    }
                })(), x = {
                    toLocalBufferType (t) {
                        if (n.isBuffer(t)) return t;
                        if (ArrayBuffer.isView(t)) return n.from(t.buffer, t.byteOffset, t.byteLength);
                        const e = t?.[Symbol.toStringTag] ?? Object.prototype.toString.call(t);
                        if ("ArrayBuffer" === e || "SharedArrayBuffer" === e || "[object ArrayBuffer]" === e || "[object SharedArrayBuffer]" === e) return n.from(t);
                        throw new g("Cannot create Buffer from the passed potentialBuffer.");
                    },
                    allocate: (t)=>n.alloc(t),
                    allocateUnsafe: (t)=>n.allocUnsafe(t),
                    equals: (t, e)=>x.toLocalBufferType(t).equals(e),
                    fromNumberArray: (t)=>n.from(t),
                    fromBase64: (t)=>n.from(t, "base64"),
                    toBase64: (t)=>x.toLocalBufferType(t).toString("base64"),
                    fromISO88591: (t)=>n.from(t, "binary"),
                    toISO88591: (t)=>x.toLocalBufferType(t).toString("binary"),
                    fromHex: (t)=>n.from(t, "hex"),
                    toHex: (t)=>x.toLocalBufferType(t).toString("hex"),
                    toUTF8 (t, e, r, n) {
                        const i = r - e <= 20 ? E(t, e, r) : null;
                        if (null != i) return i;
                        const o = x.toLocalBufferType(t).toString("utf8", e, r);
                        if (n) {
                            for(let n = 0; n < o.length; n++)if (65533 === o.charCodeAt(n)) {
                                $(t, e, r, !0);
                                break;
                            }
                        }
                        return o;
                    },
                    utf8ByteLength: (t)=>n.byteLength(t, "utf8"),
                    encodeUTF8Into (t, e, r) {
                        const n = function(t, e, r) {
                            if (0 === e.length) return 0;
                            if (e.length > 25) return null;
                            if (t.length - r < e.length) return null;
                            for(let n = 0, i = r; n < e.length; n++, i++){
                                const r = e.charCodeAt(n);
                                if (r > 127) return null;
                                t[i] = r;
                            }
                            return e.length;
                        }(t, e, r);
                        return null != n ? n : x.toLocalBufferType(t).write(e, r, void 0, "utf8");
                    },
                    randomBytes: P,
                    swap32: (t)=>x.toLocalBufferType(t).swap32()
                };
                function k(t) {
                    if (t < 0) throw new RangeError(`The argument 'byteLength' is invalid. Received ${t}`);
                    return B.fromNumberArray(Array.from({
                        length: t
                    }, ()=>Math.floor(256 * Math.random())));
                }
                const M = (()=>{
                    const { crypto: t } = globalThis;
                    if (null != t && "function" == typeof t.getRandomValues) return (e)=>t.getRandomValues(B.allocate(e));
                    if (function() {
                        const { navigator: t } = globalThis;
                        return "object" == typeof t && "ReactNative" === t.product;
                    }()) {
                        const { console: t } = globalThis;
                        t?.warn?.("BSON: For React Native please polyfill crypto.getRandomValues, e.g. using: https://www.npmjs.com/package/react-native-get-random-values.");
                    }
                    return k;
                })(), T = /(\d|[a-f])/i, B = {
                    toLocalBufferType (t) {
                        const e = t?.[Symbol.toStringTag] ?? Object.prototype.toString.call(t);
                        if ("Uint8Array" === e) return t;
                        if (ArrayBuffer.isView(t)) return new Uint8Array(t.buffer.slice(t.byteOffset, t.byteOffset + t.byteLength));
                        if ("ArrayBuffer" === e || "SharedArrayBuffer" === e || "[object ArrayBuffer]" === e || "[object SharedArrayBuffer]" === e) return new Uint8Array(t);
                        throw new g("Cannot make a Uint8Array from passed potentialBuffer.");
                    },
                    allocate (t) {
                        if ("number" != typeof t) throw new TypeError(`The "size" argument must be of type number. Received ${String(t)}`);
                        return new Uint8Array(t);
                    },
                    allocateUnsafe: (t)=>B.allocate(t),
                    equals (t, e) {
                        if (t.byteLength !== e.byteLength) return !1;
                        for(let r = 0; r < t.byteLength; r++)if (t[r] !== e[r]) return !1;
                        return !0;
                    },
                    fromNumberArray: (t)=>Uint8Array.from(t),
                    fromBase64: (t)=>Uint8Array.from(atob(t), (t)=>t.charCodeAt(0)),
                    toBase64: (t)=>btoa(B.toISO88591(t)),
                    fromISO88591: (t)=>Uint8Array.from(t, (t)=>255 & t.charCodeAt(0)),
                    toISO88591: (t)=>Array.from(Uint16Array.from(t), (t)=>String.fromCharCode(t)).join(""),
                    fromHex (t) {
                        const e = t.length % 2 == 0 ? t : t.slice(0, t.length - 1), r = [];
                        for(let t = 0; t < e.length; t += 2){
                            const n = e[t], i = e[t + 1];
                            if (!T.test(n)) break;
                            if (!T.test(i)) break;
                            const o = Number.parseInt(`${n}${i}`, 16);
                            r.push(o);
                        }
                        return Uint8Array.from(r);
                    },
                    toHex: (t)=>Array.from(t, (t)=>t.toString(16).padStart(2, "0")).join(""),
                    toUTF8 (t, e, r, n) {
                        const i = r - e <= 20 ? E(t, e, r) : null;
                        return null != i ? i : $(t, e, r, n);
                    },
                    utf8ByteLength: (t)=>(new TextEncoder).encode(t).byteLength,
                    encodeUTF8Into (t, e, r) {
                        const n = (new TextEncoder).encode(e);
                        return t.set(n, r), n.byteLength;
                    },
                    randomBytes: M,
                    swap32 (t) {
                        if (t.length % 4 != 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
                        for(let e = 0; e < t.length; e += 4){
                            const r = t[e], n = t[e + 1], i = t[e + 2], o = t[e + 3];
                            t[e] = o, t[e + 1] = i, t[e + 2] = n, t[e + 3] = r;
                        }
                        return t;
                    }
                }, I = "function" == typeof n && !0 !== n.prototype?._isBuffer ? x : B;
                class R {
                    get [l]() {
                        return 6;
                    }
                    [Symbol.for("nodejs.util.inspect.custom")](t, e, r) {
                        return this.inspect(t, e, r);
                    }
                }
                const N = new Float64Array(1), D = new Uint8Array(N.buffer, 0, 8);
                N[0] = -1;
                const L = 0 === D[7], C = {
                    isBigEndian: L,
                    getNonnegativeInt32LE (t, e) {
                        if (t[e + 3] > 127) throw new RangeError(`Size cannot be negative at offset: ${e}`);
                        return t[e] | t[e + 1] << 8 | t[e + 2] << 16 | t[e + 3] << 24;
                    },
                    getInt32LE: (t, e)=>t[e] | t[e + 1] << 8 | t[e + 2] << 16 | t[e + 3] << 24,
                    getUint32LE: (t, e)=>t[e] + 256 * t[e + 1] + 65536 * t[e + 2] + 16777216 * t[e + 3],
                    getUint32BE: (t, e)=>t[e + 3] + 256 * t[e + 2] + 65536 * t[e + 1] + 16777216 * t[e],
                    getBigInt64LE (t, e) {
                        const r = BigInt(t[e + 4] + 256 * t[e + 5] + 65536 * t[e + 6] + (t[e + 7] << 24)), n = BigInt(t[e] + 256 * t[e + 1] + 65536 * t[e + 2] + 16777216 * t[e + 3]);
                        return (r << BigInt(32)) + n;
                    },
                    getFloat64LE: L ? (t, e)=>(D[7] = t[e], D[6] = t[e + 1], D[5] = t[e + 2], D[4] = t[e + 3], D[3] = t[e + 4], D[2] = t[e + 5], D[1] = t[e + 6], D[0] = t[e + 7], N[0]) : (t, e)=>(D[0] = t[e], D[1] = t[e + 1], D[2] = t[e + 2], D[3] = t[e + 3], D[4] = t[e + 4], D[5] = t[e + 5], D[6] = t[e + 6], D[7] = t[e + 7], N[0]),
                    setInt32BE: (t, e, r)=>(t[e + 3] = r, r >>>= 8, t[e + 2] = r, r >>>= 8, t[e + 1] = r, r >>>= 8, t[e] = r, 4),
                    setInt32LE: (t, e, r)=>(t[e] = r, r >>>= 8, t[e + 1] = r, r >>>= 8, t[e + 2] = r, r >>>= 8, t[e + 3] = r, 4),
                    setBigInt64LE (t, e, r) {
                        const n = BigInt(4294967295);
                        let i = Number(r & n);
                        t[e] = i, i >>= 8, t[e + 1] = i, i >>= 8, t[e + 2] = i, i >>= 8, t[e + 3] = i;
                        let o = Number(r >> BigInt(32) & n);
                        return t[e + 4] = o, o >>= 8, t[e + 5] = o, o >>= 8, t[e + 6] = o, o >>= 8, t[e + 7] = o, 8;
                    },
                    setFloat64LE: L ? (t, e, r)=>(N[0] = r, t[e] = D[7], t[e + 1] = D[6], t[e + 2] = D[5], t[e + 3] = D[4], t[e + 4] = D[3], t[e + 5] = D[2], t[e + 6] = D[1], t[e + 7] = D[0], 8) : (t, e, r)=>(N[0] = r, t[e] = D[0], t[e + 1] = D[1], t[e + 2] = D[2], t[e + 3] = D[3], t[e + 4] = D[4], t[e + 5] = D[5], t[e + 6] = D[6], t[e + 7] = D[7], 8)
                };
                class U extends R {
                    get _bsontype() {
                        return "Binary";
                    }
                    constructor(t, e){
                        if (super(), null != t && "string" == typeof t && !ArrayBuffer.isView(t) && !a(t) && !Array.isArray(t)) throw new g("Binary can only be constructed from Uint8Array or number[]");
                        this.sub_type = e ?? U.BSON_BINARY_SUBTYPE_DEFAULT, null == t ? (this.buffer = I.allocate(U.BUFFER_SIZE), this.position = 0) : (this.buffer = Array.isArray(t) ? I.fromNumberArray(t) : I.toLocalBufferType(t), this.position = this.buffer.byteLength);
                    }
                    put(t) {
                        if ("string" == typeof t && 1 !== t.length) throw new g("only accepts single character String");
                        if ("number" != typeof t && 1 !== t.length) throw new g("only accepts single character Uint8Array or Array");
                        let e;
                        if (e = "string" == typeof t ? t.charCodeAt(0) : "number" == typeof t ? t : t[0], e < 0 || e > 255) throw new g("only accepts number in a valid unsigned byte range 0-255");
                        if (this.buffer.byteLength > this.position) this.buffer[this.position++] = e;
                        else {
                            const t = I.allocate(U.BUFFER_SIZE + this.buffer.length);
                            t.set(this.buffer, 0), this.buffer = t, this.buffer[this.position++] = e;
                        }
                    }
                    write(t, e) {
                        if (e = "number" == typeof e ? e : this.position, this.buffer.byteLength < e + t.length) {
                            const e = I.allocate(this.buffer.byteLength + t.length);
                            e.set(this.buffer, 0), this.buffer = e;
                        }
                        if (ArrayBuffer.isView(t)) this.buffer.set(I.toLocalBufferType(t), e), this.position = e + t.byteLength > this.position ? e + t.length : this.position;
                        else if ("string" == typeof t) throw new g("input cannot be string");
                    }
                    read(t, e) {
                        const r = t + (e = e && e > 0 ? e : this.position);
                        return this.buffer.subarray(t, r > this.position ? this.position : r);
                    }
                    value() {
                        return this.buffer.length === this.position ? this.buffer : this.buffer.subarray(0, this.position);
                    }
                    length() {
                        return this.position;
                    }
                    toJSON() {
                        return I.toBase64(this.buffer.subarray(0, this.position));
                    }
                    toString(t) {
                        return "hex" === t ? I.toHex(this.buffer.subarray(0, this.position)) : "base64" === t ? I.toBase64(this.buffer.subarray(0, this.position)) : I.toUTF8(this.buffer, 0, this.position, !1);
                    }
                    toExtendedJSON(t) {
                        t = t || {}, this.sub_type === U.SUBTYPE_VECTOR && q(this);
                        const e = I.toBase64(this.buffer), r = Number(this.sub_type).toString(16);
                        return t.legacy ? {
                            $binary: e,
                            $type: 1 === r.length ? "0" + r : r
                        } : {
                            $binary: {
                                base64: e,
                                subType: 1 === r.length ? "0" + r : r
                            }
                        };
                    }
                    toUUID() {
                        if (this.sub_type === U.SUBTYPE_UUID) return new z(this.buffer.subarray(0, this.position));
                        throw new g(`Binary sub_type "${this.sub_type}" is not supported for converting to UUID. Only "${U.SUBTYPE_UUID}" is currently supported.`);
                    }
                    static createFromHexString(t, e) {
                        return new U(I.fromHex(t), e);
                    }
                    static createFromBase64(t, e) {
                        return new U(I.fromBase64(t), e);
                    }
                    static fromExtendedJSON(t, e) {
                        let r, n;
                        if (e = e || {}, "$binary" in t ? e.legacy && "string" == typeof t.$binary && "$type" in t ? (n = t.$type ? parseInt(t.$type, 16) : 0, r = I.fromBase64(t.$binary)) : "string" != typeof t.$binary && (n = t.$binary.subType ? parseInt(t.$binary.subType, 16) : 0, r = I.fromBase64(t.$binary.base64)) : "$uuid" in t && (n = 4, r = z.bytesFromString(t.$uuid)), !r) throw new g(`Unexpected Binary Extended JSON format ${JSON.stringify(t)}`);
                        return 4 === n ? new z(r) : new U(r, n);
                    }
                    inspect(t, e, r) {
                        return r ??= f, `Binary.createFromBase64(${r(I.toBase64(this.buffer.subarray(0, this.position)), e)}, ${r(this.sub_type, e)})`;
                    }
                    toInt8Array() {
                        if (this.sub_type !== U.SUBTYPE_VECTOR) throw new g("Binary sub_type is not Vector");
                        if (this.buffer[0] !== U.VECTOR_TYPE.Int8) throw new g("Binary datatype field is not Int8");
                        return new Int8Array(this.buffer.buffer.slice(this.buffer.byteOffset + 2, this.buffer.byteOffset + this.position));
                    }
                    toFloat32Array() {
                        if (this.sub_type !== U.SUBTYPE_VECTOR) throw new g("Binary sub_type is not Vector");
                        if (this.buffer[0] !== U.VECTOR_TYPE.Float32) throw new g("Binary datatype field is not Float32");
                        const t = new Uint8Array(this.buffer.buffer.slice(this.buffer.byteOffset + 2, this.buffer.byteOffset + this.position));
                        return C.isBigEndian && I.swap32(t), new Float32Array(t.buffer);
                    }
                    toPackedBits() {
                        if (this.sub_type !== U.SUBTYPE_VECTOR) throw new g("Binary sub_type is not Vector");
                        if (this.buffer[0] !== U.VECTOR_TYPE.PackedBit) throw new g("Binary datatype field is not packed bit");
                        return new Uint8Array(this.buffer.buffer.slice(this.buffer.byteOffset + 2, this.buffer.byteOffset + this.position));
                    }
                    toBits() {
                        if (this.sub_type !== U.SUBTYPE_VECTOR) throw new g("Binary sub_type is not Vector");
                        if (this.buffer[0] !== U.VECTOR_TYPE.PackedBit) throw new g("Binary datatype field is not packed bit");
                        const t = 8 * (this.length() - 2) - this.buffer[1], e = new Int8Array(t);
                        for(let t = 0; t < e.length; t++){
                            const r = t / 8 | 0, n = this.buffer[r + 2] >> 7 - t % 8 & 1;
                            e[t] = n;
                        }
                        return e;
                    }
                    static fromInt8Array(t) {
                        const e = I.allocate(t.byteLength + 2);
                        e[0] = U.VECTOR_TYPE.Int8, e[1] = 0;
                        const r = new Uint8Array(t.buffer, t.byteOffset, t.byteLength);
                        return e.set(r, 2), new this(e, this.SUBTYPE_VECTOR);
                    }
                    static fromFloat32Array(t) {
                        const e = I.allocate(t.byteLength + 2);
                        e[0] = U.VECTOR_TYPE.Float32, e[1] = 0;
                        const r = new Uint8Array(t.buffer, t.byteOffset, t.byteLength);
                        return e.set(r, 2), C.isBigEndian && I.swap32(new Uint8Array(e.buffer, 2)), new this(e, this.SUBTYPE_VECTOR);
                    }
                    static fromPackedBits(t, e = 0) {
                        const r = I.allocate(t.byteLength + 2);
                        return r[0] = U.VECTOR_TYPE.PackedBit, r[1] = e, r.set(t, 2), new this(r, this.SUBTYPE_VECTOR);
                    }
                    static fromBits(t) {
                        const e = t.length + 7 >>> 3, r = new Uint8Array(e + 2);
                        r[0] = U.VECTOR_TYPE.PackedBit;
                        const n = t.length % 8;
                        r[1] = 0 === n ? 0 : 8 - n;
                        for(let e = 0; e < t.length; e++){
                            const n = e >>> 3, i = t[e];
                            if (0 !== i && 1 !== i) throw new g(`Invalid bit value at ${e}: must be 0 or 1, found ${t[e]}`);
                            if (0 === i) continue;
                            const o = 7 - e % 8;
                            r[n + 2] |= i << o;
                        }
                        return new this(r, U.SUBTYPE_VECTOR);
                    }
                }
                function q(t) {
                    if (t.sub_type !== U.SUBTYPE_VECTOR) return;
                    const e = t.position, r = t.buffer[0], n = t.buffer[1];
                    if ((r === U.VECTOR_TYPE.Float32 || r === U.VECTOR_TYPE.Int8) && 0 !== n) throw new g("Invalid Vector: padding must be zero for int8 and float32 vectors");
                    if (r === U.VECTOR_TYPE.PackedBit && 0 !== n && 2 === e) throw new g("Invalid Vector: padding must be zero for packed bit vectors that are empty");
                    if (r === U.VECTOR_TYPE.PackedBit && n > 7) throw new g(`Invalid Vector: padding must be a value between 0 and 7. found: ${n}`);
                }
                U.BSON_BINARY_SUBTYPE_DEFAULT = 0, U.BUFFER_SIZE = 256, U.SUBTYPE_DEFAULT = 0, U.SUBTYPE_FUNCTION = 1, U.SUBTYPE_BYTE_ARRAY = 2, U.SUBTYPE_UUID_OLD = 3, U.SUBTYPE_UUID = 4, U.SUBTYPE_MD5 = 5, U.SUBTYPE_ENCRYPTED = 6, U.SUBTYPE_COLUMN = 7, U.SUBTYPE_SENSITIVE = 8, U.SUBTYPE_VECTOR = 9, U.SUBTYPE_USER_DEFINED = 128, U.VECTOR_TYPE = Object.freeze({
                    Int8: 3,
                    Float32: 39,
                    PackedBit: 16
                });
                const F = /^[0-9A-F]{32}$/i, V = /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i;
                class z extends U {
                    constructor(t){
                        let e;
                        if (null == t) e = z.generate();
                        else if (t instanceof z) e = I.toLocalBufferType(new Uint8Array(t.buffer));
                        else if (ArrayBuffer.isView(t) && 16 === t.byteLength) e = I.toLocalBufferType(t);
                        else {
                            if ("string" != typeof t) throw new g("Argument passed in UUID constructor must be a UUID, a 16 byte Buffer or a 32/36 character hex string (dashes excluded/included, format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).");
                            e = z.bytesFromString(t);
                        }
                        super(e, 4);
                    }
                    get id() {
                        return this.buffer;
                    }
                    set id(t) {
                        this.buffer = t;
                    }
                    toHexString(t = !0) {
                        return t ? [
                            I.toHex(this.buffer.subarray(0, 4)),
                            I.toHex(this.buffer.subarray(4, 6)),
                            I.toHex(this.buffer.subarray(6, 8)),
                            I.toHex(this.buffer.subarray(8, 10)),
                            I.toHex(this.buffer.subarray(10, 16))
                        ].join("-") : I.toHex(this.buffer);
                    }
                    toString(t) {
                        return "hex" === t ? I.toHex(this.id) : "base64" === t ? I.toBase64(this.id) : this.toHexString();
                    }
                    toJSON() {
                        return this.toHexString();
                    }
                    equals(t) {
                        if (!t) return !1;
                        if (t instanceof z) return I.equals(t.id, this.id);
                        try {
                            return I.equals(new z(t).id, this.id);
                        } catch  {
                            return !1;
                        }
                    }
                    toBinary() {
                        return new U(this.id, U.SUBTYPE_UUID);
                    }
                    static generate() {
                        const t = I.randomBytes(16);
                        return t[6] = 15 & t[6] | 64, t[8] = 63 & t[8] | 128, t;
                    }
                    static isValid(t) {
                        return !!t && ("string" == typeof t ? z.isValidUUIDString(t) : o(t) ? 16 === t.byteLength : "Binary" === t._bsontype && t.sub_type === this.SUBTYPE_UUID && 16 === t.buffer.byteLength);
                    }
                    static createFromHexString(t) {
                        const e = z.bytesFromString(t);
                        return new z(e);
                    }
                    static createFromBase64(t) {
                        return new z(I.fromBase64(t));
                    }
                    static bytesFromString(t) {
                        if (!z.isValidUUIDString(t)) throw new g("UUID string representation must be 32 hex digits or canonical hyphenated representation");
                        return I.fromHex(t.replace(/-/g, ""));
                    }
                    static isValidUUIDString(t) {
                        return F.test(t) || V.test(t);
                    }
                    inspect(t, e, r) {
                        return r ??= f, `new UUID(${r(this.toHexString(), e)})`;
                    }
                }
                class K extends R {
                    get _bsontype() {
                        return "Code";
                    }
                    constructor(t, e){
                        super(), this.code = t.toString(), this.scope = e ?? null;
                    }
                    toJSON() {
                        return null != this.scope ? {
                            code: this.code,
                            scope: this.scope
                        } : {
                            code: this.code
                        };
                    }
                    toExtendedJSON() {
                        return this.scope ? {
                            $code: this.code,
                            $scope: this.scope
                        } : {
                            $code: this.code
                        };
                    }
                    static fromExtendedJSON(t) {
                        return new K(t.$code, t.$scope);
                    }
                    inspect(t, e, r) {
                        r ??= f;
                        let n = r(this.code, e);
                        const i = n.includes("\n");
                        return null != this.scope && (n += `,${i ? "\n" : " "}${r(this.scope, e)}`), `new Code(${i ? "\n" : ""}${n}${i && null === this.scope ? "\n" : ""})`;
                    }
                }
                function H(t) {
                    return null != t && "object" == typeof t && "$id" in t && null != t.$id && "$ref" in t && "string" == typeof t.$ref && (!("$db" in t) || "$db" in t && "string" == typeof t.$db);
                }
                class W extends R {
                    get _bsontype() {
                        return "DBRef";
                    }
                    constructor(t, e, r, n){
                        super();
                        const i = t.split(".");
                        2 === i.length && (r = i.shift(), t = i.shift()), this.collection = t, this.oid = e, this.db = r, this.fields = n || {};
                    }
                    get namespace() {
                        return this.collection;
                    }
                    set namespace(t) {
                        this.collection = t;
                    }
                    toJSON() {
                        const t = Object.assign({
                            $ref: this.collection,
                            $id: this.oid
                        }, this.fields);
                        return null != this.db && (t.$db = this.db), t;
                    }
                    toExtendedJSON(t) {
                        t = t || {};
                        let e = {
                            $ref: this.collection,
                            $id: this.oid
                        };
                        return t.legacy || (this.db && (e.$db = this.db), e = Object.assign(e, this.fields)), e;
                    }
                    static fromExtendedJSON(t) {
                        const e = Object.assign({}, t);
                        return delete e.$ref, delete e.$id, delete e.$db, new W(t.$ref, t.$id, t.$db, e);
                    }
                    inspect(t, e, r) {
                        r ??= f;
                        const n = [
                            r(this.namespace, e),
                            r(this.oid, e),
                            ...this.db ? [
                                r(this.db, e)
                            ] : [],
                            ...Object.keys(this.fields).length > 0 ? [
                                r(this.fields, e)
                            ] : []
                        ];
                        return n[1] = r === f ? `new ObjectId(${n[1]})` : n[1], `new DBRef(${n.join(", ")})`;
                    }
                }
                function J(t) {
                    if ("" === t) return t;
                    let e = 0;
                    const r = "-" === t[e], n = "+" === t[e];
                    (n || r) && (e += 1);
                    let i = !1;
                    for(; e < t.length && "0" === t[e]; ++e)i = !0;
                    return i ? `${r ? "-" : ""}${t.length === e ? "0" : t.slice(e)}` : n ? t.slice(1) : t;
                }
                let G;
                try {
                    G = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
                        0,
                        97,
                        115,
                        109,
                        1,
                        0,
                        0,
                        0,
                        1,
                        13,
                        2,
                        96,
                        0,
                        1,
                        127,
                        96,
                        4,
                        127,
                        127,
                        127,
                        127,
                        1,
                        127,
                        3,
                        7,
                        6,
                        0,
                        1,
                        1,
                        1,
                        1,
                        1,
                        6,
                        6,
                        1,
                        127,
                        1,
                        65,
                        0,
                        11,
                        7,
                        50,
                        6,
                        3,
                        109,
                        117,
                        108,
                        0,
                        1,
                        5,
                        100,
                        105,
                        118,
                        95,
                        115,
                        0,
                        2,
                        5,
                        100,
                        105,
                        118,
                        95,
                        117,
                        0,
                        3,
                        5,
                        114,
                        101,
                        109,
                        95,
                        115,
                        0,
                        4,
                        5,
                        114,
                        101,
                        109,
                        95,
                        117,
                        0,
                        5,
                        8,
                        103,
                        101,
                        116,
                        95,
                        104,
                        105,
                        103,
                        104,
                        0,
                        0,
                        10,
                        191,
                        1,
                        6,
                        4,
                        0,
                        35,
                        0,
                        11,
                        36,
                        1,
                        1,
                        126,
                        32,
                        0,
                        173,
                        32,
                        1,
                        173,
                        66,
                        32,
                        134,
                        132,
                        32,
                        2,
                        173,
                        32,
                        3,
                        173,
                        66,
                        32,
                        134,
                        132,
                        126,
                        34,
                        4,
                        66,
                        32,
                        135,
                        167,
                        36,
                        0,
                        32,
                        4,
                        167,
                        11,
                        36,
                        1,
                        1,
                        126,
                        32,
                        0,
                        173,
                        32,
                        1,
                        173,
                        66,
                        32,
                        134,
                        132,
                        32,
                        2,
                        173,
                        32,
                        3,
                        173,
                        66,
                        32,
                        134,
                        132,
                        127,
                        34,
                        4,
                        66,
                        32,
                        135,
                        167,
                        36,
                        0,
                        32,
                        4,
                        167,
                        11,
                        36,
                        1,
                        1,
                        126,
                        32,
                        0,
                        173,
                        32,
                        1,
                        173,
                        66,
                        32,
                        134,
                        132,
                        32,
                        2,
                        173,
                        32,
                        3,
                        173,
                        66,
                        32,
                        134,
                        132,
                        128,
                        34,
                        4,
                        66,
                        32,
                        135,
                        167,
                        36,
                        0,
                        32,
                        4,
                        167,
                        11,
                        36,
                        1,
                        1,
                        126,
                        32,
                        0,
                        173,
                        32,
                        1,
                        173,
                        66,
                        32,
                        134,
                        132,
                        32,
                        2,
                        173,
                        32,
                        3,
                        173,
                        66,
                        32,
                        134,
                        132,
                        129,
                        34,
                        4,
                        66,
                        32,
                        135,
                        167,
                        36,
                        0,
                        32,
                        4,
                        167,
                        11,
                        36,
                        1,
                        1,
                        126,
                        32,
                        0,
                        173,
                        32,
                        1,
                        173,
                        66,
                        32,
                        134,
                        132,
                        32,
                        2,
                        173,
                        32,
                        3,
                        173,
                        66,
                        32,
                        134,
                        132,
                        130,
                        34,
                        4,
                        66,
                        32,
                        135,
                        167,
                        36,
                        0,
                        32,
                        4,
                        167,
                        11
                    ])), {}).exports;
                } catch  {}
                const Y = 4294967296, Q = 0x10000000000000000, X = Q / 2, Z = {}, tt = {}, et = /^(\+?0|(\+|-)?[1-9][0-9]*)$/;
                class rt extends R {
                    get _bsontype() {
                        return "Long";
                    }
                    get __isLong__() {
                        return !0;
                    }
                    constructor(t = 0, e, r){
                        super();
                        const n = "boolean" == typeof e ? e : Boolean(r), i = "number" == typeof e ? e : 0, o = "string" == typeof t ? rt.fromString(t, n) : "bigint" == typeof t ? rt.fromBigInt(t, n) : {
                            low: 0 | t,
                            high: 0 | i,
                            unsigned: n
                        };
                        this.low = o.low, this.high = o.high, this.unsigned = o.unsigned;
                    }
                    static fromBits(t, e, r) {
                        return new rt(t, e, r);
                    }
                    static fromInt(t, e) {
                        let r, n, i;
                        return e ? (i = 0 <= (t >>>= 0) && t < 256) && (n = tt[t], n) ? n : (r = rt.fromBits(t, (0 | t) < 0 ? -1 : 0, !0), i && (tt[t] = r), r) : (i = -128 <= (t |= 0) && t < 128) && (n = Z[t], n) ? n : (r = rt.fromBits(t, t < 0 ? -1 : 0, !1), i && (Z[t] = r), r);
                    }
                    static fromNumber(t, e) {
                        if (isNaN(t)) return e ? rt.UZERO : rt.ZERO;
                        if (e) {
                            if (t < 0) return rt.UZERO;
                            if (t >= Q) return rt.MAX_UNSIGNED_VALUE;
                        } else {
                            if (t <= -9223372036854776000) return rt.MIN_VALUE;
                            if (t + 1 >= X) return rt.MAX_VALUE;
                        }
                        return t < 0 ? rt.fromNumber(-t, e).neg() : rt.fromBits(t % Y | 0, t / Y | 0, e);
                    }
                    static fromBigInt(t, e) {
                        const r = BigInt(4294967295), n = BigInt(32);
                        return new rt(Number(t & r), Number(t >> n & r), e);
                    }
                    static _fromString(t, e, r) {
                        if (0 === t.length) throw new g("empty string");
                        if (r < 2 || 36 < r) throw new g("radix");
                        let n;
                        if ((n = t.indexOf("-")) > 0) throw new g("interior hyphen");
                        if (0 === n) return rt._fromString(t.substring(1), e, r).neg();
                        const i = rt.fromNumber(Math.pow(r, 8));
                        let o = rt.ZERO;
                        for(let e = 0; e < t.length; e += 8){
                            const n = Math.min(8, t.length - e), a = parseInt(t.substring(e, e + n), r);
                            if (n < 8) {
                                const t = rt.fromNumber(Math.pow(r, n));
                                o = o.mul(t).add(rt.fromNumber(a));
                            } else o = o.mul(i), o = o.add(rt.fromNumber(a));
                        }
                        return o.unsigned = e, o;
                    }
                    static fromStringStrict(t, e, r) {
                        let n = !1;
                        if ("number" == typeof e ? (r = e, e = !1) : n = !!e, r ??= 10, t.trim() !== t) throw new g(`Input: '${t}' contains leading and/or trailing whitespace`);
                        if (!function(t, e) {
                            const r = "0123456789abcdefghijklmnopqrstuvwxyz".slice(0, e = e ?? 10);
                            return !new RegExp(`[^-+${r}]`, "i").test(t) && t;
                        }(t, r)) throw new g(`Input: '${t}' contains invalid characters for radix: ${r}`);
                        const i = J(t), o = rt._fromString(i, n, r);
                        if (o.toString(r).toLowerCase() !== i.toLowerCase()) throw new g(`Input: ${t} is not representable as ${o.unsigned ? "an unsigned" : "a signed"} 64-bit Long ${null != r ? `with radix: ${r}` : ""}`);
                        return o;
                    }
                    static fromString(t, e, r) {
                        let n = !1;
                        return "number" == typeof e ? (r = e, e = !1) : n = !!e, r ??= 10, "NaN" === t && r < 24 || ("Infinity" === t || "+Infinity" === t || "-Infinity" === t) && r < 35 ? rt.ZERO : rt._fromString(t, n, r);
                    }
                    static fromBytes(t, e, r) {
                        return r ? rt.fromBytesLE(t, e) : rt.fromBytesBE(t, e);
                    }
                    static fromBytesLE(t, e) {
                        return new rt(t[0] | t[1] << 8 | t[2] << 16 | t[3] << 24, t[4] | t[5] << 8 | t[6] << 16 | t[7] << 24, e);
                    }
                    static fromBytesBE(t, e) {
                        return new rt(t[4] << 24 | t[5] << 16 | t[6] << 8 | t[7], t[0] << 24 | t[1] << 16 | t[2] << 8 | t[3], e);
                    }
                    static isLong(t) {
                        return null != t && "object" == typeof t && "__isLong__" in t && !0 === t.__isLong__;
                    }
                    static fromValue(t, e) {
                        return "number" == typeof t ? rt.fromNumber(t, e) : "string" == typeof t ? rt.fromString(t, e) : rt.fromBits(t.low, t.high, "boolean" == typeof e ? e : t.unsigned);
                    }
                    add(t) {
                        rt.isLong(t) || (t = rt.fromValue(t));
                        const e = this.high >>> 16, r = 65535 & this.high, n = this.low >>> 16, i = 65535 & this.low, o = t.high >>> 16, a = 65535 & t.high, s = t.low >>> 16;
                        let u = 0, c = 0, f = 0, l = 0;
                        return l += i + (65535 & t.low), f += l >>> 16, l &= 65535, f += n + s, c += f >>> 16, f &= 65535, c += r + a, u += c >>> 16, c &= 65535, u += e + o, u &= 65535, rt.fromBits(f << 16 | l, u << 16 | c, this.unsigned);
                    }
                    and(t) {
                        return rt.isLong(t) || (t = rt.fromValue(t)), rt.fromBits(this.low & t.low, this.high & t.high, this.unsigned);
                    }
                    compare(t) {
                        if (rt.isLong(t) || (t = rt.fromValue(t)), this.eq(t)) return 0;
                        const e = this.isNegative(), r = t.isNegative();
                        return e && !r ? -1 : !e && r ? 1 : this.unsigned ? t.high >>> 0 > this.high >>> 0 || t.high === this.high && t.low >>> 0 > this.low >>> 0 ? -1 : 1 : this.sub(t).isNegative() ? -1 : 1;
                    }
                    comp(t) {
                        return this.compare(t);
                    }
                    divide(t) {
                        if (rt.isLong(t) || (t = rt.fromValue(t)), t.isZero()) throw new g("division by zero");
                        if (G) {
                            if (!this.unsigned && -2147483648 === this.high && -1 === t.low && -1 === t.high) return this;
                            const e = (this.unsigned ? G.div_u : G.div_s)(this.low, this.high, t.low, t.high);
                            return rt.fromBits(e, G.get_high(), this.unsigned);
                        }
                        if (this.isZero()) return this.unsigned ? rt.UZERO : rt.ZERO;
                        let e, r, n;
                        if (this.unsigned) {
                            if (t.unsigned || (t = t.toUnsigned()), t.gt(this)) return rt.UZERO;
                            if (t.gt(this.shru(1))) return rt.UONE;
                            n = rt.UZERO;
                        } else {
                            if (this.eq(rt.MIN_VALUE)) return t.eq(rt.ONE) || t.eq(rt.NEG_ONE) ? rt.MIN_VALUE : t.eq(rt.MIN_VALUE) ? rt.ONE : (e = this.shr(1).div(t).shl(1), e.eq(rt.ZERO) ? t.isNegative() ? rt.ONE : rt.NEG_ONE : (r = this.sub(t.mul(e)), n = e.add(r.div(t)), n));
                            if (t.eq(rt.MIN_VALUE)) return this.unsigned ? rt.UZERO : rt.ZERO;
                            if (this.isNegative()) return t.isNegative() ? this.neg().div(t.neg()) : this.neg().div(t).neg();
                            if (t.isNegative()) return this.div(t.neg()).neg();
                            n = rt.ZERO;
                        }
                        for(r = this; r.gte(t);){
                            e = Math.max(1, Math.floor(r.toNumber() / t.toNumber()));
                            const i = Math.ceil(Math.log(e) / Math.LN2), o = i <= 48 ? 1 : Math.pow(2, i - 48);
                            let a = rt.fromNumber(e), s = a.mul(t);
                            for(; s.isNegative() || s.gt(r);)e -= o, a = rt.fromNumber(e, this.unsigned), s = a.mul(t);
                            a.isZero() && (a = rt.ONE), n = n.add(a), r = r.sub(s);
                        }
                        return n;
                    }
                    div(t) {
                        return this.divide(t);
                    }
                    equals(t) {
                        return rt.isLong(t) || (t = rt.fromValue(t)), (this.unsigned === t.unsigned || this.high >>> 31 != 1 || t.high >>> 31 != 1) && this.high === t.high && this.low === t.low;
                    }
                    eq(t) {
                        return this.equals(t);
                    }
                    getHighBits() {
                        return this.high;
                    }
                    getHighBitsUnsigned() {
                        return this.high >>> 0;
                    }
                    getLowBits() {
                        return this.low;
                    }
                    getLowBitsUnsigned() {
                        return this.low >>> 0;
                    }
                    getNumBitsAbs() {
                        if (this.isNegative()) return this.eq(rt.MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
                        const t = 0 !== this.high ? this.high : this.low;
                        let e;
                        for(e = 31; e > 0 && !(t & 1 << e); e--);
                        return 0 !== this.high ? e + 33 : e + 1;
                    }
                    greaterThan(t) {
                        return this.comp(t) > 0;
                    }
                    gt(t) {
                        return this.greaterThan(t);
                    }
                    greaterThanOrEqual(t) {
                        return this.comp(t) >= 0;
                    }
                    gte(t) {
                        return this.greaterThanOrEqual(t);
                    }
                    ge(t) {
                        return this.greaterThanOrEqual(t);
                    }
                    isEven() {
                        return !(1 & this.low);
                    }
                    isNegative() {
                        return !this.unsigned && this.high < 0;
                    }
                    isOdd() {
                        return !(1 & ~this.low);
                    }
                    isPositive() {
                        return this.unsigned || this.high >= 0;
                    }
                    isZero() {
                        return 0 === this.high && 0 === this.low;
                    }
                    lessThan(t) {
                        return this.comp(t) < 0;
                    }
                    lt(t) {
                        return this.lessThan(t);
                    }
                    lessThanOrEqual(t) {
                        return this.comp(t) <= 0;
                    }
                    lte(t) {
                        return this.lessThanOrEqual(t);
                    }
                    modulo(t) {
                        if (rt.isLong(t) || (t = rt.fromValue(t)), G) {
                            const e = (this.unsigned ? G.rem_u : G.rem_s)(this.low, this.high, t.low, t.high);
                            return rt.fromBits(e, G.get_high(), this.unsigned);
                        }
                        return this.sub(this.div(t).mul(t));
                    }
                    mod(t) {
                        return this.modulo(t);
                    }
                    rem(t) {
                        return this.modulo(t);
                    }
                    multiply(t) {
                        if (this.isZero()) return rt.ZERO;
                        if (rt.isLong(t) || (t = rt.fromValue(t)), G) {
                            const e = G.mul(this.low, this.high, t.low, t.high);
                            return rt.fromBits(e, G.get_high(), this.unsigned);
                        }
                        if (t.isZero()) return rt.ZERO;
                        if (this.eq(rt.MIN_VALUE)) return t.isOdd() ? rt.MIN_VALUE : rt.ZERO;
                        if (t.eq(rt.MIN_VALUE)) return this.isOdd() ? rt.MIN_VALUE : rt.ZERO;
                        if (this.isNegative()) return t.isNegative() ? this.neg().mul(t.neg()) : this.neg().mul(t).neg();
                        if (t.isNegative()) return this.mul(t.neg()).neg();
                        if (this.lt(rt.TWO_PWR_24) && t.lt(rt.TWO_PWR_24)) return rt.fromNumber(this.toNumber() * t.toNumber(), this.unsigned);
                        const e = this.high >>> 16, r = 65535 & this.high, n = this.low >>> 16, i = 65535 & this.low, o = t.high >>> 16, a = 65535 & t.high, s = t.low >>> 16, u = 65535 & t.low;
                        let c = 0, f = 0, l = 0, h = 0;
                        return h += i * u, l += h >>> 16, h &= 65535, l += n * u, f += l >>> 16, l &= 65535, l += i * s, f += l >>> 16, l &= 65535, f += r * u, c += f >>> 16, f &= 65535, f += n * s, c += f >>> 16, f &= 65535, f += i * a, c += f >>> 16, f &= 65535, c += e * u + r * s + n * a + i * o, c &= 65535, rt.fromBits(l << 16 | h, c << 16 | f, this.unsigned);
                    }
                    mul(t) {
                        return this.multiply(t);
                    }
                    negate() {
                        return !this.unsigned && this.eq(rt.MIN_VALUE) ? rt.MIN_VALUE : this.not().add(rt.ONE);
                    }
                    neg() {
                        return this.negate();
                    }
                    not() {
                        return rt.fromBits(~this.low, ~this.high, this.unsigned);
                    }
                    notEquals(t) {
                        return !this.equals(t);
                    }
                    neq(t) {
                        return this.notEquals(t);
                    }
                    ne(t) {
                        return this.notEquals(t);
                    }
                    or(t) {
                        return rt.isLong(t) || (t = rt.fromValue(t)), rt.fromBits(this.low | t.low, this.high | t.high, this.unsigned);
                    }
                    shiftLeft(t) {
                        return rt.isLong(t) && (t = t.toInt()), 0 == (t &= 63) ? this : t < 32 ? rt.fromBits(this.low << t, this.high << t | this.low >>> 32 - t, this.unsigned) : rt.fromBits(0, this.low << t - 32, this.unsigned);
                    }
                    shl(t) {
                        return this.shiftLeft(t);
                    }
                    shiftRight(t) {
                        return rt.isLong(t) && (t = t.toInt()), 0 == (t &= 63) ? this : t < 32 ? rt.fromBits(this.low >>> t | this.high << 32 - t, this.high >> t, this.unsigned) : rt.fromBits(this.high >> t - 32, this.high >= 0 ? 0 : -1, this.unsigned);
                    }
                    shr(t) {
                        return this.shiftRight(t);
                    }
                    shiftRightUnsigned(t) {
                        if (rt.isLong(t) && (t = t.toInt()), 0 == (t &= 63)) return this;
                        {
                            const e = this.high;
                            if (t < 32) {
                                const r = this.low;
                                return rt.fromBits(r >>> t | e << 32 - t, e >>> t, this.unsigned);
                            }
                            return 32 === t ? rt.fromBits(e, 0, this.unsigned) : rt.fromBits(e >>> t - 32, 0, this.unsigned);
                        }
                    }
                    shr_u(t) {
                        return this.shiftRightUnsigned(t);
                    }
                    shru(t) {
                        return this.shiftRightUnsigned(t);
                    }
                    subtract(t) {
                        return rt.isLong(t) || (t = rt.fromValue(t)), this.add(t.neg());
                    }
                    sub(t) {
                        return this.subtract(t);
                    }
                    toInt() {
                        return this.unsigned ? this.low >>> 0 : this.low;
                    }
                    toNumber() {
                        return this.unsigned ? (this.high >>> 0) * Y + (this.low >>> 0) : this.high * Y + (this.low >>> 0);
                    }
                    toBigInt() {
                        return BigInt(this.toString());
                    }
                    toBytes(t) {
                        return t ? this.toBytesLE() : this.toBytesBE();
                    }
                    toBytesLE() {
                        const t = this.high, e = this.low;
                        return [
                            255 & e,
                            e >>> 8 & 255,
                            e >>> 16 & 255,
                            e >>> 24,
                            255 & t,
                            t >>> 8 & 255,
                            t >>> 16 & 255,
                            t >>> 24
                        ];
                    }
                    toBytesBE() {
                        const t = this.high, e = this.low;
                        return [
                            t >>> 24,
                            t >>> 16 & 255,
                            t >>> 8 & 255,
                            255 & t,
                            e >>> 24,
                            e >>> 16 & 255,
                            e >>> 8 & 255,
                            255 & e
                        ];
                    }
                    toSigned() {
                        return this.unsigned ? rt.fromBits(this.low, this.high, !1) : this;
                    }
                    toString(t) {
                        if ((t = t || 10) < 2 || 36 < t) throw new g("radix");
                        if (this.isZero()) return "0";
                        if (this.isNegative()) {
                            if (this.eq(rt.MIN_VALUE)) {
                                const e = rt.fromNumber(t), r = this.div(e), n = r.mul(e).sub(this);
                                return r.toString(t) + n.toInt().toString(t);
                            }
                            return "-" + this.neg().toString(t);
                        }
                        const e = rt.fromNumber(Math.pow(t, 6), this.unsigned);
                        let r = this, n = "";
                        for(;;){
                            const i = r.div(e);
                            let o = (r.sub(i.mul(e)).toInt() >>> 0).toString(t);
                            if (r = i, r.isZero()) return o + n;
                            for(; o.length < 6;)o = "0" + o;
                            n = "" + o + n;
                        }
                    }
                    toUnsigned() {
                        return this.unsigned ? this : rt.fromBits(this.low, this.high, !0);
                    }
                    xor(t) {
                        return rt.isLong(t) || (t = rt.fromValue(t)), rt.fromBits(this.low ^ t.low, this.high ^ t.high, this.unsigned);
                    }
                    eqz() {
                        return this.isZero();
                    }
                    le(t) {
                        return this.lessThanOrEqual(t);
                    }
                    toExtendedJSON(t) {
                        return t && t.relaxed ? this.toNumber() : {
                            $numberLong: this.toString()
                        };
                    }
                    static fromExtendedJSON(t, e) {
                        const { useBigInt64: r = !1, relaxed: n = !0 } = {
                            ...e
                        };
                        if (t.$numberLong.length > 20) throw new g("$numberLong string is too long");
                        if (!et.test(t.$numberLong)) throw new g(`$numberLong string "${t.$numberLong}" is in an invalid format`);
                        if (r) {
                            const e = BigInt(t.$numberLong);
                            return BigInt.asIntN(64, e);
                        }
                        const i = rt.fromString(t.$numberLong);
                        return n ? i.toNumber() : i;
                    }
                    inspect(t, e, r) {
                        return r ??= f, `new Long(${r(this.toString(), e)}${this.unsigned ? `, ${r(this.unsigned, e)}` : ""})`;
                    }
                }
                rt.TWO_PWR_24 = rt.fromInt(16777216), rt.MAX_UNSIGNED_VALUE = rt.fromBits(-1, -1, !0), rt.ZERO = rt.fromInt(0), rt.UZERO = rt.fromInt(0, !0), rt.ONE = rt.fromInt(1), rt.UONE = rt.fromInt(1, !0), rt.NEG_ONE = rt.fromInt(-1), rt.MAX_VALUE = rt.fromBits(-1, 2147483647, !1), rt.MIN_VALUE = rt.fromBits(0, -2147483648, !1);
                const nt = /^(\+|-)?(\d+|(\d*\.\d*))?(E|e)?([-+])?(\d+)?$/, it = /^(\+|-)?(Infinity|inf)$/i, ot = /^(\+|-)?NaN$/i, at = 6111, st = -6176, ut = I.fromNumberArray([
                    124,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ].reverse()), ct = I.fromNumberArray([
                    248,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ].reverse()), ft = I.fromNumberArray([
                    120,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ].reverse()), lt = /^([-+])?(\d+)?$/;
                function ht(t) {
                    return !isNaN(parseInt(t, 10));
                }
                function pt(t) {
                    const e = rt.fromNumber(1e9);
                    let r = rt.fromNumber(0);
                    if (!(t.parts[0] || t.parts[1] || t.parts[2] || t.parts[3])) return {
                        quotient: t,
                        rem: r
                    };
                    for(let n = 0; n <= 3; n++)r = r.shiftLeft(32), r = r.add(new rt(t.parts[n], 0)), t.parts[n] = r.div(e).low, r = r.modulo(e);
                    return {
                        quotient: t,
                        rem: r
                    };
                }
                function dt(t, e) {
                    throw new g(`"${t}" is not a valid Decimal128 string - ${e}`);
                }
                class yt extends R {
                    get _bsontype() {
                        return "Decimal128";
                    }
                    constructor(t){
                        if (super(), "string" == typeof t) this.bytes = yt.fromString(t).bytes;
                        else {
                            if (!(t instanceof Uint8Array || o(t))) throw new g("Decimal128 must take a Buffer or string");
                            if (16 !== t.byteLength) throw new g("Decimal128 must take a Buffer of 16 bytes");
                            this.bytes = t;
                        }
                    }
                    static fromString(t) {
                        return yt._fromString(t, {
                            allowRounding: !1
                        });
                    }
                    static fromStringWithRounding(t) {
                        return yt._fromString(t, {
                            allowRounding: !0
                        });
                    }
                    static _fromString(t, e) {
                        let r = !1, n = !1, i = !1, o = !1, a = 0, s = 0, u = 0, c = 0, f = 0;
                        const l = [
                            0
                        ];
                        let h = 0, p = 0, d = 0, y = 0, b = new rt(0, 0), m = new rt(0, 0), v = 0, _ = 0;
                        if (t.length >= 7e3) throw new g(t + " not a valid Decimal128 string");
                        const w = t.match(nt), S = t.match(it), O = t.match(ot);
                        if (!w && !S && !O || 0 === t.length) throw new g(t + " not a valid Decimal128 string");
                        if (w) {
                            const e = w[2], r = w[4], n = w[5], i = w[6];
                            r && void 0 === i && dt(t, "missing exponent power"), r && void 0 === e && dt(t, "missing exponent base"), void 0 === r && (n || i) && dt(t, "missing e before exponent");
                        }
                        if ("+" !== t[_] && "-" !== t[_] || (n = !0, r = "-" === t[_++]), !ht(t[_]) && "." !== t[_]) {
                            if ("i" === t[_] || "I" === t[_]) return new yt(r ? ct : ft);
                            if ("N" === t[_]) return new yt(ut);
                        }
                        for(; ht(t[_]) || "." === t[_];)"." !== t[_] ? (h < 34 && ("0" !== t[_] || o) && (o || (f = s), o = !0, l[p++] = parseInt(t[_], 10), h += 1), o && (u += 1), i && (c += 1), s += 1, _ += 1) : (i && dt(t, "contains multiple periods"), i = !0, _ += 1);
                        if (i && !s) throw new g(t + " not a valid Decimal128 string");
                        if ("e" === t[_] || "E" === t[_]) {
                            const e = t.substr(++_).match(lt);
                            if (!e || !e[2]) return new yt(ut);
                            y = parseInt(e[0], 10), _ += e[0].length;
                        }
                        if (t[_]) return new yt(ut);
                        if (h) {
                            if (d = h - 1, a = u, 1 !== a) for(; "0" === t[f + a - 1 + Number(n) + Number(i)];)a -= 1;
                        } else l[0] = 0, u = 1, h = 1, a = 0;
                        for(y <= c && c > y + 16384 ? y = st : y -= c; y > at;){
                            if (d += 1, d >= 34) {
                                if (0 === a) {
                                    y = at;
                                    break;
                                }
                                dt(t, "overflow");
                            }
                            y -= 1;
                        }
                        if (e.allowRounding) {
                            for(; y < st || h < u;){
                                if (0 === d && a < h) {
                                    y = st, a = 0;
                                    break;
                                }
                                if (h < u ? u -= 1 : d -= 1, y < at) y += 1;
                                else {
                                    if (l.join("").match(/^0+$/)) {
                                        y = at;
                                        break;
                                    }
                                    dt(t, "overflow");
                                }
                            }
                            if (d + 1 < a) {
                                let e = s;
                                i && (f += 1, e += 1), n && (f += 1, e += 1);
                                const o = parseInt(t[f + d + 1], 10);
                                let a = 0;
                                if (o >= 5 && (a = 1, 5 === o)) {
                                    a = l[d] % 2 == 1 ? 1 : 0;
                                    for(let r = f + d + 2; r < e; r++)if (parseInt(t[r], 10)) {
                                        a = 1;
                                        break;
                                    }
                                }
                                if (a) {
                                    let t = d;
                                    for(; t >= 0 && ++l[t] > 9; t--)if (l[t] = 0, 0 === t) {
                                        if (!(y < at)) return new yt(r ? ct : ft);
                                        y += 1, l[t] = 1;
                                    }
                                }
                            }
                        } else {
                            for(; y < st || h < u;){
                                if (0 === d) {
                                    if (0 === a) {
                                        y = st;
                                        break;
                                    }
                                    dt(t, "exponent underflow");
                                }
                                h < u ? ("0" !== t[u - 1 + Number(n) + Number(i)] && 0 !== a && dt(t, "inexact rounding"), u -= 1) : (0 !== l[d] && dt(t, "inexact rounding"), d -= 1), y < at ? y += 1 : dt(t, "overflow");
                            }
                            d + 1 < a && (i && (f += 1), n && (f += 1), 0 !== parseInt(t[f + d + 1], 10) && dt(t, "inexact rounding"));
                        }
                        if (b = rt.fromNumber(0), m = rt.fromNumber(0), 0 === a) b = rt.fromNumber(0), m = rt.fromNumber(0);
                        else if (d < 17) {
                            let t = 0;
                            for(m = rt.fromNumber(l[t++]), b = new rt(0, 0); t <= d; t++)m = m.multiply(rt.fromNumber(10)), m = m.add(rt.fromNumber(l[t]));
                        } else {
                            let t = 0;
                            for(b = rt.fromNumber(l[t++]); t <= d - 17; t++)b = b.multiply(rt.fromNumber(10)), b = b.add(rt.fromNumber(l[t]));
                            for(m = rt.fromNumber(l[t++]); t <= d; t++)m = m.multiply(rt.fromNumber(10)), m = m.add(rt.fromNumber(l[t]));
                        }
                        const j = function(t, e) {
                            if (!t && !e) return {
                                high: rt.fromNumber(0),
                                low: rt.fromNumber(0)
                            };
                            const r = t.shiftRightUnsigned(32), n = new rt(t.getLowBits(), 0), i = e.shiftRightUnsigned(32), o = new rt(e.getLowBits(), 0);
                            let a = r.multiply(i), s = r.multiply(o);
                            const u = n.multiply(i);
                            let c = n.multiply(o);
                            return a = a.add(s.shiftRightUnsigned(32)), s = new rt(s.getLowBits(), 0).add(u).add(c.shiftRightUnsigned(32)), a = a.add(s.shiftRightUnsigned(32)), c = s.shiftLeft(32).add(new rt(c.getLowBits(), 0)), {
                                high: a,
                                low: c
                            };
                        }(b, rt.fromString("100000000000000000"));
                        j.low = j.low.add(m), function(t, e) {
                            const r = t.high >>> 0, n = e.high >>> 0;
                            return r < n || r === n && t.low >>> 0 < e.low >>> 0;
                        }(j.low, m) && (j.high = j.high.add(rt.fromNumber(1))), v = y + 6176;
                        const $ = {
                            low: rt.fromNumber(0),
                            high: rt.fromNumber(0)
                        };
                        j.high.shiftRightUnsigned(49).and(rt.fromNumber(1)).equals(rt.fromNumber(1)) ? ($.high = $.high.or(rt.fromNumber(3).shiftLeft(61)), $.high = $.high.or(rt.fromNumber(v).and(rt.fromNumber(16383).shiftLeft(47))), $.high = $.high.or(j.high.and(rt.fromNumber(0x7fffffffffff)))) : ($.high = $.high.or(rt.fromNumber(16383 & v).shiftLeft(49)), $.high = $.high.or(j.high.and(rt.fromNumber(562949953421311)))), $.low = j.low, r && ($.high = $.high.or(rt.fromString("9223372036854775808")));
                        const E = I.allocateUnsafe(16);
                        return _ = 0, E[_++] = 255 & $.low.low, E[_++] = $.low.low >> 8 & 255, E[_++] = $.low.low >> 16 & 255, E[_++] = $.low.low >> 24 & 255, E[_++] = 255 & $.low.high, E[_++] = $.low.high >> 8 & 255, E[_++] = $.low.high >> 16 & 255, E[_++] = $.low.high >> 24 & 255, E[_++] = 255 & $.high.low, E[_++] = $.high.low >> 8 & 255, E[_++] = $.high.low >> 16 & 255, E[_++] = $.high.low >> 24 & 255, E[_++] = 255 & $.high.high, E[_++] = $.high.high >> 8 & 255, E[_++] = $.high.high >> 16 & 255, E[_++] = $.high.high >> 24 & 255, new yt(E);
                    }
                    toString() {
                        let t, e = 0;
                        const r = new Array(36);
                        for(let t = 0; t < r.length; t++)r[t] = 0;
                        let n, i, o, a = 0, s = !1, u = {
                            parts: [
                                0,
                                0,
                                0,
                                0
                            ]
                        };
                        const c = [];
                        a = 0;
                        const f = this.bytes, l = f[a++] | f[a++] << 8 | f[a++] << 16 | f[a++] << 24, h = f[a++] | f[a++] << 8 | f[a++] << 16 | f[a++] << 24, p = f[a++] | f[a++] << 8 | f[a++] << 16 | f[a++] << 24, d = f[a++] | f[a++] << 8 | f[a++] << 16 | f[a++] << 24;
                        a = 0, (new rt(l, h), new rt(p, d)).lessThan(rt.ZERO) && c.push("-");
                        const y = d >> 26 & 31;
                        if (y >> 3 == 3) {
                            if (30 === y) return c.join("") + "Infinity";
                            if (31 === y) return "NaN";
                            t = d >> 15 & 16383, n = 8 + (d >> 14 & 1);
                        } else n = d >> 14 & 7, t = d >> 17 & 16383;
                        const b = t - 6176;
                        if (u.parts[0] = (16383 & d) + ((15 & n) << 14), u.parts[1] = p, u.parts[2] = h, u.parts[3] = l, 0 === u.parts[0] && 0 === u.parts[1] && 0 === u.parts[2] && 0 === u.parts[3]) s = !0;
                        else for(o = 3; o >= 0; o--){
                            let t = 0;
                            const e = pt(u);
                            if (u = e.quotient, t = e.rem.low, t) for(i = 8; i >= 0; i--)r[9 * o + i] = t % 10, t = Math.floor(t / 10);
                        }
                        if (s) e = 1, r[a] = 0;
                        else for(e = 36; !r[a];)e -= 1, a += 1;
                        const m = e - 1 + b;
                        if (m >= 34 || m <= -7 || b > 0) {
                            if (e > 34) return c.push("0"), b > 0 ? c.push(`E+${b}`) : b < 0 && c.push(`E${b}`), c.join("");
                            c.push(`${r[a++]}`), e -= 1, e && c.push(".");
                            for(let t = 0; t < e; t++)c.push(`${r[a++]}`);
                            c.push("E"), m > 0 ? c.push(`+${m}`) : c.push(`${m}`);
                        } else if (b >= 0) for(let t = 0; t < e; t++)c.push(`${r[a++]}`);
                        else {
                            let t = e + b;
                            if (t > 0) for(let e = 0; e < t; e++)c.push(`${r[a++]}`);
                            else c.push("0");
                            for(c.push("."); t++ < 0;)c.push("0");
                            for(let n = 0; n < e - Math.max(t - 1, 0); n++)c.push(`${r[a++]}`);
                        }
                        return c.join("");
                    }
                    toJSON() {
                        return {
                            $numberDecimal: this.toString()
                        };
                    }
                    toExtendedJSON() {
                        return {
                            $numberDecimal: this.toString()
                        };
                    }
                    static fromExtendedJSON(t) {
                        return yt.fromString(t.$numberDecimal);
                    }
                    inspect(t, e, r) {
                        return r ??= f, `new Decimal128(${r(this.toString(), e)})`;
                    }
                }
                class bt extends R {
                    get _bsontype() {
                        return "Double";
                    }
                    constructor(t){
                        super(), t instanceof Number && (t = t.valueOf()), this.value = +t;
                    }
                    static fromString(t) {
                        const e = Number(t);
                        if ("NaN" === t) return new bt(NaN);
                        if ("Infinity" === t) return new bt(1 / 0);
                        if ("-Infinity" === t) return new bt(-1 / 0);
                        if (!Number.isFinite(e)) throw new g(`Input: ${t} is not representable as a Double`);
                        if (t.trim() !== t) throw new g(`Input: '${t}' contains whitespace`);
                        if ("" === t) throw new g("Input is an empty string");
                        if (/[^-0-9.+eE]/.test(t)) throw new g(`Input: '${t}' is not in decimal or exponential notation`);
                        return new bt(e);
                    }
                    valueOf() {
                        return this.value;
                    }
                    toJSON() {
                        return this.value;
                    }
                    toString(t) {
                        return this.value.toString(t);
                    }
                    toExtendedJSON(t) {
                        return t && (t.legacy || t.relaxed && isFinite(this.value)) ? this.value : Object.is(Math.sign(this.value), -0) ? {
                            $numberDouble: "-0.0"
                        } : {
                            $numberDouble: Number.isInteger(this.value) ? this.value.toFixed(1) : this.value.toString()
                        };
                    }
                    static fromExtendedJSON(t, e) {
                        const r = parseFloat(t.$numberDouble);
                        return e && e.relaxed ? r : new bt(r);
                    }
                    inspect(t, e, r) {
                        return r ??= f, `new Double(${r(this.value, e)})`;
                    }
                }
                class mt extends R {
                    get _bsontype() {
                        return "Int32";
                    }
                    constructor(t){
                        super(), t instanceof Number && (t = t.valueOf()), this.value = 0 | +t;
                    }
                    static fromString(t) {
                        const e = J(t), r = Number(t);
                        if (h < r) throw new g(`Input: '${t}' is larger than the maximum value for Int32`);
                        if (p > r) throw new g(`Input: '${t}' is smaller than the minimum value for Int32`);
                        if (!Number.isSafeInteger(r)) throw new g(`Input: '${t}' is not a safe integer`);
                        if (r.toString() !== e) throw new g(`Input: '${t}' is not a valid Int32 string`);
                        return new mt(r);
                    }
                    valueOf() {
                        return this.value;
                    }
                    toString(t) {
                        return this.value.toString(t);
                    }
                    toJSON() {
                        return this.value;
                    }
                    toExtendedJSON(t) {
                        return t && (t.relaxed || t.legacy) ? this.value : {
                            $numberInt: this.value.toString()
                        };
                    }
                    static fromExtendedJSON(t, e) {
                        return e && e.relaxed ? parseInt(t.$numberInt, 10) : new mt(t.$numberInt);
                    }
                    inspect(t, e, r) {
                        return r ??= f, `new Int32(${r(this.value, e)})`;
                    }
                }
                class vt extends R {
                    get _bsontype() {
                        return "MaxKey";
                    }
                    toExtendedJSON() {
                        return {
                            $maxKey: 1
                        };
                    }
                    static fromExtendedJSON() {
                        return new vt;
                    }
                    inspect() {
                        return "new MaxKey()";
                    }
                }
                class gt extends R {
                    get _bsontype() {
                        return "MinKey";
                    }
                    toExtendedJSON() {
                        return {
                            $minKey: 1
                        };
                    }
                    static fromExtendedJSON() {
                        return new gt;
                    }
                    inspect() {
                        return "new MinKey()";
                    }
                }
                let _t = null;
                const wt = new WeakMap;
                class St extends R {
                    get _bsontype() {
                        return "ObjectId";
                    }
                    constructor(t){
                        let e;
                        if (super(), "object" == typeof t && t && "id" in t) {
                            if ("string" != typeof t.id && !ArrayBuffer.isView(t.id)) throw new g("Argument passed in must have an id that is of type string or Buffer");
                            e = "toHexString" in t && "function" == typeof t.toHexString ? I.fromHex(t.toHexString()) : t.id;
                        } else e = t;
                        if (null == e || "number" == typeof e) this.buffer = St.generate("number" == typeof e ? e : void 0);
                        else if (ArrayBuffer.isView(e) && 12 === e.byteLength) this.buffer = I.toLocalBufferType(e);
                        else {
                            if ("string" != typeof e) throw new g("Argument passed in does not match the accepted types");
                            if (!St.validateHexString(e)) throw new g("input must be a 24 character hex string, 12 byte Uint8Array, or an integer");
                            this.buffer = I.fromHex(e), St.cacheHexString && wt.set(this, e);
                        }
                    }
                    get id() {
                        return this.buffer;
                    }
                    set id(t) {
                        this.buffer = t, St.cacheHexString && wt.set(this, I.toHex(t));
                    }
                    static validateHexString(t) {
                        if (24 !== t?.length) return !1;
                        for(let e = 0; e < 24; e++){
                            const r = t.charCodeAt(e);
                            if (!(r >= 48 && r <= 57 || r >= 97 && r <= 102 || r >= 65 && r <= 70)) return !1;
                        }
                        return !0;
                    }
                    toHexString() {
                        if (St.cacheHexString) {
                            const t = wt.get(this);
                            if (t) return t;
                        }
                        const t = I.toHex(this.id);
                        return St.cacheHexString && wt.set(this, t), t;
                    }
                    static getInc() {
                        return St.index = (St.index + 1) % 16777215;
                    }
                    static generate(t) {
                        "number" != typeof t && (t = Math.floor(Date.now() / 1e3));
                        const e = St.getInc(), r = I.allocateUnsafe(12);
                        return C.setInt32BE(r, 0, t), null === _t && (_t = I.randomBytes(5)), r[4] = _t[0], r[5] = _t[1], r[6] = _t[2], r[7] = _t[3], r[8] = _t[4], r[11] = 255 & e, r[10] = e >> 8 & 255, r[9] = e >> 16 & 255, r;
                    }
                    toString(t) {
                        return "base64" === t ? I.toBase64(this.id) : this.toHexString();
                    }
                    toJSON() {
                        return this.toHexString();
                    }
                    static is(t) {
                        return null != t && "object" == typeof t && "_bsontype" in t && "ObjectId" === t._bsontype;
                    }
                    equals(t) {
                        if (null == t) return !1;
                        if (St.is(t)) return this.buffer[11] === t.buffer[11] && I.equals(this.buffer, t.buffer);
                        if ("string" == typeof t) return t.toLowerCase() === this.toHexString();
                        if ("object" == typeof t && "function" == typeof t.toHexString) {
                            const e = t.toHexString(), r = this.toHexString();
                            return "string" == typeof e && e.toLowerCase() === r;
                        }
                        return !1;
                    }
                    getTimestamp() {
                        const t = new Date, e = C.getUint32BE(this.buffer, 0);
                        return t.setTime(1e3 * Math.floor(e)), t;
                    }
                    static createPk() {
                        return new St;
                    }
                    serializeInto(t, e) {
                        return t[e] = this.buffer[0], t[e + 1] = this.buffer[1], t[e + 2] = this.buffer[2], t[e + 3] = this.buffer[3], t[e + 4] = this.buffer[4], t[e + 5] = this.buffer[5], t[e + 6] = this.buffer[6], t[e + 7] = this.buffer[7], t[e + 8] = this.buffer[8], t[e + 9] = this.buffer[9], t[e + 10] = this.buffer[10], t[e + 11] = this.buffer[11], 12;
                    }
                    static createFromTime(t) {
                        const e = I.allocate(12);
                        for(let t = 11; t >= 4; t--)e[t] = 0;
                        return C.setInt32BE(e, 0, t), new St(e);
                    }
                    static createFromHexString(t) {
                        if (24 !== t?.length) throw new g("hex string must be 24 characters");
                        return new St(I.fromHex(t));
                    }
                    static createFromBase64(t) {
                        if (16 !== t?.length) throw new g("base64 string must be 16 characters");
                        return new St(I.fromBase64(t));
                    }
                    static isValid(t) {
                        if (null == t) return !1;
                        if ("string" == typeof t) return St.validateHexString(t);
                        try {
                            return new St(t), !0;
                        } catch  {
                            return !1;
                        }
                    }
                    toExtendedJSON() {
                        return this.toHexString ? {
                            $oid: this.toHexString()
                        } : {
                            $oid: this.toString("hex")
                        };
                    }
                    static fromExtendedJSON(t) {
                        return new St(t.$oid);
                    }
                    isCached() {
                        return St.cacheHexString && wt.has(this);
                    }
                    inspect(t, e, r) {
                        return r ??= f, `new ObjectId(${r(this.toHexString(), e)})`;
                    }
                }
                function Ot(t, e, r) {
                    let n = 5;
                    if (Array.isArray(t)) for(let i = 0; i < t.length; i++)n += jt(i.toString(), t[i], e, !0, r);
                    else {
                        "function" == typeof t?.toBSON && (t = t.toBSON());
                        for (const i of Object.keys(t))n += jt(i, t[i], e, !1, r);
                    }
                    return n;
                }
                function jt(t, e, r = !1, n = !1, i = !1) {
                    switch("function" == typeof e?.toBSON && (e = e.toBSON()), typeof e){
                        case "string":
                            return 1 + I.utf8ByteLength(t) + 1 + 4 + I.utf8ByteLength(e) + 1;
                        case "number":
                            return Math.floor(e) === e && e >= m && e <= b && e >= p && e <= h ? (null != t ? I.utf8ByteLength(t) + 1 : 0) + 5 : (null != t ? I.utf8ByteLength(t) + 1 : 0) + 9;
                        case "undefined":
                            return n || !i ? (null != t ? I.utf8ByteLength(t) + 1 : 0) + 1 : 0;
                        case "boolean":
                            return (null != t ? I.utf8ByteLength(t) + 1 : 0) + 2;
                        case "object":
                            if (null != e && "string" == typeof e._bsontype && 6 !== e[l]) throw new _;
                            if (null == e || "MinKey" === e._bsontype || "MaxKey" === e._bsontype) return (null != t ? I.utf8ByteLength(t) + 1 : 0) + 1;
                            if ("ObjectId" === e._bsontype) return (null != t ? I.utf8ByteLength(t) + 1 : 0) + 13;
                            if (e instanceof Date || c(e)) return (null != t ? I.utf8ByteLength(t) + 1 : 0) + 9;
                            if (ArrayBuffer.isView(e) || e instanceof ArrayBuffer || a(e)) return (null != t ? I.utf8ByteLength(t) + 1 : 0) + 6 + e.byteLength;
                            if ("Long" === e._bsontype || "Double" === e._bsontype || "Timestamp" === e._bsontype) return (null != t ? I.utf8ByteLength(t) + 1 : 0) + 9;
                            if ("Decimal128" === e._bsontype) return (null != t ? I.utf8ByteLength(t) + 1 : 0) + 17;
                            if ("Code" === e._bsontype) return null != e.scope && Object.keys(e.scope).length > 0 ? (null != t ? I.utf8ByteLength(t) + 1 : 0) + 1 + 4 + 4 + I.utf8ByteLength(e.code.toString()) + 1 + Ot(e.scope, r, i) : (null != t ? I.utf8ByteLength(t) + 1 : 0) + 1 + 4 + I.utf8ByteLength(e.code.toString()) + 1;
                            if ("Binary" === e._bsontype) {
                                const r = e;
                                return r.sub_type === U.SUBTYPE_BYTE_ARRAY ? (null != t ? I.utf8ByteLength(t) + 1 : 0) + (r.position + 1 + 4 + 1 + 4) : (null != t ? I.utf8ByteLength(t) + 1 : 0) + (r.position + 1 + 4 + 1);
                            }
                            if ("Symbol" === e._bsontype) return (null != t ? I.utf8ByteLength(t) + 1 : 0) + I.utf8ByteLength(e.value) + 4 + 1 + 1;
                            if ("DBRef" === e._bsontype) {
                                const n = Object.assign({
                                    $ref: e.collection,
                                    $id: e.oid
                                }, e.fields);
                                return null != e.db && (n.$db = e.db), (null != t ? I.utf8ByteLength(t) + 1 : 0) + 1 + Ot(n, r, i);
                            }
                            return e instanceof RegExp || s(e) ? (null != t ? I.utf8ByteLength(t) + 1 : 0) + 1 + I.utf8ByteLength(e.source) + 1 + (e.global ? 1 : 0) + (e.ignoreCase ? 1 : 0) + (e.multiline ? 1 : 0) + 1 : "BSONRegExp" === e._bsontype ? (null != t ? I.utf8ByteLength(t) + 1 : 0) + 1 + I.utf8ByteLength(e.pattern) + 1 + I.utf8ByteLength(e.options) + 1 : (null != t ? I.utf8ByteLength(t) + 1 : 0) + Ot(e, r, i) + 1;
                        case "function":
                            return r ? (null != t ? I.utf8ByteLength(t) + 1 : 0) + 1 + 4 + I.utf8ByteLength(e.toString()) + 1 : 0;
                        case "bigint":
                            return (null != t ? I.utf8ByteLength(t) + 1 : 0) + 9;
                        case "symbol":
                            return 0;
                        default:
                            throw new g("Unrecognized JS type: " + typeof e);
                    }
                }
                St.index = Math.floor(16777215 * Math.random());
                class $t extends R {
                    get _bsontype() {
                        return "BSONRegExp";
                    }
                    constructor(t, e){
                        if (super(), this.pattern = t, this.options = (e ?? "").split("").sort().join(""), -1 !== this.pattern.indexOf("\0")) throw new g(`BSON Regex patterns cannot contain null bytes, found: ${JSON.stringify(this.pattern)}`);
                        if (-1 !== this.options.indexOf("\0")) throw new g(`BSON Regex options cannot contain null bytes, found: ${JSON.stringify(this.options)}`);
                        for(let t = 0; t < this.options.length; t++)if ("i" !== this.options[t] && "m" !== this.options[t] && "x" !== this.options[t] && "l" !== this.options[t] && "s" !== this.options[t] && "u" !== this.options[t]) throw new g(`The regular expression option [${this.options[t]}] is not supported`);
                    }
                    static parseOptions(t) {
                        return t ? t.split("").sort().join("") : "";
                    }
                    toExtendedJSON(t) {
                        return (t = t || {}).legacy ? {
                            $regex: this.pattern,
                            $options: this.options
                        } : {
                            $regularExpression: {
                                pattern: this.pattern,
                                options: this.options
                            }
                        };
                    }
                    static fromExtendedJSON(t) {
                        if ("$regex" in t) {
                            if ("string" == typeof t.$regex) return new $t(t.$regex, $t.parseOptions(t.$options));
                            if ("BSONRegExp" === t.$regex._bsontype) return t;
                        }
                        if ("$regularExpression" in t) return new $t(t.$regularExpression.pattern, $t.parseOptions(t.$regularExpression.options));
                        throw new g(`Unexpected BSONRegExp EJSON object form: ${JSON.stringify(t)}`);
                    }
                    inspect(t, e, r) {
                        const n = function(t) {
                            if (null != t && "object" == typeof t && "stylize" in t && "function" == typeof t.stylize) return t.stylize;
                        }(e) ?? ((t)=>t);
                        return r ??= f, `new BSONRegExp(${n(r(this.pattern), "regexp")}, ${n(r(this.options), "regexp")})`;
                    }
                }
                class Et extends R {
                    get _bsontype() {
                        return "BSONSymbol";
                    }
                    constructor(t){
                        super(), this.value = t;
                    }
                    valueOf() {
                        return this.value;
                    }
                    toString() {
                        return this.value;
                    }
                    toJSON() {
                        return this.value;
                    }
                    toExtendedJSON() {
                        return {
                            $symbol: this.value
                        };
                    }
                    static fromExtendedJSON(t) {
                        return new Et(t.$symbol);
                    }
                    inspect(t, e, r) {
                        return r ??= f, `new BSONSymbol(${r(this.value, e)})`;
                    }
                }
                const At = rt;
                class Pt extends At {
                    get _bsontype() {
                        return "Timestamp";
                    }
                    get i() {
                        return this.low >>> 0;
                    }
                    get t() {
                        return this.high >>> 0;
                    }
                    constructor(t){
                        if (null == t) super(0, 0, !0);
                        else if ("bigint" == typeof t) super(t, !0);
                        else if (rt.isLong(t)) super(t.low, t.high, !0);
                        else {
                            if ("object" != typeof t || !("t" in t) || !("i" in t)) throw new g("A Timestamp can only be constructed with: bigint, Long, or { t: number; i: number }");
                            {
                                if ("number" != typeof t.t && ("object" != typeof t.t || "Int32" !== t.t._bsontype)) throw new g("Timestamp constructed from { t, i } must provide t as a number");
                                if ("number" != typeof t.i && ("object" != typeof t.i || "Int32" !== t.i._bsontype)) throw new g("Timestamp constructed from { t, i } must provide i as a number");
                                const e = Number(t.t), r = Number(t.i);
                                if (e < 0 || Number.isNaN(e)) throw new g("Timestamp constructed from { t, i } must provide a positive t");
                                if (r < 0 || Number.isNaN(r)) throw new g("Timestamp constructed from { t, i } must provide a positive i");
                                if (e > 4294967295) throw new g("Timestamp constructed from { t, i } must provide t equal or less than uint32 max");
                                if (r > 4294967295) throw new g("Timestamp constructed from { t, i } must provide i equal or less than uint32 max");
                                super(r, e, !0);
                            }
                        }
                    }
                    toJSON() {
                        return {
                            $timestamp: this.toString()
                        };
                    }
                    static fromInt(t) {
                        return new Pt(rt.fromInt(t, !0));
                    }
                    static fromNumber(t) {
                        return new Pt(rt.fromNumber(t, !0));
                    }
                    static fromBits(t, e) {
                        return new Pt({
                            i: t,
                            t: e
                        });
                    }
                    static fromString(t, e) {
                        return new Pt(rt.fromString(t, !0, e));
                    }
                    toExtendedJSON() {
                        return {
                            $timestamp: {
                                t: this.t,
                                i: this.i
                            }
                        };
                    }
                    static fromExtendedJSON(t) {
                        const e = rt.isLong(t.$timestamp.i) ? t.$timestamp.i.getLowBitsUnsigned() : t.$timestamp.i, r = rt.isLong(t.$timestamp.t) ? t.$timestamp.t.getLowBitsUnsigned() : t.$timestamp.t;
                        return new Pt({
                            t: r,
                            i: e
                        });
                    }
                    inspect(t, e, r) {
                        return r ??= f, `new Timestamp({ t: ${r(this.t, e)}, i: ${r(this.i, e)} })`;
                    }
                }
                Pt.MAX_VALUE = rt.MAX_UNSIGNED_VALUE;
                const xt = rt.fromNumber(b), kt = rt.fromNumber(m);
                function Mt(t, e, r) {
                    const n = (e = null == e ? {} : e) && e.index ? e.index : 0, i = C.getInt32LE(t, n);
                    if (i < 5) throw new g(`bson size must be >= 5, is ${i}`);
                    if (e.allowObjectSmallerThanBufferSize && t.length < i) throw new g(`buffer length ${t.length} must be >= bson size ${i}`);
                    if (!e.allowObjectSmallerThanBufferSize && t.length !== i) throw new g(`buffer length ${t.length} must === bson size ${i}`);
                    if (i + n > t.byteLength) throw new g(`(bson size ${i} + options.index ${n} must be <= buffer length ${t.byteLength})`);
                    if (0 !== t[n + i - 1]) throw new g("One object, sized correctly, with a spot for an EOO, but the EOO isn't 0x00");
                    return Bt(t, n, e, r);
                }
                const Tt = /^\$ref$|^\$id$|^\$db$/;
                function Bt(t, e, r, n = !1) {
                    const i = null == r.fieldsAsRaw ? null : r.fieldsAsRaw, o = null != r.raw && r.raw, a = "boolean" == typeof r.bsonRegExp && r.bsonRegExp, s = r.promoteBuffers ?? !1, u = r.promoteLongs ?? !0, c = r.promoteValues ?? !0, f = r.useBigInt64 ?? !1;
                    if (f && !c) throw new g("Must either request bigint or Long for int64 deserialization");
                    if (f && !u) throw new g("Must either request bigint or Long for int64 deserialization");
                    let l, h, p = !0;
                    const d = (null == r.validation ? {
                        utf8: !0
                    } : r.validation).utf8;
                    if ("boolean" == typeof d) l = d;
                    else {
                        p = !1;
                        const t = Object.keys(d).map(function(t) {
                            return d[t];
                        });
                        if (0 === t.length) throw new g("UTF-8 validation setting cannot be empty");
                        if ("boolean" != typeof t[0]) throw new g("Invalid UTF-8 validation option, must specify boolean values");
                        if (l = t[0], !t.every((t)=>t === l)) throw new g("Invalid UTF-8 validation option - keys must be all true or all false");
                    }
                    if (!p) {
                        h = new Set;
                        for (const t of Object.keys(d))h.add(t);
                    }
                    const y = e;
                    if (t.length < 5) throw new g("corrupt bson message < 5 bytes long");
                    const b = C.getInt32LE(t, e);
                    if (e += 4, b < 5 || b > t.length) throw new g("corrupt bson message");
                    const m = n ? [] : {};
                    let v = 0, _ = !n && null;
                    for(;;){
                        const d = t[e++];
                        if (0 === d) break;
                        let y = e;
                        for(; 0 !== t[y] && y < t.length;)y++;
                        if (y >= t.byteLength) throw new g("Bad BSON Document: illegal CString");
                        const b = n ? v++ : I.toUTF8(t, e, y, !1);
                        let w, S = !0;
                        if (S = p || h?.has(b) ? l : !l, !1 !== _ && "$" === b[0] && (_ = Tt.test(b)), e = y + 1, 2 === d) {
                            const r = C.getInt32LE(t, e);
                            if (e += 4, r <= 0 || r > t.length - e || 0 !== t[e + r - 1]) throw new g("bad string length in bson");
                            w = I.toUTF8(t, e, e + r - 1, S), e += r;
                        } else if (7 === d) {
                            const r = I.allocateUnsafe(12);
                            for(let n = 0; n < 12; n++)r[n] = t[e + n];
                            w = new St(r), e += 12;
                        } else if (16 === d && !1 === c) w = new mt(C.getInt32LE(t, e)), e += 4;
                        else if (16 === d) w = C.getInt32LE(t, e), e += 4;
                        else if (1 === d) w = C.getFloat64LE(t, e), e += 8, !1 === c && (w = new bt(w));
                        else if (9 === d) {
                            const r = C.getInt32LE(t, e), n = C.getInt32LE(t, e + 4);
                            e += 8, w = new Date(new rt(r, n).toNumber());
                        } else if (8 === d) {
                            if (0 !== t[e] && 1 !== t[e]) throw new g("illegal boolean type value");
                            w = 1 === t[e++];
                        } else if (3 === d) {
                            const n = e, i = C.getInt32LE(t, e);
                            if (i <= 0 || i > t.length - e) throw new g("bad embedded document length in bson");
                            if (o) w = t.subarray(e, e + i);
                            else {
                                let e = r;
                                p || (e = {
                                    ...r,
                                    validation: {
                                        utf8: S
                                    }
                                }), w = Bt(t, n, e, !1);
                            }
                            e += i;
                        } else if (4 === d) {
                            const n = e, o = C.getInt32LE(t, e);
                            let a = r;
                            const s = e + o;
                            if (i && i[b] && (a = {
                                ...r,
                                raw: !0
                            }), p || (a = {
                                ...a,
                                validation: {
                                    utf8: S
                                }
                            }), w = Bt(t, n, a, !0), 0 !== t[(e += o) - 1]) throw new g("invalid array terminator byte");
                            if (e !== s) throw new g("corrupted array bson");
                        } else if (6 === d) w = void 0;
                        else if (10 === d) w = null;
                        else if (18 === d) {
                            if (f) w = C.getBigInt64LE(t, e), e += 8;
                            else {
                                const r = C.getInt32LE(t, e), n = C.getInt32LE(t, e + 4);
                                e += 8;
                                const i = new rt(r, n);
                                w = u && !0 === c && i.lessThanOrEqual(xt) && i.greaterThanOrEqual(kt) ? i.toNumber() : i;
                            }
                        } else if (19 === d) {
                            const r = I.allocateUnsafe(16);
                            for(let n = 0; n < 16; n++)r[n] = t[e + n];
                            e += 16, w = new yt(r);
                        } else if (5 === d) {
                            let r = C.getInt32LE(t, e);
                            e += 4;
                            const n = r, i = t[e++];
                            if (r < 0) throw new g("Negative binary type element size found");
                            if (r > t.byteLength) throw new g("Binary type size larger than document size");
                            if (i === U.SUBTYPE_BYTE_ARRAY) {
                                if (r = C.getInt32LE(t, e), e += 4, r < 0) throw new g("Negative binary type element size found for subtype 0x02");
                                if (r > n - 4) throw new g("Binary type with subtype 0x02 contains too long binary size");
                                if (r < n - 4) throw new g("Binary type with subtype 0x02 contains too short binary size");
                            }
                            s && c ? w = I.toLocalBufferType(t.subarray(e, e + r)) : (w = new U(t.subarray(e, e + r), i), 4 === i && z.isValid(w) && (w = w.toUUID())), e += r;
                        } else if (11 === d && !1 === a) {
                            for(y = e; 0 !== t[y] && y < t.length;)y++;
                            if (y >= t.length) throw new g("Bad BSON Document: illegal CString");
                            const r = I.toUTF8(t, e, y, !1);
                            for(y = e = y + 1; 0 !== t[y] && y < t.length;)y++;
                            if (y >= t.length) throw new g("Bad BSON Document: illegal CString");
                            const n = I.toUTF8(t, e, y, !1);
                            e = y + 1;
                            const i = new Array(n.length);
                            for(y = 0; y < n.length; y++)switch(n[y]){
                                case "m":
                                    i[y] = "m";
                                    break;
                                case "s":
                                    i[y] = "g";
                                    break;
                                case "i":
                                    i[y] = "i";
                            }
                            w = new RegExp(r, i.join(""));
                        } else if (11 === d && !0 === a) {
                            for(y = e; 0 !== t[y] && y < t.length;)y++;
                            if (y >= t.length) throw new g("Bad BSON Document: illegal CString");
                            const r = I.toUTF8(t, e, y, !1);
                            for(y = e = y + 1; 0 !== t[y] && y < t.length;)y++;
                            if (y >= t.length) throw new g("Bad BSON Document: illegal CString");
                            const n = I.toUTF8(t, e, y, !1);
                            e = y + 1, w = new $t(r, n);
                        } else if (14 === d) {
                            const r = C.getInt32LE(t, e);
                            if (e += 4, r <= 0 || r > t.length - e || 0 !== t[e + r - 1]) throw new g("bad string length in bson");
                            const n = I.toUTF8(t, e, e + r - 1, S);
                            w = c ? n : new Et(n), e += r;
                        } else if (17 === d) w = new Pt({
                            i: C.getUint32LE(t, e),
                            t: C.getUint32LE(t, e + 4)
                        }), e += 8;
                        else if (255 === d) w = new gt;
                        else if (127 === d) w = new vt;
                        else if (13 === d) {
                            const r = C.getInt32LE(t, e);
                            if (e += 4, r <= 0 || r > t.length - e || 0 !== t[e + r - 1]) throw new g("bad string length in bson");
                            const n = I.toUTF8(t, e, e + r - 1, S);
                            w = new K(n), e += r;
                        } else if (15 === d) {
                            const n = C.getInt32LE(t, e);
                            if (e += 4, n < 13) throw new g("code_w_scope total size shorter minimum expected length");
                            const i = C.getInt32LE(t, e);
                            if (e += 4, i <= 0 || i > t.length - e || 0 !== t[e + i - 1]) throw new g("bad string length in bson");
                            const o = I.toUTF8(t, e, e + i - 1, S), a = e += i, s = C.getInt32LE(t, e), u = Bt(t, a, r, !1);
                            if (e += s, n < 8 + s + i) throw new g("code_w_scope total size is too short, truncating scope");
                            if (n > 8 + s + i) throw new g("code_w_scope total size is too long, clips outer document");
                            w = new K(o, u);
                        } else {
                            if (12 !== d) throw new g(`Detected unknown BSON type ${d.toString(16)} for fieldname "${b}"`);
                            {
                                const r = C.getInt32LE(t, e);
                                if (e += 4, r <= 0 || r > t.length - e || 0 !== t[e + r - 1]) throw new g("bad string length in bson");
                                const n = I.toUTF8(t, e, e + r - 1, S);
                                e += r;
                                const i = I.allocateUnsafe(12);
                                for(let r = 0; r < 12; r++)i[r] = t[e + r];
                                const o = new St(i);
                                e += 12, w = new W(n, o);
                            }
                        }
                        "__proto__" === b ? Object.defineProperty(m, b, {
                            value: w,
                            writable: !0,
                            enumerable: !0,
                            configurable: !0
                        }) : m[b] = w;
                    }
                    if (b !== e - y) {
                        if (n) throw new g("corrupt array bson");
                        throw new g("corrupt object bson");
                    }
                    if (!_) return m;
                    if (H(m)) {
                        const t = Object.assign({}, m);
                        return delete t.$ref, delete t.$id, delete t.$db, new W(m.$ref, m.$id, m.$db, t);
                    }
                    return m;
                }
                const It = /\x00/, Rt = new Set([
                    "$db",
                    "$ref",
                    "$id",
                    "$clusterTime"
                ]);
                function Nt(t, e, r, n) {
                    t[n++] = 2, t[(n = n + I.encodeUTF8Into(t, e, n) + 1) - 1] = 0;
                    const i = I.encodeUTF8Into(t, r, n + 4);
                    return C.setInt32LE(t, n, i + 1), n = n + 4 + i, t[n++] = 0, n;
                }
                function Dt(t, e, r, n) {
                    const i = !Object.is(r, -0) && Number.isSafeInteger(r) && r <= h && r >= p ? 16 : 1;
                    return t[n++] = i, n += I.encodeUTF8Into(t, e, n), t[n++] = 0, n + (16 === i ? C.setInt32LE(t, n, r) : C.setFloat64LE(t, n, r));
                }
                function Lt(t, e, r, n) {
                    return t[n++] = 18, n += I.encodeUTF8Into(t, e, n), t[n++] = 0, n + C.setBigInt64LE(t, n, r);
                }
                function Ct(t, e, r, n) {
                    return t[n++] = 10, n += I.encodeUTF8Into(t, e, n), t[n++] = 0, n;
                }
                function Ut(t, e, r, n) {
                    return t[n++] = 8, n += I.encodeUTF8Into(t, e, n), t[n++] = 0, t[n++] = r ? 1 : 0, n;
                }
                function qt(t, e, r, n) {
                    t[n++] = 9, n += I.encodeUTF8Into(t, e, n), t[n++] = 0;
                    const i = rt.fromNumber(r.getTime()), o = i.getLowBits(), a = i.getHighBits();
                    return (n += C.setInt32LE(t, n, o)) + C.setInt32LE(t, n, a);
                }
                function Ft(t, e, r, n) {
                    if (t[n++] = 11, n += I.encodeUTF8Into(t, e, n), t[n++] = 0, r.source && null != r.source.match(It)) throw new g("value " + r.source + " must not contain null bytes");
                    return n += I.encodeUTF8Into(t, r.source, n), t[n++] = 0, r.ignoreCase && (t[n++] = 105), r.global && (t[n++] = 115), r.multiline && (t[n++] = 109), t[n++] = 0, n;
                }
                function Vt(t, e, r, n) {
                    if (t[n++] = 11, n += I.encodeUTF8Into(t, e, n), t[n++] = 0, null != r.pattern.match(It)) throw new g("pattern " + r.pattern + " must not contain null bytes");
                    n += I.encodeUTF8Into(t, r.pattern, n), t[n++] = 0;
                    const i = r.options.split("").sort().join("");
                    return n += I.encodeUTF8Into(t, i, n), t[n++] = 0, n;
                }
                function zt(t, e, r, n) {
                    return null === r ? t[n++] = 10 : "MinKey" === r._bsontype ? t[n++] = 255 : t[n++] = 127, n += I.encodeUTF8Into(t, e, n), t[n++] = 0, n;
                }
                function Kt(t, e, r, n) {
                    return t[n++] = 7, n += I.encodeUTF8Into(t, e, n), t[n++] = 0, n + r.serializeInto(t, n);
                }
                function Ht(t, e, r, n) {
                    t[n++] = 5, n += I.encodeUTF8Into(t, e, n), t[n++] = 0;
                    const i = r.length;
                    if (n += C.setInt32LE(t, n, i), t[n++] = 0, i <= 16) for(let e = 0; e < i; e++)t[n + e] = r[e];
                    else t.set(r, n);
                    return n + i;
                }
                function Wt(t, e, r, n, i, o, a, s, u) {
                    if (u.has(r)) throw new g("Cannot convert circular structure to BSON");
                    u.add(r), t[n++] = Array.isArray(r) ? 4 : 3, n += I.encodeUTF8Into(t, e, n), t[n++] = 0;
                    const c = ne(t, r, i, n, o + 1, a, s, u);
                    return u.delete(r), c;
                }
                function Jt(t, e, r, n) {
                    t[n++] = 19, n += I.encodeUTF8Into(t, e, n), t[n++] = 0;
                    for(let e = 0; e < 16; e++)t[n + e] = r.bytes[e];
                    return n + 16;
                }
                function Gt(t, e, r, n) {
                    t[n++] = "Long" === r._bsontype ? 18 : 17, n += I.encodeUTF8Into(t, e, n), t[n++] = 0;
                    const i = r.getLowBits(), o = r.getHighBits();
                    return (n += C.setInt32LE(t, n, i)) + C.setInt32LE(t, n, o);
                }
                function Yt(t, e, r, n) {
                    return r = r.valueOf(), t[n++] = 16, n += I.encodeUTF8Into(t, e, n), t[n++] = 0, n + C.setInt32LE(t, n, r);
                }
                function Qt(t, e, r, n) {
                    return t[n++] = 1, n += I.encodeUTF8Into(t, e, n), t[n++] = 0, n + C.setFloat64LE(t, n, r.value);
                }
                function Xt(t, e, r, n) {
                    t[n++] = 13, n += I.encodeUTF8Into(t, e, n), t[n++] = 0;
                    const i = r.toString(), o = I.encodeUTF8Into(t, i, n + 4) + 1;
                    return C.setInt32LE(t, n, o), n = n + 4 + o - 1, t[n++] = 0, n;
                }
                function Zt(t, e, r, n, i = !1, o = 0, a = !1, s = !0, u) {
                    if (r.scope && "object" == typeof r.scope) {
                        t[n++] = 15, n += I.encodeUTF8Into(t, e, n), t[n++] = 0;
                        let c = n;
                        const f = r.code;
                        n += 4;
                        const l = I.encodeUTF8Into(t, f, n + 4) + 1;
                        C.setInt32LE(t, n, l), t[n + 4 + l - 1] = 0, n = n + l + 4;
                        const h = ne(t, r.scope, i, n, o + 1, a, s, u);
                        n = h - 1;
                        const p = h - c;
                        c += C.setInt32LE(t, c, p), t[n++] = 0;
                    } else {
                        t[n++] = 13, n += I.encodeUTF8Into(t, e, n), t[n++] = 0;
                        const i = r.code.toString(), o = I.encodeUTF8Into(t, i, n + 4) + 1;
                        C.setInt32LE(t, n, o), n = n + 4 + o - 1, t[n++] = 0;
                    }
                    return n;
                }
                function te(t, e, r, n) {
                    t[n++] = 5, n += I.encodeUTF8Into(t, e, n), t[n++] = 0;
                    const i = r.buffer;
                    let o = r.position;
                    if (r.sub_type === U.SUBTYPE_BYTE_ARRAY && (o += 4), n += C.setInt32LE(t, n, o), t[n++] = r.sub_type, r.sub_type === U.SUBTYPE_BYTE_ARRAY && (o -= 4, n += C.setInt32LE(t, n, o)), r.sub_type === U.SUBTYPE_VECTOR && q(r), o <= 16) for(let e = 0; e < o; e++)t[n + e] = i[e];
                    else t.set(i, n);
                    return n + r.position;
                }
                function ee(t, e, r, n) {
                    t[n++] = 14, n += I.encodeUTF8Into(t, e, n), t[n++] = 0;
                    const i = I.encodeUTF8Into(t, r.value, n + 4) + 1;
                    return C.setInt32LE(t, n, i), n = n + 4 + i - 1, t[n++] = 0, n;
                }
                function re(t, e, r, n, i, o, a) {
                    t[n++] = 3, n += I.encodeUTF8Into(t, e, n), t[n++] = 0;
                    let s = n, u = {
                        $ref: r.collection || r.namespace,
                        $id: r.oid
                    };
                    null != r.db && (u.$db = r.db), u = Object.assign(u, r.fields);
                    const c = ne(t, u, !1, n, i + 1, o, !0, a), f = c - s;
                    return s += C.setInt32LE(t, n, f), c;
                }
                function ne(t, e, r, n, i, f, h, p) {
                    if (null == p) {
                        if (null == e) return t[0] = 5, t[1] = 0, t[2] = 0, t[3] = 0, t[4] = 0, 5;
                        if (Array.isArray(e)) throw new g("serialize does not support an array as the root input");
                        if ("object" != typeof e) throw new g("serialize does not support non-object as the root input");
                        if ("_bsontype" in e && "string" == typeof e._bsontype) throw new g("BSON types cannot be serialized as a document");
                        if (c(e) || s(e) || o(e) || a(e)) throw new g("date, regexp, typedarray, and arraybuffer cannot be BSON documents");
                        p = new Set;
                    }
                    p.add(e);
                    let d = n + 4;
                    if (Array.isArray(e)) for(let n = 0; n < e.length; n++){
                        const a = `${n}`;
                        let u = e[n];
                        "function" == typeof u?.toBSON && (u = u.toBSON());
                        const y = typeof u;
                        if (void 0 === u) d = Ct(t, a, 0, d);
                        else if (null === u) d = Ct(t, a, 0, d);
                        else if ("string" === y) d = Nt(t, a, u, d);
                        else if ("number" === y) d = Dt(t, a, u, d);
                        else if ("bigint" === y) d = Lt(t, a, u, d);
                        else if ("boolean" === y) d = Ut(t, a, u, d);
                        else if ("object" === y && null == u._bsontype) d = u instanceof Date || c(u) ? qt(t, a, u, d) : u instanceof Uint8Array || o(u) ? Ht(t, a, u, d) : u instanceof RegExp || s(u) ? Ft(t, a, u, d) : Wt(t, a, u, d, r, i, f, h, p);
                        else if ("object" === y) {
                            if (6 !== u[l]) throw new _;
                            if ("ObjectId" === u._bsontype) d = Kt(t, a, u, d);
                            else if ("Decimal128" === u._bsontype) d = Jt(t, a, u, d);
                            else if ("Long" === u._bsontype || "Timestamp" === u._bsontype) d = Gt(t, a, u, d);
                            else if ("Double" === u._bsontype) d = Qt(t, a, u, d);
                            else if ("Code" === u._bsontype) d = Zt(t, a, u, d, r, i, f, h, p);
                            else if ("Binary" === u._bsontype) d = te(t, a, u, d);
                            else if ("BSONSymbol" === u._bsontype) d = ee(t, a, u, d);
                            else if ("DBRef" === u._bsontype) d = re(t, a, u, d, i, f, p);
                            else if ("BSONRegExp" === u._bsontype) d = Vt(t, a, u, d);
                            else if ("Int32" === u._bsontype) d = Yt(t, a, u, d);
                            else if ("MinKey" === u._bsontype || "MaxKey" === u._bsontype) d = zt(t, a, u, d);
                            else if (void 0 !== u._bsontype) throw new g(`Unrecognized or invalid _bsontype: ${String(u._bsontype)}`);
                        } else "function" === y && f && (d = Xt(t, a, u, d));
                    }
                    else if (e instanceof Map || u(e)) {
                        const n = e.entries();
                        let a = !1;
                        for(; !a;){
                            const e = n.next();
                            if (a = !!e.done, a) continue;
                            const u = e.value ? e.value[0] : void 0;
                            let y = e.value ? e.value[1] : void 0;
                            "function" == typeof y?.toBSON && (y = y.toBSON());
                            const b = typeof y;
                            if ("string" == typeof u && !Rt.has(u)) {
                                if (null != u.match(It)) throw new g("key " + u + " must not contain null bytes");
                                if (r) {
                                    if ("$" === u[0]) throw new g("key " + u + " must not start with '$'");
                                    if (u.includes(".")) throw new g("key " + u + " must not contain '.'");
                                }
                            }
                            if (void 0 === y) !1 === h && (d = Ct(t, u, 0, d));
                            else if (null === y) d = Ct(t, u, 0, d);
                            else if ("string" === b) d = Nt(t, u, y, d);
                            else if ("number" === b) d = Dt(t, u, y, d);
                            else if ("bigint" === b) d = Lt(t, u, y, d);
                            else if ("boolean" === b) d = Ut(t, u, y, d);
                            else if ("object" === b && null == y._bsontype) d = y instanceof Date || c(y) ? qt(t, u, y, d) : y instanceof Uint8Array || o(y) ? Ht(t, u, y, d) : y instanceof RegExp || s(y) ? Ft(t, u, y, d) : Wt(t, u, y, d, r, i, f, h, p);
                            else if ("object" === b) {
                                if (6 !== y[l]) throw new _;
                                if ("ObjectId" === y._bsontype) d = Kt(t, u, y, d);
                                else if ("Decimal128" === y._bsontype) d = Jt(t, u, y, d);
                                else if ("Long" === y._bsontype || "Timestamp" === y._bsontype) d = Gt(t, u, y, d);
                                else if ("Double" === y._bsontype) d = Qt(t, u, y, d);
                                else if ("Code" === y._bsontype) d = Zt(t, u, y, d, r, i, f, h, p);
                                else if ("Binary" === y._bsontype) d = te(t, u, y, d);
                                else if ("BSONSymbol" === y._bsontype) d = ee(t, u, y, d);
                                else if ("DBRef" === y._bsontype) d = re(t, u, y, d, i, f, p);
                                else if ("BSONRegExp" === y._bsontype) d = Vt(t, u, y, d);
                                else if ("Int32" === y._bsontype) d = Yt(t, u, y, d);
                                else if ("MinKey" === y._bsontype || "MaxKey" === y._bsontype) d = zt(t, u, y, d);
                                else if (void 0 !== y._bsontype) throw new g(`Unrecognized or invalid _bsontype: ${String(y._bsontype)}`);
                            } else "function" === b && f && (d = Xt(t, u, y, d));
                        }
                    } else {
                        if ("function" == typeof e?.toBSON && null != (e = e.toBSON()) && "object" != typeof e) throw new g("toBSON function did not return an object");
                        for (const n of Object.keys(e)){
                            let a = e[n];
                            "function" == typeof a?.toBSON && (a = a.toBSON());
                            const u = typeof a;
                            if ("string" == typeof n && !Rt.has(n)) {
                                if (null != n.match(It)) throw new g("key " + n + " must not contain null bytes");
                                if (r) {
                                    if ("$" === n[0]) throw new g("key " + n + " must not start with '$'");
                                    if (n.includes(".")) throw new g("key " + n + " must not contain '.'");
                                }
                            }
                            if (void 0 === a) !1 === h && (d = Ct(t, n, 0, d));
                            else if (null === a) d = Ct(t, n, 0, d);
                            else if ("string" === u) d = Nt(t, n, a, d);
                            else if ("number" === u) d = Dt(t, n, a, d);
                            else if ("bigint" === u) d = Lt(t, n, a, d);
                            else if ("boolean" === u) d = Ut(t, n, a, d);
                            else if ("object" === u && null == a._bsontype) d = a instanceof Date || c(a) ? qt(t, n, a, d) : a instanceof Uint8Array || o(a) ? Ht(t, n, a, d) : a instanceof RegExp || s(a) ? Ft(t, n, a, d) : Wt(t, n, a, d, r, i, f, h, p);
                            else if ("object" === u) {
                                if (6 !== a[l]) throw new _;
                                if ("ObjectId" === a._bsontype) d = Kt(t, n, a, d);
                                else if ("Decimal128" === a._bsontype) d = Jt(t, n, a, d);
                                else if ("Long" === a._bsontype || "Timestamp" === a._bsontype) d = Gt(t, n, a, d);
                                else if ("Double" === a._bsontype) d = Qt(t, n, a, d);
                                else if ("Code" === a._bsontype) d = Zt(t, n, a, d, r, i, f, h, p);
                                else if ("Binary" === a._bsontype) d = te(t, n, a, d);
                                else if ("BSONSymbol" === a._bsontype) d = ee(t, n, a, d);
                                else if ("DBRef" === a._bsontype) d = re(t, n, a, d, i, f, p);
                                else if ("BSONRegExp" === a._bsontype) d = Vt(t, n, a, d);
                                else if ("Int32" === a._bsontype) d = Yt(t, n, a, d);
                                else if ("MinKey" === a._bsontype || "MaxKey" === a._bsontype) d = zt(t, n, a, d);
                                else if (void 0 !== a._bsontype) throw new g(`Unrecognized or invalid _bsontype: ${String(a._bsontype)}`);
                            } else "function" === u && f && (d = Xt(t, n, a, d));
                        }
                    }
                    p.delete(e), t[d++] = 0;
                    const y = d - n;
                    return n += C.setInt32LE(t, n, y), d;
                }
                const ie = {
                    $oid: St,
                    $binary: U,
                    $uuid: U,
                    $symbol: Et,
                    $numberInt: mt,
                    $numberDecimal: yt,
                    $numberDouble: bt,
                    $numberLong: rt,
                    $minKey: gt,
                    $maxKey: vt,
                    $regex: $t,
                    $regularExpression: $t,
                    $timestamp: Pt
                };
                function oe(t, e = {}) {
                    if ("number" == typeof t) {
                        const r = t <= h && t >= p, n = t <= d && t >= y;
                        if (e.relaxed || e.legacy) return t;
                        if (Number.isInteger(t) && !Object.is(t, -0)) {
                            if (r) return new mt(t);
                            if (n) return e.useBigInt64 ? BigInt(t) : rt.fromNumber(t);
                        }
                        return new bt(t);
                    }
                    if (null == t || "object" != typeof t) return t;
                    if (t.$undefined) return null;
                    const r = Object.keys(t).filter((e)=>e.startsWith("$") && null != t[e]);
                    for(let n = 0; n < r.length; n++){
                        const i = ie[r[n]];
                        if (i) return i.fromExtendedJSON(t, e);
                    }
                    if (null != t.$date) {
                        const r = t.$date, n = new Date;
                        if (e.legacy) {
                            if ("number" == typeof r) n.setTime(r);
                            else if ("string" == typeof r) n.setTime(Date.parse(r));
                            else {
                                if ("bigint" != typeof r) throw new w("Unrecognized type for EJSON date: " + typeof r);
                                n.setTime(Number(r));
                            }
                        } else if ("string" == typeof r) n.setTime(Date.parse(r));
                        else if (rt.isLong(r)) n.setTime(r.toNumber());
                        else if ("number" == typeof r && e.relaxed) n.setTime(r);
                        else {
                            if ("bigint" != typeof r) throw new w("Unrecognized type for EJSON date: " + typeof r);
                            n.setTime(Number(r));
                        }
                        return n;
                    }
                    if (null != t.$code) {
                        const e = Object.assign({}, t);
                        return t.$scope && (e.$scope = oe(t.$scope)), K.fromExtendedJSON(t);
                    }
                    if (H(t) || t.$dbPointer) {
                        const e = t.$ref ? t : t.$dbPointer;
                        if (e instanceof W) return e;
                        const r = Object.keys(e).filter((t)=>t.startsWith("$"));
                        let n = !0;
                        if (r.forEach((t)=>{
                            -1 === [
                                "$ref",
                                "$id",
                                "$db"
                            ].indexOf(t) && (n = !1);
                        }), n) return W.fromExtendedJSON(e);
                    }
                    return t;
                }
                function ae(t) {
                    const e = t.toISOString();
                    return 0 !== t.getUTCMilliseconds() ? e : e.slice(0, -5) + "Z";
                }
                function se(t, e) {
                    if (t instanceof Map || u(t)) {
                        const r = Object.create(null);
                        for (const [e, n] of t){
                            if ("string" != typeof e) throw new g("Can only serialize maps with string keys");
                            r[e] = n;
                        }
                        return se(r, e);
                    }
                    if (("object" == typeof t || "function" == typeof t) && null !== t) {
                        const r = e.seenObjects.findIndex((e)=>e.obj === t);
                        if (-1 !== r) {
                            const t = e.seenObjects.map((t)=>t.propertyName), n = t.slice(0, r).map((t)=>`${t} -> `).join(""), i = t[r], o = " -> " + t.slice(r + 1, t.length - 1).map((t)=>`${t} -> `).join(""), a = t[t.length - 1], s = " ".repeat(n.length + i.length / 2), u = "-".repeat(o.length + (i.length + a.length) / 2 - 1);
                            throw new g(`Converting circular structure to EJSON:\n    ${n}${i}${o}${a}\n    ${s}\\${u}/`);
                        }
                        e.seenObjects[e.seenObjects.length - 1].obj = t;
                    }
                    if (Array.isArray(t)) return function(t, e) {
                        return t.map((t, r)=>{
                            e.seenObjects.push({
                                propertyName: `index ${r}`,
                                obj: null
                            });
                            try {
                                return se(t, e);
                            } finally{
                                e.seenObjects.pop();
                            }
                        });
                    }(t, e);
                    if (void 0 === t) return null;
                    if (t instanceof Date || c(t)) {
                        const r = t.getTime(), n = r > -1 && r < 2534023188e5;
                        return e.legacy ? e.relaxed && n ? {
                            $date: t.getTime()
                        } : {
                            $date: ae(t)
                        } : e.relaxed && n ? {
                            $date: ae(t)
                        } : {
                            $date: {
                                $numberLong: t.getTime().toString()
                            }
                        };
                    }
                    if (!("number" != typeof t || e.relaxed && isFinite(t))) {
                        if (Number.isInteger(t) && !Object.is(t, -0)) {
                            if (t >= p && t <= h) return {
                                $numberInt: t.toString()
                            };
                            if (t >= y && t <= d) return {
                                $numberLong: t.toString()
                            };
                        }
                        return {
                            $numberDouble: Object.is(t, -0) ? "-0.0" : t.toString()
                        };
                    }
                    if ("bigint" == typeof t) return e.relaxed ? Number(BigInt.asIntN(64, t)) : {
                        $numberLong: BigInt.asIntN(64, t).toString()
                    };
                    if (t instanceof RegExp || s(t)) {
                        let r = t.flags;
                        if (void 0 === r) {
                            const e = t.toString().match(/[gimuy]*$/);
                            e && (r = e[0]);
                        }
                        return new $t(t.source, r).toExtendedJSON(e);
                    }
                    return null != t && "object" == typeof t ? function(t, e) {
                        if (null == t || "object" != typeof t) throw new g("not an object instance");
                        const r = t._bsontype;
                        if (void 0 === r) {
                            const r = {};
                            for (const n of Object.keys(t)){
                                e.seenObjects.push({
                                    propertyName: n,
                                    obj: null
                                });
                                try {
                                    const i = se(t[n], e);
                                    "__proto__" === n ? Object.defineProperty(r, n, {
                                        value: i,
                                        writable: !0,
                                        enumerable: !0,
                                        configurable: !0
                                    }) : r[n] = i;
                                } finally{
                                    e.seenObjects.pop();
                                }
                            }
                            return r;
                        }
                        if (null != t && "object" == typeof t && "string" == typeof t._bsontype && 6 !== t[l]) throw new _;
                        if (function(t) {
                            return null != t && "object" == typeof t && "_bsontype" in t && "string" == typeof t._bsontype;
                        }(t)) {
                            let n = t;
                            if ("function" != typeof n.toExtendedJSON) {
                                const e = ue[t._bsontype];
                                if (!e) throw new g("Unrecognized or invalid _bsontype: " + t._bsontype);
                                n = e(n);
                            }
                            return "Code" === r && n.scope ? n = new K(n.code, se(n.scope, e)) : "DBRef" === r && n.oid && (n = new W(se(n.collection, e), se(n.oid, e), se(n.db, e), se(n.fields, e))), n.toExtendedJSON(e);
                        }
                        throw new g("_bsontype must be a string, but was: " + typeof r);
                    }(t, e) : t;
                }
                const ue = {
                    Binary: (t)=>new U(t.value(), t.sub_type),
                    Code: (t)=>new K(t.code, t.scope),
                    DBRef: (t)=>new W(t.collection || t.namespace, t.oid, t.db, t.fields),
                    Decimal128: (t)=>new yt(t.bytes),
                    Double: (t)=>new bt(t.value),
                    Int32: (t)=>new mt(t.value),
                    Long: (t)=>rt.fromBits(null != t.low ? t.low : t.low_, null != t.low ? t.high : t.high_, null != t.low ? t.unsigned : t.unsigned_),
                    MaxKey: ()=>new vt,
                    MinKey: ()=>new gt,
                    ObjectId: (t)=>new St(t),
                    BSONRegExp: (t)=>new $t(t.pattern, t.options),
                    BSONSymbol: (t)=>new Et(t.value),
                    Timestamp: (t)=>Pt.fromBits(t.low, t.high)
                };
                function ce(t, e) {
                    const r = {
                        useBigInt64: e?.useBigInt64 ?? !1,
                        relaxed: e?.relaxed ?? !0,
                        legacy: e?.legacy ?? !1
                    };
                    return JSON.parse(t, (t, e)=>{
                        if (-1 !== t.indexOf("\0")) throw new g(`BSON Document field names cannot contain null bytes, found: ${JSON.stringify(t)}`);
                        return oe(e, r);
                    });
                }
                function fe(t, e, r, n) {
                    null != r && "object" == typeof r && (n = r, r = 0), null == e || "object" != typeof e || Array.isArray(e) || (n = e, e = void 0, r = 0);
                    const i = se(t, Object.assign({
                        relaxed: !0,
                        legacy: !1
                    }, n, {
                        seenObjects: [
                            {
                                propertyName: "(root)",
                                obj: null
                            }
                        ]
                    }));
                    return JSON.stringify(i, e, r);
                }
                const le = Object.create(null);
                function he(t, e) {
                    try {
                        return C.getNonnegativeInt32LE(t, e);
                    } catch (t) {
                        throw new S("BSON size cannot be negative", e, {
                            cause: t
                        });
                    }
                }
                function pe(t, e) {
                    let r = e;
                    for(; 0 !== t[r]; r++);
                    if (r === t.length - 1) throw new S("Null terminator not found", e);
                    return r;
                }
                le.parse = ce, le.stringify = fe, le.serialize = function(t, e) {
                    return e = e || {}, JSON.parse(fe(t, e));
                }, le.deserialize = function(t, e) {
                    return e = e || {}, ce(JSON.stringify(t), e);
                }, Object.freeze(le);
                const de = Object.create(null);
                de.parseToElements = function(t, e = 0) {
                    if (e ??= 0, t.length < 5) throw new S(`Input must be at least 5 bytes, got ${t.length} bytes`, e);
                    const r = he(t, e);
                    if (r > t.length - e) throw new S(`Parsed documentSize (${r} bytes) does not match input length (${t.length} bytes)`, e);
                    if (0 !== t[e + r - 1]) throw new S("BSON documents must end in 0x00", e + r);
                    const n = [];
                    let i = e + 4;
                    for(; i <= r + e;){
                        const o = t[i];
                        if (i += 1, 0 === o) {
                            if (i - e !== r) throw new S("Invalid 0x00 type byte", i);
                            break;
                        }
                        const a = i, s = pe(t, i) - a;
                        let u;
                        if (i += s + 1, 1 === o || 18 === o || 9 === o || 17 === o) u = 8;
                        else if (16 === o) u = 4;
                        else if (7 === o) u = 12;
                        else if (19 === o) u = 16;
                        else if (8 === o) u = 1;
                        else if (10 === o || 6 === o || 127 === o || 255 === o) u = 0;
                        else if (11 === o) u = pe(t, pe(t, i) + 1) + 1 - i;
                        else if (3 === o || 4 === o || 15 === o) u = he(t, i);
                        else {
                            if (2 !== o && 5 !== o && 12 !== o && 13 !== o && 14 !== o) throw new S(`Invalid 0x${o.toString(16).padStart(2, "0")} type byte`, i);
                            u = he(t, i) + 4, 5 === o && (u += 1), 12 === o && (u += 12);
                        }
                        if (u > r) throw new S("value reports length larger than document", i);
                        n.push([
                            o,
                            a,
                            s,
                            i,
                            u
                        ]), i += u;
                    }
                    return n;
                }, de.ByteUtils = I, de.NumberUtils = C, Object.freeze(de);
                const ye = 17825792;
                let be = I.allocate(ye);
                function me(t) {
                    be.length < t && (be = I.allocate(t));
                }
                function ve(t, e = {}) {
                    const r = "boolean" == typeof e.checkKeys && e.checkKeys, n = "boolean" == typeof e.serializeFunctions && e.serializeFunctions, i = "boolean" != typeof e.ignoreUndefined || e.ignoreUndefined, o = "number" == typeof e.minInternalBufferSize ? e.minInternalBufferSize : ye;
                    be.length < o && (be = I.allocate(o));
                    const a = ne(be, t, r, 0, 0, n, i, null), s = I.allocateUnsafe(a);
                    return s.set(be.subarray(0, a), 0), s;
                }
                function ge(t, e, r = {}) {
                    const n = "boolean" == typeof r.checkKeys && r.checkKeys, i = "boolean" == typeof r.serializeFunctions && r.serializeFunctions, o = "boolean" != typeof r.ignoreUndefined || r.ignoreUndefined, a = "number" == typeof r.index ? r.index : 0, s = ne(be, t, n, 0, 0, i, o, null);
                    return e.set(be.subarray(0, s), a), a + s - 1;
                }
                function _e(t, e = {}) {
                    return Mt(I.toLocalBufferType(t), e);
                }
                function we(t, e = {}) {
                    return Ot(t, "boolean" == typeof (e = e || {}).serializeFunctions && e.serializeFunctions, "boolean" != typeof e.ignoreUndefined || e.ignoreUndefined);
                }
                function Se(t, e, r, n, i, o) {
                    const a = Object.assign({
                        allowObjectSmallerThanBufferSize: !0,
                        index: 0
                    }, o), s = I.toLocalBufferType(t);
                    let u = e;
                    for(let t = 0; t < r; t++){
                        const e = C.getInt32LE(s, u);
                        a.index = u, n[i + t] = Mt(s, a), u += e;
                    }
                    return u;
                }
                var Oe = Object.freeze({
                    __proto__: null,
                    BSONError: g,
                    BSONOffsetError: S,
                    BSONRegExp: $t,
                    BSONRuntimeError: w,
                    BSONSymbol: Et,
                    BSONType: v,
                    BSONValue: R,
                    BSONVersionError: _,
                    Binary: U,
                    Code: K,
                    DBRef: W,
                    Decimal128: yt,
                    Double: bt,
                    EJSON: le,
                    Int32: mt,
                    Long: rt,
                    MaxKey: vt,
                    MinKey: gt,
                    ObjectId: St,
                    Timestamp: Pt,
                    UUID: z,
                    calculateObjectSize: we,
                    deserialize: _e,
                    deserializeStream: Se,
                    onDemand: de,
                    serialize: ve,
                    serializeWithBufferAndIndex: ge,
                    setInternalBufferSize: me
                });
                e.BSON = Oe, e.BSONError = g, e.BSONOffsetError = S, e.BSONRegExp = $t, e.BSONRuntimeError = w, e.BSONSymbol = Et, e.BSONType = v, e.BSONValue = R, e.BSONVersionError = _, e.Binary = U, e.Code = K, e.DBRef = W, e.Decimal128 = yt, e.Double = bt, e.EJSON = le, e.Int32 = mt, e.Long = rt, e.MaxKey = vt, e.MinKey = gt, e.ObjectId = St, e.Timestamp = Pt, e.UUID = z, e.calculateObjectSize = we, e.deserialize = _e, e.deserializeStream = Se, e.onDemand = de, e.serialize = ve, e.serializeWithBufferAndIndex = ge, e.setInternalBufferSize = me;
            },
            3219: (t)=>{
                "use strict";
                t.exports = JSON.parse('{"aes-128-ecb":{"cipher":"AES","key":128,"iv":0,"mode":"ECB","type":"block"},"aes-192-ecb":{"cipher":"AES","key":192,"iv":0,"mode":"ECB","type":"block"},"aes-256-ecb":{"cipher":"AES","key":256,"iv":0,"mode":"ECB","type":"block"},"aes-128-cbc":{"cipher":"AES","key":128,"iv":16,"mode":"CBC","type":"block"},"aes-192-cbc":{"cipher":"AES","key":192,"iv":16,"mode":"CBC","type":"block"},"aes-256-cbc":{"cipher":"AES","key":256,"iv":16,"mode":"CBC","type":"block"},"aes128":{"cipher":"AES","key":128,"iv":16,"mode":"CBC","type":"block"},"aes192":{"cipher":"AES","key":192,"iv":16,"mode":"CBC","type":"block"},"aes256":{"cipher":"AES","key":256,"iv":16,"mode":"CBC","type":"block"},"aes-128-cfb":{"cipher":"AES","key":128,"iv":16,"mode":"CFB","type":"stream"},"aes-192-cfb":{"cipher":"AES","key":192,"iv":16,"mode":"CFB","type":"stream"},"aes-256-cfb":{"cipher":"AES","key":256,"iv":16,"mode":"CFB","type":"stream"},"aes-128-cfb8":{"cipher":"AES","key":128,"iv":16,"mode":"CFB8","type":"stream"},"aes-192-cfb8":{"cipher":"AES","key":192,"iv":16,"mode":"CFB8","type":"stream"},"aes-256-cfb8":{"cipher":"AES","key":256,"iv":16,"mode":"CFB8","type":"stream"},"aes-128-cfb1":{"cipher":"AES","key":128,"iv":16,"mode":"CFB1","type":"stream"},"aes-192-cfb1":{"cipher":"AES","key":192,"iv":16,"mode":"CFB1","type":"stream"},"aes-256-cfb1":{"cipher":"AES","key":256,"iv":16,"mode":"CFB1","type":"stream"},"aes-128-ofb":{"cipher":"AES","key":128,"iv":16,"mode":"OFB","type":"stream"},"aes-192-ofb":{"cipher":"AES","key":192,"iv":16,"mode":"OFB","type":"stream"},"aes-256-ofb":{"cipher":"AES","key":256,"iv":16,"mode":"OFB","type":"stream"},"aes-128-ctr":{"cipher":"AES","key":128,"iv":16,"mode":"CTR","type":"stream"},"aes-192-ctr":{"cipher":"AES","key":192,"iv":16,"mode":"CTR","type":"stream"},"aes-256-ctr":{"cipher":"AES","key":256,"iv":16,"mode":"CTR","type":"stream"},"aes-128-gcm":{"cipher":"AES","key":128,"iv":12,"mode":"GCM","type":"auth"},"aes-192-gcm":{"cipher":"AES","key":192,"iv":12,"mode":"GCM","type":"auth"},"aes-256-gcm":{"cipher":"AES","key":256,"iv":12,"mode":"GCM","type":"auth"}}');
            },
            2951: (t)=>{
                "use strict";
                t.exports = JSON.parse('{"sha224WithRSAEncryption":{"sign":"rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"},"RSA-SHA224":{"sign":"ecdsa/rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"},"sha256WithRSAEncryption":{"sign":"rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"},"RSA-SHA256":{"sign":"ecdsa/rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"},"sha384WithRSAEncryption":{"sign":"rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"},"RSA-SHA384":{"sign":"ecdsa/rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"},"sha512WithRSAEncryption":{"sign":"rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"},"RSA-SHA512":{"sign":"ecdsa/rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"},"RSA-SHA1":{"sign":"rsa","hash":"sha1","id":"3021300906052b0e03021a05000414"},"ecdsa-with-SHA1":{"sign":"ecdsa","hash":"sha1","id":""},"sha256":{"sign":"ecdsa","hash":"sha256","id":""},"sha224":{"sign":"ecdsa","hash":"sha224","id":""},"sha384":{"sign":"ecdsa","hash":"sha384","id":""},"sha512":{"sign":"ecdsa","hash":"sha512","id":""},"DSA-SHA":{"sign":"dsa","hash":"sha1","id":""},"DSA-SHA1":{"sign":"dsa","hash":"sha1","id":""},"DSA":{"sign":"dsa","hash":"sha1","id":""},"DSA-WITH-SHA224":{"sign":"dsa","hash":"sha224","id":""},"DSA-SHA224":{"sign":"dsa","hash":"sha224","id":""},"DSA-WITH-SHA256":{"sign":"dsa","hash":"sha256","id":""},"DSA-SHA256":{"sign":"dsa","hash":"sha256","id":""},"DSA-WITH-SHA384":{"sign":"dsa","hash":"sha384","id":""},"DSA-SHA384":{"sign":"dsa","hash":"sha384","id":""},"DSA-WITH-SHA512":{"sign":"dsa","hash":"sha512","id":""},"DSA-SHA512":{"sign":"dsa","hash":"sha512","id":""},"DSA-RIPEMD160":{"sign":"dsa","hash":"rmd160","id":""},"ripemd160WithRSA":{"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"},"RSA-RIPEMD160":{"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"},"md5WithRSAEncryption":{"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"},"RSA-MD5":{"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"}}');
            },
            4589: (t)=>{
                "use strict";
                t.exports = JSON.parse('{"1.3.132.0.10":"secp256k1","1.3.132.0.33":"p224","1.2.840.10045.3.1.1":"p192","1.2.840.10045.3.1.7":"p256","1.3.132.0.34":"p384","1.3.132.0.35":"p521"}');
            },
            3241: (t)=>{
                "use strict";
                t.exports = JSON.parse('{"modp1":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"},"modp2":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"},"modp5":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"},"modp14":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"},"modp15":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"},"modp16":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"},"modp17":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"},"modp18":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"}}');
            },
            1636: (t)=>{
                "use strict";
                t.exports = {
                    rE: "6.6.1"
                };
            },
            5579: (t)=>{
                "use strict";
                t.exports = JSON.parse('{"2.16.840.1.101.3.4.1.1":"aes-128-ecb","2.16.840.1.101.3.4.1.2":"aes-128-cbc","2.16.840.1.101.3.4.1.3":"aes-128-ofb","2.16.840.1.101.3.4.1.4":"aes-128-cfb","2.16.840.1.101.3.4.1.21":"aes-192-ecb","2.16.840.1.101.3.4.1.22":"aes-192-cbc","2.16.840.1.101.3.4.1.23":"aes-192-ofb","2.16.840.1.101.3.4.1.24":"aes-192-cfb","2.16.840.1.101.3.4.1.41":"aes-256-ecb","2.16.840.1.101.3.4.1.42":"aes-256-cbc","2.16.840.1.101.3.4.1.43":"aes-256-ofb","2.16.840.1.101.3.4.1.44":"aes-256-cfb"}');
            }
        }, e = {};
        function r(n) {
            var i = e[n];
            if (void 0 !== i) return i.exports;
            var o = e[n] = {
                id: n,
                loaded: !1,
                exports: {}
            };
            return t[n].call(o.exports, o, o.exports, r), o.loaded = !0, o.exports;
        }
        return r.g = function() {
            if ("object" == typeof globalThis) return globalThis;
            try {
                return this || new Function("return this")();
            } catch (t) {
                if ("object" == typeof window) return window;
            }
        }(), r.nmd = (t)=>(t.paths = [], t.children || (t.children = []), t), r(4829);
    })());

},{}],"k9sH4":[function(require,module,exports,__globalThis) {
var Buffer = require("1b1fb71284cbc202").Buffer;
const crypto = require("eebee869da198d40");
const LocalStrategy = require("33a35635ac53fff").Strategy;
const pbkdf2 = require("651083f83f208631");
const errors = require("2595580c4678aaf8");
const authenticate = require("7dc0f55fb4f5ee5c");
module.exports = function(schema, options) {
    options = options || {};
    options.saltlen = options.saltlen || 32;
    options.iterations = options.iterations || 25000;
    options.keylen = options.keylen || 512;
    options.encoding = options.encoding || 'hex';
    options.digestAlgorithm = options.digestAlgorithm || 'sha256'; // To get a list of supported hashes use crypto.getHashes()
    function defaultPasswordValidator(password, cb) {
        cb(null);
    }
    function defaultPasswordValidatorAsync(password) {
        return new Promise((resolve, reject)=>{
            options.passwordValidator(password, (err)=>err ? reject(err) : resolve());
        });
    }
    options.passwordValidator = options.passwordValidator || defaultPasswordValidator;
    options.passwordValidatorAsync = options.passwordValidatorAsync || defaultPasswordValidatorAsync;
    // Populate field names with defaults if not set
    options.usernameField = options.usernameField || 'username';
    options.usernameUnique = options.usernameUnique === undefined ? true : options.usernameUnique;
    // Populate username query fields with defaults if not set,
    // otherwise add username field to query fields.
    if (options.usernameQueryFields) options.usernameQueryFields.push(options.usernameField);
    else options.usernameQueryFields = [
        options.usernameField
    ];
    // option to find username case insensitively
    options.usernameCaseInsensitive = Boolean(options.usernameCaseInsensitive || false);
    // option to convert username to lowercase when finding
    options.usernameLowerCase = options.usernameLowerCase || false;
    options.hashField = options.hashField || 'hash';
    options.saltField = options.saltField || 'salt';
    if (options.limitAttempts) {
        options.lastLoginField = options.lastLoginField || 'last';
        options.attemptsField = options.attemptsField || 'attempts';
        options.interval = options.interval || 100; // 100 ms
        options.maxInterval = options.maxInterval || 300000; // 5 min
        options.maxAttempts = options.maxAttempts || Infinity;
    }
    options.findByUsername = options.findByUsername || function(model, queryParameters) {
        return model.findOne(queryParameters);
    };
    options.errorMessages = options.errorMessages || {};
    options.errorMessages.MissingPasswordError = options.errorMessages.MissingPasswordError || 'No password was given';
    options.errorMessages.AttemptTooSoonError = options.errorMessages.AttemptTooSoonError || 'Account is currently locked. Try again later';
    options.errorMessages.TooManyAttemptsError = options.errorMessages.TooManyAttemptsError || 'Account locked due to too many failed login attempts';
    options.errorMessages.NoSaltValueStoredError = options.errorMessages.NoSaltValueStoredError || 'Authentication not possible. No salt value stored';
    options.errorMessages.IncorrectPasswordError = options.errorMessages.IncorrectPasswordError || 'Password or username is incorrect';
    options.errorMessages.IncorrectUsernameError = options.errorMessages.IncorrectUsernameError || 'Password or username is incorrect';
    options.errorMessages.MissingUsernameError = options.errorMessages.MissingUsernameError || 'No username was given';
    options.errorMessages.UserExistsError = options.errorMessages.UserExistsError || 'A user with the given username is already registered';
    const schemaFields = {};
    if (!schema.path(options.usernameField)) schemaFields[options.usernameField] = {
        type: String,
        unique: options.usernameUnique
    };
    schemaFields[options.hashField] = {
        type: String,
        select: false
    };
    schemaFields[options.saltField] = {
        type: String,
        select: false
    };
    if (options.limitAttempts) {
        schemaFields[options.attemptsField] = {
            type: Number,
            default: 0
        };
        schemaFields[options.lastLoginField] = {
            type: Date,
            default: Date.now
        };
    }
    schema.add(schemaFields);
    schema.pre('save', function(next) {
        if (options.usernameLowerCase && this[options.usernameField]) this[options.usernameField] = this[options.usernameField].toLowerCase();
        next();
    });
    schema.methods.setPassword = function(password, cb) {
        const promise = Promise.resolve().then(()=>{
            if (!password) throw new errors.MissingPasswordError(options.errorMessages.MissingPasswordError);
        }).then(()=>options.passwordValidatorAsync(password)).then(()=>randomBytes(options.saltlen)).then((saltBuffer)=>saltBuffer.toString(options.encoding)).then((salt)=>{
            this.set(options.saltField, salt);
            return salt;
        }).then((salt)=>pbkdf2Promisified(password, salt, options)).then((hashRaw)=>{
            this.set(options.hashField, Buffer.from(hashRaw, 'binary').toString(options.encoding));
        }).then(()=>this);
        if (!cb) return promise;
        promise.then((result)=>cb(null, result)).catch((err)=>cb(err));
    };
    schema.methods.changePassword = function(oldPassword, newPassword, cb) {
        const promise = Promise.resolve().then(()=>{
            if (!oldPassword || !newPassword) throw new errors.MissingPasswordError(options.errorMessages.MissingPasswordError);
        }).then(()=>this.authenticate(oldPassword)).then(({ user, error })=>{
            if (!user) throw error;
        }).then(()=>this.setPassword(newPassword)).then(()=>this.save()).then(()=>this);
        if (!cb) return promise;
        promise.then((result)=>cb(null, result)).catch((err)=>cb(err));
    };
    schema.methods.authenticate = function(password, cb) {
        const promise = Promise.resolve().then(()=>{
            if (this.get(options.saltField)) return authenticate(this, password, options);
            return this.constructor.findByUsername(this.get(options.usernameField), true).then((user)=>{
                if (user) return authenticate(user, password, options);
                return {
                    user: false,
                    error: new errors.IncorrectUsernameError(options.errorMessages.IncorrectUsernameError)
                };
            });
        });
        if (!cb) return promise;
        promise.then(({ user, error })=>cb(null, user, error)).catch((err)=>cb(err));
    };
    if (options.limitAttempts) schema.methods.resetAttempts = function(cb) {
        const promise = Promise.resolve().then(()=>{
            this.set(options.attemptsField, 0);
            return this.save();
        });
        if (!cb) return promise;
        promise.then((result)=>cb(null, result)).catch((err)=>cb(err));
    };
    // Passport Local Interface
    schema.statics.authenticate = function() {
        return (username, password, cb)=>{
            const promise = Promise.resolve().then(()=>this.findByUsername(username, true)).then((user)=>{
                if (user) return user.authenticate(password);
                return {
                    user: false,
                    error: new errors.IncorrectUsernameError(options.errorMessages.IncorrectUsernameError)
                };
            });
            if (!cb) return promise;
            promise.then(({ user, error })=>cb(null, user, error)).catch((err)=>cb(err));
        };
    };
    // Passport Interface
    schema.statics.serializeUser = function() {
        return function(user, cb) {
            cb(null, user.get(options.usernameField));
        };
    };
    schema.statics.deserializeUser = function() {
        return (username, cb)=>{
            this.findByUsername(username, cb);
        };
    };
    schema.statics.register = function(user, password, cb) {
        // Create an instance of this in case user isn't already an instance
        if (!(user instanceof this)) user = new this(user);
        const promise = Promise.resolve().then(()=>{
            if (!user.get(options.usernameField)) throw new errors.MissingUsernameError(options.errorMessages.MissingUsernameError);
        }).then(()=>this.findByUsername(user.get(options.usernameField))).then((existingUser)=>{
            if (existingUser) throw new errors.UserExistsError(options.errorMessages.UserExistsError);
        }).then(()=>user.setPassword(password)).then(()=>user.save());
        if (!cb) return promise;
        promise.then((result)=>cb(null, result)).catch((err)=>cb(err));
    };
    schema.statics.findByUsername = function(username, opts, cb) {
        if (typeof opts === 'function') {
            cb = opts;
            opts = {};
        }
        if (typeof opts == 'boolean') opts = {
            selectHashSaltFields: opts
        };
        opts = opts || {};
        opts.selectHashSaltFields = !!opts.selectHashSaltFields;
        // if specified, convert the username to lowercase
        if (username !== undefined && options.usernameLowerCase) username = username.toLowerCase();
        // escape regex tokens
        if (username !== undefined && options.usernameCaseInsensitive) username = username.replace(/[!#$()*+\-./:<=>?[\\\]^{|}]/g, '\\$&');
        // Add each username query field
        const queryOrParameters = [];
        for(let i = 0; i < options.usernameQueryFields.length; i++){
            const parameter = {};
            parameter[options.usernameQueryFields[i]] = options.usernameCaseInsensitive ? new RegExp(`^${username}$`, 'i') : username;
            queryOrParameters.push(parameter);
        }
        const query = options.findByUsername(this, {
            $or: queryOrParameters
        });
        if (opts.selectHashSaltFields) query.select('+' + options.hashField + ' +' + options.saltField);
        if (options.selectFields) query.select(options.selectFields);
        if (options.populateFields) query.populate(options.populateFields);
        if (cb) {
            query.exec().then((user)=>cb(null, user)).catch(cb);
            return;
        }
        return query;
    };
    schema.statics.createStrategy = function() {
        return new LocalStrategy(options, this.authenticate());
    };
};
function pbkdf2Promisified(password, salt, options) {
    return new Promise((resolve, reject)=>pbkdf2(password, salt, options, (err, hashRaw)=>err ? reject(err) : resolve(hashRaw)));
}
function randomBytes(saltlen) {
    return new Promise((resolve, reject)=>crypto.randomBytes(saltlen, (err, saltBuffer)=>err ? reject(err) : resolve(saltBuffer)));
}
module.exports.errors = errors;

},{"1b1fb71284cbc202":"fCgem","eebee869da198d40":"hagNj","33a35635ac53fff":"aJdAt","651083f83f208631":"b76Dk","2595580c4678aaf8":"aQDVO","7dc0f55fb4f5ee5c":"jqnbV"}],"fCgem":[function(require,module,exports,__globalThis) {
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ 'use strict';
const base64 = require("9c62938f1dccc73c");
const ieee754 = require("aceacb6a4531a9d2");
const customInspectSymbol = typeof Symbol === 'function' && typeof Symbol['for'] === 'function' // eslint-disable-line dot-notation
 ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
 : null;
exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
const K_MAX_LENGTH = 0x7fffffff;
exports.kMaxLength = K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        const arr = new Uint8Array(1);
        const proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty(Buffer.prototype, 'parent', {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty(Buffer.prototype, 'offset', {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function createBuffer(length) {
    if (length > K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    const buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') throw new TypeError('The "string" argument must be of type string. Received type number');
        return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
}
Buffer.poolSize = 8192 // not used by this implementation
;
function from(value, encodingOrOffset, length) {
    if (typeof value === 'string') return fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== 'undefined' && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === 'number') throw new TypeError('The "value" argument must not be of type number. Received type number');
    const valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return Buffer.from(valueOf, encodingOrOffset, length);
    const b = fromObject(value);
    if (b) return b;
    if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ Buffer.from = function(value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf(Buffer, Uint8Array);
function assertSize(size) {
    if (typeof size !== 'number') throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function alloc(size, fill, encoding) {
    assertSize(size);
    if (size <= 0) return createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    return createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ Buffer.alloc = function(size, fill, encoding) {
    return alloc(size, fill, encoding);
};
function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ Buffer.allocUnsafe = function(size) {
    return allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ Buffer.allocUnsafeSlow = function(size) {
    return allocUnsafe(size);
};
function fromString(string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8';
    if (!Buffer.isEncoding(encoding)) throw new TypeError('Unknown encoding: ' + encoding);
    const length = byteLength(string, encoding) | 0;
    let buf = createBuffer(length);
    const actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function fromArrayLike(array) {
    const length = array.length < 0 ? 0 : checked(array.length) | 0;
    const buf = createBuffer(length);
    for(let i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
        const copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
}
function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    let buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
function fromObject(obj) {
    if (Buffer.isBuffer(obj)) {
        const len = checked(obj.length) | 0;
        const buf = createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) return createBuffer(0);
        return fromArrayLike(obj);
    }
    if (obj.type === 'Buffer' && Array.isArray(obj.data)) return fromArrayLike(obj.data);
}
function checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + ' bytes');
    return length | 0;
}
function SlowBuffer(length) {
    if (+length != length) length = 0;
    return Buffer.alloc(+length);
}
Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
Buffer.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    let x = a.length;
    let y = b.length;
    for(let i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return true;
        default:
            return false;
    }
};
Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return Buffer.alloc(0);
    let i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    const buffer = Buffer.allocUnsafe(length);
    let pos = 0;
    for(i = 0; i < list.length; ++i){
        let buf = list[i];
        if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) {
                if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
                buf.copy(buffer, pos);
            } else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function byteLength(string, encoding) {
    if (Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== 'string') throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);
    const len = string.length;
    const mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    let loweredCase = false;
    for(;;)switch(encoding){
        case 'ascii':
        case 'latin1':
        case 'binary':
            return len;
        case 'utf8':
        case 'utf-8':
            return utf8ToBytes(string).length;
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return len * 2;
        case 'hex':
            return len >>> 1;
        case 'base64':
            return base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
            ;
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
    }
}
Buffer.byteLength = byteLength;
function slowToString(encoding, start, end) {
    let loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return '';
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return '';
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return '';
    if (!encoding) encoding = 'utf8';
    while(true)switch(encoding){
        case 'hex':
            return hexSlice(this, start, end);
        case 'utf8':
        case 'utf-8':
            return utf8Slice(this, start, end);
        case 'ascii':
            return asciiSlice(this, start, end);
        case 'latin1':
        case 'binary':
            return latin1Slice(this, start, end);
        case 'base64':
            return base64Slice(this, start, end);
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
            encoding = (encoding + '').toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true;
function swap(b, n, m) {
    const i = b[n];
    b[n] = b[m];
    b[m] = i;
}
Buffer.prototype.swap16 = function swap16() {
    const len = this.length;
    if (len % 2 !== 0) throw new RangeError('Buffer size must be a multiple of 16-bits');
    for(let i = 0; i < len; i += 2)swap(this, i, i + 1);
    return this;
};
Buffer.prototype.swap32 = function swap32() {
    const len = this.length;
    if (len % 4 !== 0) throw new RangeError('Buffer size must be a multiple of 32-bits');
    for(let i = 0; i < len; i += 4){
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
    }
    return this;
};
Buffer.prototype.swap64 = function swap64() {
    const len = this.length;
    if (len % 8 !== 0) throw new RangeError('Buffer size must be a multiple of 64-bits');
    for(let i = 0; i < len; i += 8){
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
    }
    return this;
};
Buffer.prototype.toString = function toString() {
    const length = this.length;
    if (length === 0) return '';
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
};
Buffer.prototype.toLocaleString = Buffer.prototype.toString;
Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
};
Buffer.prototype.inspect = function inspect() {
    let str = '';
    const max = exports.INSPECT_MAX_BYTES;
    str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
    if (this.length > max) str += ' ... ';
    return '<Buffer ' + str + '>';
};
if (customInspectSymbol) Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) target = Buffer.from(target, target.offset, target.byteLength);
    if (!Buffer.isBuffer(target)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError('out of range index');
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    let x = thisEnd - thisStart;
    let y = end - start;
    const len = Math.min(x, y);
    const thisCopy = this.slice(thisStart, thisEnd);
    const targetCopy = target.slice(start, end);
    for(let i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if (numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === 'string') val = Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === 'number') {
        val = val & 0xFF // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === 'function') {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError('val must be string, number or Buffer');
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    let indexSize = 1;
    let arrLength = arr.length;
    let valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    let i;
    if (dir) {
        let foundIndex = -1;
        for(i = byteOffset; i < arrLength; i++)if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i = byteOffset; i >= 0; i--){
            let found = true;
            for(let j = 0; j < valLength; j++)if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i;
        }
    }
    return -1;
}
Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    const remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    const strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    let i;
    for(i = 0; i < length; ++i){
        const parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = 'utf8';
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = 'utf8';
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
    const remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError('Attempt to write outside buffer bounds');
    if (!encoding) encoding = 'utf8';
    let loweredCase = false;
    for(;;)switch(encoding){
        case 'hex':
            return hexWrite(this, string, offset, length);
        case 'utf8':
        case 'utf-8':
            return utf8Write(this, string, offset, length);
        case 'ascii':
        case 'latin1':
        case 'binary':
            return asciiWrite(this, string, offset, length);
        case 'base64':
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length);
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
    }
};
Buffer.prototype.toJSON = function toJSON() {
    return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return base64.fromByteArray(buf);
    else return base64.fromByteArray(buf.slice(start, end));
}
function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    const res = [];
    let i = start;
    while(i < end){
        const firstByte = buf[i];
        let codePoint = null;
        let bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 0x80) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                        if (tempCodePoint > 0x7F) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xFFFD;
            bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3FF | 0xD800);
            codePoint = 0xDC00 | codePoint & 0x3FF;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
const MAX_ARGUMENTS_LENGTH = 0x1000;
function decodeCodePointsArray(codePoints) {
    const len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    let res = '';
    let i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    return res;
}
function asciiSlice(buf, start, end) {
    let ret = '';
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 0x7F);
    return ret;
}
function latin1Slice(buf, start, end) {
    let ret = '';
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function hexSlice(buf, start, end) {
    const len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    let out = '';
    for(let i = start; i < end; ++i)out += hexSliceLookupTable[buf[i]];
    return out;
}
function utf16leSlice(buf, start, end) {
    const bytes = buf.slice(start, end);
    let res = '';
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(let i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
Buffer.prototype.slice = function slice(start, end) {
    const len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    const newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}
Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    return val;
};
Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let val = this[offset + --byteLength];
    let mul = 1;
    while(byteLength > 0 && (mul *= 0x100))val += this[offset + --byteLength] * mul;
    return val;
};
Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
};
Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, 'offset');
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const lo = first + this[++offset] * 256 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
    const hi = this[++offset] + this[++offset] * 256 + this[++offset] * 2 ** 16 + last * 2 ** 24;
    return BigInt(lo) + (BigInt(hi) << BigInt(32));
});
Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, 'offset');
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 256 + this[++offset];
    const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 256 + last;
    return (BigInt(hi) << BigInt(32)) + BigInt(lo);
});
Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let i = byteLength;
    let mul = 1;
    let val = this[offset + --i];
    while(i > 0 && (mul *= 0x100))val += this[offset + --i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
};
Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, 'offset');
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const val = this[offset + 4] + this[offset + 5] * 256 + this[offset + 6] * 2 ** 16 + (last << 24 // Overflow
    );
    return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 256 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
});
Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, 'offset');
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const val = (first << 24) + // Overflow
    this[++offset] * 2 ** 16 + this[++offset] * 256 + this[++offset];
    return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 256 + last);
});
Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
};
Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
};
Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
};
Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
}
Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    let mul = 1;
    let i = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    let i = byteLength - 1;
    let mul = 1;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
function wrtBigUInt64LE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(0xffffffff));
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    return offset;
}
function wrtBigUInt64BE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(0xffffffff));
    buf[offset + 7] = lo;
    lo = lo >> 8;
    buf[offset + 6] = lo;
    lo = lo >> 8;
    buf[offset + 5] = lo;
    lo = lo >> 8;
    buf[offset + 4] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset + 3] = hi;
    hi = hi >> 8;
    buf[offset + 2] = hi;
    hi = hi >> 8;
    buf[offset + 1] = hi;
    hi = hi >> 8;
    buf[offset] = hi;
    return offset + 8;
}
Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'));
});
Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'));
});
Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    let i = 0;
    let mul = 1;
    let sub = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    let i = byteLength - 1;
    let mul = 1;
    let sub = 0;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -128);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (value < 0) value = 0xffffffff + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'));
});
Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'));
});
function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
    if (offset < 0) throw new RangeError('Index out of range');
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -340282346638528860000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
};
Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
};
Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError('targetStart out of bounds');
    if (start < 0 || start >= this.length) throw new RangeError('Index out of range');
    if (end < 0) throw new RangeError('sourceEnd out of bounds');
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    const len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
        if (typeof start === 'string') {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === 'string') {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== 'string') throw new TypeError('encoding must be a string');
        if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) throw new TypeError('Unknown encoding: ' + encoding);
        if (val.length === 1) {
            const code = val.charCodeAt(0);
            if (encoding === 'utf8' && code < 128 || encoding === 'latin1') // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === 'number') val = val & 255;
    else if (typeof val === 'boolean') val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError('Out of range index');
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    let i;
    if (typeof val === 'number') for(i = start; i < end; ++i)this[i] = val;
    else {
        const bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
        const len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// CUSTOM ERRORS
// =============
// Simplified versions from Node, changed for Buffer-only usage
const errors = {};
function E(sym, getMessage, Base) {
    errors[sym] = class NodeError extends Base {
        constructor(){
            super();
            Object.defineProperty(this, 'message', {
                value: getMessage.apply(this, arguments),
                writable: true,
                configurable: true
            });
            // Add the error code to the name to include it in the stack trace.
            this.name = `${this.name} [${sym}]`;
            // Access the stack to generate the error message including the error code
            // from the name.
            this.stack // eslint-disable-line no-unused-expressions
            ;
            // Reset the name to the actual name.
            delete this.name;
        }
        get code() {
            return sym;
        }
        set code(value) {
            Object.defineProperty(this, 'code', {
                configurable: true,
                enumerable: true,
                value,
                writable: true
            });
        }
        toString() {
            return `${this.name} [${sym}]: ${this.message}`;
        }
    };
}
E('ERR_BUFFER_OUT_OF_BOUNDS', function(name) {
    if (name) return `${name} is outside of buffer bounds`;
    return 'Attempt to access memory outside buffer bounds';
}, RangeError);
E('ERR_INVALID_ARG_TYPE', function(name, actual) {
    return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
}, TypeError);
E('ERR_OUT_OF_RANGE', function(str, range, input) {
    let msg = `The value of "${str}" is out of range.`;
    let received = input;
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) received = addNumericalSeparator(String(input));
    else if (typeof input === 'bigint') {
        received = String(input);
        if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) received = addNumericalSeparator(received);
        received += 'n';
    }
    msg += ` It must be ${range}. Received ${received}`;
    return msg;
}, RangeError);
function addNumericalSeparator(val) {
    let res = '';
    let i = val.length;
    const start = val[0] === '-' ? 1 : 0;
    for(; i >= start + 4; i -= 3)res = `_${val.slice(i - 3, i)}${res}`;
    return `${val.slice(0, i)}${res}`;
}
// CHECK FUNCTIONS
// ===============
function checkBounds(buf, offset, byteLength) {
    validateNumber(offset, 'offset');
    if (buf[offset] === undefined || buf[offset + byteLength] === undefined) boundsError(offset, buf.length - (byteLength + 1));
}
function checkIntBI(value, min, max, buf, offset, byteLength) {
    if (value > max || value < min) {
        const n = typeof min === 'bigint' ? 'n' : '';
        let range;
        if (byteLength > 3) {
            if (min === 0 || min === BigInt(0)) range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`;
            else range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` + `${(byteLength + 1) * 8 - 1}${n}`;
        } else range = `>= ${min}${n} and <= ${max}${n}`;
        throw new errors.ERR_OUT_OF_RANGE('value', range, value);
    }
    checkBounds(buf, offset, byteLength);
}
function validateNumber(value, name) {
    if (typeof value !== 'number') throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value);
}
function boundsError(value, length, type) {
    if (Math.floor(value) !== value) {
        validateNumber(value, type);
        throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value);
    }
    if (length < 0) throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', `>= ${type ? 1 : 0} and <= ${length}`, value);
}
// HELPER FUNCTIONS
// ================
const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split('=')[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace(INVALID_BASE64_RE, '');
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return '';
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + '=';
    return str;
}
function utf8ToBytes(string, units) {
    units = units || Infinity;
    let codePoint;
    const length = string.length;
    let leadSurrogate = null;
    const bytes = [];
    for(let i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else throw new Error('Invalid code point');
    }
    return bytes;
}
function asciiToBytes(str) {
    const byteArray = [];
    for(let i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
    return byteArray;
}
function utf16leToBytes(str, units) {
    let c, hi, lo;
    const byteArray = [];
    for(let i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
    let i;
    for(i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
const hexSliceLookupTable = function() {
    const alphabet = '0123456789abcdef';
    const table = new Array(256);
    for(let i = 0; i < 16; ++i){
        const i16 = i * 16;
        for(let j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();
// Return not function with Error if BigInt not supported
function defineBigIntMethod(fn) {
    return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn;
}
function BufferBigIntNotDefined() {
    throw new Error('BigInt not supported');
}

},{"9c62938f1dccc73c":"eIiSV","aceacb6a4531a9d2":"cO95r"}],"eIiSV":[function(require,module,exports,__globalThis) {
'use strict';
exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for(var i = 0, len = code.length; i < len; ++i){
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;
function getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) throw new Error('Invalid string. Length must be a multiple of 4');
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf('=');
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    return arr;
}
function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}
function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
        output.push(tripletToBase64(tmp));
    }
    return output.join('');
}
function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
    }
    return parts.join('');
}

},{}],"cO95r":[function(require,module,exports,__globalThis) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ exports.read = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};

},{}],"hagNj":[function(require,module,exports,__globalThis) {
'use strict';
// eslint-disable-next-line no-multi-assign
exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require("9f84b01a6f751e2b");
// eslint-disable-next-line no-multi-assign
exports.createHash = exports.Hash = require("6215218888164bf3");
// eslint-disable-next-line no-multi-assign
exports.createHmac = exports.Hmac = require("41dc42cb22bbf5f8");
var algos = require("acce2639fd57a8ee");
var algoKeys = Object.keys(algos);
var hashes = [
    'sha1',
    'sha224',
    'sha256',
    'sha384',
    'sha512',
    'md5',
    'rmd160'
].concat(algoKeys);
exports.getHashes = function() {
    return hashes;
};
var p = require("b26231bc996405c3");
exports.pbkdf2 = p.pbkdf2;
exports.pbkdf2Sync = p.pbkdf2Sync;
var aes = require("cd296f7efacbf3dd");
exports.Cipher = aes.Cipher;
exports.createCipher = aes.createCipher;
exports.Cipheriv = aes.Cipheriv;
exports.createCipheriv = aes.createCipheriv;
exports.Decipher = aes.Decipher;
exports.createDecipher = aes.createDecipher;
exports.Decipheriv = aes.Decipheriv;
exports.createDecipheriv = aes.createDecipheriv;
exports.getCiphers = aes.getCiphers;
exports.listCiphers = aes.listCiphers;
var dh = require("f35f6f689077fd07");
exports.DiffieHellmanGroup = dh.DiffieHellmanGroup;
exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup;
exports.getDiffieHellman = dh.getDiffieHellman;
exports.createDiffieHellman = dh.createDiffieHellman;
exports.DiffieHellman = dh.DiffieHellman;
var sign = require("e955328ff9b7dd32");
exports.createSign = sign.createSign;
exports.Sign = sign.Sign;
exports.createVerify = sign.createVerify;
exports.Verify = sign.Verify;
exports.createECDH = require("84e3bfaa4f6c843e");
var publicEncrypt = require("eeb59405cf029b93");
exports.publicEncrypt = publicEncrypt.publicEncrypt;
exports.privateEncrypt = publicEncrypt.privateEncrypt;
exports.publicDecrypt = publicEncrypt.publicDecrypt;
exports.privateDecrypt = publicEncrypt.privateDecrypt;
// the least I can do is make error messages for the rest of the node.js/crypto api.
// [
//   'createCredentials'
// ].forEach(function (name) {
//   exports[name] = function () {
//     throw new Error('sorry, ' + name + ' is not implemented yet\nwe accept pull requests\nhttps://github.com/browserify/crypto-browserify');
//   };
// });
var rf = require("327f527258516f60");
exports.randomFill = rf.randomFill;
exports.randomFillSync = rf.randomFillSync;
exports.createCredentials = function() {
    throw new Error('sorry, createCredentials is not implemented yet\nwe accept pull requests\nhttps://github.com/browserify/crypto-browserify');
};
exports.constants = {
    DH_CHECK_P_NOT_SAFE_PRIME: 2,
    DH_CHECK_P_NOT_PRIME: 1,
    DH_UNABLE_TO_CHECK_GENERATOR: 4,
    DH_NOT_SUITABLE_GENERATOR: 8,
    NPN_ENABLED: 1,
    ALPN_ENABLED: 1,
    RSA_PKCS1_PADDING: 1,
    RSA_SSLV23_PADDING: 2,
    RSA_NO_PADDING: 3,
    RSA_PKCS1_OAEP_PADDING: 4,
    RSA_X931_PADDING: 5,
    RSA_PKCS1_PSS_PADDING: 6,
    POINT_CONVERSION_COMPRESSED: 2,
    POINT_CONVERSION_UNCOMPRESSED: 4,
    POINT_CONVERSION_HYBRID: 6
};

},{"9f84b01a6f751e2b":"8hjhE","6215218888164bf3":"2WyL8","41dc42cb22bbf5f8":"k1utz","acce2639fd57a8ee":"busIB","b26231bc996405c3":"g38Hg","cd296f7efacbf3dd":"d4idn","f35f6f689077fd07":"hwD3y","e955328ff9b7dd32":"jbRNy","84e3bfaa4f6c843e":"9Rcg1","eeb59405cf029b93":"h9Rdh","327f527258516f60":"k3tsT"}],"8hjhE":[function(require,module,exports,__globalThis) {
var global = arguments[3];
var process = require("9f5c61be6bd9c67a");
'use strict';
// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
var MAX_BYTES = 65536;
// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
var MAX_UINT32 = 4294967295;
function oldBrowser() {
    throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11');
}
var Buffer = require("caff9346743c214e").Buffer;
var crypto = global.crypto || global.msCrypto;
if (crypto && crypto.getRandomValues) module.exports = randomBytes;
else module.exports = oldBrowser;
function randomBytes(size, cb) {
    // phantomjs needs to throw
    if (size > MAX_UINT32) throw new RangeError('requested too many random bytes');
    var bytes = Buffer.allocUnsafe(size);
    if (size > 0) {
        if (size > MAX_BYTES) // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
        for(var generated = 0; generated < size; generated += MAX_BYTES)// buffer.slice automatically checks if the end is past the end of
        // the buffer so we don't have to here
        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES));
        else crypto.getRandomValues(bytes);
    }
    if (typeof cb === 'function') return process.nextTick(function() {
        cb(null, bytes);
    });
    return bytes;
}

},{"9f5c61be6bd9c67a":"d5jf4","caff9346743c214e":"eW7r9"}],"d5jf4":[function(require,module,exports,__globalThis) {
// shim for using process in browser
var process = module.exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function() {
    try {
        if (typeof setTimeout === 'function') cachedSetTimeout = setTimeout;
        else cachedSetTimeout = defaultSetTimout;
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') cachedClearTimeout = clearTimeout;
        else cachedClearTimeout = defaultClearTimeout;
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) return;
    draining = false;
    if (currentQueue.length) queue = currentQueue.concat(queue);
    else queueIndex = -1;
    if (queue.length) drainQueue();
}
function drainQueue() {
    if (draining) return;
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len){
        currentQueue = queue;
        queue = [];
        while(++queueIndex < len)if (currentQueue) currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) runTimeout(drainQueue);
};
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};
function noop() {}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(name) {
    return [];
};
process.binding = function(name) {
    throw new Error('process.binding is not supported');
};
process.cwd = function() {
    return '/';
};
process.chdir = function(dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() {
    return 0;
};

},{}],"eW7r9":[function(require,module,exports,__globalThis) {
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */ /* eslint-disable node/no-deprecated-api */ var buffer = require("7e0d6ecd698c3ca6");
var Buffer = buffer.Buffer;
// alternative to using Object.keys for old browsers
function copyProps(src, dst) {
    for(var key in src)dst[key] = src[key];
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) module.exports = buffer;
else {
    // Copy properties from require('buffer')
    copyProps(buffer, exports);
    exports.Buffer = SafeBuffer;
}
function SafeBuffer(arg, encodingOrOffset, length) {
    return Buffer(arg, encodingOrOffset, length);
}
SafeBuffer.prototype = Object.create(Buffer.prototype);
// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer);
SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === 'number') throw new TypeError('Argument must not be a number');
    return Buffer(arg, encodingOrOffset, length);
};
SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    var buf = Buffer(size);
    if (fill !== undefined) {
        if (typeof encoding === 'string') buf.fill(fill, encoding);
        else buf.fill(fill);
    } else buf.fill(0);
    return buf;
};
SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    return Buffer(size);
};
SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    return buffer.SlowBuffer(size);
};

},{"7e0d6ecd698c3ca6":"fCgem"}],"2WyL8":[function(require,module,exports,__globalThis) {
'use strict';
var inherits = require("45ce174cec337471");
var MD5 = require("4170b0039f3b4aab");
var RIPEMD160 = require("efcc6ede1fda4d98");
var sha = require("65b1a51ddac82548");
var Base = require("ac5a46c0f3b4d769");
function Hash(hash) {
    Base.call(this, 'digest');
    this._hash = hash;
}
inherits(Hash, Base);
Hash.prototype._update = function(data) {
    this._hash.update(data);
};
Hash.prototype._final = function() {
    return this._hash.digest();
};
module.exports = function createHash(alg) {
    alg = alg.toLowerCase();
    if (alg === 'md5') return new MD5();
    if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160();
    return new Hash(sha(alg));
};

},{"45ce174cec337471":"bRL3M","4170b0039f3b4aab":"45VeE","efcc6ede1fda4d98":"bFDDq","65b1a51ddac82548":"jkn7m","ac5a46c0f3b4d769":"g5fTz"}],"bRL3M":[function(require,module,exports,__globalThis) {
if (typeof Object.create === 'function') // implementation from standard node.js 'util' module
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
    }
};
else // old school shim for old browsers
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
};

},{}],"45VeE":[function(require,module,exports,__globalThis) {
'use strict';
var inherits = require("634114d48656c754");
var HashBase = require("4b170874b4cb8d4e");
var Buffer = require("72d4e45c6a42a2da").Buffer;
var ARRAY16 = new Array(16);
function MD5() {
    HashBase.call(this, 64);
    // state
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
}
inherits(MD5, HashBase);
MD5.prototype._update = function() {
    var M = ARRAY16;
    for(var i = 0; i < 16; ++i)M[i] = this._block.readInt32LE(i * 4);
    var a = this._a;
    var b = this._b;
    var c = this._c;
    var d = this._d;
    a = fnF(a, b, c, d, M[0], 0xd76aa478, 7);
    d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12);
    c = fnF(c, d, a, b, M[2], 0x242070db, 17);
    b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22);
    a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7);
    d = fnF(d, a, b, c, M[5], 0x4787c62a, 12);
    c = fnF(c, d, a, b, M[6], 0xa8304613, 17);
    b = fnF(b, c, d, a, M[7], 0xfd469501, 22);
    a = fnF(a, b, c, d, M[8], 0x698098d8, 7);
    d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12);
    c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17);
    b = fnF(b, c, d, a, M[11], 0x895cd7be, 22);
    a = fnF(a, b, c, d, M[12], 0x6b901122, 7);
    d = fnF(d, a, b, c, M[13], 0xfd987193, 12);
    c = fnF(c, d, a, b, M[14], 0xa679438e, 17);
    b = fnF(b, c, d, a, M[15], 0x49b40821, 22);
    a = fnG(a, b, c, d, M[1], 0xf61e2562, 5);
    d = fnG(d, a, b, c, M[6], 0xc040b340, 9);
    c = fnG(c, d, a, b, M[11], 0x265e5a51, 14);
    b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20);
    a = fnG(a, b, c, d, M[5], 0xd62f105d, 5);
    d = fnG(d, a, b, c, M[10], 0x02441453, 9);
    c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14);
    b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20);
    a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5);
    d = fnG(d, a, b, c, M[14], 0xc33707d6, 9);
    c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14);
    b = fnG(b, c, d, a, M[8], 0x455a14ed, 20);
    a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5);
    d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9);
    c = fnG(c, d, a, b, M[7], 0x676f02d9, 14);
    b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20);
    a = fnH(a, b, c, d, M[5], 0xfffa3942, 4);
    d = fnH(d, a, b, c, M[8], 0x8771f681, 11);
    c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16);
    b = fnH(b, c, d, a, M[14], 0xfde5380c, 23);
    a = fnH(a, b, c, d, M[1], 0xa4beea44, 4);
    d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11);
    c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16);
    b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23);
    a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4);
    d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11);
    c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16);
    b = fnH(b, c, d, a, M[6], 0x04881d05, 23);
    a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4);
    d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11);
    c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16);
    b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23);
    a = fnI(a, b, c, d, M[0], 0xf4292244, 6);
    d = fnI(d, a, b, c, M[7], 0x432aff97, 10);
    c = fnI(c, d, a, b, M[14], 0xab9423a7, 15);
    b = fnI(b, c, d, a, M[5], 0xfc93a039, 21);
    a = fnI(a, b, c, d, M[12], 0x655b59c3, 6);
    d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10);
    c = fnI(c, d, a, b, M[10], 0xffeff47d, 15);
    b = fnI(b, c, d, a, M[1], 0x85845dd1, 21);
    a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6);
    d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10);
    c = fnI(c, d, a, b, M[6], 0xa3014314, 15);
    b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21);
    a = fnI(a, b, c, d, M[4], 0xf7537e82, 6);
    d = fnI(d, a, b, c, M[11], 0xbd3af235, 10);
    c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15);
    b = fnI(b, c, d, a, M[9], 0xeb86d391, 21);
    this._a = this._a + a | 0;
    this._b = this._b + b | 0;
    this._c = this._c + c | 0;
    this._d = this._d + d | 0;
};
MD5.prototype._digest = function() {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 0x80;
    if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
    }
    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();
    // produce result
    var buffer = Buffer.allocUnsafe(16);
    buffer.writeInt32LE(this._a, 0);
    buffer.writeInt32LE(this._b, 4);
    buffer.writeInt32LE(this._c, 8);
    buffer.writeInt32LE(this._d, 12);
    return buffer;
};
function rotl(x, n) {
    return x << n | x >>> 32 - n;
}
function fnF(a, b, c, d, m, k, s) {
    return rotl(a + (b & c | ~b & d) + m + k | 0, s) + b | 0;
}
function fnG(a, b, c, d, m, k, s) {
    return rotl(a + (b & d | c & ~d) + m + k | 0, s) + b | 0;
}
function fnH(a, b, c, d, m, k, s) {
    return rotl(a + (b ^ c ^ d) + m + k | 0, s) + b | 0;
}
function fnI(a, b, c, d, m, k, s) {
    return rotl(a + (c ^ (b | ~d)) + m + k | 0, s) + b | 0;
}
module.exports = MD5;

},{"634114d48656c754":"bRL3M","4b170874b4cb8d4e":"51qBP","72d4e45c6a42a2da":"eW7r9"}],"51qBP":[function(require,module,exports,__globalThis) {
'use strict';
var Buffer = require("27eaec8a721206a5").Buffer;
var Transform = require("c9c4fcebe200e6bf").Transform;
var inherits = require("91e9fa68d440541e");
function HashBase(blockSize) {
    Transform.call(this);
    this._block = Buffer.allocUnsafe(blockSize);
    this._blockSize = blockSize;
    this._blockOffset = 0;
    this._length = [
        0,
        0,
        0,
        0
    ];
    this._finalized = false;
}
inherits(HashBase, Transform);
HashBase.prototype._transform = function(chunk, encoding, callback) {
    var error = null;
    try {
        this.update(chunk, encoding);
    } catch (err) {
        error = err;
    }
    callback(error);
};
HashBase.prototype._flush = function(callback) {
    var error = null;
    try {
        this.push(this.digest());
    } catch (err) {
        error = err;
    }
    callback(error);
};
var useUint8Array = typeof Uint8Array !== 'undefined';
var useArrayBuffer = typeof ArrayBuffer !== 'undefined' && typeof Uint8Array !== 'undefined' && ArrayBuffer.isView && (Buffer.prototype instanceof Uint8Array || Buffer.TYPED_ARRAY_SUPPORT);
function toBuffer(data, encoding) {
    // No need to do anything for exact instance
    // This is only valid when safe-buffer.Buffer === buffer.Buffer, i.e. when Buffer.from/Buffer.alloc existed
    if (data instanceof Buffer) return data;
    // Convert strings to Buffer
    if (typeof data === 'string') return Buffer.from(data, encoding);
    /*
   * Wrap any TypedArray instances and DataViews
   * Makes sense only on engines with full TypedArray support -- let Buffer detect that
   */ if (useArrayBuffer && ArrayBuffer.isView(data)) {
        if (data.byteLength === 0) return Buffer.alloc(0) // Bug in Node.js <6.3.1, which treats this as out-of-bounds
        ;
        var res = Buffer.from(data.buffer, data.byteOffset, data.byteLength);
        // Recheck result size, as offset/length doesn't work on Node.js <5.10
        // We just go to Uint8Array case if this fails
        if (res.byteLength === data.byteLength) return res;
    }
    /*
   * Uint8Array in engines where Buffer.from might not work with ArrayBuffer, just copy over
   * Doesn't make sense with other TypedArray instances
   */ if (useUint8Array && data instanceof Uint8Array) return Buffer.from(data);
    /*
   * Old Buffer polyfill on an engine that doesn't have TypedArray support
   * Also, this is from a different Buffer polyfill implementation then we have, as instanceof check failed
   * Convert to our current Buffer implementation
   */ if (Buffer.isBuffer(data) && data.constructor && typeof data.constructor.isBuffer === 'function' && data.constructor.isBuffer(data)) return Buffer.from(data);
    throw new TypeError('The "data" argument must be of type string or an instance of Buffer, TypedArray, or DataView.');
}
HashBase.prototype.update = function(data, encoding) {
    if (this._finalized) throw new Error('Digest already called');
    data = toBuffer(data, encoding) // asserts correct input type
    ;
    // consume data
    var block = this._block;
    var offset = 0;
    while(this._blockOffset + data.length - offset >= this._blockSize){
        for(var i = this._blockOffset; i < this._blockSize;)block[i++] = data[offset++];
        this._update();
        this._blockOffset = 0;
    }
    while(offset < data.length)block[this._blockOffset++] = data[offset++];
    // update length
    for(var j = 0, carry = data.length * 8; carry > 0; ++j){
        this._length[j] += carry;
        carry = this._length[j] / 0x0100000000 | 0;
        if (carry > 0) this._length[j] -= 0x0100000000 * carry;
    }
    return this;
};
HashBase.prototype._update = function() {
    throw new Error('_update is not implemented');
};
HashBase.prototype.digest = function(encoding) {
    if (this._finalized) throw new Error('Digest already called');
    this._finalized = true;
    var digest = this._digest();
    if (encoding !== undefined) digest = digest.toString(encoding);
    // reset state
    this._block.fill(0);
    this._blockOffset = 0;
    for(var i = 0; i < 4; ++i)this._length[i] = 0;
    return digest;
};
HashBase.prototype._digest = function() {
    throw new Error('_digest is not implemented');
};
module.exports = HashBase;

},{"27eaec8a721206a5":"eW7r9","c9c4fcebe200e6bf":"j77ns","91e9fa68d440541e":"bRL3M"}],"j77ns":[function(require,module,exports,__globalThis) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
module.exports = Stream;
var EE = require("96b62835346f84f0").EventEmitter;
var inherits = require("4a6ee9586f51c38d");
inherits(Stream, EE);
Stream.Readable = require("e6206e1f4d20abc7");
Stream.Writable = require("a3f1405f37e1dfb1");
Stream.Duplex = require("6691a72c5fc222fd");
Stream.Transform = require("43a905ce7ec6ac9e");
Stream.PassThrough = require("dd715550d7783885");
Stream.finished = require("d90a3520974ec96e");
Stream.pipeline = require("eb2779cfd287c5c9");
// Backwards-compat with node 0.4.x
Stream.Stream = Stream;
// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.
function Stream() {
    EE.call(this);
}
Stream.prototype.pipe = function(dest, options) {
    var source = this;
    function ondata(chunk) {
        if (dest.writable) {
            if (false === dest.write(chunk) && source.pause) source.pause();
        }
    }
    source.on('data', ondata);
    function ondrain() {
        if (source.readable && source.resume) source.resume();
    }
    dest.on('drain', ondrain);
    // If the 'end' option is not supplied, dest.end() will be called when
    // source gets the 'end' or 'close' events.  Only dest.end() once.
    if (!dest._isStdio && (!options || options.end !== false)) {
        source.on('end', onend);
        source.on('close', onclose);
    }
    var didOnEnd = false;
    function onend() {
        if (didOnEnd) return;
        didOnEnd = true;
        dest.end();
    }
    function onclose() {
        if (didOnEnd) return;
        didOnEnd = true;
        if (typeof dest.destroy === 'function') dest.destroy();
    }
    // don't leave dangling pipes when there are errors.
    function onerror(er) {
        cleanup();
        if (EE.listenerCount(this, 'error') === 0) throw er; // Unhandled stream error in pipe.
    }
    source.on('error', onerror);
    dest.on('error', onerror);
    // remove all the event listeners that were added.
    function cleanup() {
        source.removeListener('data', ondata);
        dest.removeListener('drain', ondrain);
        source.removeListener('end', onend);
        source.removeListener('close', onclose);
        source.removeListener('error', onerror);
        dest.removeListener('error', onerror);
        source.removeListener('end', cleanup);
        source.removeListener('close', cleanup);
        dest.removeListener('close', cleanup);
    }
    source.on('end', cleanup);
    source.on('close', cleanup);
    dest.on('close', cleanup);
    dest.emit('pipe', source);
    // Allow for unix-like usage: A.pipe(B).pipe(C)
    return dest;
};

},{"96b62835346f84f0":"1VQLm","4a6ee9586f51c38d":"bRL3M","e6206e1f4d20abc7":"9x2Zc","a3f1405f37e1dfb1":"oN7DM","6691a72c5fc222fd":"6j5HZ","43a905ce7ec6ac9e":"bCnb0","dd715550d7783885":"lN03y","d90a3520974ec96e":"40IlH","eb2779cfd287c5c9":"6TCXK"}],"1VQLm":[function(require,module,exports,__globalThis) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';
var R = typeof Reflect === 'object' ? Reflect : null;
var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;
if (R && typeof R.ownKeys === 'function') ReflectOwnKeys = R.ownKeys;
else if (Object.getOwnPropertySymbols) ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
};
else ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
};
function ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
}
var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
    return value !== value;
};
function EventEmitter() {
    EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;
// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;
// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;
function checkListener(listener) {
    if (typeof listener !== 'function') throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
}
Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function() {
        return defaultMaxListeners;
    },
    set: function(arg) {
        if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
        defaultMaxListeners = arg;
    }
});
EventEmitter.init = function() {
    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
    }
    this._maxListeners = this._maxListeners || undefined;
};
// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
    this._maxListeners = n;
    return this;
};
function _getMaxListeners(that) {
    if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
}
EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return _getMaxListeners(this);
};
EventEmitter.prototype.emit = function emit(type) {
    var args = [];
    for(var i = 1; i < arguments.length; i++)args.push(arguments[i]);
    var doError = type === 'error';
    var events = this._events;
    if (events !== undefined) doError = doError && events.error === undefined;
    else if (!doError) return false;
    // If there is no 'error' event listener then throw.
    if (doError) {
        var er;
        if (args.length > 0) er = args[0];
        if (er instanceof Error) // Note: The comments on the `throw` lines are intentional, they show
        // up in Node's output if this results in an unhandled exception.
        throw er; // Unhandled 'error' event
        // At least give some kind of context to the user
        var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
        err.context = er;
        throw err; // Unhandled 'error' event
    }
    var handler = events[type];
    if (handler === undefined) return false;
    if (typeof handler === 'function') ReflectApply(handler, this, args);
    else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for(var i = 0; i < len; ++i)ReflectApply(listeners[i], this, args);
    }
    return true;
};
function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;
    checkListener(listener);
    events = target._events;
    if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
    } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
            target.emit('newListener', type, listener.listener ? listener.listener : listener);
            // Re-assign `events` because a newListener handler could have caused the
            // this._events to be assigned to a new object
            events = target._events;
        }
        existing = events[type];
    }
    if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
    } else {
        if (typeof existing === 'function') // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [
            listener,
            existing
        ] : [
            existing,
            listener
        ];
        else if (prepend) existing.unshift(listener);
        else existing.push(listener);
        // Check for listener leak
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            // No error code for this since it is a Warning
            // eslint-disable-next-line no-restricted-syntax
            var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
            w.name = 'MaxListenersExceededWarning';
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            ProcessEmitWarning(w);
        }
    }
    return target;
}
EventEmitter.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.prependListener = function prependListener(type, listener) {
    return _addListener(this, type, listener, true);
};
function onceWrapper() {
    if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0) return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
    }
}
function _onceWrap(target, type, listener) {
    var state = {
        fired: false,
        wrapFn: undefined,
        target: target,
        type: type,
        listener: listener
    };
    var wrapped = onceWrapper.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
}
EventEmitter.prototype.once = function once(type, listener) {
    checkListener(listener);
    this.on(type, _onceWrap(this, type, listener));
    return this;
};
EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
    checkListener(listener);
    this.prependListener(type, _onceWrap(this, type, listener));
    return this;
};
// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener = function removeListener(type, listener) {
    var list, events, position, i, originalListener;
    checkListener(listener);
    events = this._events;
    if (events === undefined) return this;
    list = events[type];
    if (list === undefined) return this;
    if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0) this._events = Object.create(null);
        else {
            delete events[type];
            if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
        }
    } else if (typeof list !== 'function') {
        position = -1;
        for(i = list.length - 1; i >= 0; i--)if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
        }
        if (position < 0) return this;
        if (position === 0) list.shift();
        else spliceOne(list, position);
        if (list.length === 1) events[type] = list[0];
        if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
    }
    return this;
};
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
    var listeners, events, i;
    events = this._events;
    if (events === undefined) return this;
    // not listening for removeListener, no need to emit
    if (events.removeListener === undefined) {
        if (arguments.length === 0) {
            this._events = Object.create(null);
            this._eventsCount = 0;
        } else if (events[type] !== undefined) {
            if (--this._eventsCount === 0) this._events = Object.create(null);
            else delete events[type];
        }
        return this;
    }
    // emit removeListener for all listeners on all events
    if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for(i = 0; i < keys.length; ++i){
            key = keys[i];
            if (key === 'removeListener') continue;
            this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
    }
    listeners = events[type];
    if (typeof listeners === 'function') this.removeListener(type, listeners);
    else if (listeners !== undefined) // LIFO order
    for(i = listeners.length - 1; i >= 0; i--)this.removeListener(type, listeners[i]);
    return this;
};
function _listeners(target, type, unwrap) {
    var events = target._events;
    if (events === undefined) return [];
    var evlistener = events[type];
    if (evlistener === undefined) return [];
    if (typeof evlistener === 'function') return unwrap ? [
        evlistener.listener || evlistener
    ] : [
        evlistener
    ];
    return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}
EventEmitter.prototype.listeners = function listeners(type) {
    return _listeners(this, type, true);
};
EventEmitter.prototype.rawListeners = function rawListeners(type) {
    return _listeners(this, type, false);
};
EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === 'function') return emitter.listenerCount(type);
    else return listenerCount.call(emitter, type);
};
EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
    var events = this._events;
    if (events !== undefined) {
        var evlistener = events[type];
        if (typeof evlistener === 'function') return 1;
        else if (evlistener !== undefined) return evlistener.length;
    }
    return 0;
}
EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};
function arrayClone(arr, n) {
    var copy = new Array(n);
    for(var i = 0; i < n; ++i)copy[i] = arr[i];
    return copy;
}
function spliceOne(list, index) {
    for(; index + 1 < list.length; index++)list[index] = list[index + 1];
    list.pop();
}
function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for(var i = 0; i < ret.length; ++i)ret[i] = arr[i].listener || arr[i];
    return ret;
}
function once(emitter, name) {
    return new Promise(function(resolve, reject) {
        function errorListener(err) {
            emitter.removeListener(name, resolver);
            reject(err);
        }
        function resolver() {
            if (typeof emitter.removeListener === 'function') emitter.removeListener('error', errorListener);
            resolve([].slice.call(arguments));
        }
        eventTargetAgnosticAddListener(emitter, name, resolver, {
            once: true
        });
        if (name !== 'error') addErrorHandlerIfEventEmitter(emitter, errorListener, {
            once: true
        });
    });
}
function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === 'function') eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
}
function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
    if (typeof emitter.on === 'function') {
        if (flags.once) emitter.once(name, listener);
        else emitter.on(name, listener);
    } else if (typeof emitter.addEventListener === 'function') // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
        // IE does not have builtin `{ once: true }` support so we
        // have to do it manually.
        if (flags.once) emitter.removeEventListener(name, wrapListener);
        listener(arg);
    });
    else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
}

},{}],"9x2Zc":[function(require,module,exports,__globalThis) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
var global = arguments[3];
var process = require("5cd4b65a2667f30e");
'use strict';
module.exports = Readable;
/*<replacement>*/ var Duplex;
/*</replacement>*/ Readable.ReadableState = ReadableState;
/*<replacement>*/ var EE = require("c152f2119aca4689").EventEmitter;
var EElistenerCount = function EElistenerCount(emitter, type) {
    return emitter.listeners(type).length;
};
/*</replacement>*/ /*<replacement>*/ var Stream = require("ee1c46a25703890d");
/*</replacement>*/ var Buffer = require("efffad1605c95e76").Buffer;
var OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function() {};
function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
}
function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/ var debugUtil = require("f6690d8cb5f89003");
var debug;
if (debugUtil && debugUtil.debuglog) debug = debugUtil.debuglog('stream');
else debug = function debug() {};
/*</replacement>*/ var BufferList = require("f8c4515e8234bd59");
var destroyImpl = require("2b842a435cfab72e");
var _require = require("6f90938893f80e4b"), getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require("daceb54799edbc39").codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
// Lazy loaded to improve the startup performance.
var StringDecoder;
var createReadableStreamAsyncIterator;
var from;
require("6b2730f2f68f00ce")(Readable, Stream);
var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = [
    'error',
    'close',
    'destroy',
    'pause',
    'resume'
];
function prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
    else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
    else emitter._events[event] = [
        fn,
        emitter._events[event]
    ];
}
function ReadableState(options, stream, isDuplex) {
    Duplex = Duplex || require("d53c82af0b49f760");
    options = options || {};
    // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
    if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;
    // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
    // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex);
    // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new BufferList();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false;
    // a flag to be able to tell if the event 'readable'/'data' is emitted
    // immediately, or on a later tick.  We set this to true at first, because
    // any actions that shouldn't happen until "later" should generally also
    // not happen before the first read call.
    this.sync = true;
    // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true;
    // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false;
    // Should .destroy() be called after 'end' (and potentially 'finish')
    this.autoDestroy = !!options.autoDestroy;
    // has it been destroyed
    this.destroyed = false;
    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8';
    // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0;
    // if true, a maybeReadMore has been scheduled
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
        if (!StringDecoder) StringDecoder = require("e7e497563ff3b269").StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
    }
}
function Readable(options) {
    Duplex = Duplex || require("d53c82af0b49f760");
    if (!(this instanceof Readable)) return new Readable(options);
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the ReadableState constructor, at least with V8 6.5
    var isDuplex = this instanceof Duplex;
    this._readableState = new ReadableState(options, this, isDuplex);
    // legacy
    this.readable = true;
    if (options) {
        if (typeof options.read === 'function') this._read = options.read;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
    }
    Stream.call(this);
}
Object.defineProperty(Readable.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined) return false;
        return this._readableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
    }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function(err, cb) {
    cb(err);
};
// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;
    if (!state.objectMode) {
        if (typeof chunk === 'string') {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
                chunk = Buffer.from(chunk, encoding);
                encoding = '';
            }
            skipChunkCheck = true;
        }
    } else skipChunkCheck = true;
    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};
// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
    return readableAddChunk(this, chunk, null, true, false);
};
function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    debug('readableAddChunk', chunk);
    var state = stream._readableState;
    if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
    } else {
        var er;
        if (!skipChunkCheck) er = chunkInvalid(state, chunk);
        if (er) errorOrDestroy(stream, er);
        else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) chunk = _uint8ArrayToBuffer(chunk);
            if (addToFront) {
                if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
                else addChunk(stream, state, chunk, true);
            } else if (state.ended) errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
            else if (state.destroyed) return false;
            else {
                state.reading = false;
                if (state.decoder && !encoding) {
                    chunk = state.decoder.write(chunk);
                    if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);
                    else maybeReadMore(stream, state);
                } else addChunk(stream, state, chunk, false);
            }
        } else if (!addToFront) {
            state.reading = false;
            maybeReadMore(stream, state);
        }
    }
    // We can push more data if we are below the highWaterMark.
    // Also, if we have no data yet, we can stand some more bytes.
    // This is to work around cases where hwm=0, such as the repl.
    return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit('data', chunk);
    } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);
        else state.buffer.push(chunk);
        if (state.needReadable) emitReadable(stream);
    }
    maybeReadMore(stream, state);
}
function chunkInvalid(state, chunk) {
    var er;
    if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) er = new ERR_INVALID_ARG_TYPE('chunk', [
        'string',
        'Buffer',
        'Uint8Array'
    ], chunk);
    return er;
}
Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
};
// backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
    if (!StringDecoder) StringDecoder = require("e7e497563ff3b269").StringDecoder;
    var decoder = new StringDecoder(enc);
    this._readableState.decoder = decoder;
    // If setEncoding(null), decoder.encoding equals utf8
    this._readableState.encoding = this._readableState.decoder.encoding;
    // Iterate over current buffer to convert already stored Buffers:
    var p = this._readableState.buffer.head;
    var content = '';
    while(p !== null){
        content += decoder.write(p.data);
        p = p.next;
    }
    this._readableState.buffer.clear();
    if (content !== '') this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
};
// Don't raise the hwm > 1GB
var MAX_HWM = 0x40000000;
function computeNewHighWaterMark(n) {
    if (n >= MAX_HWM) // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
    else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
    }
    return n;
}
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;
        else return state.length;
    }
    // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
    if (n <= state.length) return n;
    // Don't have enough
    if (!state.ended) {
        state.needReadable = true;
        return 0;
    }
    return state.length;
}
// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
    debug('read', n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
    if (n !== 0) state.emittedReadable = false;
    // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        debug('read: emitReadable', state.length, state.ended);
        if (state.length === 0 && state.ended) endReadable(this);
        else emitReadable(this);
        return null;
    }
    n = howMuchToRead(n, state);
    // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
        if (state.length === 0) endReadable(this);
        return null;
    }
    // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.
    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    debug('need readable', doRead);
    // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug('length less than watermark', doRead);
    }
    // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
        doRead = false;
        debug('reading or ended', doRead);
    } else if (doRead) {
        debug('do read');
        state.reading = true;
        state.sync = true;
        // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true;
        // call internal read method
        this._read(state.highWaterMark);
        state.sync = false;
        // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = howMuchToRead(nOrig, state);
    }
    var ret;
    if (n > 0) ret = fromList(n, state);
    else ret = null;
    if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
    } else {
        state.length -= n;
        state.awaitDrain = 0;
    }
    if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true;
        // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) endReadable(this);
    }
    if (ret !== null) this.emit('data', ret);
    return ret;
};
function onEofChunk(stream, state) {
    debug('onEofChunk');
    if (state.ended) return;
    if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
        }
    }
    state.ended = true;
    if (state.sync) // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
    else {
        // emit 'readable' now to make sure it gets picked up.
        state.needReadable = false;
        if (!state.emittedReadable) {
            state.emittedReadable = true;
            emitReadable_(stream);
        }
    }
}
// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
    var state = stream._readableState;
    debug('emitReadable', state.needReadable, state.emittedReadable);
    state.needReadable = false;
    if (!state.emittedReadable) {
        debug('emitReadable', state.flowing);
        state.emittedReadable = true;
        process.nextTick(emitReadable_, stream);
    }
}
function emitReadable_(stream) {
    var state = stream._readableState;
    debug('emitReadable_', state.destroyed, state.length, state.ended);
    if (!state.destroyed && (state.length || state.ended)) {
        stream.emit('readable');
        state.emittedReadable = false;
    }
    // The stream needs another readable event if
    // 1. It is not flowing, as the flow mechanism will take
    //    care of it.
    // 2. It is not ended.
    // 3. It is below the highWaterMark, so we can schedule
    //    another readable later.
    state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
    flow(stream);
}
// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
    if (!state.readingMore) {
        state.readingMore = true;
        process.nextTick(maybeReadMore_, stream, state);
    }
}
function maybeReadMore_(stream, state) {
    // Attempt to read more data if we should.
    //
    // The conditions for reading more data are (one of):
    // - Not enough data buffered (state.length < state.highWaterMark). The loop
    //   is responsible for filling the buffer with enough data if such data
    //   is available. If highWaterMark is 0 and we are not in the flowing mode
    //   we should _not_ attempt to buffer any extra data. We'll get more data
    //   when the stream consumer calls read() instead.
    // - No data in the buffer, and the stream is in flowing mode. In this mode
    //   the loop below is responsible for ensuring read() is called. Failing to
    //   call read here would abort the flow and there's no other mechanism for
    //   continuing the flow if the stream consumer has just subscribed to the
    //   'data' event.
    //
    // In addition to the above conditions to keep reading data, the following
    // conditions prevent the data from being read:
    // - The stream has ended (state.ended).
    // - There is already a pending 'read' operation (state.reading). This is a
    //   case where the the stream has called the implementation defined _read()
    //   method, but they are processing the call asynchronously and have _not_
    //   called push() with new data. In this case we skip performing more
    //   read()s. The execution ends in this method again after the _read() ends
    //   up calling push() with more data.
    while(!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)){
        var len = state.length;
        debug('maybeReadMore read 0');
        stream.read(0);
        if (len === state.length) break;
    }
    state.readingMore = false;
}
// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
    errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};
Readable.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state = this._readableState;
    switch(state.pipesCount){
        case 0:
            state.pipes = dest;
            break;
        case 1:
            state.pipes = [
                state.pipes,
                dest
            ];
            break;
        default:
            state.pipes.push(dest);
            break;
    }
    state.pipesCount += 1;
    debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted) process.nextTick(endFn);
    else src.once('end', endFn);
    dest.on('unpipe', onunpipe);
    function onunpipe(readable, unpipeInfo) {
        debug('onunpipe');
        if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
            }
        }
    }
    function onend() {
        debug('onend');
        dest.end();
    }
    // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = pipeOnDrain(src);
    dest.on('drain', ondrain);
    var cleanedUp = false;
    function cleanup() {
        debug('cleanup');
        // cleanup event handlers once the pipe is broken
        dest.removeListener('close', onclose);
        dest.removeListener('finish', onfinish);
        dest.removeListener('drain', ondrain);
        dest.removeListener('error', onerror);
        dest.removeListener('unpipe', onunpipe);
        src.removeListener('end', onend);
        src.removeListener('end', unpipe);
        src.removeListener('data', ondata);
        cleanedUp = true;
        // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }
    src.on('data', ondata);
    function ondata(chunk) {
        debug('ondata');
        var ret = dest.write(chunk);
        debug('dest.write', ret);
        if (ret === false) {
            // If the user unpiped during `dest.write()`, it is possible
            // to get stuck in a permanently paused state if that write
            // also returned false.
            // => Check whether `dest` is still a piping destination.
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                debug('false write response, pause', state.awaitDrain);
                state.awaitDrain++;
            }
            src.pause();
        }
    }
    // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
        debug('onerror', er);
        unpipe();
        dest.removeListener('error', onerror);
        if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
    }
    // Make sure our error handler is attached before userland ones.
    prependListener(dest, 'error', onerror);
    // Both close and finish should trigger unpipe, but only once.
    function onclose() {
        dest.removeListener('finish', onfinish);
        unpipe();
    }
    dest.once('close', onclose);
    function onfinish() {
        debug('onfinish');
        dest.removeListener('close', onclose);
        unpipe();
    }
    dest.once('finish', onfinish);
    function unpipe() {
        debug('unpipe');
        src.unpipe(dest);
    }
    // tell the dest that it's being piped to
    dest.emit('pipe', src);
    // start the flow if it hasn't been started already.
    if (!state.flowing) {
        debug('pipe resume');
        src.resume();
    }
    return dest;
};
function pipeOnDrain(src) {
    return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        debug('pipeOnDrain', state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
            state.flowing = true;
            flow(src);
        }
    };
}
Readable.prototype.unpipe = function(dest) {
    var state = this._readableState;
    var unpipeInfo = {
        hasUnpiped: false
    };
    // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this;
    // just one destination.  most common case.
    if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes;
        // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit('unpipe', this, unpipeInfo);
        return this;
    }
    // slow case. multiple pipe destinations.
    if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for(var i = 0; i < len; i++)dests[i].emit('unpipe', this, {
            hasUnpiped: false
        });
        return this;
    }
    // try to find the right one.
    var index = indexOf(state.pipes, dest);
    if (index === -1) return this;
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];
    dest.emit('unpipe', this, unpipeInfo);
    return this;
};
// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
    var res = Stream.prototype.on.call(this, ev, fn);
    var state = this._readableState;
    if (ev === 'data') {
        // update readableListening so that resume() may be a no-op
        // a few lines down. This is needed to support once('readable').
        state.readableListening = this.listenerCount('readable') > 0;
        // Try start flowing on next tick if stream isn't explicitly paused
        if (state.flowing !== false) this.resume();
    } else if (ev === 'readable') {
        if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            debug('on readable', state.length, state.reading);
            if (state.length) emitReadable(this);
            else if (!state.reading) process.nextTick(nReadingNextTick, this);
        }
    }
    return res;
};
Readable.prototype.addListener = Readable.prototype.on;
Readable.prototype.removeListener = function(ev, fn) {
    var res = Stream.prototype.removeListener.call(this, ev, fn);
    if (ev === 'readable') // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
    return res;
};
Readable.prototype.removeAllListeners = function(ev) {
    var res = Stream.prototype.removeAllListeners.apply(this, arguments);
    if (ev === 'readable' || ev === undefined) // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
    return res;
};
function updateReadableListening(self1) {
    var state = self1._readableState;
    state.readableListening = self1.listenerCount('readable') > 0;
    if (state.resumeScheduled && !state.paused) // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true;
    else if (self1.listenerCount('data') > 0) self1.resume();
}
function nReadingNextTick(self1) {
    debug('readable nexttick read 0');
    self1.read(0);
}
// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
        debug('resume');
        // we flow only if there is no one listening
        // for readable, but we still have to call
        // resume()
        state.flowing = !state.readableListening;
        resume(this, state);
    }
    state.paused = false;
    return this;
};
function resume(stream, state) {
    if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        process.nextTick(resume_, stream, state);
    }
}
function resume_(stream, state) {
    debug('resume', state.reading);
    if (!state.reading) stream.read(0);
    state.resumeScheduled = false;
    stream.emit('resume');
    flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
}
Readable.prototype.pause = function() {
    debug('call pause flowing=%j', this._readableState.flowing);
    if (this._readableState.flowing !== false) {
        debug('pause');
        this._readableState.flowing = false;
        this.emit('pause');
    }
    this._readableState.paused = true;
    return this;
};
function flow(stream) {
    var state = stream._readableState;
    debug('flow', state.flowing);
    while(state.flowing && stream.read() !== null);
}
// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
    var _this = this;
    var state = this._readableState;
    var paused = false;
    stream.on('end', function() {
        debug('wrapped end');
        if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) _this.push(chunk);
        }
        _this.push(null);
    });
    stream.on('data', function(chunk) {
        debug('wrapped data');
        if (state.decoder) chunk = state.decoder.write(chunk);
        // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;
        else if (!state.objectMode && (!chunk || !chunk.length)) return;
        var ret = _this.push(chunk);
        if (!ret) {
            paused = true;
            stream.pause();
        }
    });
    // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for(var i in stream)if (this[i] === undefined && typeof stream[i] === 'function') this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
            return stream[method].apply(stream, arguments);
        };
    }(i);
    // proxy certain important events.
    for(var n = 0; n < kProxyEvents.length; n++)stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
    // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    this._read = function(n) {
        debug('wrapped _read', n);
        if (paused) {
            paused = false;
            stream.resume();
        }
    };
    return this;
};
if (typeof Symbol === 'function') Readable.prototype[Symbol.asyncIterator] = function() {
    if (createReadableStreamAsyncIterator === undefined) createReadableStreamAsyncIterator = require("746c700ae68bf97c");
    return createReadableStreamAsyncIterator(this);
};
Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.highWaterMark;
    }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState && this._readableState.buffer;
    }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.flowing;
    },
    set: function set(state) {
        if (this._readableState) this._readableState.flowing = state;
    }
});
// exposed for testing purposes only.
Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.length;
    }
});
// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;
    var ret;
    if (state.objectMode) ret = state.buffer.shift();
    else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join('');
        else if (state.buffer.length === 1) ret = state.buffer.first();
        else ret = state.buffer.concat(state.length);
        state.buffer.clear();
    } else // read part of list
    ret = state.buffer.consume(n, state.decoder);
    return ret;
}
function endReadable(stream) {
    var state = stream._readableState;
    debug('endReadable', state.endEmitted);
    if (!state.endEmitted) {
        state.ended = true;
        process.nextTick(endReadableNT, state, stream);
    }
}
function endReadableNT(state, stream) {
    debug('endReadableNT', state.endEmitted, state.length);
    // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
        if (state.autoDestroy) {
            // In case of duplex streams we need a way to detect
            // if the writable side is ready for autoDestroy as well
            var wState = stream._writableState;
            if (!wState || wState.autoDestroy && wState.finished) stream.destroy();
        }
    }
}
if (typeof Symbol === 'function') Readable.from = function(iterable, opts) {
    if (from === undefined) from = require("7770a768738aeba9");
    return from(Readable, iterable, opts);
};
function indexOf(xs, x) {
    for(var i = 0, l = xs.length; i < l; i++){
        if (xs[i] === x) return i;
    }
    return -1;
}

},{"5cd4b65a2667f30e":"d5jf4","c152f2119aca4689":"1VQLm","ee1c46a25703890d":"f6fcJ","efffad1605c95e76":"fCgem","f6690d8cb5f89003":"jhUEF","f8c4515e8234bd59":"kUPfs","2b842a435cfab72e":"g0Tbb","6f90938893f80e4b":"5xjEV","daceb54799edbc39":"g46QK","6b2730f2f68f00ce":"bRL3M","d53c82af0b49f760":"6j5HZ","e7e497563ff3b269":"3vmkr","746c700ae68bf97c":"hpL3T","7770a768738aeba9":"5VQDl"}],"f6fcJ":[function(require,module,exports,__globalThis) {
module.exports = require("256d09989820a7e9").EventEmitter;

},{"256d09989820a7e9":"1VQLm"}],"jhUEF":[function(require,module,exports,__globalThis) {
"use strict";

},{}],"kUPfs":[function(require,module,exports,__globalThis) {
'use strict';
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
        writable: false
    });
    return Constructor;
}
function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}
var _require = require("56f983784a0fab6f"), Buffer = _require.Buffer;
var _require2 = require("95cdcc9e77389728"), inspect = _require2.inspect;
var custom = inspect && inspect.custom || 'inspect';
function copyBuffer(src, target, offset) {
    Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/ function() {
    function BufferList() {
        _classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    _createClass(BufferList, [
        {
            key: "push",
            value: function push(v) {
                var entry = {
                    data: v,
                    next: null
                };
                if (this.length > 0) this.tail.next = entry;
                else this.head = entry;
                this.tail = entry;
                ++this.length;
            }
        },
        {
            key: "unshift",
            value: function unshift(v) {
                var entry = {
                    data: v,
                    next: this.head
                };
                if (this.length === 0) this.tail = entry;
                this.head = entry;
                ++this.length;
            }
        },
        {
            key: "shift",
            value: function shift() {
                if (this.length === 0) return;
                var ret = this.head.data;
                if (this.length === 1) this.head = this.tail = null;
                else this.head = this.head.next;
                --this.length;
                return ret;
            }
        },
        {
            key: "clear",
            value: function clear() {
                this.head = this.tail = null;
                this.length = 0;
            }
        },
        {
            key: "join",
            value: function join(s) {
                if (this.length === 0) return '';
                var p = this.head;
                var ret = '' + p.data;
                while(p = p.next)ret += s + p.data;
                return ret;
            }
        },
        {
            key: "concat",
            value: function concat(n) {
                if (this.length === 0) return Buffer.alloc(0);
                var ret = Buffer.allocUnsafe(n >>> 0);
                var p = this.head;
                var i = 0;
                while(p){
                    copyBuffer(p.data, ret, i);
                    i += p.data.length;
                    p = p.next;
                }
                return ret;
            }
        },
        {
            key: "consume",
            value: function consume(n, hasStrings) {
                var ret;
                if (n < this.head.data.length) {
                    // `slice` is the same for buffers and strings.
                    ret = this.head.data.slice(0, n);
                    this.head.data = this.head.data.slice(n);
                } else if (n === this.head.data.length) // First chunk is a perfect match.
                ret = this.shift();
                else // Result spans more than one buffer.
                ret = hasStrings ? this._getString(n) : this._getBuffer(n);
                return ret;
            }
        },
        {
            key: "first",
            value: function first() {
                return this.head.data;
            }
        },
        {
            key: "_getString",
            value: function _getString(n) {
                var p = this.head;
                var c = 1;
                var ret = p.data;
                n -= ret.length;
                while(p = p.next){
                    var str = p.data;
                    var nb = n > str.length ? str.length : n;
                    if (nb === str.length) ret += str;
                    else ret += str.slice(0, n);
                    n -= nb;
                    if (n === 0) {
                        if (nb === str.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = str.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            }
        },
        {
            key: "_getBuffer",
            value: function _getBuffer(n) {
                var ret = Buffer.allocUnsafe(n);
                var p = this.head;
                var c = 1;
                p.data.copy(ret);
                n -= p.data.length;
                while(p = p.next){
                    var buf = p.data;
                    var nb = n > buf.length ? buf.length : n;
                    buf.copy(ret, ret.length - n, 0, nb);
                    n -= nb;
                    if (n === 0) {
                        if (nb === buf.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = buf.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            }
        },
        {
            key: custom,
            value: function value(_, options) {
                return inspect(this, _objectSpread(_objectSpread({}, options), {}, {
                    // Only inspect one level.
                    depth: 0,
                    // It should not recurse.
                    customInspect: false
                }));
            }
        }
    ]);
    return BufferList;
}();

},{"56f983784a0fab6f":"fCgem","95cdcc9e77389728":"jhUEF"}],"g0Tbb":[function(require,module,exports,__globalThis) {
var process = require("688ab6a28ddb436d");
'use strict';
// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
        if (cb) cb(err);
        else if (err) {
            if (!this._writableState) process.nextTick(emitErrorNT, this, err);
            else if (!this._writableState.errorEmitted) {
                this._writableState.errorEmitted = true;
                process.nextTick(emitErrorNT, this, err);
            }
        }
        return this;
    }
    // we set destroyed to true before firing error callbacks in order
    // to make it re-entrance safe in case destroy() is called within callbacks
    if (this._readableState) this._readableState.destroyed = true;
    // if this is a duplex stream mark the writable part as destroyed as well
    if (this._writableState) this._writableState.destroyed = true;
    this._destroy(err || null, function(err) {
        if (!cb && err) {
            if (!_this._writableState) process.nextTick(emitErrorAndCloseNT, _this, err);
            else if (!_this._writableState.errorEmitted) {
                _this._writableState.errorEmitted = true;
                process.nextTick(emitErrorAndCloseNT, _this, err);
            } else process.nextTick(emitCloseNT, _this);
        } else if (cb) {
            process.nextTick(emitCloseNT, _this);
            cb(err);
        } else process.nextTick(emitCloseNT, _this);
    });
    return this;
}
function emitErrorAndCloseNT(self, err) {
    emitErrorNT(self, err);
    emitCloseNT(self);
}
function emitCloseNT(self) {
    if (self._writableState && !self._writableState.emitClose) return;
    if (self._readableState && !self._readableState.emitClose) return;
    self.emit('close');
}
function undestroy() {
    if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
    }
    if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
    }
}
function emitErrorNT(self, err) {
    self.emit('error', err);
}
function errorOrDestroy(stream, err) {
    // We have tests that rely on errors being emitted
    // in the same tick, so changing this is semver major.
    // For now when you opt-in to autoDestroy we allow
    // the error to be emitted nextTick. In a future
    // semver major update we should change the default to this.
    var rState = stream._readableState;
    var wState = stream._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);
    else stream.emit('error', err);
}
module.exports = {
    destroy: destroy,
    undestroy: undestroy,
    errorOrDestroy: errorOrDestroy
};

},{"688ab6a28ddb436d":"d5jf4"}],"5xjEV":[function(require,module,exports,__globalThis) {
'use strict';
var ERR_INVALID_OPT_VALUE = require("4543c6055fd8382c").codes.ERR_INVALID_OPT_VALUE;
function highWaterMarkFrom(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function getHighWaterMark(state, options, duplexKey, isDuplex) {
    var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
    if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name = isDuplex ? duplexKey : 'highWaterMark';
            throw new ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
    }
    // Default value
    return state.objectMode ? 16 : 16384;
}
module.exports = {
    getHighWaterMark: getHighWaterMark
};

},{"4543c6055fd8382c":"g46QK"}],"g46QK":[function(require,module,exports,__globalThis) {
'use strict';
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
var codes = {};
function createErrorType(code, message, Base) {
    if (!Base) Base = Error;
    function getMessage(arg1, arg2, arg3) {
        if (typeof message === 'string') return message;
        else return message(arg1, arg2, arg3);
    }
    var NodeError = /*#__PURE__*/ function(_Base) {
        _inheritsLoose(NodeError, _Base);
        function NodeError(arg1, arg2, arg3) {
            return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }
        return NodeError;
    }(Base);
    NodeError.prototype.name = Base.name;
    NodeError.prototype.code = code;
    codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function oneOf(expected, thing) {
    if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
            return String(i);
        });
        if (len > 2) return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
        else if (len === 2) return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        else return "of ".concat(thing, " ").concat(expected[0]);
    } else return "of ".concat(thing, " ").concat(String(expected));
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) this_len = str.length;
    return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function includes(str, search, start) {
    if (typeof start !== 'number') start = 0;
    if (start + search.length > str.length) return false;
    else return str.indexOf(search, start) !== -1;
}
createErrorType('ERR_INVALID_OPT_VALUE', function(name, value) {
    return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function(name, expected, actual) {
    // determiner: 'must be' or 'must not be'
    var determiner;
    if (typeof expected === 'string' && startsWith(expected, 'not ')) {
        determiner = 'must not be';
        expected = expected.replace(/^not /, '');
    } else determiner = 'must be';
    var msg;
    if (endsWith(name, ' argument')) // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
    else {
        var type = includes(name, '.') ? 'property' : 'argument';
        msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
    }
    msg += ". Received type ".concat(typeof actual);
    return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function(name) {
    return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function(name) {
    return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function(arg) {
    return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;

},{}],"6j5HZ":[function(require,module,exports,__globalThis) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
var process = require("34d2aeaf352b4512");
'use strict';
/*<replacement>*/ var objectKeys = Object.keys || function(obj) {
    var keys = [];
    for(var key in obj)keys.push(key);
    return keys;
};
/*</replacement>*/ module.exports = Duplex;
var Readable = require("7b75ce1e482a8dfb");
var Writable = require("fd2e3b6f36c506e9");
require("7dcb079aaf2f7ac6")(Duplex, Readable);
// Allow the keys array to be GC'ed.
var keys = objectKeys(Writable.prototype);
for(var v = 0; v < keys.length; v++){
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}
function Duplex(options) {
    if (!(this instanceof Duplex)) return new Duplex(options);
    Readable.call(this, options);
    Writable.call(this, options);
    this.allowHalfOpen = true;
    if (options) {
        if (options.readable === false) this.readable = false;
        if (options.writable === false) this.writable = false;
        if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once('end', onend);
        }
    }
}
Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
// the no-half-open enforcer
function onend() {
    // If the writable side ended, then we're ok.
    if (this._writableState.ended) return;
    // no more data can be written.
    // But allow more writes to happen in this tick.
    process.nextTick(onEndNT, this);
}
function onEndNT(self) {
    self.end();
}
Object.defineProperty(Duplex.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined || this._writableState === undefined) return false;
        return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
    }
});

},{"34d2aeaf352b4512":"d5jf4","7b75ce1e482a8dfb":"9x2Zc","fd2e3b6f36c506e9":"oN7DM","7dcb079aaf2f7ac6":"bRL3M"}],"oN7DM":[function(require,module,exports,__globalThis) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
var global = arguments[3];
var process = require("960325341c691095");
'use strict';
module.exports = Writable;
/* <replacement> */ function WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
}
// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
        onCorkedFinish(_this, state);
    };
}
/* </replacement> */ /*<replacement>*/ var Duplex;
/*</replacement>*/ Writable.WritableState = WritableState;
/*<replacement>*/ var internalUtil = {
    deprecate: require("7d0952b2aab2880f")
};
/*</replacement>*/ /*<replacement>*/ var Stream = require("d4a8b8f0181be806");
/*</replacement>*/ var Buffer = require("329aa7fef0ab6df1").Buffer;
var OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function() {};
function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
}
function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
var destroyImpl = require("6a39a8b28b6e8ab4");
var _require = require("4b9079029d7ad85f"), getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require("4d4d95a33057eaa").codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED, ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES, ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END, ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
var errorOrDestroy = destroyImpl.errorOrDestroy;
require("df23fd9c6d29b882")(Writable, Stream);
function nop() {}
function WritableState(options, stream, isDuplex) {
    Duplex = Duplex || require("a02e72411207d1a6");
    options = options || {};
    // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream,
    // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
    if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;
    // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
    // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex);
    // if _final has been called
    this.finalCalled = false;
    // drain event flag.
    this.needDrain = false;
    // at the start of calling end()
    this.ending = false;
    // when end() has been called, and returned
    this.ended = false;
    // when 'finish' is emitted
    this.finished = false;
    // has it been destroyed
    this.destroyed = false;
    // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode;
    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8';
    // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0;
    // a flag to see when we're in the middle of a write.
    this.writing = false;
    // when true all writes will be buffered until .uncork() call
    this.corked = 0;
    // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true;
    // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false;
    // the callback that's passed to _write(chunk,cb)
    this.onwrite = function(er) {
        onwrite(stream, er);
    };
    // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null;
    // the amount that is being written when _write is called.
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null;
    // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0;
    // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false;
    // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false;
    // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false;
    // Should .destroy() be called after 'finish' (and potentially 'end')
    this.autoDestroy = !!options.autoDestroy;
    // count buffered requests
    this.bufferedRequestCount = 0;
    // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new CorkedRequest(this);
}
WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while(current){
        out.push(current);
        current = current.next;
    }
    return out;
};
(function() {
    try {
        Object.defineProperty(WritableState.prototype, 'buffer', {
            get: internalUtil.deprecate(function writableStateBufferGetter() {
                return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", 'DEP0003')
        });
    } catch (_) {}
})();
// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
    realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function value(object) {
            if (realHasInstance.call(this, object)) return true;
            if (this !== Writable) return false;
            return object && object._writableState instanceof WritableState;
        }
    });
} else realHasInstance = function realHasInstance(object) {
    return object instanceof this;
};
function Writable(options) {
    Duplex = Duplex || require("a02e72411207d1a6");
    // Writable ctor is applied to Duplexes, too.
    // `realHasInstance` is necessary because using plain `instanceof`
    // would return false, as no `_writableState` property is attached.
    // Trying to use the custom `instanceof` for Writable here will also break the
    // Node.js LazyTransform implementation, which has a non-trivial getter for
    // `_writableState` that would lead to infinite recursion.
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the WritableState constructor, at least with V8 6.5
    var isDuplex = this instanceof Duplex;
    if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
    this._writableState = new WritableState(options, this, isDuplex);
    // legacy.
    this.writable = true;
    if (options) {
        if (typeof options.write === 'function') this._write = options.write;
        if (typeof options.writev === 'function') this._writev = options.writev;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
        if (typeof options.final === 'function') this._final = options.final;
    }
    Stream.call(this);
}
// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
    errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};
function writeAfterEnd(stream, cb) {
    var er = new ERR_STREAM_WRITE_AFTER_END();
    // TODO: defer error events consistently everywhere, not just the cb
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
}
// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
    var er;
    if (chunk === null) er = new ERR_STREAM_NULL_VALUES();
    else if (typeof chunk !== 'string' && !state.objectMode) er = new ERR_INVALID_ARG_TYPE('chunk', [
        'string',
        'Buffer'
    ], chunk);
    if (er) {
        errorOrDestroy(stream, er);
        process.nextTick(cb, er);
        return false;
    }
    return true;
}
Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && _isUint8Array(chunk);
    if (isBuf && !Buffer.isBuffer(chunk)) chunk = _uint8ArrayToBuffer(chunk);
    if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
    }
    if (isBuf) encoding = 'buffer';
    else if (!encoding) encoding = state.defaultEncoding;
    if (typeof cb !== 'function') cb = nop;
    if (state.ending) writeAfterEnd(this, cb);
    else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
};
Writable.prototype.cork = function() {
    this._writableState.corked++;
};
Writable.prototype.uncork = function() {
    var state = this._writableState;
    if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
    }
};
Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === 'string') encoding = encoding.toLowerCase();
    if (!([
        'hex',
        'utf8',
        'utf-8',
        'ascii',
        'binary',
        'base64',
        'ucs2',
        'ucs-2',
        'utf16le',
        'utf-16le',
        'raw'
    ].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
};
Object.defineProperty(Writable.prototype, 'writableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
function decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') chunk = Buffer.from(chunk, encoding);
    return chunk;
}
Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
            isBuf = true;
            encoding = 'buffer';
            chunk = newChunk;
        }
    }
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark;
    // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;
    if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
            chunk: chunk,
            encoding: encoding,
            isBuf: isBuf,
            callback: cb,
            next: null
        };
        if (last) last.next = state.lastBufferedRequest;
        else state.bufferedRequest = state.lastBufferedRequest;
        state.bufferedRequestCount += 1;
    } else doWrite(stream, state, false, len, chunk, encoding, cb);
    return ret;
}
function doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));
    else if (writev) stream._writev(chunk, state.onwrite);
    else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
}
function onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        process.nextTick(cb, er);
        // this can emit finish, and it will always happen
        // after error
        process.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
    } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
        // this can emit finish, but finish must
        // always follow error
        finishMaybe(stream, state);
    }
}
function onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
}
function onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
    onwriteStateUpdate(state);
    if (er) onwriteError(stream, state, sync, er, cb);
    else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(stream, state);
        if (sync) process.nextTick(afterWrite, stream, state, finished, cb);
        else afterWrite(stream, state, finished, cb);
    }
}
function afterWrite(stream, state, finished, cb) {
    if (!finished) onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    finishMaybe(stream, state);
}
// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit('drain');
    }
}
// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while(entry){
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
        }
        buffer.allBuffers = allBuffers;
        doWrite(stream, state, true, state.length, buffer, '', holder.finish);
        // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
        } else state.corkedRequestsFree = new CorkedRequest(state);
        state.bufferedRequestCount = 0;
    } else {
        // Slow case, write chunks one-by-one
        while(entry){
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--;
            // if we didn't call the onwrite immediately, then
            // it means that we need to wait until it does.
            // also, that means that the chunk and cb are currently
            // being processed, so move the buffer counter past them.
            if (state.writing) break;
        }
        if (entry === null) state.lastBufferedRequest = null;
    }
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
}
Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};
Writable.prototype._writev = null;
Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;
    if (typeof chunk === 'function') {
        cb = chunk;
        chunk = null;
        encoding = null;
    } else if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
    }
    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);
    // .end() fully uncorks
    if (state.corked) {
        state.corked = 1;
        this.uncork();
    }
    // ignore unnecessary end() calls.
    if (!state.ending) endWritable(this, state, cb);
    return this;
};
Object.defineProperty(Writable.prototype, 'writableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
function needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
    stream._final(function(err) {
        state.pendingcb--;
        if (err) errorOrDestroy(stream, err);
        state.prefinished = true;
        stream.emit('prefinish');
        finishMaybe(stream, state);
    });
}
function prefinish(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === 'function' && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            process.nextTick(callFinal, stream, state);
        } else {
            state.prefinished = true;
            stream.emit('prefinish');
        }
    }
}
function finishMaybe(stream, state) {
    var need = needFinish(state);
    if (need) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit('finish');
            if (state.autoDestroy) {
                // In case of duplex streams we need a way to detect
                // if the readable side is ready for autoDestroy as well
                var rState = stream._readableState;
                if (!rState || rState.autoDestroy && rState.endEmitted) stream.destroy();
            }
        }
    }
    return need;
}
function endWritable(stream, state, cb) {
    state.ending = true;
    finishMaybe(stream, state);
    if (cb) {
        if (state.finished) process.nextTick(cb);
        else stream.once('finish', cb);
    }
    state.ended = true;
    stream.writable = false;
}
function onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while(entry){
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
    }
    // reuse the free corkReq.
    state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty(Writable.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._writableState === undefined) return false;
        return this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._writableState.destroyed = value;
    }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function(err, cb) {
    cb(err);
};

},{"960325341c691095":"d5jf4","7d0952b2aab2880f":"j92NQ","d4a8b8f0181be806":"f6fcJ","329aa7fef0ab6df1":"fCgem","6a39a8b28b6e8ab4":"g0Tbb","4b9079029d7ad85f":"5xjEV","4d4d95a33057eaa":"g46QK","df23fd9c6d29b882":"bRL3M","a02e72411207d1a6":"6j5HZ"}],"j92NQ":[function(require,module,exports,__globalThis) {
/**
 * Module exports.
 */ var global = arguments[3];
module.exports = deprecate;
/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */ function deprecate(fn, msg) {
    if (config('noDeprecation')) return fn;
    var warned = false;
    function deprecated() {
        if (!warned) {
            if (config('throwDeprecation')) throw new Error(msg);
            else if (config('traceDeprecation')) console.trace(msg);
            else console.warn(msg);
            warned = true;
        }
        return fn.apply(this, arguments);
    }
    return deprecated;
}
/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */ function config(name) {
    // accessing global.localStorage can trigger a DOMException in sandboxed iframes
    try {
        if (!global.localStorage) return false;
    } catch (_) {
        return false;
    }
    var val = global.localStorage[name];
    if (null == val) return false;
    return String(val).toLowerCase() === 'true';
}

},{}],"3vmkr":[function(require,module,exports,__globalThis) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';
/*<replacement>*/ var Buffer = require("2a29807c689a070a").Buffer;
/*</replacement>*/ var isEncoding = Buffer.isEncoding || function(encoding) {
    encoding = '' + encoding;
    switch(encoding && encoding.toLowerCase()){
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
        case 'raw':
            return true;
        default:
            return false;
    }
};
function _normalizeEncoding(enc) {
    if (!enc) return 'utf8';
    var retried;
    while(true)switch(enc){
        case 'utf8':
        case 'utf-8':
            return 'utf8';
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return 'utf16le';
        case 'latin1':
        case 'binary':
            return 'latin1';
        case 'base64':
        case 'ascii':
        case 'hex':
            return enc;
        default:
            if (retried) return; // undefined
            enc = ('' + enc).toLowerCase();
            retried = true;
    }
}
// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
    var nenc = _normalizeEncoding(enc);
    if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
    return nenc || enc;
}
// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
    this.encoding = normalizeEncoding(encoding);
    var nb;
    switch(this.encoding){
        case 'utf16le':
            this.text = utf16Text;
            this.end = utf16End;
            nb = 4;
            break;
        case 'utf8':
            this.fillLast = utf8FillLast;
            nb = 4;
            break;
        case 'base64':
            this.text = base64Text;
            this.end = base64End;
            nb = 3;
            break;
        default:
            this.write = simpleWrite;
            this.end = simpleEnd;
            return;
    }
    this.lastNeed = 0;
    this.lastTotal = 0;
    this.lastChar = Buffer.allocUnsafe(nb);
}
StringDecoder.prototype.write = function(buf) {
    if (buf.length === 0) return '';
    var r;
    var i;
    if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === undefined) return '';
        i = this.lastNeed;
        this.lastNeed = 0;
    } else i = 0;
    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
    return r || '';
};
StringDecoder.prototype.end = utf8End;
// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;
// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function(buf) {
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
};
// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
    if (byte <= 0x7F) return 0;
    else if (byte >> 5 === 0x06) return 2;
    else if (byte >> 4 === 0x0E) return 3;
    else if (byte >> 3 === 0x1E) return 4;
    return byte >> 6 === 0x02 ? -1 : -2;
}
// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
    var j = buf.length - 1;
    if (j < i) return 0;
    var nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) {
            if (nb === 2) nb = 0;
            else self.lastNeed = nb - 3;
        }
        return nb;
    }
    return 0;
}
// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
    if ((buf[0] & 0xC0) !== 0x80) {
        self.lastNeed = 0;
        return '\ufffd';
    }
    if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 0xC0) !== 0x80) {
            self.lastNeed = 1;
            return '\ufffd';
        }
        if (self.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 0xC0) !== 0x80) {
                self.lastNeed = 2;
                return '\ufffd';
            }
        }
    }
}
// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
    var p = this.lastTotal - this.lastNeed;
    var r = utf8CheckExtraBytes(this, buf, p);
    if (r !== undefined) return r;
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, p, 0, buf.length);
    this.lastNeed -= buf.length;
}
// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
    var total = utf8CheckIncomplete(this, buf, i);
    if (!this.lastNeed) return buf.toString('utf8', i);
    this.lastTotal = total;
    var end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString('utf8', i, end);
}
// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + '\ufffd';
    return r;
}
// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
    if ((buf.length - i) % 2 === 0) {
        var r = buf.toString('utf16le', i);
        if (r) {
            var c = r.charCodeAt(r.length - 1);
            if (c >= 0xD800 && c <= 0xDBFF) {
                this.lastNeed = 2;
                this.lastTotal = 4;
                this.lastChar[0] = buf[buf.length - 2];
                this.lastChar[1] = buf[buf.length - 1];
                return r.slice(0, -1);
            }
        }
        return r;
    }
    this.lastNeed = 1;
    this.lastTotal = 2;
    this.lastChar[0] = buf[buf.length - 1];
    return buf.toString('utf16le', i, buf.length - 1);
}
// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString('utf16le', 0, end);
    }
    return r;
}
function base64Text(buf, i) {
    var n = (buf.length - i) % 3;
    if (n === 0) return buf.toString('base64', i);
    this.lastNeed = 3 - n;
    this.lastTotal = 3;
    if (n === 1) this.lastChar[0] = buf[buf.length - 1];
    else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
    }
    return buf.toString('base64', i, buf.length - n);
}
function base64End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
    return r;
}
// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
    return buf.toString(this.encoding);
}
function simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : '';
}

},{"2a29807c689a070a":"eW7r9"}],"hpL3T":[function(require,module,exports,__globalThis) {
var process = require("cc8bd4d851c0d480");
'use strict';
var _Object$setPrototypeO;
function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}
var finished = require("c70af6a403549764");
var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');
function createIterResult(value, done) {
    return {
        value: value,
        done: done
    };
}
function readAndResolve(iter) {
    var resolve = iter[kLastResolve];
    if (resolve !== null) {
        var data = iter[kStream].read();
        // we defer if data is null
        // we can be expecting either 'end' or
        // 'error'
        if (data !== null) {
            iter[kLastPromise] = null;
            iter[kLastResolve] = null;
            iter[kLastReject] = null;
            resolve(createIterResult(data, false));
        }
    }
}
function onReadable(iter) {
    // we wait for the next tick, because it might
    // emit an error with process.nextTick
    process.nextTick(readAndResolve, iter);
}
function wrapForNext(lastPromise, iter) {
    return function(resolve, reject) {
        lastPromise.then(function() {
            if (iter[kEnded]) {
                resolve(createIterResult(undefined, true));
                return;
            }
            iter[kHandlePromise](resolve, reject);
        }, reject);
    };
}
var AsyncIteratorPrototype = Object.getPrototypeOf(function() {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
    get stream () {
        return this[kStream];
    },
    next: function next() {
        var _this = this;
        // if we have detected an error in the meanwhile
        // reject straight away
        var error = this[kError];
        if (error !== null) return Promise.reject(error);
        if (this[kEnded]) return Promise.resolve(createIterResult(undefined, true));
        if (this[kStream].destroyed) // We need to defer via nextTick because if .destroy(err) is
        // called, the error will be emitted via nextTick, and
        // we cannot guarantee that there is no error lingering around
        // waiting to be emitted.
        return new Promise(function(resolve, reject) {
            process.nextTick(function() {
                if (_this[kError]) reject(_this[kError]);
                else resolve(createIterResult(undefined, true));
            });
        });
        // if we have multiple next() calls
        // we will wait for the previous Promise to finish
        // this logic is optimized to support for await loops,
        // where next() is only called once at a time
        var lastPromise = this[kLastPromise];
        var promise;
        if (lastPromise) promise = new Promise(wrapForNext(lastPromise, this));
        else {
            // fast path needed to support multiple this.push()
            // without triggering the next() queue
            var data = this[kStream].read();
            if (data !== null) return Promise.resolve(createIterResult(data, false));
            promise = new Promise(this[kHandlePromise]);
        }
        this[kLastPromise] = promise;
        return promise;
    }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
    return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
    var _this2 = this;
    // destroy(err, cb) is a private API
    // we can guarantee we have that here, because we control the
    // Readable class this is attached to
    return new Promise(function(resolve, reject) {
        _this2[kStream].destroy(null, function(err) {
            if (err) {
                reject(err);
                return;
            }
            resolve(createIterResult(undefined, true));
        });
    });
}), _Object$setPrototypeO), AsyncIteratorPrototype);
var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
    var _Object$create;
    var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
        value: stream,
        writable: true
    }), _defineProperty(_Object$create, kLastResolve, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kLastReject, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kError, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
    }), _defineProperty(_Object$create, kHandlePromise, {
        value: function value(resolve, reject) {
            var data = iterator[kStream].read();
            if (data) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                resolve(createIterResult(data, false));
            } else {
                iterator[kLastResolve] = resolve;
                iterator[kLastReject] = reject;
            }
        },
        writable: true
    }), _Object$create));
    iterator[kLastPromise] = null;
    finished(stream, function(err) {
        if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
            var reject = iterator[kLastReject];
            // reject if we are waiting for data in the Promise
            // returned by next() and store the error
            if (reject !== null) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                reject(err);
            }
            iterator[kError] = err;
            return;
        }
        var resolve = iterator[kLastResolve];
        if (resolve !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve(createIterResult(undefined, true));
        }
        iterator[kEnded] = true;
    });
    stream.on('readable', onReadable.bind(null, iterator));
    return iterator;
};
module.exports = createReadableStreamAsyncIterator;

},{"cc8bd4d851c0d480":"d5jf4","c70af6a403549764":"40IlH"}],"40IlH":[function(require,module,exports,__globalThis) {
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';
var ERR_STREAM_PREMATURE_CLOSE = require("260b8c2ccb6493b7").codes.ERR_STREAM_PREMATURE_CLOSE;
function once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        callback.apply(this, args);
    };
}
function noop() {}
function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === 'function';
}
function eos(stream, opts, callback) {
    if (typeof opts === 'function') return eos(stream, null, opts);
    if (!opts) opts = {};
    callback = once(callback || noop);
    var readable = opts.readable || opts.readable !== false && stream.readable;
    var writable = opts.writable || opts.writable !== false && stream.writable;
    var onlegacyfinish = function onlegacyfinish() {
        if (!stream.writable) onfinish();
    };
    var writableEnded = stream._writableState && stream._writableState.finished;
    var onfinish = function onfinish() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
    };
    var readableEnded = stream._readableState && stream._readableState.endEmitted;
    var onend = function onend() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
    };
    var onerror = function onerror(err) {
        callback.call(stream, err);
    };
    var onclose = function onclose() {
        var err;
        if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
    };
    var onrequest = function onrequest() {
        stream.req.on('finish', onfinish);
    };
    if (isRequest(stream)) {
        stream.on('complete', onfinish);
        stream.on('abort', onclose);
        if (stream.req) onrequest();
        else stream.on('request', onrequest);
    } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on('end', onlegacyfinish);
        stream.on('close', onlegacyfinish);
    }
    stream.on('end', onend);
    stream.on('finish', onfinish);
    if (opts.error !== false) stream.on('error', onerror);
    stream.on('close', onclose);
    return function() {
        stream.removeListener('complete', onfinish);
        stream.removeListener('abort', onclose);
        stream.removeListener('request', onrequest);
        if (stream.req) stream.req.removeListener('finish', onfinish);
        stream.removeListener('end', onlegacyfinish);
        stream.removeListener('close', onlegacyfinish);
        stream.removeListener('finish', onfinish);
        stream.removeListener('end', onend);
        stream.removeListener('error', onerror);
        stream.removeListener('close', onclose);
    };
}
module.exports = eos;

},{"260b8c2ccb6493b7":"g46QK"}],"5VQDl":[function(require,module,exports,__globalThis) {
module.exports = function() {
    throw new Error('Readable.from is not available in the browser');
};

},{}],"bCnb0":[function(require,module,exports,__globalThis) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
'use strict';
module.exports = Transform;
var _require$codes = require("181e3ac8da6bd561").codes, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
var Duplex = require("74feb8f76dae610a");
require("7382ff9fb3538488")(Transform, Duplex);
function afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (cb === null) return this.emit('error', new ERR_MULTIPLE_CALLBACK());
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
}
function Transform(options) {
    if (!(this instanceof Transform)) return new Transform(options);
    Duplex.call(this, options);
    this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
    };
    // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true;
    // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;
    if (options) {
        if (typeof options.transform === 'function') this._transform = options.transform;
        if (typeof options.flush === 'function') this._flush = options.flush;
    }
    // When the writable side finishes, then flush out anything remaining.
    this.on('prefinish', prefinish);
}
function prefinish() {
    var _this = this;
    if (typeof this._flush === 'function' && !this._readableState.destroyed) this._flush(function(er, data) {
        done(_this, er, data);
    });
    else done(this, null, null);
}
Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex.prototype.push.call(this, chunk, encoding);
};
// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};
Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
};
// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
    var ts = this._transformState;
    if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
};
Transform.prototype._destroy = function(err, cb) {
    Duplex.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
    });
};
function done(stream, er, data) {
    if (er) return stream.emit('error', er);
    if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);
    // TODO(BridgeAR): Write a test for these two error cases
    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
    if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
    return stream.push(null);
}

},{"181e3ac8da6bd561":"g46QK","74feb8f76dae610a":"6j5HZ","7382ff9fb3538488":"bRL3M"}],"lN03y":[function(require,module,exports,__globalThis) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
'use strict';
module.exports = PassThrough;
var Transform = require("ef151ac5a8afeb5c");
require("ad2dd1617f55ad62")(PassThrough, Transform);
function PassThrough(options) {
    if (!(this instanceof PassThrough)) return new PassThrough(options);
    Transform.call(this, options);
}
PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
};

},{"ef151ac5a8afeb5c":"bCnb0","ad2dd1617f55ad62":"bRL3M"}],"6TCXK":[function(require,module,exports,__globalThis) {
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';
var eos;
function once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
    };
}
var _require$codes = require("e9d469d31ac56495").codes, ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
function noop(err) {
    // Rethrow the error if it exists to avoid swallowing it
    if (err) throw err;
}
function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === 'function';
}
function destroyer(stream, reading, writing, callback) {
    callback = once(callback);
    var closed = false;
    stream.on('close', function() {
        closed = true;
    });
    if (eos === undefined) eos = require("96a756f22061fd7");
    eos(stream, {
        readable: reading,
        writable: writing
    }, function(err) {
        if (err) return callback(err);
        closed = true;
        callback();
    });
    var destroyed = false;
    return function(err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true;
        // request.destroy just do .end - .abort is what we want
        if (isRequest(stream)) return stream.abort();
        if (typeof stream.destroy === 'function') return stream.destroy();
        callback(err || new ERR_STREAM_DESTROYED('pipe'));
    };
}
function call(fn) {
    fn();
}
function pipe(from, to) {
    return from.pipe(to);
}
function popCallback(streams) {
    if (!streams.length) return noop;
    if (typeof streams[streams.length - 1] !== 'function') return noop;
    return streams.pop();
}
function pipeline() {
    for(var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++)streams[_key] = arguments[_key];
    var callback = popCallback(streams);
    if (Array.isArray(streams[0])) streams = streams[0];
    if (streams.length < 2) throw new ERR_MISSING_ARGS('streams');
    var error;
    var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return destroyer(stream, reading, writing, function(err) {
            if (!error) error = err;
            if (err) destroys.forEach(call);
            if (reading) return;
            destroys.forEach(call);
            callback(error);
        });
    });
    return streams.reduce(pipe);
}
module.exports = pipeline;

},{"e9d469d31ac56495":"g46QK","96a756f22061fd7":"40IlH"}],"bFDDq":[function(require,module,exports,__globalThis) {
'use strict';
var Buffer = require("c813c8075bcf823e").Buffer;
var inherits = require("84928993e7c3934b");
var HashBase = require("4b3519823770a56d");
var ARRAY16 = new Array(16);
var zl = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
];
var zr = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
];
var sl = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
];
var sr = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
];
var hl = [
    0x00000000,
    0x5a827999,
    0x6ed9eba1,
    0x8f1bbcdc,
    0xa953fd4e
];
var hr = [
    0x50a28be6,
    0x5c4dd124,
    0x6d703ef3,
    0x7a6d76e9,
    0x00000000
];
function RIPEMD160() {
    HashBase.call(this, 64);
    // state
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;
}
inherits(RIPEMD160, HashBase);
RIPEMD160.prototype._update = function() {
    var words = ARRAY16;
    for(var j = 0; j < 16; ++j)words[j] = this._block.readInt32LE(j * 4);
    var al = this._a | 0;
    var bl = this._b | 0;
    var cl = this._c | 0;
    var dl = this._d | 0;
    var el = this._e | 0;
    var ar = this._a | 0;
    var br = this._b | 0;
    var cr = this._c | 0;
    var dr = this._d | 0;
    var er = this._e | 0;
    // computation
    for(var i = 0; i < 80; i += 1){
        var tl;
        var tr;
        if (i < 16) {
            tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);
            tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);
        } else if (i < 32) {
            tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);
            tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);
        } else if (i < 48) {
            tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);
            tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);
        } else if (i < 64) {
            tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);
            tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);
        } else {
            tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);
            tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);
        }
        al = el;
        el = dl;
        dl = rotl(cl, 10);
        cl = bl;
        bl = tl;
        ar = er;
        er = dr;
        dr = rotl(cr, 10);
        cr = br;
        br = tr;
    }
    // update state
    var t = this._b + cl + dr | 0;
    this._b = this._c + dl + er | 0;
    this._c = this._d + el + ar | 0;
    this._d = this._e + al + br | 0;
    this._e = this._a + bl + cr | 0;
    this._a = t;
};
RIPEMD160.prototype._digest = function() {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 0x80;
    if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
    }
    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();
    // produce result
    var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20);
    buffer.writeInt32LE(this._a, 0);
    buffer.writeInt32LE(this._b, 4);
    buffer.writeInt32LE(this._c, 8);
    buffer.writeInt32LE(this._d, 12);
    buffer.writeInt32LE(this._e, 16);
    return buffer;
};
function rotl(x, n) {
    return x << n | x >>> 32 - n;
}
function fn1(a, b, c, d, e, m, k, s) {
    return rotl(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;
}
function fn2(a, b, c, d, e, m, k, s) {
    return rotl(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;
}
function fn3(a, b, c, d, e, m, k, s) {
    return rotl(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;
}
function fn4(a, b, c, d, e, m, k, s) {
    return rotl(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;
}
function fn5(a, b, c, d, e, m, k, s) {
    return rotl(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;
}
module.exports = RIPEMD160;

},{"c813c8075bcf823e":"fCgem","84928993e7c3934b":"bRL3M","4b3519823770a56d":"51qBP"}],"jkn7m":[function(require,module,exports,__globalThis) {
var exports = module.exports = function SHA(algorithm) {
    algorithm = algorithm.toLowerCase();
    var Algorithm = exports[algorithm];
    if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)');
    return new Algorithm();
};
exports.sha = require("54c9313943368ce2");
exports.sha1 = require("6e6f42e0b6fe29ef");
exports.sha224 = require("cefe70c6f9f68940");
exports.sha256 = require("3b4e2aa73bc3fef5");
exports.sha384 = require("be7da8b8e5a0fd78");
exports.sha512 = require("25610a4ba83316a4");

},{"54c9313943368ce2":"6PecA","6e6f42e0b6fe29ef":"iCEYJ","cefe70c6f9f68940":"7e0O2","3b4e2aa73bc3fef5":"kVAym","be7da8b8e5a0fd78":"bWRvM","25610a4ba83316a4":"aZK4H"}],"6PecA":[function(require,module,exports,__globalThis) {
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */ var inherits = require("55404b425acd1c6f");
var Hash = require("457bc9c7737d761f");
var Buffer = require("44759e57eb2992a").Buffer;
var K = [
    0x5a827999,
    0x6ed9eba1,
    -1894007588,
    -899497514
];
var W = new Array(80);
function Sha() {
    this.init();
    this._w = W;
    Hash.call(this, 64, 56);
}
inherits(Sha, Hash);
Sha.prototype.init = function() {
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;
    return this;
};
function rotl5(num) {
    return num << 5 | num >>> 27;
}
function rotl30(num) {
    return num << 30 | num >>> 2;
}
function ft(s, b, c, d) {
    if (s === 0) return b & c | ~b & d;
    if (s === 2) return b & c | b & d | c & d;
    return b ^ c ^ d;
}
Sha.prototype._update = function(M) {
    var W = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    for(var i = 0; i < 16; ++i)W[i] = M.readInt32BE(i * 4);
    for(; i < 80; ++i)W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
    for(var j = 0; j < 80; ++j){
        var s = ~~(j / 20);
        var t = rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s] | 0;
        e = d;
        d = c;
        c = rotl30(b);
        b = a;
        a = t;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
};
Sha.prototype._hash = function() {
    var H = Buffer.allocUnsafe(20);
    H.writeInt32BE(this._a | 0, 0);
    H.writeInt32BE(this._b | 0, 4);
    H.writeInt32BE(this._c | 0, 8);
    H.writeInt32BE(this._d | 0, 12);
    H.writeInt32BE(this._e | 0, 16);
    return H;
};
module.exports = Sha;

},{"55404b425acd1c6f":"bRL3M","457bc9c7737d761f":"7wpAR","44759e57eb2992a":"eW7r9"}],"7wpAR":[function(require,module,exports,__globalThis) {
var Buffer = require("fe67468afd3c1b91").Buffer;
// prototype class for hash functions
function Hash(blockSize, finalSize) {
    this._block = Buffer.alloc(blockSize);
    this._finalSize = finalSize;
    this._blockSize = blockSize;
    this._len = 0;
}
Hash.prototype.update = function(data, enc) {
    if (typeof data === 'string') {
        enc = enc || 'utf8';
        data = Buffer.from(data, enc);
    }
    var block = this._block;
    var blockSize = this._blockSize;
    var length = data.length;
    var accum = this._len;
    for(var offset = 0; offset < length;){
        var assigned = accum % blockSize;
        var remainder = Math.min(length - offset, blockSize - assigned);
        for(var i = 0; i < remainder; i++)block[assigned + i] = data[offset + i];
        accum += remainder;
        offset += remainder;
        if (accum % blockSize === 0) this._update(block);
    }
    this._len += length;
    return this;
};
Hash.prototype.digest = function(enc) {
    var rem = this._len % this._blockSize;
    this._block[rem] = 0x80;
    // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
    // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
    this._block.fill(0, rem + 1);
    if (rem >= this._finalSize) {
        this._update(this._block);
        this._block.fill(0);
    }
    var bits = this._len * 8;
    // uint32
    if (bits <= 0xffffffff) this._block.writeUInt32BE(bits, this._blockSize - 4);
    else {
        var lowBits = (bits & 0xffffffff) >>> 0;
        var highBits = (bits - lowBits) / 0x100000000;
        this._block.writeUInt32BE(highBits, this._blockSize - 8);
        this._block.writeUInt32BE(lowBits, this._blockSize - 4);
    }
    this._update(this._block);
    var hash = this._hash();
    return enc ? hash.toString(enc) : hash;
};
Hash.prototype._update = function() {
    throw new Error('_update must be implemented by subclass');
};
module.exports = Hash;

},{"fe67468afd3c1b91":"eW7r9"}],"iCEYJ":[function(require,module,exports,__globalThis) {
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */ var inherits = require("bf0dcaa2121c06d3");
var Hash = require("788f05b1f9753762");
var Buffer = require("ee7c2a3e649d259f").Buffer;
var K = [
    0x5a827999,
    0x6ed9eba1,
    -1894007588,
    -899497514
];
var W = new Array(80);
function Sha1() {
    this.init();
    this._w = W;
    Hash.call(this, 64, 56);
}
inherits(Sha1, Hash);
Sha1.prototype.init = function() {
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;
    return this;
};
function rotl1(num) {
    return num << 1 | num >>> 31;
}
function rotl5(num) {
    return num << 5 | num >>> 27;
}
function rotl30(num) {
    return num << 30 | num >>> 2;
}
function ft(s, b, c, d) {
    if (s === 0) return b & c | ~b & d;
    if (s === 2) return b & c | b & d | c & d;
    return b ^ c ^ d;
}
Sha1.prototype._update = function(M) {
    var W = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    for(var i = 0; i < 16; ++i)W[i] = M.readInt32BE(i * 4);
    for(; i < 80; ++i)W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);
    for(var j = 0; j < 80; ++j){
        var s = ~~(j / 20);
        var t = rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s] | 0;
        e = d;
        d = c;
        c = rotl30(b);
        b = a;
        a = t;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
};
Sha1.prototype._hash = function() {
    var H = Buffer.allocUnsafe(20);
    H.writeInt32BE(this._a | 0, 0);
    H.writeInt32BE(this._b | 0, 4);
    H.writeInt32BE(this._c | 0, 8);
    H.writeInt32BE(this._d | 0, 12);
    H.writeInt32BE(this._e | 0, 16);
    return H;
};
module.exports = Sha1;

},{"bf0dcaa2121c06d3":"bRL3M","788f05b1f9753762":"7wpAR","ee7c2a3e649d259f":"eW7r9"}],"7e0O2":[function(require,module,exports,__globalThis) {
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */ var inherits = require("1759318dd61b32af");
var Sha256 = require("5a24a8ff4dc414f6");
var Hash = require("377596dd27739a66");
var Buffer = require("381289f917f16a20").Buffer;
var W = new Array(64);
function Sha224() {
    this.init();
    this._w = W // new Array(64)
    ;
    Hash.call(this, 64, 56);
}
inherits(Sha224, Sha256);
Sha224.prototype.init = function() {
    this._a = 0xc1059ed8;
    this._b = 0x367cd507;
    this._c = 0x3070dd17;
    this._d = 0xf70e5939;
    this._e = 0xffc00b31;
    this._f = 0x68581511;
    this._g = 0x64f98fa7;
    this._h = 0xbefa4fa4;
    return this;
};
Sha224.prototype._hash = function() {
    var H = Buffer.allocUnsafe(28);
    H.writeInt32BE(this._a, 0);
    H.writeInt32BE(this._b, 4);
    H.writeInt32BE(this._c, 8);
    H.writeInt32BE(this._d, 12);
    H.writeInt32BE(this._e, 16);
    H.writeInt32BE(this._f, 20);
    H.writeInt32BE(this._g, 24);
    return H;
};
module.exports = Sha224;

},{"1759318dd61b32af":"bRL3M","5a24a8ff4dc414f6":"kVAym","377596dd27739a66":"7wpAR","381289f917f16a20":"eW7r9"}],"kVAym":[function(require,module,exports,__globalThis) {
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */ var inherits = require("682a6716eeab42dd");
var Hash = require("f062bd789841a9ce");
var Buffer = require("1d47643a8adb8c1b").Buffer;
var K = [
    0x428A2F98,
    0x71374491,
    0xB5C0FBCF,
    0xE9B5DBA5,
    0x3956C25B,
    0x59F111F1,
    0x923F82A4,
    0xAB1C5ED5,
    0xD807AA98,
    0x12835B01,
    0x243185BE,
    0x550C7DC3,
    0x72BE5D74,
    0x80DEB1FE,
    0x9BDC06A7,
    0xC19BF174,
    0xE49B69C1,
    0xEFBE4786,
    0x0FC19DC6,
    0x240CA1CC,
    0x2DE92C6F,
    0x4A7484AA,
    0x5CB0A9DC,
    0x76F988DA,
    0x983E5152,
    0xA831C66D,
    0xB00327C8,
    0xBF597FC7,
    0xC6E00BF3,
    0xD5A79147,
    0x06CA6351,
    0x14292967,
    0x27B70A85,
    0x2E1B2138,
    0x4D2C6DFC,
    0x53380D13,
    0x650A7354,
    0x766A0ABB,
    0x81C2C92E,
    0x92722C85,
    0xA2BFE8A1,
    0xA81A664B,
    0xC24B8B70,
    0xC76C51A3,
    0xD192E819,
    0xD6990624,
    0xF40E3585,
    0x106AA070,
    0x19A4C116,
    0x1E376C08,
    0x2748774C,
    0x34B0BCB5,
    0x391C0CB3,
    0x4ED8AA4A,
    0x5B9CCA4F,
    0x682E6FF3,
    0x748F82EE,
    0x78A5636F,
    0x84C87814,
    0x8CC70208,
    0x90BEFFFA,
    0xA4506CEB,
    0xBEF9A3F7,
    0xC67178F2
];
var W = new Array(64);
function Sha256() {
    this.init();
    this._w = W // new Array(64)
    ;
    Hash.call(this, 64, 56);
}
inherits(Sha256, Hash);
Sha256.prototype.init = function() {
    this._a = 0x6a09e667;
    this._b = 0xbb67ae85;
    this._c = 0x3c6ef372;
    this._d = 0xa54ff53a;
    this._e = 0x510e527f;
    this._f = 0x9b05688c;
    this._g = 0x1f83d9ab;
    this._h = 0x5be0cd19;
    return this;
};
function ch(x, y, z) {
    return z ^ x & (y ^ z);
}
function maj(x, y, z) {
    return x & y | z & (x | y);
}
function sigma0(x) {
    return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);
}
function sigma1(x) {
    return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);
}
function gamma0(x) {
    return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;
}
function gamma1(x) {
    return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;
}
Sha256.prototype._update = function(M) {
    var W = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    var f = this._f | 0;
    var g = this._g | 0;
    var h = this._h | 0;
    for(var i = 0; i < 16; ++i)W[i] = M.readInt32BE(i * 4);
    for(; i < 64; ++i)W[i] = gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16] | 0;
    for(var j = 0; j < 64; ++j){
        var T1 = h + sigma1(e) + ch(e, f, g) + K[j] + W[j] | 0;
        var T2 = sigma0(a) + maj(a, b, c) | 0;
        h = g;
        g = f;
        f = e;
        e = d + T1 | 0;
        d = c;
        c = b;
        b = a;
        a = T1 + T2 | 0;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
    this._f = f + this._f | 0;
    this._g = g + this._g | 0;
    this._h = h + this._h | 0;
};
Sha256.prototype._hash = function() {
    var H = Buffer.allocUnsafe(32);
    H.writeInt32BE(this._a, 0);
    H.writeInt32BE(this._b, 4);
    H.writeInt32BE(this._c, 8);
    H.writeInt32BE(this._d, 12);
    H.writeInt32BE(this._e, 16);
    H.writeInt32BE(this._f, 20);
    H.writeInt32BE(this._g, 24);
    H.writeInt32BE(this._h, 28);
    return H;
};
module.exports = Sha256;

},{"682a6716eeab42dd":"bRL3M","f062bd789841a9ce":"7wpAR","1d47643a8adb8c1b":"eW7r9"}],"bWRvM":[function(require,module,exports,__globalThis) {
var inherits = require("2a5cbb73fedd61b");
var SHA512 = require("fdb4d0946b31cdb5");
var Hash = require("50aa04d4bd2df0e1");
var Buffer = require("3d3bcc84ec383b74").Buffer;
var W = new Array(160);
function Sha384() {
    this.init();
    this._w = W;
    Hash.call(this, 128, 112);
}
inherits(Sha384, SHA512);
Sha384.prototype.init = function() {
    this._ah = 0xcbbb9d5d;
    this._bh = 0x629a292a;
    this._ch = 0x9159015a;
    this._dh = 0x152fecd8;
    this._eh = 0x67332667;
    this._fh = 0x8eb44a87;
    this._gh = 0xdb0c2e0d;
    this._hh = 0x47b5481d;
    this._al = 0xc1059ed8;
    this._bl = 0x367cd507;
    this._cl = 0x3070dd17;
    this._dl = 0xf70e5939;
    this._el = 0xffc00b31;
    this._fl = 0x68581511;
    this._gl = 0x64f98fa7;
    this._hl = 0xbefa4fa4;
    return this;
};
Sha384.prototype._hash = function() {
    var H = Buffer.allocUnsafe(48);
    function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
    }
    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);
    return H;
};
module.exports = Sha384;

},{"2a5cbb73fedd61b":"bRL3M","fdb4d0946b31cdb5":"aZK4H","50aa04d4bd2df0e1":"7wpAR","3d3bcc84ec383b74":"eW7r9"}],"aZK4H":[function(require,module,exports,__globalThis) {
var inherits = require("8d87c82d5ce5743");
var Hash = require("27d0146c4419ba93");
var Buffer = require("602d9c7256ca6bf7").Buffer;
var K = [
    0x428a2f98,
    0xd728ae22,
    0x71374491,
    0x23ef65cd,
    0xb5c0fbcf,
    0xec4d3b2f,
    0xe9b5dba5,
    0x8189dbbc,
    0x3956c25b,
    0xf348b538,
    0x59f111f1,
    0xb605d019,
    0x923f82a4,
    0xaf194f9b,
    0xab1c5ed5,
    0xda6d8118,
    0xd807aa98,
    0xa3030242,
    0x12835b01,
    0x45706fbe,
    0x243185be,
    0x4ee4b28c,
    0x550c7dc3,
    0xd5ffb4e2,
    0x72be5d74,
    0xf27b896f,
    0x80deb1fe,
    0x3b1696b1,
    0x9bdc06a7,
    0x25c71235,
    0xc19bf174,
    0xcf692694,
    0xe49b69c1,
    0x9ef14ad2,
    0xefbe4786,
    0x384f25e3,
    0x0fc19dc6,
    0x8b8cd5b5,
    0x240ca1cc,
    0x77ac9c65,
    0x2de92c6f,
    0x592b0275,
    0x4a7484aa,
    0x6ea6e483,
    0x5cb0a9dc,
    0xbd41fbd4,
    0x76f988da,
    0x831153b5,
    0x983e5152,
    0xee66dfab,
    0xa831c66d,
    0x2db43210,
    0xb00327c8,
    0x98fb213f,
    0xbf597fc7,
    0xbeef0ee4,
    0xc6e00bf3,
    0x3da88fc2,
    0xd5a79147,
    0x930aa725,
    0x06ca6351,
    0xe003826f,
    0x14292967,
    0x0a0e6e70,
    0x27b70a85,
    0x46d22ffc,
    0x2e1b2138,
    0x5c26c926,
    0x4d2c6dfc,
    0x5ac42aed,
    0x53380d13,
    0x9d95b3df,
    0x650a7354,
    0x8baf63de,
    0x766a0abb,
    0x3c77b2a8,
    0x81c2c92e,
    0x47edaee6,
    0x92722c85,
    0x1482353b,
    0xa2bfe8a1,
    0x4cf10364,
    0xa81a664b,
    0xbc423001,
    0xc24b8b70,
    0xd0f89791,
    0xc76c51a3,
    0x0654be30,
    0xd192e819,
    0xd6ef5218,
    0xd6990624,
    0x5565a910,
    0xf40e3585,
    0x5771202a,
    0x106aa070,
    0x32bbd1b8,
    0x19a4c116,
    0xb8d2d0c8,
    0x1e376c08,
    0x5141ab53,
    0x2748774c,
    0xdf8eeb99,
    0x34b0bcb5,
    0xe19b48a8,
    0x391c0cb3,
    0xc5c95a63,
    0x4ed8aa4a,
    0xe3418acb,
    0x5b9cca4f,
    0x7763e373,
    0x682e6ff3,
    0xd6b2b8a3,
    0x748f82ee,
    0x5defb2fc,
    0x78a5636f,
    0x43172f60,
    0x84c87814,
    0xa1f0ab72,
    0x8cc70208,
    0x1a6439ec,
    0x90befffa,
    0x23631e28,
    0xa4506ceb,
    0xde82bde9,
    0xbef9a3f7,
    0xb2c67915,
    0xc67178f2,
    0xe372532b,
    0xca273ece,
    0xea26619c,
    0xd186b8c7,
    0x21c0c207,
    0xeada7dd6,
    0xcde0eb1e,
    0xf57d4f7f,
    0xee6ed178,
    0x06f067aa,
    0x72176fba,
    0x0a637dc5,
    0xa2c898a6,
    0x113f9804,
    0xbef90dae,
    0x1b710b35,
    0x131c471b,
    0x28db77f5,
    0x23047d84,
    0x32caab7b,
    0x40c72493,
    0x3c9ebe0a,
    0x15c9bebc,
    0x431d67c4,
    0x9c100d4c,
    0x4cc5d4be,
    0xcb3e42b6,
    0x597f299c,
    0xfc657e2a,
    0x5fcb6fab,
    0x3ad6faec,
    0x6c44198c,
    0x4a475817
];
var W = new Array(160);
function Sha512() {
    this.init();
    this._w = W;
    Hash.call(this, 128, 112);
}
inherits(Sha512, Hash);
Sha512.prototype.init = function() {
    this._ah = 0x6a09e667;
    this._bh = 0xbb67ae85;
    this._ch = 0x3c6ef372;
    this._dh = 0xa54ff53a;
    this._eh = 0x510e527f;
    this._fh = 0x9b05688c;
    this._gh = 0x1f83d9ab;
    this._hh = 0x5be0cd19;
    this._al = 0xf3bcc908;
    this._bl = 0x84caa73b;
    this._cl = 0xfe94f82b;
    this._dl = 0x5f1d36f1;
    this._el = 0xade682d1;
    this._fl = 0x2b3e6c1f;
    this._gl = 0xfb41bd6b;
    this._hl = 0x137e2179;
    return this;
};
function Ch(x, y, z) {
    return z ^ x & (y ^ z);
}
function maj(x, y, z) {
    return x & y | z & (x | y);
}
function sigma0(x, xl) {
    return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25);
}
function sigma1(x, xl) {
    return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23);
}
function Gamma0(x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ x >>> 7;
}
function Gamma0l(x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25);
}
function Gamma1(x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ x >>> 6;
}
function Gamma1l(x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26);
}
function getCarry(a, b) {
    return a >>> 0 < b >>> 0 ? 1 : 0;
}
Sha512.prototype._update = function(M) {
    var W = this._w;
    var ah = this._ah | 0;
    var bh = this._bh | 0;
    var ch = this._ch | 0;
    var dh = this._dh | 0;
    var eh = this._eh | 0;
    var fh = this._fh | 0;
    var gh = this._gh | 0;
    var hh = this._hh | 0;
    var al = this._al | 0;
    var bl = this._bl | 0;
    var cl = this._cl | 0;
    var dl = this._dl | 0;
    var el = this._el | 0;
    var fl = this._fl | 0;
    var gl = this._gl | 0;
    var hl = this._hl | 0;
    for(var i = 0; i < 32; i += 2){
        W[i] = M.readInt32BE(i * 4);
        W[i + 1] = M.readInt32BE(i * 4 + 4);
    }
    for(; i < 160; i += 2){
        var xh = W[i - 30];
        var xl = W[i - 30 + 1];
        var gamma0 = Gamma0(xh, xl);
        var gamma0l = Gamma0l(xl, xh);
        xh = W[i - 4];
        xl = W[i - 4 + 1];
        var gamma1 = Gamma1(xh, xl);
        var gamma1l = Gamma1l(xl, xh);
        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
        var Wi7h = W[i - 14];
        var Wi7l = W[i - 14 + 1];
        var Wi16h = W[i - 32];
        var Wi16l = W[i - 32 + 1];
        var Wil = gamma0l + Wi7l | 0;
        var Wih = gamma0 + Wi7h + getCarry(Wil, gamma0l) | 0;
        Wil = Wil + gamma1l | 0;
        Wih = Wih + gamma1 + getCarry(Wil, gamma1l) | 0;
        Wil = Wil + Wi16l | 0;
        Wih = Wih + Wi16h + getCarry(Wil, Wi16l) | 0;
        W[i] = Wih;
        W[i + 1] = Wil;
    }
    for(var j = 0; j < 160; j += 2){
        Wih = W[j];
        Wil = W[j + 1];
        var majh = maj(ah, bh, ch);
        var majl = maj(al, bl, cl);
        var sigma0h = sigma0(ah, al);
        var sigma0l = sigma0(al, ah);
        var sigma1h = sigma1(eh, el);
        var sigma1l = sigma1(el, eh);
        // t1 = h + sigma1 + ch + K[j] + W[j]
        var Kih = K[j];
        var Kil = K[j + 1];
        var chh = Ch(eh, fh, gh);
        var chl = Ch(el, fl, gl);
        var t1l = hl + sigma1l | 0;
        var t1h = hh + sigma1h + getCarry(t1l, hl) | 0;
        t1l = t1l + chl | 0;
        t1h = t1h + chh + getCarry(t1l, chl) | 0;
        t1l = t1l + Kil | 0;
        t1h = t1h + Kih + getCarry(t1l, Kil) | 0;
        t1l = t1l + Wil | 0;
        t1h = t1h + Wih + getCarry(t1l, Wil) | 0;
        // t2 = sigma0 + maj
        var t2l = sigma0l + majl | 0;
        var t2h = sigma0h + majh + getCarry(t2l, sigma0l) | 0;
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        el = dl + t1l | 0;
        eh = dh + t1h + getCarry(el, dl) | 0;
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        al = t1l + t2l | 0;
        ah = t1h + t2h + getCarry(al, t1l) | 0;
    }
    this._al = this._al + al | 0;
    this._bl = this._bl + bl | 0;
    this._cl = this._cl + cl | 0;
    this._dl = this._dl + dl | 0;
    this._el = this._el + el | 0;
    this._fl = this._fl + fl | 0;
    this._gl = this._gl + gl | 0;
    this._hl = this._hl + hl | 0;
    this._ah = this._ah + ah + getCarry(this._al, al) | 0;
    this._bh = this._bh + bh + getCarry(this._bl, bl) | 0;
    this._ch = this._ch + ch + getCarry(this._cl, cl) | 0;
    this._dh = this._dh + dh + getCarry(this._dl, dl) | 0;
    this._eh = this._eh + eh + getCarry(this._el, el) | 0;
    this._fh = this._fh + fh + getCarry(this._fl, fl) | 0;
    this._gh = this._gh + gh + getCarry(this._gl, gl) | 0;
    this._hh = this._hh + hh + getCarry(this._hl, hl) | 0;
};
Sha512.prototype._hash = function() {
    var H = Buffer.allocUnsafe(64);
    function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
    }
    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);
    writeInt64BE(this._gh, this._gl, 48);
    writeInt64BE(this._hh, this._hl, 56);
    return H;
};
module.exports = Sha512;

},{"8d87c82d5ce5743":"bRL3M","27d0146c4419ba93":"7wpAR","602d9c7256ca6bf7":"eW7r9"}],"g5fTz":[function(require,module,exports,__globalThis) {
'use strict';
var Buffer = require("631f7eb12d35b579").Buffer;
var Transform = require("5b378a2a05398c5").Transform;
var StringDecoder = require("d42da7de127e1c4b").StringDecoder;
var inherits = require("7a0f2f27fe0a389b");
function CipherBase(hashMode) {
    Transform.call(this);
    this.hashMode = typeof hashMode === 'string';
    if (this.hashMode) this[hashMode] = this._finalOrDigest;
    else this['final'] = this._finalOrDigest;
    if (this._final) {
        this.__final = this._final;
        this._final = null;
    }
    this._decoder = null;
    this._encoding = null;
}
inherits(CipherBase, Transform);
var useUint8Array = typeof Uint8Array !== 'undefined';
var useArrayBuffer = typeof ArrayBuffer !== 'undefined' && typeof Uint8Array !== 'undefined' && ArrayBuffer.isView && (Buffer.prototype instanceof Uint8Array || Buffer.TYPED_ARRAY_SUPPORT);
function toBuffer(data, encoding) {
    /*
	 * No need to do anything for exact instance
	 * This is only valid when safe-buffer.Buffer === buffer.Buffer, i.e. when Buffer.from/Buffer.alloc existed
	 */ if (data instanceof Buffer) return data;
    // Convert strings to Buffer
    if (typeof data === 'string') return Buffer.from(data, encoding);
    /*
	 * Wrap any TypedArray instances and DataViews
	 * Makes sense only on engines with full TypedArray support -- let Buffer detect that
	 */ if (useArrayBuffer && ArrayBuffer.isView(data)) {
        // Bug in Node.js <6.3.1, which treats this as out-of-bounds
        if (data.byteLength === 0) return Buffer.alloc(0);
        var res = Buffer.from(data.buffer, data.byteOffset, data.byteLength);
        /*
		 * Recheck result size, as offset/length doesn't work on Node.js <5.10
		 * We just go to Uint8Array case if this fails
		 */ if (res.byteLength === data.byteLength) return res;
    }
    /*
	 * Uint8Array in engines where Buffer.from might not work with ArrayBuffer, just copy over
	 * Doesn't make sense with other TypedArray instances
	 */ if (useUint8Array && data instanceof Uint8Array) return Buffer.from(data);
    /*
	 * Old Buffer polyfill on an engine that doesn't have TypedArray support
	 * Also, this is from a different Buffer polyfill implementation then we have, as instanceof check failed
	 * Convert to our current Buffer implementation
	 */ if (Buffer.isBuffer(data) && data.constructor && typeof data.constructor.isBuffer === 'function' && data.constructor.isBuffer(data)) return Buffer.from(data);
    throw new TypeError('The "data" argument must be of type string or an instance of Buffer, TypedArray, or DataView.');
}
CipherBase.prototype.update = function(data, inputEnc, outputEnc) {
    var bufferData = toBuffer(data, inputEnc); // asserts correct input type
    var outData = this._update(bufferData);
    if (this.hashMode) return this;
    if (outputEnc) outData = this._toString(outData, outputEnc);
    return outData;
};
CipherBase.prototype.setAutoPadding = function() {};
CipherBase.prototype.getAuthTag = function() {
    throw new Error('trying to get auth tag in unsupported state');
};
CipherBase.prototype.setAuthTag = function() {
    throw new Error('trying to set auth tag in unsupported state');
};
CipherBase.prototype.setAAD = function() {
    throw new Error('trying to set aad in unsupported state');
};
CipherBase.prototype._transform = function(data, _, next) {
    var err;
    try {
        if (this.hashMode) this._update(data);
        else this.push(this._update(data));
    } catch (e) {
        err = e;
    } finally{
        next(err);
    }
};
CipherBase.prototype._flush = function(done) {
    var err;
    try {
        this.push(this.__final());
    } catch (e) {
        err = e;
    }
    done(err);
};
CipherBase.prototype._finalOrDigest = function(outputEnc) {
    var outData = this.__final() || Buffer.alloc(0);
    if (outputEnc) outData = this._toString(outData, outputEnc, true);
    return outData;
};
CipherBase.prototype._toString = function(value, enc, fin) {
    if (!this._decoder) {
        this._decoder = new StringDecoder(enc);
        this._encoding = enc;
    }
    if (this._encoding !== enc) throw new Error("can\u2019t switch encodings");
    var out = this._decoder.write(value);
    if (fin) out += this._decoder.end();
    return out;
};
module.exports = CipherBase;

},{"631f7eb12d35b579":"eW7r9","5b378a2a05398c5":"j77ns","d42da7de127e1c4b":"3vmkr","7a0f2f27fe0a389b":"bRL3M"}],"k1utz":[function(require,module,exports,__globalThis) {
'use strict';
var inherits = require("6a73c7c8ca6b61fa");
var Legacy = require("e1b443c27c833bc0");
var Base = require("7571755cc57fd60e");
var Buffer = require("b8ba1339feab1938").Buffer;
var md5 = require("c00fb3fd28cadeb2");
var RIPEMD160 = require("b7f8eae556813ec1");
var sha = require("40c5a912778271f7");
var ZEROS = Buffer.alloc(128);
function Hmac(alg, key) {
    Base.call(this, 'digest');
    if (typeof key === 'string') key = Buffer.from(key);
    var blocksize = alg === 'sha512' || alg === 'sha384' ? 128 : 64;
    this._alg = alg;
    this._key = key;
    if (key.length > blocksize) {
        var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg);
        key = hash.update(key).digest();
    } else if (key.length < blocksize) key = Buffer.concat([
        key,
        ZEROS
    ], blocksize);
    var ipad = this._ipad = Buffer.allocUnsafe(blocksize);
    var opad = this._opad = Buffer.allocUnsafe(blocksize);
    for(var i = 0; i < blocksize; i++){
        ipad[i] = key[i] ^ 0x36;
        opad[i] = key[i] ^ 0x5C;
    }
    this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg);
    this._hash.update(ipad);
}
inherits(Hmac, Base);
Hmac.prototype._update = function(data) {
    this._hash.update(data);
};
Hmac.prototype._final = function() {
    var h = this._hash.digest();
    var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg);
    return hash.update(this._opad).update(h).digest();
};
module.exports = function createHmac(alg, key) {
    alg = alg.toLowerCase();
    if (alg === 'rmd160' || alg === 'ripemd160') return new Hmac('rmd160', key);
    if (alg === 'md5') return new Legacy(md5, key);
    return new Hmac(alg, key);
};

},{"6a73c7c8ca6b61fa":"bRL3M","e1b443c27c833bc0":"kO6k7","7571755cc57fd60e":"g5fTz","b8ba1339feab1938":"eW7r9","c00fb3fd28cadeb2":"h5gRT","b7f8eae556813ec1":"bFDDq","40c5a912778271f7":"jkn7m"}],"kO6k7":[function(require,module,exports,__globalThis) {
'use strict';
var inherits = require("2baf2864ece10f11");
var Buffer = require("c7fb5e22d675c53c").Buffer;
var Base = require("8fdec7d6b96329ea");
var ZEROS = Buffer.alloc(128);
var blocksize = 64;
function Hmac(alg, key) {
    Base.call(this, 'digest');
    if (typeof key === 'string') key = Buffer.from(key);
    this._alg = alg;
    this._key = key;
    if (key.length > blocksize) key = alg(key);
    else if (key.length < blocksize) key = Buffer.concat([
        key,
        ZEROS
    ], blocksize);
    var ipad = this._ipad = Buffer.allocUnsafe(blocksize);
    var opad = this._opad = Buffer.allocUnsafe(blocksize);
    for(var i = 0; i < blocksize; i++){
        ipad[i] = key[i] ^ 0x36;
        opad[i] = key[i] ^ 0x5C;
    }
    this._hash = [
        ipad
    ];
}
inherits(Hmac, Base);
Hmac.prototype._update = function(data) {
    this._hash.push(data);
};
Hmac.prototype._final = function() {
    var h = this._alg(Buffer.concat(this._hash));
    return this._alg(Buffer.concat([
        this._opad,
        h
    ]));
};
module.exports = Hmac;

},{"2baf2864ece10f11":"bRL3M","c7fb5e22d675c53c":"eW7r9","8fdec7d6b96329ea":"g5fTz"}],"h5gRT":[function(require,module,exports,__globalThis) {
var MD5 = require("f07cc93582c49804");
module.exports = function(buffer) {
    return new MD5().update(buffer).digest();
};

},{"f07cc93582c49804":"45VeE"}],"busIB":[function(require,module,exports,__globalThis) {
'use strict';
module.exports = require("b6a65ebe2480cb5a");

},{"b6a65ebe2480cb5a":"kWFdV"}],"kWFdV":[function(require,module,exports,__globalThis) {
module.exports = JSON.parse("{\"sha224WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha224\",\"id\":\"302d300d06096086480165030402040500041c\"},\"RSA-SHA224\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha224\",\"id\":\"302d300d06096086480165030402040500041c\"},\"sha256WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha256\",\"id\":\"3031300d060960864801650304020105000420\"},\"RSA-SHA256\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha256\",\"id\":\"3031300d060960864801650304020105000420\"},\"sha384WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha384\",\"id\":\"3041300d060960864801650304020205000430\"},\"RSA-SHA384\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha384\",\"id\":\"3041300d060960864801650304020205000430\"},\"sha512WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha512\",\"id\":\"3051300d060960864801650304020305000440\"},\"RSA-SHA512\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha512\",\"id\":\"3051300d060960864801650304020305000440\"},\"RSA-SHA1\":{\"sign\":\"rsa\",\"hash\":\"sha1\",\"id\":\"3021300906052b0e03021a05000414\"},\"ecdsa-with-SHA1\":{\"sign\":\"ecdsa\",\"hash\":\"sha1\",\"id\":\"\"},\"sha256\":{\"sign\":\"ecdsa\",\"hash\":\"sha256\",\"id\":\"\"},\"sha224\":{\"sign\":\"ecdsa\",\"hash\":\"sha224\",\"id\":\"\"},\"sha384\":{\"sign\":\"ecdsa\",\"hash\":\"sha384\",\"id\":\"\"},\"sha512\":{\"sign\":\"ecdsa\",\"hash\":\"sha512\",\"id\":\"\"},\"DSA-SHA\":{\"sign\":\"dsa\",\"hash\":\"sha1\",\"id\":\"\"},\"DSA-SHA1\":{\"sign\":\"dsa\",\"hash\":\"sha1\",\"id\":\"\"},\"DSA\":{\"sign\":\"dsa\",\"hash\":\"sha1\",\"id\":\"\"},\"DSA-WITH-SHA224\":{\"sign\":\"dsa\",\"hash\":\"sha224\",\"id\":\"\"},\"DSA-SHA224\":{\"sign\":\"dsa\",\"hash\":\"sha224\",\"id\":\"\"},\"DSA-WITH-SHA256\":{\"sign\":\"dsa\",\"hash\":\"sha256\",\"id\":\"\"},\"DSA-SHA256\":{\"sign\":\"dsa\",\"hash\":\"sha256\",\"id\":\"\"},\"DSA-WITH-SHA384\":{\"sign\":\"dsa\",\"hash\":\"sha384\",\"id\":\"\"},\"DSA-SHA384\":{\"sign\":\"dsa\",\"hash\":\"sha384\",\"id\":\"\"},\"DSA-WITH-SHA512\":{\"sign\":\"dsa\",\"hash\":\"sha512\",\"id\":\"\"},\"DSA-SHA512\":{\"sign\":\"dsa\",\"hash\":\"sha512\",\"id\":\"\"},\"DSA-RIPEMD160\":{\"sign\":\"dsa\",\"hash\":\"rmd160\",\"id\":\"\"},\"ripemd160WithRSA\":{\"sign\":\"rsa\",\"hash\":\"rmd160\",\"id\":\"3021300906052b2403020105000414\"},\"RSA-RIPEMD160\":{\"sign\":\"rsa\",\"hash\":\"rmd160\",\"id\":\"3021300906052b2403020105000414\"},\"md5WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"md5\",\"id\":\"3020300c06082a864886f70d020505000410\"},\"RSA-MD5\":{\"sign\":\"rsa\",\"hash\":\"md5\",\"id\":\"3020300c06082a864886f70d020505000410\"}}");

},{}],"g38Hg":[function(require,module,exports,__globalThis) {
exports.pbkdf2 = require("50310b85983e4f32");
exports.pbkdf2Sync = require("5f7b0df9c2ef196d");

},{"50310b85983e4f32":"aqdig","5f7b0df9c2ef196d":"lh9gw"}],"aqdig":[function(require,module,exports,__globalThis) {
var global = arguments[3];
var Buffer = require("a1f6b66eddae53e0").Buffer;
var checkParameters = require("a915fb954a5b62ac");
var defaultEncoding = require("76b8747fb257c65c");
var sync = require("f6f43e3eaadd9ae9");
var toBuffer = require("d12cab846fc3f945");
var ZERO_BUF;
var subtle = global.crypto && global.crypto.subtle;
var toBrowser = {
    sha: 'SHA-1',
    'sha-1': 'SHA-1',
    sha1: 'SHA-1',
    sha256: 'SHA-256',
    'sha-256': 'SHA-256',
    sha384: 'SHA-384',
    'sha-384': 'SHA-384',
    'sha-512': 'SHA-512',
    sha512: 'SHA-512'
};
var checks = [];
function checkNative(algo) {
    if (global.process && !global.process.browser) return Promise.resolve(false);
    if (!subtle || !subtle.importKey || !subtle.deriveBits) return Promise.resolve(false);
    if (checks[algo] !== undefined) return checks[algo];
    ZERO_BUF = ZERO_BUF || Buffer.alloc(8);
    var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo).then(function() {
        return true;
    }).catch(function() {
        return false;
    });
    checks[algo] = prom;
    return prom;
}
var nextTick;
function getNextTick() {
    if (nextTick) return nextTick;
    if (global.process && global.process.nextTick) nextTick = global.process.nextTick;
    else if (global.queueMicrotask) nextTick = global.queueMicrotask;
    else if (global.setImmediate) nextTick = global.setImmediate;
    else nextTick = global.setTimeout;
    return nextTick;
}
function browserPbkdf2(password, salt, iterations, length, algo) {
    return subtle.importKey('raw', password, {
        name: 'PBKDF2'
    }, false, [
        'deriveBits'
    ]).then(function(key) {
        return subtle.deriveBits({
            name: 'PBKDF2',
            salt: salt,
            iterations: iterations,
            hash: {
                name: algo
            }
        }, key, length << 3);
    }).then(function(res) {
        return Buffer.from(res);
    });
}
function resolvePromise(promise, callback) {
    promise.then(function(out) {
        getNextTick()(function() {
            callback(null, out);
        });
    }, function(e) {
        getNextTick()(function() {
            callback(e);
        });
    });
}
module.exports = function(password, salt, iterations, keylen, digest, callback) {
    if (typeof digest === 'function') {
        callback = digest;
        digest = undefined;
    }
    digest = digest || 'sha1';
    var algo = toBrowser[digest.toLowerCase()];
    if (!algo || typeof global.Promise !== 'function') {
        getNextTick()(function() {
            var out;
            try {
                out = sync(password, salt, iterations, keylen, digest);
            } catch (e) {
                return callback(e);
            }
            callback(null, out);
        });
        return;
    }
    checkParameters(iterations, keylen);
    password = toBuffer(password, defaultEncoding, 'Password');
    salt = toBuffer(salt, defaultEncoding, 'Salt');
    if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2');
    resolvePromise(checkNative(algo).then(function(resp) {
        if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo);
        return sync(password, salt, iterations, keylen, digest);
    }), callback);
};

},{"a1f6b66eddae53e0":"eW7r9","a915fb954a5b62ac":"jg75G","76b8747fb257c65c":"T9r9Q","f6f43e3eaadd9ae9":"lh9gw","d12cab846fc3f945":"kaFyH"}],"jg75G":[function(require,module,exports,__globalThis) {
var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs
;
module.exports = function(iterations, keylen) {
    if (typeof iterations !== 'number') throw new TypeError('Iterations not a number');
    if (iterations < 0) throw new TypeError('Bad iterations');
    if (typeof keylen !== 'number') throw new TypeError('Key length not a number');
    if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) throw new TypeError('Bad key length');
};

},{}],"T9r9Q":[function(require,module,exports,__globalThis) {
var global = arguments[3];
var process = require("6b9fe6b7a0bbf941");
var defaultEncoding;
/* istanbul ignore next */ if (global.process && global.process.browser) defaultEncoding = 'utf-8';
else if (global.process && global.process.version) {
    var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10);
    defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary';
} else defaultEncoding = 'utf-8';
module.exports = defaultEncoding;

},{"6b9fe6b7a0bbf941":"d5jf4"}],"lh9gw":[function(require,module,exports,__globalThis) {
var md5 = require("1e04e1c2d51cd13d");
var RIPEMD160 = require("42015ac33af139f8");
var sha = require("a7eb8e83614997ca");
var Buffer = require("290c92d9373f664d").Buffer;
var checkParameters = require("1b04775c4713da3d");
var defaultEncoding = require("b290a762e8475e9f");
var toBuffer = require("82c0eccfe5526b2c");
var ZEROS = Buffer.alloc(128);
var sizes = {
    md5: 16,
    sha1: 20,
    sha224: 28,
    sha256: 32,
    sha384: 48,
    sha512: 64,
    rmd160: 20,
    ripemd160: 20
};
function Hmac(alg, key, saltLen) {
    var hash = getDigest(alg);
    var blocksize = alg === 'sha512' || alg === 'sha384' ? 128 : 64;
    if (key.length > blocksize) key = hash(key);
    else if (key.length < blocksize) key = Buffer.concat([
        key,
        ZEROS
    ], blocksize);
    var ipad = Buffer.allocUnsafe(blocksize + sizes[alg]);
    var opad = Buffer.allocUnsafe(blocksize + sizes[alg]);
    for(var i = 0; i < blocksize; i++){
        ipad[i] = key[i] ^ 0x36;
        opad[i] = key[i] ^ 0x5C;
    }
    var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4);
    ipad.copy(ipad1, 0, 0, blocksize);
    this.ipad1 = ipad1;
    this.ipad2 = ipad;
    this.opad = opad;
    this.alg = alg;
    this.blocksize = blocksize;
    this.hash = hash;
    this.size = sizes[alg];
}
Hmac.prototype.run = function(data, ipad) {
    data.copy(ipad, this.blocksize);
    var h = this.hash(ipad);
    h.copy(this.opad, this.blocksize);
    return this.hash(this.opad);
};
function getDigest(alg) {
    function shaFunc(data) {
        return sha(alg).update(data).digest();
    }
    function rmd160Func(data) {
        return new RIPEMD160().update(data).digest();
    }
    if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func;
    if (alg === 'md5') return md5;
    return shaFunc;
}
function pbkdf2(password, salt, iterations, keylen, digest) {
    checkParameters(iterations, keylen);
    password = toBuffer(password, defaultEncoding, 'Password');
    salt = toBuffer(salt, defaultEncoding, 'Salt');
    digest = digest || 'sha1';
    var hmac = new Hmac(digest, password, salt.length);
    var DK = Buffer.allocUnsafe(keylen);
    var block1 = Buffer.allocUnsafe(salt.length + 4);
    salt.copy(block1, 0, 0, salt.length);
    var destPos = 0;
    var hLen = sizes[digest];
    var l = Math.ceil(keylen / hLen);
    for(var i = 1; i <= l; i++){
        block1.writeUInt32BE(i, salt.length);
        var T = hmac.run(block1, hmac.ipad1);
        var U = T;
        for(var j = 1; j < iterations; j++){
            U = hmac.run(U, hmac.ipad2);
            for(var k = 0; k < hLen; k++)T[k] ^= U[k];
        }
        T.copy(DK, destPos);
        destPos += hLen;
    }
    return DK;
}
module.exports = pbkdf2;

},{"1e04e1c2d51cd13d":"h5gRT","42015ac33af139f8":"bFDDq","a7eb8e83614997ca":"jkn7m","290c92d9373f664d":"eW7r9","1b04775c4713da3d":"jg75G","b290a762e8475e9f":"T9r9Q","82c0eccfe5526b2c":"kaFyH"}],"kaFyH":[function(require,module,exports,__globalThis) {
var Buffer = require("cc6579c2e1506b6d").Buffer;
module.exports = function(thing, encoding, name) {
    if (Buffer.isBuffer(thing)) return thing;
    else if (typeof thing === 'string') return Buffer.from(thing, encoding);
    else if (ArrayBuffer.isView(thing)) return Buffer.from(thing.buffer);
    else throw new TypeError(name + ' must be a string, a Buffer, a typed array or a DataView');
};

},{"cc6579c2e1506b6d":"eW7r9"}],"d4idn":[function(require,module,exports,__globalThis) {
var DES = require("9fddd06e02c9f65f");
var aes = require("c080e0e074a10616");
var aesModes = require("deca4106fa6cf801");
var desModes = require("7141e0762da15af0");
var ebtk = require("ca278cb2f2d32ea3");
function createCipher(suite, password) {
    suite = suite.toLowerCase();
    var keyLen, ivLen;
    if (aesModes[suite]) {
        keyLen = aesModes[suite].key;
        ivLen = aesModes[suite].iv;
    } else if (desModes[suite]) {
        keyLen = desModes[suite].key * 8;
        ivLen = desModes[suite].iv;
    } else throw new TypeError('invalid suite type');
    var keys = ebtk(password, false, keyLen, ivLen);
    return createCipheriv(suite, keys.key, keys.iv);
}
function createDecipher(suite, password) {
    suite = suite.toLowerCase();
    var keyLen, ivLen;
    if (aesModes[suite]) {
        keyLen = aesModes[suite].key;
        ivLen = aesModes[suite].iv;
    } else if (desModes[suite]) {
        keyLen = desModes[suite].key * 8;
        ivLen = desModes[suite].iv;
    } else throw new TypeError('invalid suite type');
    var keys = ebtk(password, false, keyLen, ivLen);
    return createDecipheriv(suite, keys.key, keys.iv);
}
function createCipheriv(suite, key, iv) {
    suite = suite.toLowerCase();
    if (aesModes[suite]) return aes.createCipheriv(suite, key, iv);
    if (desModes[suite]) return new DES({
        key: key,
        iv: iv,
        mode: suite
    });
    throw new TypeError('invalid suite type');
}
function createDecipheriv(suite, key, iv) {
    suite = suite.toLowerCase();
    if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv);
    if (desModes[suite]) return new DES({
        key: key,
        iv: iv,
        mode: suite,
        decrypt: true
    });
    throw new TypeError('invalid suite type');
}
function getCiphers() {
    return Object.keys(desModes).concat(aes.getCiphers());
}
exports.createCipher = exports.Cipher = createCipher;
exports.createCipheriv = exports.Cipheriv = createCipheriv;
exports.createDecipher = exports.Decipher = createDecipher;
exports.createDecipheriv = exports.Decipheriv = createDecipheriv;
exports.listCiphers = exports.getCiphers = getCiphers;

},{"9fddd06e02c9f65f":"d7hSK","c080e0e074a10616":"hnlHj","deca4106fa6cf801":"jyQSU","7141e0762da15af0":"iO8co","ca278cb2f2d32ea3":"1rd4d"}],"d7hSK":[function(require,module,exports,__globalThis) {
var CipherBase = require("4df025afd5a20f9f");
var des = require("8ea0942e2f125a3");
var inherits = require("8a7d640fedcdd788");
var Buffer = require("c9c674d2a2a092c4").Buffer;
var modes = {
    'des-ede3-cbc': des.CBC.instantiate(des.EDE),
    'des-ede3': des.EDE,
    'des-ede-cbc': des.CBC.instantiate(des.EDE),
    'des-ede': des.EDE,
    'des-cbc': des.CBC.instantiate(des.DES),
    'des-ecb': des.DES
};
modes.des = modes['des-cbc'];
modes.des3 = modes['des-ede3-cbc'];
module.exports = DES;
inherits(DES, CipherBase);
function DES(opts) {
    CipherBase.call(this);
    var modeName = opts.mode.toLowerCase();
    var mode = modes[modeName];
    var type;
    if (opts.decrypt) type = 'decrypt';
    else type = 'encrypt';
    var key = opts.key;
    if (!Buffer.isBuffer(key)) key = Buffer.from(key);
    if (modeName === 'des-ede' || modeName === 'des-ede-cbc') key = Buffer.concat([
        key,
        key.slice(0, 8)
    ]);
    var iv = opts.iv;
    if (!Buffer.isBuffer(iv)) iv = Buffer.from(iv);
    this._des = mode.create({
        key: key,
        iv: iv,
        type: type
    });
}
DES.prototype._update = function(data) {
    return Buffer.from(this._des.update(data));
};
DES.prototype._final = function() {
    return Buffer.from(this._des.final());
};

},{"4df025afd5a20f9f":"g5fTz","8ea0942e2f125a3":"jn95T","8a7d640fedcdd788":"bRL3M","c9c674d2a2a092c4":"eW7r9"}],"jn95T":[function(require,module,exports,__globalThis) {
'use strict';
exports.utils = require("c56851640eb0e265");
exports.Cipher = require("22f0b7ac3b9c9316");
exports.DES = require("d0445787359f92a0");
exports.CBC = require("203ada8fdbbff440");
exports.EDE = require("736756ddbc573f7");

},{"c56851640eb0e265":"aeccw","22f0b7ac3b9c9316":"jz3In","d0445787359f92a0":"gDFTo","203ada8fdbbff440":"lPo0P","736756ddbc573f7":"avp7S"}],"aeccw":[function(require,module,exports,__globalThis) {
'use strict';
exports.readUInt32BE = function readUInt32BE(bytes, off) {
    var res = bytes[0 + off] << 24 | bytes[1 + off] << 16 | bytes[2 + off] << 8 | bytes[3 + off];
    return res >>> 0;
};
exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
    bytes[0 + off] = value >>> 24;
    bytes[1 + off] = value >>> 16 & 0xff;
    bytes[2 + off] = value >>> 8 & 0xff;
    bytes[3 + off] = value & 0xff;
};
exports.ip = function ip(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    for(var i = 6; i >= 0; i -= 2){
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inR >>> j + i & 1;
        }
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inL >>> j + i & 1;
        }
    }
    for(var i = 6; i >= 0; i -= 2){
        for(var j = 1; j <= 25; j += 8){
            outR <<= 1;
            outR |= inR >>> j + i & 1;
        }
        for(var j = 1; j <= 25; j += 8){
            outR <<= 1;
            outR |= inL >>> j + i & 1;
        }
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
exports.rip = function rip(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    for(var i = 0; i < 4; i++)for(var j = 24; j >= 0; j -= 8){
        outL <<= 1;
        outL |= inR >>> j + i & 1;
        outL <<= 1;
        outL |= inL >>> j + i & 1;
    }
    for(var i = 4; i < 8; i++)for(var j = 24; j >= 0; j -= 8){
        outR <<= 1;
        outR |= inR >>> j + i & 1;
        outR <<= 1;
        outR |= inL >>> j + i & 1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
exports.pc1 = function pc1(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    // 7, 15, 23, 31, 39, 47, 55, 63
    // 6, 14, 22, 30, 39, 47, 55, 63
    // 5, 13, 21, 29, 39, 47, 55, 63
    // 4, 12, 20, 28
    for(var i = 7; i >= 5; i--){
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inR >> j + i & 1;
        }
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inL >> j + i & 1;
        }
    }
    for(var j = 0; j <= 24; j += 8){
        outL <<= 1;
        outL |= inR >> j + i & 1;
    }
    // 1, 9, 17, 25, 33, 41, 49, 57
    // 2, 10, 18, 26, 34, 42, 50, 58
    // 3, 11, 19, 27, 35, 43, 51, 59
    // 36, 44, 52, 60
    for(var i = 1; i <= 3; i++){
        for(var j = 0; j <= 24; j += 8){
            outR <<= 1;
            outR |= inR >> j + i & 1;
        }
        for(var j = 0; j <= 24; j += 8){
            outR <<= 1;
            outR |= inL >> j + i & 1;
        }
    }
    for(var j = 0; j <= 24; j += 8){
        outR <<= 1;
        outR |= inL >> j + i & 1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
exports.r28shl = function r28shl(num, shift) {
    return num << shift & 0xfffffff | num >>> 28 - shift;
};
var pc2table = [
    // inL => outL
    14,
    11,
    17,
    4,
    27,
    23,
    25,
    0,
    13,
    22,
    7,
    18,
    5,
    9,
    16,
    24,
    2,
    20,
    12,
    21,
    1,
    8,
    15,
    26,
    // inR => outR
    15,
    4,
    25,
    19,
    9,
    1,
    26,
    16,
    5,
    11,
    23,
    8,
    12,
    7,
    17,
    0,
    22,
    3,
    10,
    14,
    6,
    20,
    27,
    24
];
exports.pc2 = function pc2(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    var len = pc2table.length >>> 1;
    for(var i = 0; i < len; i++){
        outL <<= 1;
        outL |= inL >>> pc2table[i] & 0x1;
    }
    for(var i = len; i < pc2table.length; i++){
        outR <<= 1;
        outR |= inR >>> pc2table[i] & 0x1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
exports.expand = function expand(r, out, off) {
    var outL = 0;
    var outR = 0;
    outL = (r & 1) << 5 | r >>> 27;
    for(var i = 23; i >= 15; i -= 4){
        outL <<= 6;
        outL |= r >>> i & 0x3f;
    }
    for(var i = 11; i >= 3; i -= 4){
        outR |= r >>> i & 0x3f;
        outR <<= 6;
    }
    outR |= (r & 0x1f) << 1 | r >>> 31;
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
var sTable = [
    14,
    0,
    4,
    15,
    13,
    7,
    1,
    4,
    2,
    14,
    15,
    2,
    11,
    13,
    8,
    1,
    3,
    10,
    10,
    6,
    6,
    12,
    12,
    11,
    5,
    9,
    9,
    5,
    0,
    3,
    7,
    8,
    4,
    15,
    1,
    12,
    14,
    8,
    8,
    2,
    13,
    4,
    6,
    9,
    2,
    1,
    11,
    7,
    15,
    5,
    12,
    11,
    9,
    3,
    7,
    14,
    3,
    10,
    10,
    0,
    5,
    6,
    0,
    13,
    15,
    3,
    1,
    13,
    8,
    4,
    14,
    7,
    6,
    15,
    11,
    2,
    3,
    8,
    4,
    14,
    9,
    12,
    7,
    0,
    2,
    1,
    13,
    10,
    12,
    6,
    0,
    9,
    5,
    11,
    10,
    5,
    0,
    13,
    14,
    8,
    7,
    10,
    11,
    1,
    10,
    3,
    4,
    15,
    13,
    4,
    1,
    2,
    5,
    11,
    8,
    6,
    12,
    7,
    6,
    12,
    9,
    0,
    3,
    5,
    2,
    14,
    15,
    9,
    10,
    13,
    0,
    7,
    9,
    0,
    14,
    9,
    6,
    3,
    3,
    4,
    15,
    6,
    5,
    10,
    1,
    2,
    13,
    8,
    12,
    5,
    7,
    14,
    11,
    12,
    4,
    11,
    2,
    15,
    8,
    1,
    13,
    1,
    6,
    10,
    4,
    13,
    9,
    0,
    8,
    6,
    15,
    9,
    3,
    8,
    0,
    7,
    11,
    4,
    1,
    15,
    2,
    14,
    12,
    3,
    5,
    11,
    10,
    5,
    14,
    2,
    7,
    12,
    7,
    13,
    13,
    8,
    14,
    11,
    3,
    5,
    0,
    6,
    6,
    15,
    9,
    0,
    10,
    3,
    1,
    4,
    2,
    7,
    8,
    2,
    5,
    12,
    11,
    1,
    12,
    10,
    4,
    14,
    15,
    9,
    10,
    3,
    6,
    15,
    9,
    0,
    0,
    6,
    12,
    10,
    11,
    1,
    7,
    13,
    13,
    8,
    15,
    9,
    1,
    4,
    3,
    5,
    14,
    11,
    5,
    12,
    2,
    7,
    8,
    2,
    4,
    14,
    2,
    14,
    12,
    11,
    4,
    2,
    1,
    12,
    7,
    4,
    10,
    7,
    11,
    13,
    6,
    1,
    8,
    5,
    5,
    0,
    3,
    15,
    15,
    10,
    13,
    3,
    0,
    9,
    14,
    8,
    9,
    6,
    4,
    11,
    2,
    8,
    1,
    12,
    11,
    7,
    10,
    1,
    13,
    14,
    7,
    2,
    8,
    13,
    15,
    6,
    9,
    15,
    12,
    0,
    5,
    9,
    6,
    10,
    3,
    4,
    0,
    5,
    14,
    3,
    12,
    10,
    1,
    15,
    10,
    4,
    15,
    2,
    9,
    7,
    2,
    12,
    6,
    9,
    8,
    5,
    0,
    6,
    13,
    1,
    3,
    13,
    4,
    14,
    14,
    0,
    7,
    11,
    5,
    3,
    11,
    8,
    9,
    4,
    14,
    3,
    15,
    2,
    5,
    12,
    2,
    9,
    8,
    5,
    12,
    15,
    3,
    10,
    7,
    11,
    0,
    14,
    4,
    1,
    10,
    7,
    1,
    6,
    13,
    0,
    11,
    8,
    6,
    13,
    4,
    13,
    11,
    0,
    2,
    11,
    14,
    7,
    15,
    4,
    0,
    9,
    8,
    1,
    13,
    10,
    3,
    14,
    12,
    3,
    9,
    5,
    7,
    12,
    5,
    2,
    10,
    15,
    6,
    8,
    1,
    6,
    1,
    6,
    4,
    11,
    11,
    13,
    13,
    8,
    12,
    1,
    3,
    4,
    7,
    10,
    14,
    7,
    10,
    9,
    15,
    5,
    6,
    0,
    8,
    15,
    0,
    14,
    5,
    2,
    9,
    3,
    2,
    12,
    13,
    1,
    2,
    15,
    8,
    13,
    4,
    8,
    6,
    10,
    15,
    3,
    11,
    7,
    1,
    4,
    10,
    12,
    9,
    5,
    3,
    6,
    14,
    11,
    5,
    0,
    0,
    14,
    12,
    9,
    7,
    2,
    7,
    2,
    11,
    1,
    4,
    14,
    1,
    7,
    9,
    4,
    12,
    10,
    14,
    8,
    2,
    13,
    0,
    15,
    6,
    12,
    10,
    9,
    13,
    0,
    15,
    3,
    3,
    5,
    5,
    6,
    8,
    11
];
exports.substitute = function substitute(inL, inR) {
    var out = 0;
    for(var i = 0; i < 4; i++){
        var b = inL >>> 18 - i * 6 & 0x3f;
        var sb = sTable[i * 0x40 + b];
        out <<= 4;
        out |= sb;
    }
    for(var i = 0; i < 4; i++){
        var b = inR >>> 18 - i * 6 & 0x3f;
        var sb = sTable[256 + i * 0x40 + b];
        out <<= 4;
        out |= sb;
    }
    return out >>> 0;
};
var permuteTable = [
    16,
    25,
    12,
    11,
    3,
    20,
    4,
    15,
    31,
    17,
    9,
    6,
    27,
    14,
    1,
    22,
    30,
    24,
    8,
    18,
    0,
    5,
    29,
    23,
    13,
    19,
    2,
    26,
    10,
    21,
    28,
    7
];
exports.permute = function permute(num) {
    var out = 0;
    for(var i = 0; i < permuteTable.length; i++){
        out <<= 1;
        out |= num >>> permuteTable[i] & 0x1;
    }
    return out >>> 0;
};
exports.padSplit = function padSplit(num, size, group) {
    var str = num.toString(2);
    while(str.length < size)str = '0' + str;
    var out = [];
    for(var i = 0; i < size; i += group)out.push(str.slice(i, i + group));
    return out.join(' ');
};

},{}],"jz3In":[function(require,module,exports,__globalThis) {
'use strict';
var assert = require("85cfb697294fd1d8");
function Cipher(options) {
    this.options = options;
    this.type = this.options.type;
    this.blockSize = 8;
    this._init();
    this.buffer = new Array(this.blockSize);
    this.bufferOff = 0;
    this.padding = options.padding !== false;
}
module.exports = Cipher;
Cipher.prototype._init = function _init() {
// Might be overrided
};
Cipher.prototype.update = function update(data) {
    if (data.length === 0) return [];
    if (this.type === 'decrypt') return this._updateDecrypt(data);
    else return this._updateEncrypt(data);
};
Cipher.prototype._buffer = function _buffer(data, off) {
    // Append data to buffer
    var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
    for(var i = 0; i < min; i++)this.buffer[this.bufferOff + i] = data[off + i];
    this.bufferOff += min;
    // Shift next
    return min;
};
Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
    this._update(this.buffer, 0, out, off);
    this.bufferOff = 0;
    return this.blockSize;
};
Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
    var inputOff = 0;
    var outputOff = 0;
    var count = (this.bufferOff + data.length) / this.blockSize | 0;
    var out = new Array(count * this.blockSize);
    if (this.bufferOff !== 0) {
        inputOff += this._buffer(data, inputOff);
        if (this.bufferOff === this.buffer.length) outputOff += this._flushBuffer(out, outputOff);
    }
    // Write blocks
    var max = data.length - (data.length - inputOff) % this.blockSize;
    for(; inputOff < max; inputOff += this.blockSize){
        this._update(data, inputOff, out, outputOff);
        outputOff += this.blockSize;
    }
    // Queue rest
    for(; inputOff < data.length; inputOff++, this.bufferOff++)this.buffer[this.bufferOff] = data[inputOff];
    return out;
};
Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
    var inputOff = 0;
    var outputOff = 0;
    var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
    var out = new Array(count * this.blockSize);
    // TODO(indutny): optimize it, this is far from optimal
    for(; count > 0; count--){
        inputOff += this._buffer(data, inputOff);
        outputOff += this._flushBuffer(out, outputOff);
    }
    // Buffer rest of the input
    inputOff += this._buffer(data, inputOff);
    return out;
};
Cipher.prototype.final = function final(buffer) {
    var first;
    if (buffer) first = this.update(buffer);
    var last;
    if (this.type === 'encrypt') last = this._finalEncrypt();
    else last = this._finalDecrypt();
    if (first) return first.concat(last);
    else return last;
};
Cipher.prototype._pad = function _pad(buffer, off) {
    if (off === 0) return false;
    while(off < buffer.length)buffer[off++] = 0;
    return true;
};
Cipher.prototype._finalEncrypt = function _finalEncrypt() {
    if (!this._pad(this.buffer, this.bufferOff)) return [];
    var out = new Array(this.blockSize);
    this._update(this.buffer, 0, out, 0);
    return out;
};
Cipher.prototype._unpad = function _unpad(buffer) {
    return buffer;
};
Cipher.prototype._finalDecrypt = function _finalDecrypt() {
    assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
    var out = new Array(this.blockSize);
    this._flushBuffer(out, 0);
    return this._unpad(out);
};

},{"85cfb697294fd1d8":"8OvWh"}],"8OvWh":[function(require,module,exports,__globalThis) {
module.exports = assert;
function assert(val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
}
assert.equal = function assertEqual(l, r, msg) {
    if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);
};

},{}],"gDFTo":[function(require,module,exports,__globalThis) {
'use strict';
var assert = require("2e43e10aa2de50ed");
var inherits = require("551480b8aa09d318");
var utils = require("b6dc5b7926f5a82f");
var Cipher = require("38547d2f1967e2cd");
function DESState() {
    this.tmp = new Array(2);
    this.keys = null;
}
function DES(options) {
    Cipher.call(this, options);
    var state = new DESState();
    this._desState = state;
    this.deriveKeys(state, options.key);
}
inherits(DES, Cipher);
module.exports = DES;
DES.create = function create(options) {
    return new DES(options);
};
var shiftTable = [
    1,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    1
];
DES.prototype.deriveKeys = function deriveKeys(state, key) {
    state.keys = new Array(32);
    assert.equal(key.length, this.blockSize, 'Invalid key length');
    var kL = utils.readUInt32BE(key, 0);
    var kR = utils.readUInt32BE(key, 4);
    utils.pc1(kL, kR, state.tmp, 0);
    kL = state.tmp[0];
    kR = state.tmp[1];
    for(var i = 0; i < state.keys.length; i += 2){
        var shift = shiftTable[i >>> 1];
        kL = utils.r28shl(kL, shift);
        kR = utils.r28shl(kR, shift);
        utils.pc2(kL, kR, state.keys, i);
    }
};
DES.prototype._update = function _update(inp, inOff, out, outOff) {
    var state = this._desState;
    var l = utils.readUInt32BE(inp, inOff);
    var r = utils.readUInt32BE(inp, inOff + 4);
    // Initial Permutation
    utils.ip(l, r, state.tmp, 0);
    l = state.tmp[0];
    r = state.tmp[1];
    if (this.type === 'encrypt') this._encrypt(state, l, r, state.tmp, 0);
    else this._decrypt(state, l, r, state.tmp, 0);
    l = state.tmp[0];
    r = state.tmp[1];
    utils.writeUInt32BE(out, l, outOff);
    utils.writeUInt32BE(out, r, outOff + 4);
};
DES.prototype._pad = function _pad(buffer, off) {
    if (this.padding === false) return false;
    var value = buffer.length - off;
    for(var i = off; i < buffer.length; i++)buffer[i] = value;
    return true;
};
DES.prototype._unpad = function _unpad(buffer) {
    if (this.padding === false) return buffer;
    var pad = buffer[buffer.length - 1];
    for(var i = buffer.length - pad; i < buffer.length; i++)assert.equal(buffer[i], pad);
    return buffer.slice(0, buffer.length - pad);
};
DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
    var l = lStart;
    var r = rStart;
    // Apply f() x16 times
    for(var i = 0; i < state.keys.length; i += 2){
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];
        // f(r, k)
        utils.expand(r, state.tmp, 0);
        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = utils.substitute(keyL, keyR);
        var f = utils.permute(s);
        var t = r;
        r = (l ^ f) >>> 0;
        l = t;
    }
    // Reverse Initial Permutation
    utils.rip(r, l, out, off);
};
DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
    var l = rStart;
    var r = lStart;
    // Apply f() x16 times
    for(var i = state.keys.length - 2; i >= 0; i -= 2){
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];
        // f(r, k)
        utils.expand(l, state.tmp, 0);
        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = utils.substitute(keyL, keyR);
        var f = utils.permute(s);
        var t = l;
        l = (r ^ f) >>> 0;
        r = t;
    }
    // Reverse Initial Permutation
    utils.rip(l, r, out, off);
};

},{"2e43e10aa2de50ed":"8OvWh","551480b8aa09d318":"bRL3M","b6dc5b7926f5a82f":"aeccw","38547d2f1967e2cd":"jz3In"}],"lPo0P":[function(require,module,exports,__globalThis) {
'use strict';
var assert = require("63ac301527fc117b");
var inherits = require("7d48f4d3d39d3b86");
var proto = {};
function CBCState(iv) {
    assert.equal(iv.length, 8, 'Invalid IV length');
    this.iv = new Array(8);
    for(var i = 0; i < this.iv.length; i++)this.iv[i] = iv[i];
}
function instantiate(Base) {
    function CBC(options) {
        Base.call(this, options);
        this._cbcInit();
    }
    inherits(CBC, Base);
    var keys = Object.keys(proto);
    for(var i = 0; i < keys.length; i++){
        var key = keys[i];
        CBC.prototype[key] = proto[key];
    }
    CBC.create = function create(options) {
        return new CBC(options);
    };
    return CBC;
}
exports.instantiate = instantiate;
proto._cbcInit = function _cbcInit() {
    var state = new CBCState(this.options.iv);
    this._cbcState = state;
};
proto._update = function _update(inp, inOff, out, outOff) {
    var state = this._cbcState;
    var superProto = this.constructor.super_.prototype;
    var iv = state.iv;
    if (this.type === 'encrypt') {
        for(var i = 0; i < this.blockSize; i++)iv[i] ^= inp[inOff + i];
        superProto._update.call(this, iv, 0, out, outOff);
        for(var i = 0; i < this.blockSize; i++)iv[i] = out[outOff + i];
    } else {
        superProto._update.call(this, inp, inOff, out, outOff);
        for(var i = 0; i < this.blockSize; i++)out[outOff + i] ^= iv[i];
        for(var i = 0; i < this.blockSize; i++)iv[i] = inp[inOff + i];
    }
};

},{"63ac301527fc117b":"8OvWh","7d48f4d3d39d3b86":"bRL3M"}],"avp7S":[function(require,module,exports,__globalThis) {
'use strict';
var assert = require("d5bfc55b5aa12c8d");
var inherits = require("39ce41101e752862");
var Cipher = require("ba2db61b5607fad4");
var DES = require("f13080dd5389ba87");
function EDEState(type, key) {
    assert.equal(key.length, 24, 'Invalid key length');
    var k1 = key.slice(0, 8);
    var k2 = key.slice(8, 16);
    var k3 = key.slice(16, 24);
    if (type === 'encrypt') this.ciphers = [
        DES.create({
            type: 'encrypt',
            key: k1
        }),
        DES.create({
            type: 'decrypt',
            key: k2
        }),
        DES.create({
            type: 'encrypt',
            key: k3
        })
    ];
    else this.ciphers = [
        DES.create({
            type: 'decrypt',
            key: k3
        }),
        DES.create({
            type: 'encrypt',
            key: k2
        }),
        DES.create({
            type: 'decrypt',
            key: k1
        })
    ];
}
function EDE(options) {
    Cipher.call(this, options);
    var state = new EDEState(this.type, this.options.key);
    this._edeState = state;
}
inherits(EDE, Cipher);
module.exports = EDE;
EDE.create = function create(options) {
    return new EDE(options);
};
EDE.prototype._update = function _update(inp, inOff, out, outOff) {
    var state = this._edeState;
    state.ciphers[0]._update(inp, inOff, out, outOff);
    state.ciphers[1]._update(out, outOff, out, outOff);
    state.ciphers[2]._update(out, outOff, out, outOff);
};
EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;

},{"d5bfc55b5aa12c8d":"8OvWh","39ce41101e752862":"bRL3M","ba2db61b5607fad4":"jz3In","f13080dd5389ba87":"gDFTo"}],"hnlHj":[function(require,module,exports,__globalThis) {
var ciphers = require("852cf53431a1f811");
var deciphers = require("cf65999dbb4c5e15");
var modes = require("deceb76ffb34f58f");
function getCiphers() {
    return Object.keys(modes);
}
exports.createCipher = exports.Cipher = ciphers.createCipher;
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv;
exports.createDecipher = exports.Decipher = deciphers.createDecipher;
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv;
exports.listCiphers = exports.getCiphers = getCiphers;

},{"852cf53431a1f811":"7DBsd","cf65999dbb4c5e15":"cixt2","deceb76ffb34f58f":"1XQMU"}],"7DBsd":[function(require,module,exports,__globalThis) {
var MODES = require("634015cf40a677fe");
var AuthCipher = require("ca7c032525082be8");
var Buffer = require("2bd35013f47d4062").Buffer;
var StreamCipher = require("2b03aae3a1335af6");
var Transform = require("138a78277ccfd16f");
var aes = require("cc8a1e2b2934f08f");
var ebtk = require("b149eab8b94068d4");
var inherits = require("ebc328fc178264d2");
function Cipher(mode, key, iv) {
    Transform.call(this);
    this._cache = new Splitter();
    this._cipher = new aes.AES(key);
    this._prev = Buffer.from(iv);
    this._mode = mode;
    this._autopadding = true;
}
inherits(Cipher, Transform);
Cipher.prototype._update = function(data) {
    this._cache.add(data);
    var chunk;
    var thing;
    var out = [];
    while(chunk = this._cache.get()){
        thing = this._mode.encrypt(this, chunk);
        out.push(thing);
    }
    return Buffer.concat(out);
};
var PADDING = Buffer.alloc(16, 0x10);
Cipher.prototype._final = function() {
    var chunk = this._cache.flush();
    if (this._autopadding) {
        chunk = this._mode.encrypt(this, chunk);
        this._cipher.scrub();
        return chunk;
    }
    if (!chunk.equals(PADDING)) {
        this._cipher.scrub();
        throw new Error('data not multiple of block length');
    }
};
Cipher.prototype.setAutoPadding = function(setTo) {
    this._autopadding = !!setTo;
    return this;
};
function Splitter() {
    this.cache = Buffer.allocUnsafe(0);
}
Splitter.prototype.add = function(data) {
    this.cache = Buffer.concat([
        this.cache,
        data
    ]);
};
Splitter.prototype.get = function() {
    if (this.cache.length > 15) {
        var out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out;
    }
    return null;
};
Splitter.prototype.flush = function() {
    var len = 16 - this.cache.length;
    var padBuff = Buffer.allocUnsafe(len);
    var i = -1;
    while(++i < len)padBuff.writeUInt8(len, i);
    return Buffer.concat([
        this.cache,
        padBuff
    ]);
};
function createCipheriv(suite, password, iv) {
    var config = MODES[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type');
    if (typeof password === 'string') password = Buffer.from(password);
    if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length);
    if (typeof iv === 'string') iv = Buffer.from(iv);
    if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length);
    if (config.type === 'stream') return new StreamCipher(config.module, password, iv);
    else if (config.type === 'auth') return new AuthCipher(config.module, password, iv);
    return new Cipher(config.module, password, iv);
}
function createCipher(suite, password) {
    var config = MODES[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type');
    var keys = ebtk(password, false, config.key, config.iv);
    return createCipheriv(suite, keys.key, keys.iv);
}
exports.createCipheriv = createCipheriv;
exports.createCipher = createCipher;

},{"634015cf40a677fe":"jyQSU","ca7c032525082be8":"kn9wf","2bd35013f47d4062":"eW7r9","2b03aae3a1335af6":"4ZMNU","138a78277ccfd16f":"g5fTz","cc8a1e2b2934f08f":"4VzKF","b149eab8b94068d4":"1rd4d","ebc328fc178264d2":"bRL3M"}],"jyQSU":[function(require,module,exports,__globalThis) {
var modeModules = {
    ECB: require("c49ddaf3154fac1e"),
    CBC: require("7c781e2d9206f623"),
    CFB: require("12dfbd130b5827a1"),
    CFB8: require("ae02434166690767"),
    CFB1: require("15ddc45cf76ec123"),
    OFB: require("62e3e290f0879f98"),
    CTR: require("1e6578fa70b860a7"),
    GCM: require("1e6578fa70b860a7")
};
var modes = require("b313067770c9aed2");
for(var key in modes)modes[key].module = modeModules[modes[key].mode];
module.exports = modes;

},{"c49ddaf3154fac1e":"f4tme","7c781e2d9206f623":"8JcO4","12dfbd130b5827a1":"dVMRE","ae02434166690767":"jk3Qm","15ddc45cf76ec123":"4BsKj","62e3e290f0879f98":"9DT3x","1e6578fa70b860a7":"fLj86","b313067770c9aed2":"1XQMU"}],"f4tme":[function(require,module,exports,__globalThis) {
exports.encrypt = function(self, block) {
    return self._cipher.encryptBlock(block);
};
exports.decrypt = function(self, block) {
    return self._cipher.decryptBlock(block);
};

},{}],"8JcO4":[function(require,module,exports,__globalThis) {
var xor = require("587e692127ea2c31");
exports.encrypt = function(self, block) {
    var data = xor(block, self._prev);
    self._prev = self._cipher.encryptBlock(data);
    return self._prev;
};
exports.decrypt = function(self, block) {
    var pad = self._prev;
    self._prev = block;
    var out = self._cipher.decryptBlock(block);
    return xor(out, pad);
};

},{"587e692127ea2c31":"eYhY5"}],"eYhY5":[function(require,module,exports,__globalThis) {
var Buffer = require("ccae1b11eb3a9ec8").Buffer;
module.exports = function xor(a, b) {
    var length = Math.min(a.length, b.length);
    var buffer = new Buffer(length);
    for(var i = 0; i < length; ++i)buffer[i] = a[i] ^ b[i];
    return buffer;
};

},{"ccae1b11eb3a9ec8":"fCgem"}],"dVMRE":[function(require,module,exports,__globalThis) {
var Buffer = require("7747ec7a535c746a").Buffer;
var xor = require("fe4415d84c8f2a05");
function encryptStart(self, data, decrypt) {
    var len = data.length;
    var out = xor(data, self._cache);
    self._cache = self._cache.slice(len);
    self._prev = Buffer.concat([
        self._prev,
        decrypt ? data : out
    ]);
    return out;
}
exports.encrypt = function(self, data, decrypt) {
    var out = Buffer.allocUnsafe(0);
    var len;
    while(data.length){
        if (self._cache.length === 0) {
            self._cache = self._cipher.encryptBlock(self._prev);
            self._prev = Buffer.allocUnsafe(0);
        }
        if (self._cache.length <= data.length) {
            len = self._cache.length;
            out = Buffer.concat([
                out,
                encryptStart(self, data.slice(0, len), decrypt)
            ]);
            data = data.slice(len);
        } else {
            out = Buffer.concat([
                out,
                encryptStart(self, data, decrypt)
            ]);
            break;
        }
    }
    return out;
};

},{"7747ec7a535c746a":"eW7r9","fe4415d84c8f2a05":"eYhY5"}],"jk3Qm":[function(require,module,exports,__globalThis) {
var Buffer = require("36c8b61b54eac90b").Buffer;
function encryptByte(self, byteParam, decrypt) {
    var pad = self._cipher.encryptBlock(self._prev);
    var out = pad[0] ^ byteParam;
    self._prev = Buffer.concat([
        self._prev.slice(1),
        Buffer.from([
            decrypt ? byteParam : out
        ])
    ]);
    return out;
}
exports.encrypt = function(self, chunk, decrypt) {
    var len = chunk.length;
    var out = Buffer.allocUnsafe(len);
    var i = -1;
    while(++i < len)out[i] = encryptByte(self, chunk[i], decrypt);
    return out;
};

},{"36c8b61b54eac90b":"eW7r9"}],"4BsKj":[function(require,module,exports,__globalThis) {
var Buffer = require("5eb46e1eefd15734").Buffer;
function encryptByte(self, byteParam, decrypt) {
    var pad;
    var i = -1;
    var len = 8;
    var out = 0;
    var bit, value;
    while(++i < len){
        pad = self._cipher.encryptBlock(self._prev);
        bit = byteParam & 1 << 7 - i ? 0x80 : 0;
        value = pad[0] ^ bit;
        out += (value & 0x80) >> i % 8;
        self._prev = shiftIn(self._prev, decrypt ? bit : value);
    }
    return out;
}
function shiftIn(buffer, value) {
    var len = buffer.length;
    var i = -1;
    var out = Buffer.allocUnsafe(buffer.length);
    buffer = Buffer.concat([
        buffer,
        Buffer.from([
            value
        ])
    ]);
    while(++i < len)out[i] = buffer[i] << 1 | buffer[i + 1] >> 7;
    return out;
}
exports.encrypt = function(self, chunk, decrypt) {
    var len = chunk.length;
    var out = Buffer.allocUnsafe(len);
    var i = -1;
    while(++i < len)out[i] = encryptByte(self, chunk[i], decrypt);
    return out;
};

},{"5eb46e1eefd15734":"eW7r9"}],"9DT3x":[function(require,module,exports,__globalThis) {
var Buffer = require("b3ff65e516d49ef1").Buffer;
var xor = require("7f0c2ff10cf58835");
function getBlock(self) {
    self._prev = self._cipher.encryptBlock(self._prev);
    return self._prev;
}
exports.encrypt = function(self, chunk) {
    while(self._cache.length < chunk.length)self._cache = Buffer.concat([
        self._cache,
        getBlock(self)
    ]);
    var pad = self._cache.slice(0, chunk.length);
    self._cache = self._cache.slice(chunk.length);
    return xor(chunk, pad);
};

},{"b3ff65e516d49ef1":"fCgem","7f0c2ff10cf58835":"eYhY5"}],"fLj86":[function(require,module,exports,__globalThis) {
var xor = require("9e40d7dfdb715c7");
var Buffer = require("53cb1eb6f102a1c9").Buffer;
var incr32 = require("57780b841d591d93");
function getBlock(self) {
    var out = self._cipher.encryptBlockRaw(self._prev);
    incr32(self._prev);
    return out;
}
var blockSize = 16;
exports.encrypt = function(self, chunk) {
    var chunkNum = Math.ceil(chunk.length / blockSize);
    var start = self._cache.length;
    self._cache = Buffer.concat([
        self._cache,
        Buffer.allocUnsafe(chunkNum * blockSize)
    ]);
    for(var i = 0; i < chunkNum; i++){
        var out = getBlock(self);
        var offset = start + i * blockSize;
        self._cache.writeUInt32BE(out[0], offset + 0);
        self._cache.writeUInt32BE(out[1], offset + 4);
        self._cache.writeUInt32BE(out[2], offset + 8);
        self._cache.writeUInt32BE(out[3], offset + 12);
    }
    var pad = self._cache.slice(0, chunk.length);
    self._cache = self._cache.slice(chunk.length);
    return xor(chunk, pad);
};

},{"9e40d7dfdb715c7":"eYhY5","53cb1eb6f102a1c9":"eW7r9","57780b841d591d93":"bZlDZ"}],"bZlDZ":[function(require,module,exports,__globalThis) {
function incr32(iv) {
    var len = iv.length;
    var item;
    while(len--){
        item = iv.readUInt8(len);
        if (item === 255) iv.writeUInt8(0, len);
        else {
            item++;
            iv.writeUInt8(item, len);
            break;
        }
    }
}
module.exports = incr32;

},{}],"1XQMU":[function(require,module,exports,__globalThis) {
module.exports = JSON.parse("{\"aes-128-ecb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-192-ecb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-256-ecb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-128-cbc\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-192-cbc\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-256-cbc\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes128\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes192\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes256\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-128-cfb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-192-cfb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-256-cfb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-128-cfb8\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-192-cfb8\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-256-cfb8\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-128-cfb1\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-192-cfb1\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-256-cfb1\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-128-ofb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-192-ofb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-256-ofb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-128-ctr\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-192-ctr\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-256-ctr\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-128-gcm\":{\"cipher\":\"AES\",\"key\":128,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"},\"aes-192-gcm\":{\"cipher\":\"AES\",\"key\":192,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"},\"aes-256-gcm\":{\"cipher\":\"AES\",\"key\":256,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"}}");

},{}],"kn9wf":[function(require,module,exports,__globalThis) {
var aes = require("b0edcf3ce18ae4ef");
var Buffer = require("2c8f7ba691c38788").Buffer;
var Transform = require("1432783a1879aa01");
var inherits = require("60e0d0bfceaaf739");
var GHASH = require("f76de0f4100ad13f");
var xor = require("a9c82903acf3978e");
var incr32 = require("4e429278132497a7");
function xorTest(a, b) {
    var out = 0;
    if (a.length !== b.length) out++;
    var len = Math.min(a.length, b.length);
    for(var i = 0; i < len; ++i)out += a[i] ^ b[i];
    return out;
}
function calcIv(self, iv, ck) {
    if (iv.length === 12) {
        self._finID = Buffer.concat([
            iv,
            Buffer.from([
                0,
                0,
                0,
                1
            ])
        ]);
        return Buffer.concat([
            iv,
            Buffer.from([
                0,
                0,
                0,
                2
            ])
        ]);
    }
    var ghash = new GHASH(ck);
    var len = iv.length;
    var toPad = len % 16;
    ghash.update(iv);
    if (toPad) {
        toPad = 16 - toPad;
        ghash.update(Buffer.alloc(toPad, 0));
    }
    ghash.update(Buffer.alloc(8, 0));
    var ivBits = len * 8;
    var tail = Buffer.alloc(8);
    tail.writeUIntBE(ivBits, 0, 8);
    ghash.update(tail);
    self._finID = ghash.state;
    var out = Buffer.from(self._finID);
    incr32(out);
    return out;
}
function StreamCipher(mode, key, iv, decrypt) {
    Transform.call(this);
    var h = Buffer.alloc(4, 0);
    this._cipher = new aes.AES(key);
    var ck = this._cipher.encryptBlock(h);
    this._ghash = new GHASH(ck);
    iv = calcIv(this, iv, ck);
    this._prev = Buffer.from(iv);
    this._cache = Buffer.allocUnsafe(0);
    this._secCache = Buffer.allocUnsafe(0);
    this._decrypt = decrypt;
    this._alen = 0;
    this._len = 0;
    this._mode = mode;
    this._authTag = null;
    this._called = false;
}
inherits(StreamCipher, Transform);
StreamCipher.prototype._update = function(chunk) {
    if (!this._called && this._alen) {
        var rump = 16 - this._alen % 16;
        if (rump < 16) {
            rump = Buffer.alloc(rump, 0);
            this._ghash.update(rump);
        }
    }
    this._called = true;
    var out = this._mode.encrypt(this, chunk);
    if (this._decrypt) this._ghash.update(chunk);
    else this._ghash.update(out);
    this._len += chunk.length;
    return out;
};
StreamCipher.prototype._final = function() {
    if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data');
    var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
    if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data');
    this._authTag = tag;
    this._cipher.scrub();
};
StreamCipher.prototype.getAuthTag = function getAuthTag() {
    if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state');
    return this._authTag;
};
StreamCipher.prototype.setAuthTag = function setAuthTag(tag) {
    if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state');
    this._authTag = tag;
};
StreamCipher.prototype.setAAD = function setAAD(buf) {
    if (this._called) throw new Error('Attempting to set AAD in unsupported state');
    this._ghash.update(buf);
    this._alen += buf.length;
};
module.exports = StreamCipher;

},{"b0edcf3ce18ae4ef":"4VzKF","2c8f7ba691c38788":"eW7r9","1432783a1879aa01":"g5fTz","60e0d0bfceaaf739":"bRL3M","f76de0f4100ad13f":"lmx0M","a9c82903acf3978e":"eYhY5","4e429278132497a7":"bZlDZ"}],"4VzKF":[function(require,module,exports,__globalThis) {
// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec
// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/
var Buffer = require("9c4f04f75f375be").Buffer;
function asUInt32Array(buf) {
    if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
    var len = buf.length / 4 | 0;
    var out = new Array(len);
    for(var i = 0; i < len; i++)out[i] = buf.readUInt32BE(i * 4);
    return out;
}
function scrubVec(v) {
    for(var i = 0; i < v.length; v++)v[i] = 0;
}
function cryptBlock(M, keySchedule, SUB_MIX, SBOX, nRounds) {
    var SUB_MIX0 = SUB_MIX[0];
    var SUB_MIX1 = SUB_MIX[1];
    var SUB_MIX2 = SUB_MIX[2];
    var SUB_MIX3 = SUB_MIX[3];
    var s0 = M[0] ^ keySchedule[0];
    var s1 = M[1] ^ keySchedule[1];
    var s2 = M[2] ^ keySchedule[2];
    var s3 = M[3] ^ keySchedule[3];
    var t0, t1, t2, t3;
    var ksRow = 4;
    for(var round = 1; round < nRounds; round++){
        t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[s1 >>> 16 & 0xff] ^ SUB_MIX2[s2 >>> 8 & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++];
        t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[s2 >>> 16 & 0xff] ^ SUB_MIX2[s3 >>> 8 & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++];
        t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[s3 >>> 16 & 0xff] ^ SUB_MIX2[s0 >>> 8 & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++];
        t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[s0 >>> 16 & 0xff] ^ SUB_MIX2[s1 >>> 8 & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++];
        s0 = t0;
        s1 = t1;
        s2 = t2;
        s3 = t3;
    }
    t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 0xff] << 16 | SBOX[s2 >>> 8 & 0xff] << 8 | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
    t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 0xff] << 16 | SBOX[s3 >>> 8 & 0xff] << 8 | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
    t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 0xff] << 16 | SBOX[s0 >>> 8 & 0xff] << 8 | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
    t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 0xff] << 16 | SBOX[s1 >>> 8 & 0xff] << 8 | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
    t0 = t0 >>> 0;
    t1 = t1 >>> 0;
    t2 = t2 >>> 0;
    t3 = t3 >>> 0;
    return [
        t0,
        t1,
        t2,
        t3
    ];
}
// AES constants
var RCON = [
    0x00,
    0x01,
    0x02,
    0x04,
    0x08,
    0x10,
    0x20,
    0x40,
    0x80,
    0x1b,
    0x36
];
var G = function() {
    // Compute double table
    var d = new Array(256);
    for(var j = 0; j < 256; j++)if (j < 128) d[j] = j << 1;
    else d[j] = j << 1 ^ 0x11b;
    var SBOX = [];
    var INV_SBOX = [];
    var SUB_MIX = [
        [],
        [],
        [],
        []
    ];
    var INV_SUB_MIX = [
        [],
        [],
        [],
        []
    ];
    // Walk GF(2^8)
    var x = 0;
    var xi = 0;
    for(var i = 0; i < 256; ++i){
        // Compute sbox
        var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
        sx = sx >>> 8 ^ sx & 0xff ^ 0x63;
        SBOX[x] = sx;
        INV_SBOX[sx] = x;
        // Compute multiplication
        var x2 = d[x];
        var x4 = d[x2];
        var x8 = d[x4];
        // Compute sub bytes, mix columns tables
        var t = d[sx] * 0x101 ^ sx * 0x1010100;
        SUB_MIX[0][x] = t << 24 | t >>> 8;
        SUB_MIX[1][x] = t << 16 | t >>> 16;
        SUB_MIX[2][x] = t << 8 | t >>> 24;
        SUB_MIX[3][x] = t;
        // Compute inv sub bytes, inv mix columns tables
        t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;
        INV_SUB_MIX[0][sx] = t << 24 | t >>> 8;
        INV_SUB_MIX[1][sx] = t << 16 | t >>> 16;
        INV_SUB_MIX[2][sx] = t << 8 | t >>> 24;
        INV_SUB_MIX[3][sx] = t;
        if (x === 0) x = xi = 1;
        else {
            x = x2 ^ d[d[d[x8 ^ x2]]];
            xi ^= d[d[xi]];
        }
    }
    return {
        SBOX: SBOX,
        INV_SBOX: INV_SBOX,
        SUB_MIX: SUB_MIX,
        INV_SUB_MIX: INV_SUB_MIX
    };
}();
function AES(key) {
    this._key = asUInt32Array(key);
    this._reset();
}
AES.blockSize = 16;
AES.keySize = 32;
AES.prototype.blockSize = AES.blockSize;
AES.prototype.keySize = AES.keySize;
AES.prototype._reset = function() {
    var keyWords = this._key;
    var keySize = keyWords.length;
    var nRounds = keySize + 6;
    var ksRows = (nRounds + 1) * 4;
    var keySchedule = [];
    for(var k = 0; k < keySize; k++)keySchedule[k] = keyWords[k];
    for(k = keySize; k < ksRows; k++){
        var t = keySchedule[k - 1];
        if (k % keySize === 0) {
            t = t << 8 | t >>> 24;
            t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 0xff] << 16 | G.SBOX[t >>> 8 & 0xff] << 8 | G.SBOX[t & 0xff];
            t ^= RCON[k / keySize | 0] << 24;
        } else if (keySize > 6 && k % keySize === 4) t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 0xff] << 16 | G.SBOX[t >>> 8 & 0xff] << 8 | G.SBOX[t & 0xff];
        keySchedule[k] = keySchedule[k - keySize] ^ t;
    }
    var invKeySchedule = [];
    for(var ik = 0; ik < ksRows; ik++){
        var ksR = ksRows - ik;
        var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)];
        if (ik < 4 || ksR <= 4) invKeySchedule[ik] = tt;
        else invKeySchedule[ik] = G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[tt >>> 16 & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[tt >>> 8 & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]];
    }
    this._nRounds = nRounds;
    this._keySchedule = keySchedule;
    this._invKeySchedule = invKeySchedule;
};
AES.prototype.encryptBlockRaw = function(M) {
    M = asUInt32Array(M);
    return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds);
};
AES.prototype.encryptBlock = function(M) {
    var out = this.encryptBlockRaw(M);
    var buf = Buffer.allocUnsafe(16);
    buf.writeUInt32BE(out[0], 0);
    buf.writeUInt32BE(out[1], 4);
    buf.writeUInt32BE(out[2], 8);
    buf.writeUInt32BE(out[3], 12);
    return buf;
};
AES.prototype.decryptBlock = function(M) {
    M = asUInt32Array(M);
    // swap
    var m1 = M[1];
    M[1] = M[3];
    M[3] = m1;
    var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds);
    var buf = Buffer.allocUnsafe(16);
    buf.writeUInt32BE(out[0], 0);
    buf.writeUInt32BE(out[3], 4);
    buf.writeUInt32BE(out[2], 8);
    buf.writeUInt32BE(out[1], 12);
    return buf;
};
AES.prototype.scrub = function() {
    scrubVec(this._keySchedule);
    scrubVec(this._invKeySchedule);
    scrubVec(this._key);
};
module.exports.AES = AES;

},{"9c4f04f75f375be":"eW7r9"}],"lmx0M":[function(require,module,exports,__globalThis) {
var Buffer = require("815beeecbe039d1a").Buffer;
var ZEROES = Buffer.alloc(16, 0);
function toArray(buf) {
    return [
        buf.readUInt32BE(0),
        buf.readUInt32BE(4),
        buf.readUInt32BE(8),
        buf.readUInt32BE(12)
    ];
}
function fromArray(out) {
    var buf = Buffer.allocUnsafe(16);
    buf.writeUInt32BE(out[0] >>> 0, 0);
    buf.writeUInt32BE(out[1] >>> 0, 4);
    buf.writeUInt32BE(out[2] >>> 0, 8);
    buf.writeUInt32BE(out[3] >>> 0, 12);
    return buf;
}
function GHASH(key) {
    this.h = key;
    this.state = Buffer.alloc(16, 0);
    this.cache = Buffer.allocUnsafe(0);
}
// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function(block) {
    var i = -1;
    while(++i < block.length)this.state[i] ^= block[i];
    this._multiply();
};
GHASH.prototype._multiply = function() {
    var Vi = toArray(this.h);
    var Zi = [
        0,
        0,
        0,
        0
    ];
    var j, xi, lsbVi;
    var i = -1;
    while(++i < 128){
        xi = (this.state[~~(i / 8)] & 1 << 7 - i % 8) !== 0;
        if (xi) {
            // Z_i+1 = Z_i ^ V_i
            Zi[0] ^= Vi[0];
            Zi[1] ^= Vi[1];
            Zi[2] ^= Vi[2];
            Zi[3] ^= Vi[3];
        }
        // Store the value of LSB(V_i)
        lsbVi = (Vi[3] & 1) !== 0;
        // V_i+1 = V_i >> 1
        for(j = 3; j > 0; j--)Vi[j] = Vi[j] >>> 1 | (Vi[j - 1] & 1) << 31;
        Vi[0] = Vi[0] >>> 1;
        // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
        if (lsbVi) Vi[0] = Vi[0] ^ -520093696;
    }
    this.state = fromArray(Zi);
};
GHASH.prototype.update = function(buf) {
    this.cache = Buffer.concat([
        this.cache,
        buf
    ]);
    var chunk;
    while(this.cache.length >= 16){
        chunk = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        this.ghash(chunk);
    }
};
GHASH.prototype.final = function(abl, bl) {
    if (this.cache.length) this.ghash(Buffer.concat([
        this.cache,
        ZEROES
    ], 16));
    this.ghash(fromArray([
        0,
        abl,
        0,
        bl
    ]));
    return this.state;
};
module.exports = GHASH;

},{"815beeecbe039d1a":"eW7r9"}],"4ZMNU":[function(require,module,exports,__globalThis) {
var aes = require("499d62308d7dac40");
var Buffer = require("bc4a1f7113303d58").Buffer;
var Transform = require("e701745abb80bc49");
var inherits = require("3765f10ec3d7a831");
function StreamCipher(mode, key, iv, decrypt) {
    Transform.call(this);
    this._cipher = new aes.AES(key);
    this._prev = Buffer.from(iv);
    this._cache = Buffer.allocUnsafe(0);
    this._secCache = Buffer.allocUnsafe(0);
    this._decrypt = decrypt;
    this._mode = mode;
}
inherits(StreamCipher, Transform);
StreamCipher.prototype._update = function(chunk) {
    return this._mode.encrypt(this, chunk, this._decrypt);
};
StreamCipher.prototype._final = function() {
    this._cipher.scrub();
};
module.exports = StreamCipher;

},{"499d62308d7dac40":"4VzKF","bc4a1f7113303d58":"eW7r9","e701745abb80bc49":"g5fTz","3765f10ec3d7a831":"bRL3M"}],"1rd4d":[function(require,module,exports,__globalThis) {
var Buffer = require("adb33291e0f9c65a").Buffer;
var MD5 = require("15f984dc9e3797d9");
/* eslint-disable camelcase */ function EVP_BytesToKey(password, salt, keyBits, ivLen) {
    if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary');
    if (salt) {
        if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary');
        if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length');
    }
    var keyLen = keyBits / 8;
    var key = Buffer.alloc(keyLen);
    var iv = Buffer.alloc(ivLen || 0);
    var tmp = Buffer.alloc(0);
    while(keyLen > 0 || ivLen > 0){
        var hash = new MD5();
        hash.update(tmp);
        hash.update(password);
        if (salt) hash.update(salt);
        tmp = hash.digest();
        var used = 0;
        if (keyLen > 0) {
            var keyStart = key.length - keyLen;
            used = Math.min(keyLen, tmp.length);
            tmp.copy(key, keyStart, 0, used);
            keyLen -= used;
        }
        if (used < tmp.length && ivLen > 0) {
            var ivStart = iv.length - ivLen;
            var length = Math.min(ivLen, tmp.length - used);
            tmp.copy(iv, ivStart, used, used + length);
            ivLen -= length;
        }
    }
    tmp.fill(0);
    return {
        key: key,
        iv: iv
    };
}
module.exports = EVP_BytesToKey;

},{"adb33291e0f9c65a":"eW7r9","15f984dc9e3797d9":"45VeE"}],"cixt2":[function(require,module,exports,__globalThis) {
var AuthCipher = require("2f5914bdcee0aab2");
var Buffer = require("2eedc5cbfd1eafeb").Buffer;
var MODES = require("2b861a45e2a2d1fe");
var StreamCipher = require("54b6d333d74ae9c8");
var Transform = require("4b438dd1327af64e");
var aes = require("928aea47daff81dc");
var ebtk = require("25542df8da1646fe");
var inherits = require("153b885d89d2089e");
function Decipher(mode, key, iv) {
    Transform.call(this);
    this._cache = new Splitter();
    this._last = void 0;
    this._cipher = new aes.AES(key);
    this._prev = Buffer.from(iv);
    this._mode = mode;
    this._autopadding = true;
}
inherits(Decipher, Transform);
Decipher.prototype._update = function(data) {
    this._cache.add(data);
    var chunk;
    var thing;
    var out = [];
    while(chunk = this._cache.get(this._autopadding)){
        thing = this._mode.decrypt(this, chunk);
        out.push(thing);
    }
    return Buffer.concat(out);
};
Decipher.prototype._final = function() {
    var chunk = this._cache.flush();
    if (this._autopadding) return unpad(this._mode.decrypt(this, chunk));
    else if (chunk) throw new Error('data not multiple of block length');
};
Decipher.prototype.setAutoPadding = function(setTo) {
    this._autopadding = !!setTo;
    return this;
};
function Splitter() {
    this.cache = Buffer.allocUnsafe(0);
}
Splitter.prototype.add = function(data) {
    this.cache = Buffer.concat([
        this.cache,
        data
    ]);
};
Splitter.prototype.get = function(autoPadding) {
    var out;
    if (autoPadding) {
        if (this.cache.length > 16) {
            out = this.cache.slice(0, 16);
            this.cache = this.cache.slice(16);
            return out;
        }
    } else if (this.cache.length >= 16) {
        out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out;
    }
    return null;
};
Splitter.prototype.flush = function() {
    if (this.cache.length) return this.cache;
};
function unpad(last) {
    var padded = last[15];
    if (padded < 1 || padded > 16) throw new Error('unable to decrypt data');
    var i = -1;
    while(++i < padded){
        if (last[i + (16 - padded)] !== padded) throw new Error('unable to decrypt data');
    }
    if (padded === 16) return;
    return last.slice(0, 16 - padded);
}
function createDecipheriv(suite, password, iv) {
    var config = MODES[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type');
    if (typeof iv === 'string') iv = Buffer.from(iv);
    if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length);
    if (typeof password === 'string') password = Buffer.from(password);
    if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length);
    if (config.type === 'stream') return new StreamCipher(config.module, password, iv, true);
    else if (config.type === 'auth') return new AuthCipher(config.module, password, iv, true);
    return new Decipher(config.module, password, iv);
}
function createDecipher(suite, password) {
    var config = MODES[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type');
    var keys = ebtk(password, false, config.key, config.iv);
    return createDecipheriv(suite, keys.key, keys.iv);
}
exports.createDecipher = createDecipher;
exports.createDecipheriv = createDecipheriv;

},{"2f5914bdcee0aab2":"kn9wf","2eedc5cbfd1eafeb":"eW7r9","2b861a45e2a2d1fe":"jyQSU","54b6d333d74ae9c8":"4ZMNU","4b438dd1327af64e":"g5fTz","928aea47daff81dc":"4VzKF","25542df8da1646fe":"1rd4d","153b885d89d2089e":"bRL3M"}],"iO8co":[function(require,module,exports,__globalThis) {
exports['des-ecb'] = {
    key: 8,
    iv: 0
};
exports['des-cbc'] = exports.des = {
    key: 8,
    iv: 8
};
exports['des-ede3-cbc'] = exports.des3 = {
    key: 24,
    iv: 8
};
exports['des-ede3'] = {
    key: 24,
    iv: 0
};
exports['des-ede-cbc'] = {
    key: 16,
    iv: 8
};
exports['des-ede'] = {
    key: 16,
    iv: 0
};

},{}],"hwD3y":[function(require,module,exports,__globalThis) {
var Buffer = require("55a084ce1a29baa3").Buffer;
var generatePrime = require("5ed99cf028c947ad");
var primes = require("8da23ed5d7edf952");
var DH = require("981b8db942febaf3");
function getDiffieHellman(mod) {
    var prime = new Buffer(primes[mod].prime, 'hex');
    var gen = new Buffer(primes[mod].gen, 'hex');
    return new DH(prime, gen);
}
var ENCODINGS = {
    'binary': true,
    'hex': true,
    'base64': true
};
function createDiffieHellman(prime, enc, generator, genc) {
    if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) return createDiffieHellman(prime, 'binary', enc, generator);
    enc = enc || 'binary';
    genc = genc || 'binary';
    generator = generator || new Buffer([
        2
    ]);
    if (!Buffer.isBuffer(generator)) generator = new Buffer(generator, genc);
    if (typeof prime === 'number') return new DH(generatePrime(prime, generator), generator, true);
    if (!Buffer.isBuffer(prime)) prime = new Buffer(prime, enc);
    return new DH(prime, generator, true);
}
exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman;
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman;

},{"55a084ce1a29baa3":"fCgem","5ed99cf028c947ad":"ZMXAL","8da23ed5d7edf952":"ch1XV","981b8db942febaf3":"f8kfc"}],"ZMXAL":[function(require,module,exports,__globalThis) {
var randomBytes = require("e11b752ebf414e01");
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = require("6139735ee181267b");
var TWENTYFOUR = new BN(24);
var MillerRabin = require("7b3f73f9ab7b2b6a");
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;
function _getPrimes() {
    if (primes !== null) return primes;
    var limit = 0x100000;
    var res = [];
    res[0] = 2;
    for(var i = 1, k = 3; k < limit; k += 2){
        var sqrt = Math.ceil(Math.sqrt(k));
        for(var j = 0; j < i && res[j] <= sqrt; j++)if (k % res[j] === 0) break;
        if (i !== j && res[j] <= sqrt) continue;
        res[i++] = k;
    }
    primes = res;
    return res;
}
function simpleSieve(p) {
    var primes = _getPrimes();
    for(var i = 0; i < primes.length; i++)if (p.modn(primes[i]) === 0) {
        if (p.cmpn(primes[i]) === 0) return true;
        else return false;
    }
    return true;
}
function fermatTest(p) {
    var red = BN.mont(p);
    return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}
function findPrime(bits, gen) {
    if (bits < 16) {
        // this is what openssl does
        if (gen === 2 || gen === 5) return new BN([
            0x8c,
            0x7b
        ]);
        else return new BN([
            0x8c,
            0x27
        ]);
    }
    gen = new BN(gen);
    var num, n2;
    while(true){
        num = new BN(randomBytes(Math.ceil(bits / 8)));
        while(num.bitLength() > bits)num.ishrn(1);
        if (num.isEven()) num.iadd(ONE);
        if (!num.testn(1)) num.iadd(TWO);
        if (!gen.cmp(TWO)) while(num.mod(TWENTYFOUR).cmp(ELEVEN))num.iadd(FOUR);
        else if (!gen.cmp(FIVE)) while(num.mod(TEN).cmp(THREE))num.iadd(FOUR);
        n2 = num.shrn(1);
        if (simpleSieve(n2) && simpleSieve(num) && fermatTest(n2) && fermatTest(num) && millerRabin.test(n2) && millerRabin.test(num)) return num;
    }
}

},{"e11b752ebf414e01":"8hjhE","6139735ee181267b":"7mh7U","7b3f73f9ab7b2b6a":"i79Nu"}],"7mh7U":[function(require,module,exports,__globalThis) {
(function(module1, exports) {
    'use strict';
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || 'be');
        }
    }
    if (typeof module1 === 'object') module1.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') Buffer = window.Buffer;
        else Buffer = require("a4b3a214327293bc").Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') return this._initNumber(number, base, endian);
        if (typeof number === 'object') return this._initArray(number, base, endian);
        if (base === 'hex') base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === 'le') this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== 'le') return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === 'be') for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === 'le') for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 0xf;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === 'be') for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 0xa;
            else if (c >= 17) r += c - 17 + 0xa;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
            out = '';
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = '';
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = '0' + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, 'Number can only safely store up to 53 bits');
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== 'undefined');
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        this.strip();
        var littleEndian = endian === 'le';
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== 'div' && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== 'mod') div = res.div.neg();
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== 'mod') div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === 'div') return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === 'mod') return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true);
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, 'Number is too big');
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === 'k256') prime = new K256();
        else if (name === 'p224') prime = new P224();
        else if (name === 'p192') prime = new P192();
        else if (name === 'p25519') prime = new P25519();
        else throw new Error('Unknown prime ' + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === 'string') {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), 'modulus must be greater than 1');
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

},{"a4b3a214327293bc":"jhUEF"}],"i79Nu":[function(require,module,exports,__globalThis) {
var bn = require("31d279a7646d17e9");
var brorand = require("1ed277e13aa258c6");
function MillerRabin(rand) {
    this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;
MillerRabin.create = function create(rand) {
    return new MillerRabin(rand);
};
MillerRabin.prototype._randbelow = function _randbelow(n) {
    var len = n.bitLength();
    var min_bytes = Math.ceil(len / 8);
    // Generage random bytes until a number less than n is found.
    // This ensures that 0..n-1 have an equal probability of being selected.
    do var a = new bn(this.rand.generate(min_bytes));
    while (a.cmp(n) >= 0);
    return a;
};
MillerRabin.prototype._randrange = function _randrange(start, stop) {
    // Generate a random number greater than or equal to start and less than stop.
    var size = stop.sub(start);
    return start.add(this._randbelow(size));
};
MillerRabin.prototype.test = function test(n, k, cb) {
    var len = n.bitLength();
    var red = bn.mont(n);
    var rone = new bn(1).toRed(red);
    if (!k) k = Math.max(1, len / 48 | 0);
    // Find d and s, (n - 1) = (2 ^ s) * d;
    var n1 = n.subn(1);
    for(var s = 0; !n1.testn(s); s++);
    var d = n.shrn(s);
    var rn1 = n1.toRed(red);
    var prime = true;
    for(; k > 0; k--){
        var a = this._randrange(new bn(2), n1);
        if (cb) cb(a);
        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;
        for(var i = 1; i < s; i++){
            x = x.redSqr();
            if (x.cmp(rone) === 0) return false;
            if (x.cmp(rn1) === 0) break;
        }
        if (i === s) return false;
    }
    return prime;
};
MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
    var len = n.bitLength();
    var red = bn.mont(n);
    var rone = new bn(1).toRed(red);
    if (!k) k = Math.max(1, len / 48 | 0);
    // Find d and s, (n - 1) = (2 ^ s) * d;
    var n1 = n.subn(1);
    for(var s = 0; !n1.testn(s); s++);
    var d = n.shrn(s);
    var rn1 = n1.toRed(red);
    for(; k > 0; k--){
        var a = this._randrange(new bn(2), n1);
        var g = n.gcd(a);
        if (g.cmpn(1) !== 0) return g;
        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;
        for(var i = 1; i < s; i++){
            x = x.redSqr();
            if (x.cmp(rone) === 0) return x.fromRed().subn(1).gcd(n);
            if (x.cmp(rn1) === 0) break;
        }
        if (i === s) {
            x = x.redSqr();
            return x.fromRed().subn(1).gcd(n);
        }
    }
    return false;
};

},{"31d279a7646d17e9":"7TM3g","1ed277e13aa258c6":"8FGdh"}],"7TM3g":[function(require,module,exports,__globalThis) {
(function(module1, exports) {
    'use strict';
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || 'be');
        }
    }
    if (typeof module1 === 'object') module1.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') Buffer = window.Buffer;
        else Buffer = require("1a01f12e7676c433").Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') return this._initNumber(number, base, endian);
        if (typeof number === 'object') return this._initArray(number, base, endian);
        if (base === 'hex') base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === 'le') this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== 'le') return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === 'be') for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === 'le') for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 0xf;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === 'be') for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 0xa;
            else if (c >= 17) r += c - 17 + 0xa;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
            out = '';
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = '';
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = '0' + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, 'Number can only safely store up to 53 bits');
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== 'undefined');
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        this.strip();
        var littleEndian = endian === 'le';
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== 'div' && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== 'mod') div = res.div.neg();
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== 'mod') div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === 'div') return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === 'mod') return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true);
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, 'Number is too big');
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === 'k256') prime = new K256();
        else if (name === 'p224') prime = new P224();
        else if (name === 'p192') prime = new P192();
        else if (name === 'p25519') prime = new P25519();
        else throw new Error('Unknown prime ' + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === 'string') {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), 'modulus must be greater than 1');
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

},{"1a01f12e7676c433":"jhUEF"}],"8FGdh":[function(require,module,exports,__globalThis) {
var r;
module.exports = function rand(len) {
    if (!r) r = new Rand(null);
    return r.generate(len);
};
function Rand(rand) {
    this.rand = rand;
}
module.exports.Rand = Rand;
Rand.prototype.generate = function generate(len) {
    return this._rand(len);
};
// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
    if (this.rand.getBytes) return this.rand.getBytes(n);
    var res = new Uint8Array(n);
    for(var i = 0; i < res.length; i++)res[i] = this.rand.getByte();
    return res;
};
if (typeof self === 'object') {
    if (self.crypto && self.crypto.getRandomValues) // Modern browsers
    Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.crypto.getRandomValues(arr);
        return arr;
    };
    else if (self.msCrypto && self.msCrypto.getRandomValues) // IE
    Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.msCrypto.getRandomValues(arr);
        return arr;
    };
    else if (typeof window === 'object') // Old junk
    Rand.prototype._rand = function() {
        throw new Error('Not implemented yet');
    };
} else // Node.js or Web worker with no crypto support
try {
    var crypto = require("e8ad0674730919a8");
    if (typeof crypto.randomBytes !== 'function') throw new Error('Not supported');
    Rand.prototype._rand = function _rand(n) {
        return crypto.randomBytes(n);
    };
} catch (e) {}

},{"e8ad0674730919a8":"jhUEF"}],"ch1XV":[function(require,module,exports,__globalThis) {
module.exports = JSON.parse("{\"modp1\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff\"},\"modp2\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff\"},\"modp5\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff\"},\"modp14\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff\"},\"modp15\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff\"},\"modp16\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff\"},\"modp17\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff\"},\"modp18\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff\"}}");

},{}],"f8kfc":[function(require,module,exports,__globalThis) {
var Buffer = require("18c258c24cda4205").Buffer;
var BN = require("6cfaed55db270425");
var MillerRabin = require("8bc0d9823ee74460");
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = require("dd39d03f4b3404fc");
var randomBytes = require("e2757e55299a3ebc");
module.exports = DH;
function setPublicKey(pub, enc) {
    enc = enc || 'utf8';
    if (!Buffer.isBuffer(pub)) pub = new Buffer(pub, enc);
    this._pub = new BN(pub);
    return this;
}
function setPrivateKey(priv, enc) {
    enc = enc || 'utf8';
    if (!Buffer.isBuffer(priv)) priv = new Buffer(priv, enc);
    this._priv = new BN(priv);
    return this;
}
var primeCache = {};
function checkPrime(prime, generator) {
    var gen = generator.toString('hex');
    var hex = [
        gen,
        prime.toString(16)
    ].join('_');
    if (hex in primeCache) return primeCache[hex];
    var error = 0;
    if (prime.isEven() || !primes.simpleSieve || !primes.fermatTest(prime) || !millerRabin.test(prime)) {
        //not a prime so +1
        error += 1;
        if (gen === '02' || gen === '05') // we'd be able to check the generator
        // it would fail so +8
        error += 8;
        else //we wouldn't be able to test the generator
        // so +4
        error += 4;
        primeCache[hex] = error;
        return error;
    }
    if (!millerRabin.test(prime.shrn(1))) //not a safe prime
    error += 2;
    var rem;
    switch(gen){
        case '02':
            if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) // unsuidable generator
            error += 8;
            break;
        case '05':
            rem = prime.mod(TEN);
            if (rem.cmp(THREE) && rem.cmp(SEVEN)) // prime mod 10 needs to equal 3 or 7
            error += 8;
            break;
        default:
            error += 4;
    }
    primeCache[hex] = error;
    return error;
}
function DH(prime, generator, malleable) {
    this.setGenerator(generator);
    this.__prime = new BN(prime);
    this._prime = BN.mont(this.__prime);
    this._primeLen = prime.length;
    this._pub = undefined;
    this._priv = undefined;
    this._primeCode = undefined;
    if (malleable) {
        this.setPublicKey = setPublicKey;
        this.setPrivateKey = setPrivateKey;
    } else this._primeCode = 8;
}
Object.defineProperty(DH.prototype, 'verifyError', {
    enumerable: true,
    get: function() {
        if (typeof this._primeCode !== 'number') this._primeCode = checkPrime(this.__prime, this.__gen);
        return this._primeCode;
    }
});
DH.prototype.generateKeys = function() {
    if (!this._priv) this._priv = new BN(randomBytes(this._primeLen));
    this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
    return this.getPublicKey();
};
DH.prototype.computeSecret = function(other) {
    other = new BN(other);
    other = other.toRed(this._prime);
    var secret = other.redPow(this._priv).fromRed();
    var out = new Buffer(secret.toArray());
    var prime = this.getPrime();
    if (out.length < prime.length) {
        var front = new Buffer(prime.length - out.length);
        front.fill(0);
        out = Buffer.concat([
            front,
            out
        ]);
    }
    return out;
};
DH.prototype.getPublicKey = function getPublicKey(enc) {
    return formatReturnValue(this._pub, enc);
};
DH.prototype.getPrivateKey = function getPrivateKey(enc) {
    return formatReturnValue(this._priv, enc);
};
DH.prototype.getPrime = function(enc) {
    return formatReturnValue(this.__prime, enc);
};
DH.prototype.getGenerator = function(enc) {
    return formatReturnValue(this._gen, enc);
};
DH.prototype.setGenerator = function(gen, enc) {
    enc = enc || 'utf8';
    if (!Buffer.isBuffer(gen)) gen = new Buffer(gen, enc);
    this.__gen = gen;
    this._gen = new BN(gen);
    return this;
};
function formatReturnValue(bn, enc) {
    var buf = new Buffer(bn.toArray());
    if (!enc) return buf;
    else return buf.toString(enc);
}

},{"18c258c24cda4205":"fCgem","6cfaed55db270425":"7mh7U","8bc0d9823ee74460":"i79Nu","dd39d03f4b3404fc":"ZMXAL","e2757e55299a3ebc":"8hjhE"}],"jbRNy":[function(require,module,exports,__globalThis) {
'use strict';
var Buffer = require("9c72b70d69889676").Buffer;
var createHash = require("efe64c48bedfa38e");
var stream = require("6a5343e9b2081ca8");
var inherits = require("f95e32eac8325984");
var sign = require("6e9f6edb752a2c10");
var verify = require("c2f6e4379d1db430");
var algorithms = require("2d93707c75adaee");
Object.keys(algorithms).forEach(function(key) {
    algorithms[key].id = Buffer.from(algorithms[key].id, 'hex');
    algorithms[key.toLowerCase()] = algorithms[key];
});
function Sign(algorithm) {
    stream.Writable.call(this);
    var data = algorithms[algorithm];
    if (!data) throw new Error('Unknown message digest');
    this._hashType = data.hash;
    this._hash = createHash(data.hash);
    this._tag = data.id;
    this._signType = data.sign;
}
inherits(Sign, stream.Writable);
Sign.prototype._write = function _write(data, _, done) {
    this._hash.update(data);
    done();
};
Sign.prototype.update = function update(data, enc) {
    this._hash.update(typeof data === 'string' ? Buffer.from(data, enc) : data);
    return this;
};
Sign.prototype.sign = function signMethod(key, enc) {
    this.end();
    var hash = this._hash.digest();
    var sig = sign(hash, key, this._hashType, this._signType, this._tag);
    return enc ? sig.toString(enc) : sig;
};
function Verify(algorithm) {
    stream.Writable.call(this);
    var data = algorithms[algorithm];
    if (!data) throw new Error('Unknown message digest');
    this._hash = createHash(data.hash);
    this._tag = data.id;
    this._signType = data.sign;
}
inherits(Verify, stream.Writable);
Verify.prototype._write = function _write(data, _, done) {
    this._hash.update(data);
    done();
};
Verify.prototype.update = function update(data, enc) {
    this._hash.update(typeof data === 'string' ? Buffer.from(data, enc) : data);
    return this;
};
Verify.prototype.verify = function verifyMethod(key, sig, enc) {
    var sigBuffer = typeof sig === 'string' ? Buffer.from(sig, enc) : sig;
    this.end();
    var hash = this._hash.digest();
    return verify(sigBuffer, hash, key, this._signType, this._tag);
};
function createSign(algorithm) {
    return new Sign(algorithm);
}
function createVerify(algorithm) {
    return new Verify(algorithm);
}
module.exports = {
    Sign: createSign,
    Verify: createVerify,
    createSign: createSign,
    createVerify: createVerify
};

},{"9c72b70d69889676":"eW7r9","efe64c48bedfa38e":"2WyL8","6a5343e9b2081ca8":"jXNWE","f95e32eac8325984":"bRL3M","6e9f6edb752a2c10":"lDgyi","c2f6e4379d1db430":"vbFso","2d93707c75adaee":"kWFdV"}],"jXNWE":[function(require,module,exports,__globalThis) {
exports = module.exports = require("68bb3bdae87803ec");
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require("74167f79b688eaf7");
exports.Duplex = require("84600f6783428a47");
exports.Transform = require("23bee5f697448a0");
exports.PassThrough = require("e0ec4b8e438dbbd");

},{"68bb3bdae87803ec":"6NdbQ","74167f79b688eaf7":"gTkcq","84600f6783428a47":"kKNA3","23bee5f697448a0":"ba8Mr","e0ec4b8e438dbbd":"2xP98"}],"6NdbQ":[function(require,module,exports,__globalThis) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
var global = arguments[3];
var process = require("896ff8d56553f7a");
'use strict';
/*<replacement>*/ var pna = require("6a3257a5fd38b090");
/*</replacement>*/ module.exports = Readable;
/*<replacement>*/ var isArray = require("e90e9a84ea2f1bd2");
/*</replacement>*/ /*<replacement>*/ var Duplex;
/*</replacement>*/ Readable.ReadableState = ReadableState;
/*<replacement>*/ var EE = require("16782d660ac22e0c").EventEmitter;
var EElistenerCount = function(emitter, type) {
    return emitter.listeners(type).length;
};
/*</replacement>*/ /*<replacement>*/ var Stream = require("9a34f23fa53f83f7");
/*</replacement>*/ /*<replacement>*/ var Buffer = require("1711a8218ab7e640").Buffer;
var OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function() {};
function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
}
function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/ /*<replacement>*/ var util = Object.create(require("aec0c91a1241db87"));
util.inherits = require("19affa8ce41f090d");
/*</replacement>*/ /*<replacement>*/ var debugUtil = require("a4a723b7297c7152");
var debug = void 0;
if (debugUtil && debugUtil.debuglog) debug = debugUtil.debuglog('stream');
else debug = function() {};
/*</replacement>*/ var BufferList = require("ce0c5a097ab7ecd0");
var destroyImpl = require("efa8155386cc4283");
var StringDecoder;
util.inherits(Readable, Stream);
var kProxyEvents = [
    'error',
    'close',
    'destroy',
    'pause',
    'resume'
];
function prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
    else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);
    else emitter._events[event] = [
        fn,
        emitter._events[event]
    ];
}
function ReadableState(options, stream) {
    Duplex = Duplex || require("f1c95f846e94e4eb");
    options = options || {};
    // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
    var isDuplex = stream instanceof Duplex;
    // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
    // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    var hwm = options.highWaterMark;
    var readableHwm = options.readableHighWaterMark;
    var defaultHwm = this.objectMode ? 16 : 16384;
    if (hwm || hwm === 0) this.highWaterMark = hwm;
    else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;
    else this.highWaterMark = defaultHwm;
    // cast to ints.
    this.highWaterMark = Math.floor(this.highWaterMark);
    // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new BufferList();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false;
    // a flag to be able to tell if the event 'readable'/'data' is emitted
    // immediately, or on a later tick.  We set this to true at first, because
    // any actions that shouldn't happen until "later" should generally also
    // not happen before the first read call.
    this.sync = true;
    // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    // has it been destroyed
    this.destroyed = false;
    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8';
    // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0;
    // if true, a maybeReadMore has been scheduled
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
        if (!StringDecoder) StringDecoder = require("6392acd10886f115").StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
    }
}
function Readable(options) {
    Duplex = Duplex || require("f1c95f846e94e4eb");
    if (!(this instanceof Readable)) return new Readable(options);
    this._readableState = new ReadableState(options, this);
    // legacy
    this.readable = true;
    if (options) {
        if (typeof options.read === 'function') this._read = options.read;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
    }
    Stream.call(this);
}
Object.defineProperty(Readable.prototype, 'destroyed', {
    get: function() {
        if (this._readableState === undefined) return false;
        return this._readableState.destroyed;
    },
    set: function(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
    }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function(err, cb) {
    this.push(null);
    cb(err);
};
// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;
    if (!state.objectMode) {
        if (typeof chunk === 'string') {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
                chunk = Buffer.from(chunk, encoding);
                encoding = '';
            }
            skipChunkCheck = true;
        }
    } else skipChunkCheck = true;
    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};
// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
    return readableAddChunk(this, chunk, null, true, false);
};
function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    var state = stream._readableState;
    if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
    } else {
        var er;
        if (!skipChunkCheck) er = chunkInvalid(state, chunk);
        if (er) stream.emit('error', er);
        else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) chunk = _uint8ArrayToBuffer(chunk);
            if (addToFront) {
                if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));
                else addChunk(stream, state, chunk, true);
            } else if (state.ended) stream.emit('error', new Error('stream.push() after EOF'));
            else {
                state.reading = false;
                if (state.decoder && !encoding) {
                    chunk = state.decoder.write(chunk);
                    if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);
                    else maybeReadMore(stream, state);
                } else addChunk(stream, state, chunk, false);
            }
        } else if (!addToFront) state.reading = false;
    }
    return needMoreData(state);
}
function addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
        stream.emit('data', chunk);
        stream.read(0);
    } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);
        else state.buffer.push(chunk);
        if (state.needReadable) emitReadable(stream);
    }
    maybeReadMore(stream, state);
}
function chunkInvalid(state, chunk) {
    var er;
    if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) er = new TypeError('Invalid non-string/buffer chunk');
    return er;
}
// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
    return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}
Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
};
// backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
    if (!StringDecoder) StringDecoder = require("6392acd10886f115").StringDecoder;
    this._readableState.decoder = new StringDecoder(enc);
    this._readableState.encoding = enc;
    return this;
};
// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
    if (n >= MAX_HWM) n = MAX_HWM;
    else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
    }
    return n;
}
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;
        else return state.length;
    }
    // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
    if (n <= state.length) return n;
    // Don't have enough
    if (!state.ended) {
        state.needReadable = true;
        return 0;
    }
    return state.length;
}
// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
    debug('read', n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
    if (n !== 0) state.emittedReadable = false;
    // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
        debug('read: emitReadable', state.length, state.ended);
        if (state.length === 0 && state.ended) endReadable(this);
        else emitReadable(this);
        return null;
    }
    n = howMuchToRead(n, state);
    // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
        if (state.length === 0) endReadable(this);
        return null;
    }
    // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.
    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    debug('need readable', doRead);
    // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug('length less than watermark', doRead);
    }
    // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
        doRead = false;
        debug('reading or ended', doRead);
    } else if (doRead) {
        debug('do read');
        state.reading = true;
        state.sync = true;
        // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true;
        // call internal read method
        this._read(state.highWaterMark);
        state.sync = false;
        // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = howMuchToRead(nOrig, state);
    }
    var ret;
    if (n > 0) ret = fromList(n, state);
    else ret = null;
    if (ret === null) {
        state.needReadable = true;
        n = 0;
    } else state.length -= n;
    if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true;
        // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) endReadable(this);
    }
    if (ret !== null) this.emit('data', ret);
    return ret;
};
function onEofChunk(stream, state) {
    if (state.ended) return;
    if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
        }
    }
    state.ended = true;
    // emit 'readable' now to make sure it gets picked up.
    emitReadable(stream);
}
// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
    var state = stream._readableState;
    state.needReadable = false;
    if (!state.emittedReadable) {
        debug('emitReadable', state.flowing);
        state.emittedReadable = true;
        if (state.sync) pna.nextTick(emitReadable_, stream);
        else emitReadable_(stream);
    }
}
function emitReadable_(stream) {
    debug('emit readable');
    stream.emit('readable');
    flow(stream);
}
// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
    if (!state.readingMore) {
        state.readingMore = true;
        pna.nextTick(maybeReadMore_, stream, state);
    }
}
function maybeReadMore_(stream, state) {
    var len = state.length;
    while(!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark){
        debug('maybeReadMore read 0');
        stream.read(0);
        if (len === state.length) break;
        else len = state.length;
    }
    state.readingMore = false;
}
// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
    this.emit('error', new Error('_read() is not implemented'));
};
Readable.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state = this._readableState;
    switch(state.pipesCount){
        case 0:
            state.pipes = dest;
            break;
        case 1:
            state.pipes = [
                state.pipes,
                dest
            ];
            break;
        default:
            state.pipes.push(dest);
            break;
    }
    state.pipesCount += 1;
    debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted) pna.nextTick(endFn);
    else src.once('end', endFn);
    dest.on('unpipe', onunpipe);
    function onunpipe(readable, unpipeInfo) {
        debug('onunpipe');
        if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
            }
        }
    }
    function onend() {
        debug('onend');
        dest.end();
    }
    // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = pipeOnDrain(src);
    dest.on('drain', ondrain);
    var cleanedUp = false;
    function cleanup() {
        debug('cleanup');
        // cleanup event handlers once the pipe is broken
        dest.removeListener('close', onclose);
        dest.removeListener('finish', onfinish);
        dest.removeListener('drain', ondrain);
        dest.removeListener('error', onerror);
        dest.removeListener('unpipe', onunpipe);
        src.removeListener('end', onend);
        src.removeListener('end', unpipe);
        src.removeListener('data', ondata);
        cleanedUp = true;
        // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }
    // If the user pushes more data while we're writing to dest then we'll end up
    // in ondata again. However, we only want to increase awaitDrain once because
    // dest will only emit one 'drain' event for the multiple writes.
    // => Introduce a guard on increasing awaitDrain.
    var increasedAwaitDrain = false;
    src.on('data', ondata);
    function ondata(chunk) {
        debug('ondata');
        increasedAwaitDrain = false;
        var ret = dest.write(chunk);
        if (false === ret && !increasedAwaitDrain) {
            // If the user unpiped during `dest.write()`, it is possible
            // to get stuck in a permanently paused state if that write
            // also returned false.
            // => Check whether `dest` is still a piping destination.
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                debug('false write response, pause', state.awaitDrain);
                state.awaitDrain++;
                increasedAwaitDrain = true;
            }
            src.pause();
        }
    }
    // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
        debug('onerror', er);
        unpipe();
        dest.removeListener('error', onerror);
        if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
    }
    // Make sure our error handler is attached before userland ones.
    prependListener(dest, 'error', onerror);
    // Both close and finish should trigger unpipe, but only once.
    function onclose() {
        dest.removeListener('finish', onfinish);
        unpipe();
    }
    dest.once('close', onclose);
    function onfinish() {
        debug('onfinish');
        dest.removeListener('close', onclose);
        unpipe();
    }
    dest.once('finish', onfinish);
    function unpipe() {
        debug('unpipe');
        src.unpipe(dest);
    }
    // tell the dest that it's being piped to
    dest.emit('pipe', src);
    // start the flow if it hasn't been started already.
    if (!state.flowing) {
        debug('pipe resume');
        src.resume();
    }
    return dest;
};
function pipeOnDrain(src) {
    return function() {
        var state = src._readableState;
        debug('pipeOnDrain', state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
            state.flowing = true;
            flow(src);
        }
    };
}
Readable.prototype.unpipe = function(dest) {
    var state = this._readableState;
    var unpipeInfo = {
        hasUnpiped: false
    };
    // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this;
    // just one destination.  most common case.
    if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes;
        // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit('unpipe', this, unpipeInfo);
        return this;
    }
    // slow case. multiple pipe destinations.
    if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for(var i = 0; i < len; i++)dests[i].emit('unpipe', this, {
            hasUnpiped: false
        });
        return this;
    }
    // try to find the right one.
    var index = indexOf(state.pipes, dest);
    if (index === -1) return this;
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];
    dest.emit('unpipe', this, unpipeInfo);
    return this;
};
// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
    var res = Stream.prototype.on.call(this, ev, fn);
    if (ev === 'data') // Start flowing on next tick if stream isn't explicitly paused
    {
        if (this._readableState.flowing !== false) this.resume();
    } else if (ev === 'readable') {
        var state = this._readableState;
        if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.emittedReadable = false;
            if (!state.reading) pna.nextTick(nReadingNextTick, this);
            else if (state.length) emitReadable(this);
        }
    }
    return res;
};
Readable.prototype.addListener = Readable.prototype.on;
function nReadingNextTick(self1) {
    debug('readable nexttick read 0');
    self1.read(0);
}
// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
        debug('resume');
        state.flowing = true;
        resume(this, state);
    }
    return this;
};
function resume(stream, state) {
    if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        pna.nextTick(resume_, stream, state);
    }
}
function resume_(stream, state) {
    if (!state.reading) {
        debug('resume read 0');
        stream.read(0);
    }
    state.resumeScheduled = false;
    state.awaitDrain = 0;
    stream.emit('resume');
    flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
}
Readable.prototype.pause = function() {
    debug('call pause flowing=%j', this._readableState.flowing);
    if (false !== this._readableState.flowing) {
        debug('pause');
        this._readableState.flowing = false;
        this.emit('pause');
    }
    return this;
};
function flow(stream) {
    var state = stream._readableState;
    debug('flow', state.flowing);
    while(state.flowing && stream.read() !== null);
}
// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
    var _this = this;
    var state = this._readableState;
    var paused = false;
    stream.on('end', function() {
        debug('wrapped end');
        if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) _this.push(chunk);
        }
        _this.push(null);
    });
    stream.on('data', function(chunk) {
        debug('wrapped data');
        if (state.decoder) chunk = state.decoder.write(chunk);
        // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;
        else if (!state.objectMode && (!chunk || !chunk.length)) return;
        var ret = _this.push(chunk);
        if (!ret) {
            paused = true;
            stream.pause();
        }
    });
    // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for(var i in stream)if (this[i] === undefined && typeof stream[i] === 'function') this[i] = function(method) {
        return function() {
            return stream[method].apply(stream, arguments);
        };
    }(i);
    // proxy certain important events.
    for(var n = 0; n < kProxyEvents.length; n++)stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
    // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    this._read = function(n) {
        debug('wrapped _read', n);
        if (paused) {
            paused = false;
            stream.resume();
        }
    };
    return this;
};
Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function() {
        return this._readableState.highWaterMark;
    }
});
// exposed for testing purposes only.
Readable._fromList = fromList;
// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;
    var ret;
    if (state.objectMode) ret = state.buffer.shift();
    else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join('');
        else if (state.buffer.length === 1) ret = state.buffer.head.data;
        else ret = state.buffer.concat(state.length);
        state.buffer.clear();
    } else // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
    return ret;
}
// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
    var ret;
    if (n < list.head.data.length) {
        // slice is the same for buffers and strings
        ret = list.head.data.slice(0, n);
        list.head.data = list.head.data.slice(n);
    } else if (n === list.head.data.length) // first chunk is a perfect match
    ret = list.shift();
    else // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
    return ret;
}
// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
    var p = list.head;
    var c = 1;
    var ret = p.data;
    n -= ret.length;
    while(p = p.next){
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;
        else ret += str.slice(0, n);
        n -= nb;
        if (n === 0) {
            if (nb === str.length) {
                ++c;
                if (p.next) list.head = p.next;
                else list.head = list.tail = null;
            } else {
                list.head = p;
                p.data = str.slice(nb);
            }
            break;
        }
        ++c;
    }
    list.length -= c;
    return ret;
}
// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
    var ret = Buffer.allocUnsafe(n);
    var p = list.head;
    var c = 1;
    p.data.copy(ret);
    n -= p.data.length;
    while(p = p.next){
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;
        if (n === 0) {
            if (nb === buf.length) {
                ++c;
                if (p.next) list.head = p.next;
                else list.head = list.tail = null;
            } else {
                list.head = p;
                p.data = buf.slice(nb);
            }
            break;
        }
        ++c;
    }
    list.length -= c;
    return ret;
}
function endReadable(stream) {
    var state = stream._readableState;
    // If we get here before consuming all the bytes, then that is a
    // bug in node.  Should never happen.
    if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');
    if (!state.endEmitted) {
        state.ended = true;
        pna.nextTick(endReadableNT, state, stream);
    }
}
function endReadableNT(state, stream) {
    // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
    }
}
function indexOf(xs, x) {
    for(var i = 0, l = xs.length; i < l; i++){
        if (xs[i] === x) return i;
    }
    return -1;
}

},{"896ff8d56553f7a":"d5jf4","6a3257a5fd38b090":"hHzEZ","e90e9a84ea2f1bd2":"hk7XJ","16782d660ac22e0c":"1VQLm","9a34f23fa53f83f7":"60BLS","1711a8218ab7e640":"5Tkjb","aec0c91a1241db87":"aUVk5","19affa8ce41f090d":"bRL3M","a4a723b7297c7152":"jhUEF","ce0c5a097ab7ecd0":"hlTM5","efa8155386cc4283":"YI8DF","f1c95f846e94e4eb":"kKNA3","6392acd10886f115":"8qLE1"}],"hHzEZ":[function(require,module,exports,__globalThis) {
var process = require("36724de317ab1d63");
'use strict';
if (typeof process === 'undefined' || !process.version || process.version.indexOf('v0.') === 0 || process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) module.exports = {
    nextTick: nextTick
};
else module.exports = process;
function nextTick(fn, arg1, arg2, arg3) {
    if (typeof fn !== 'function') throw new TypeError('"callback" argument must be a function');
    var len = arguments.length;
    var args, i;
    switch(len){
        case 0:
        case 1:
            return process.nextTick(fn);
        case 2:
            return process.nextTick(function afterTickOne() {
                fn.call(null, arg1);
            });
        case 3:
            return process.nextTick(function afterTickTwo() {
                fn.call(null, arg1, arg2);
            });
        case 4:
            return process.nextTick(function afterTickThree() {
                fn.call(null, arg1, arg2, arg3);
            });
        default:
            args = new Array(len - 1);
            i = 0;
            while(i < args.length)args[i++] = arguments[i];
            return process.nextTick(function afterTick() {
                fn.apply(null, args);
            });
    }
}

},{"36724de317ab1d63":"d5jf4"}],"hk7XJ":[function(require,module,exports,__globalThis) {
var toString = {}.toString;
module.exports = Array.isArray || function(arr) {
    return toString.call(arr) == '[object Array]';
};

},{}],"60BLS":[function(require,module,exports,__globalThis) {
module.exports = require("ed88fc9aa73f911").EventEmitter;

},{"ed88fc9aa73f911":"1VQLm"}],"5Tkjb":[function(require,module,exports,__globalThis) {
/* eslint-disable node/no-deprecated-api */ var buffer = require("56b5c8483611624a");
var Buffer = buffer.Buffer;
// alternative to using Object.keys for old browsers
function copyProps(src, dst) {
    for(var key in src)dst[key] = src[key];
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) module.exports = buffer;
else {
    // Copy properties from require('buffer')
    copyProps(buffer, exports);
    exports.Buffer = SafeBuffer;
}
function SafeBuffer(arg, encodingOrOffset, length) {
    return Buffer(arg, encodingOrOffset, length);
}
// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer);
SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === 'number') throw new TypeError('Argument must not be a number');
    return Buffer(arg, encodingOrOffset, length);
};
SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    var buf = Buffer(size);
    if (fill !== undefined) {
        if (typeof encoding === 'string') buf.fill(fill, encoding);
        else buf.fill(fill);
    } else buf.fill(0);
    return buf;
};
SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    return Buffer(size);
};
SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    return buffer.SlowBuffer(size);
};

},{"56b5c8483611624a":"fCgem"}],"aUVk5":[function(require,module,exports,__globalThis) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(arg) {
    if (Array.isArray) return Array.isArray(arg);
    return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;
function isBoolean(arg) {
    return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;
function isNull(arg) {
    return arg === null;
}
exports.isNull = isNull;
function isNullOrUndefined(arg) {
    return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;
function isNumber(arg) {
    return typeof arg === 'number';
}
exports.isNumber = isNumber;
function isString(arg) {
    return typeof arg === 'string';
}
exports.isString = isString;
function isSymbol(arg) {
    return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;
function isUndefined(arg) {
    return arg === void 0;
}
exports.isUndefined = isUndefined;
function isRegExp(re) {
    return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;
function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;
function isDate(d) {
    return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;
function isError(e) {
    return objectToString(e) === '[object Error]' || e instanceof Error;
}
exports.isError = isError;
function isFunction(arg) {
    return typeof arg === 'function';
}
exports.isFunction = isFunction;
function isPrimitive(arg) {
    return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || // ES6 symbol
    typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;
exports.isBuffer = require("552a2cbe55fe12b9").Buffer.isBuffer;
function objectToString(o) {
    return Object.prototype.toString.call(o);
}

},{"552a2cbe55fe12b9":"fCgem"}],"hlTM5":[function(require,module,exports,__globalThis) {
'use strict';
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
var Buffer = require("af88c2f3f038c5e4").Buffer;
var util = require("33fc21125524aa4d");
function copyBuffer(src, target, offset) {
    src.copy(target, offset);
}
module.exports = function() {
    function BufferList() {
        _classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    BufferList.prototype.push = function push(v) {
        var entry = {
            data: v,
            next: null
        };
        if (this.length > 0) this.tail.next = entry;
        else this.head = entry;
        this.tail = entry;
        ++this.length;
    };
    BufferList.prototype.unshift = function unshift(v) {
        var entry = {
            data: v,
            next: this.head
        };
        if (this.length === 0) this.tail = entry;
        this.head = entry;
        ++this.length;
    };
    BufferList.prototype.shift = function shift() {
        if (this.length === 0) return;
        var ret = this.head.data;
        if (this.length === 1) this.head = this.tail = null;
        else this.head = this.head.next;
        --this.length;
        return ret;
    };
    BufferList.prototype.clear = function clear() {
        this.head = this.tail = null;
        this.length = 0;
    };
    BufferList.prototype.join = function join(s) {
        if (this.length === 0) return '';
        var p = this.head;
        var ret = '' + p.data;
        while(p = p.next)ret += s + p.data;
        return ret;
    };
    BufferList.prototype.concat = function concat(n) {
        if (this.length === 0) return Buffer.alloc(0);
        var ret = Buffer.allocUnsafe(n >>> 0);
        var p = this.head;
        var i = 0;
        while(p){
            copyBuffer(p.data, ret, i);
            i += p.data.length;
            p = p.next;
        }
        return ret;
    };
    return BufferList;
}();
if (util && util.inspect && util.inspect.custom) module.exports.prototype[util.inspect.custom] = function() {
    var obj = util.inspect({
        length: this.length
    });
    return this.constructor.name + ' ' + obj;
};

},{"af88c2f3f038c5e4":"5Tkjb","33fc21125524aa4d":"jhUEF"}],"YI8DF":[function(require,module,exports,__globalThis) {
'use strict';
/*<replacement>*/ var pna = require("9f0440d9375d6fc0");
/*</replacement>*/ // undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
        if (cb) cb(err);
        else if (err) {
            if (!this._writableState) pna.nextTick(emitErrorNT, this, err);
            else if (!this._writableState.errorEmitted) {
                this._writableState.errorEmitted = true;
                pna.nextTick(emitErrorNT, this, err);
            }
        }
        return this;
    }
    // we set destroyed to true before firing error callbacks in order
    // to make it re-entrance safe in case destroy() is called within callbacks
    if (this._readableState) this._readableState.destroyed = true;
    // if this is a duplex stream mark the writable part as destroyed as well
    if (this._writableState) this._writableState.destroyed = true;
    this._destroy(err || null, function(err) {
        if (!cb && err) {
            if (!_this._writableState) pna.nextTick(emitErrorNT, _this, err);
            else if (!_this._writableState.errorEmitted) {
                _this._writableState.errorEmitted = true;
                pna.nextTick(emitErrorNT, _this, err);
            }
        } else if (cb) cb(err);
    });
    return this;
}
function undestroy() {
    if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
    }
    if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
    }
}
function emitErrorNT(self, err) {
    self.emit('error', err);
}
module.exports = {
    destroy: destroy,
    undestroy: undestroy
};

},{"9f0440d9375d6fc0":"hHzEZ"}],"kKNA3":[function(require,module,exports,__globalThis) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
'use strict';
/*<replacement>*/ var pna = require("20e11028560825d2");
/*</replacement>*/ /*<replacement>*/ var objectKeys = Object.keys || function(obj) {
    var keys = [];
    for(var key in obj)keys.push(key);
    return keys;
};
/*</replacement>*/ module.exports = Duplex;
/*<replacement>*/ var util = Object.create(require("e230ec8f8c439672"));
util.inherits = require("aa7b11ba5bf4defc");
/*</replacement>*/ var Readable = require("68a7582259cd5865");
var Writable = require("93d042f8bb80078e");
util.inherits(Duplex, Readable);
// avoid scope creep, the keys array can then be collected
var keys = objectKeys(Writable.prototype);
for(var v = 0; v < keys.length; v++){
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}
function Duplex(options) {
    if (!(this instanceof Duplex)) return new Duplex(options);
    Readable.call(this, options);
    Writable.call(this, options);
    if (options && options.readable === false) this.readable = false;
    if (options && options.writable === false) this.writable = false;
    this.allowHalfOpen = true;
    if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;
    this.once('end', onend);
}
Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function() {
        return this._writableState.highWaterMark;
    }
});
// the no-half-open enforcer
function onend() {
    // if we allow half-open state, or if the writable side ended,
    // then we're ok.
    if (this.allowHalfOpen || this._writableState.ended) return;
    // no more data can be written.
    // But allow more writes to happen in this tick.
    pna.nextTick(onEndNT, this);
}
function onEndNT(self) {
    self.end();
}
Object.defineProperty(Duplex.prototype, 'destroyed', {
    get: function() {
        if (this._readableState === undefined || this._writableState === undefined) return false;
        return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
    }
});
Duplex.prototype._destroy = function(err, cb) {
    this.push(null);
    this.end();
    pna.nextTick(cb, err);
};

},{"20e11028560825d2":"hHzEZ","e230ec8f8c439672":"aUVk5","aa7b11ba5bf4defc":"bRL3M","68a7582259cd5865":"6NdbQ","93d042f8bb80078e":"gTkcq"}],"gTkcq":[function(require,module,exports,__globalThis) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
var global = arguments[3];
'use strict';
/*<replacement>*/ var pna = require("6c800b281e0a9a0");
/*</replacement>*/ module.exports = Writable;
/* <replacement> */ function WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
}
// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
        onCorkedFinish(_this, state);
    };
}
/* </replacement> */ /*<replacement>*/ var asyncWrite = (0, pna.nextTick);
/*</replacement>*/ /*<replacement>*/ var Duplex;
/*</replacement>*/ Writable.WritableState = WritableState;
/*<replacement>*/ var util = Object.create(require("e7c005d8f0ba1903"));
util.inherits = require("10dad555ffe77dde");
/*</replacement>*/ /*<replacement>*/ var internalUtil = {
    deprecate: require("dc51171b07b54af1")
};
/*</replacement>*/ /*<replacement>*/ var Stream = require("44a3cc22ec64fcd3");
/*</replacement>*/ /*<replacement>*/ var Buffer = require("b11d62463b2702d9").Buffer;
var OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function() {};
function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
}
function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/ var destroyImpl = require("acf48fb5d9dc6204");
util.inherits(Writable, Stream);
function nop() {}
function WritableState(options, stream) {
    Duplex = Duplex || require("c5e7171d6f58d3c0");
    options = options || {};
    // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
    var isDuplex = stream instanceof Duplex;
    // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
    // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    var hwm = options.highWaterMark;
    var writableHwm = options.writableHighWaterMark;
    var defaultHwm = this.objectMode ? 16 : 16384;
    if (hwm || hwm === 0) this.highWaterMark = hwm;
    else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;
    else this.highWaterMark = defaultHwm;
    // cast to ints.
    this.highWaterMark = Math.floor(this.highWaterMark);
    // if _final has been called
    this.finalCalled = false;
    // drain event flag.
    this.needDrain = false;
    // at the start of calling end()
    this.ending = false;
    // when end() has been called, and returned
    this.ended = false;
    // when 'finish' is emitted
    this.finished = false;
    // has it been destroyed
    this.destroyed = false;
    // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode;
    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8';
    // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0;
    // a flag to see when we're in the middle of a write.
    this.writing = false;
    // when true all writes will be buffered until .uncork() call
    this.corked = 0;
    // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true;
    // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false;
    // the callback that's passed to _write(chunk,cb)
    this.onwrite = function(er) {
        onwrite(stream, er);
    };
    // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null;
    // the amount that is being written when _write is called.
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null;
    // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0;
    // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false;
    // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false;
    // count buffered requests
    this.bufferedRequestCount = 0;
    // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new CorkedRequest(this);
}
WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while(current){
        out.push(current);
        current = current.next;
    }
    return out;
};
(function() {
    try {
        Object.defineProperty(WritableState.prototype, 'buffer', {
            get: internalUtil.deprecate(function() {
                return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", 'DEP0003')
        });
    } catch (_) {}
})();
// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
    realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function(object) {
            if (realHasInstance.call(this, object)) return true;
            if (this !== Writable) return false;
            return object && object._writableState instanceof WritableState;
        }
    });
} else realHasInstance = function(object) {
    return object instanceof this;
};
function Writable(options) {
    Duplex = Duplex || require("c5e7171d6f58d3c0");
    // Writable ctor is applied to Duplexes, too.
    // `realHasInstance` is necessary because using plain `instanceof`
    // would return false, as no `_writableState` property is attached.
    // Trying to use the custom `instanceof` for Writable here will also break the
    // Node.js LazyTransform implementation, which has a non-trivial getter for
    // `_writableState` that would lead to infinite recursion.
    if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) return new Writable(options);
    this._writableState = new WritableState(options, this);
    // legacy.
    this.writable = true;
    if (options) {
        if (typeof options.write === 'function') this._write = options.write;
        if (typeof options.writev === 'function') this._writev = options.writev;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
        if (typeof options.final === 'function') this._final = options.final;
    }
    Stream.call(this);
}
// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
    this.emit('error', new Error('Cannot pipe, not readable'));
};
function writeAfterEnd(stream, cb) {
    var er = new Error('write after end');
    // TODO: defer error events consistently everywhere, not just the cb
    stream.emit('error', er);
    pna.nextTick(cb, er);
}
// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
    var valid = true;
    var er = false;
    if (chunk === null) er = new TypeError('May not write null values to stream');
    else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) er = new TypeError('Invalid non-string/buffer chunk');
    if (er) {
        stream.emit('error', er);
        pna.nextTick(cb, er);
        valid = false;
    }
    return valid;
}
Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && _isUint8Array(chunk);
    if (isBuf && !Buffer.isBuffer(chunk)) chunk = _uint8ArrayToBuffer(chunk);
    if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
    }
    if (isBuf) encoding = 'buffer';
    else if (!encoding) encoding = state.defaultEncoding;
    if (typeof cb !== 'function') cb = nop;
    if (state.ended) writeAfterEnd(this, cb);
    else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
};
Writable.prototype.cork = function() {
    var state = this._writableState;
    state.corked++;
};
Writable.prototype.uncork = function() {
    var state = this._writableState;
    if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
    }
};
Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === 'string') encoding = encoding.toLowerCase();
    if (!([
        'hex',
        'utf8',
        'utf-8',
        'ascii',
        'binary',
        'base64',
        'ucs2',
        'ucs-2',
        'utf16le',
        'utf-16le',
        'raw'
    ].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
};
function decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') chunk = Buffer.from(chunk, encoding);
    return chunk;
}
Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function() {
        return this._writableState.highWaterMark;
    }
});
// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
            isBuf = true;
            encoding = 'buffer';
            chunk = newChunk;
        }
    }
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark;
    // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;
    if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
            chunk: chunk,
            encoding: encoding,
            isBuf: isBuf,
            callback: cb,
            next: null
        };
        if (last) last.next = state.lastBufferedRequest;
        else state.bufferedRequest = state.lastBufferedRequest;
        state.bufferedRequestCount += 1;
    } else doWrite(stream, state, false, len, chunk, encoding, cb);
    return ret;
}
function doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (writev) stream._writev(chunk, state.onwrite);
    else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
}
function onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        pna.nextTick(cb, er);
        // this can emit finish, and it will always happen
        // after error
        pna.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        stream.emit('error', er);
    } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        stream.emit('error', er);
        // this can emit finish, but finish must
        // always follow error
        finishMaybe(stream, state);
    }
}
function onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
}
function onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    onwriteStateUpdate(state);
    if (er) onwriteError(stream, state, sync, er, cb);
    else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = needFinish(state);
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(stream, state);
        if (sync) /*<replacement>*/ asyncWrite(afterWrite, stream, state, finished, cb);
        else afterWrite(stream, state, finished, cb);
    }
}
function afterWrite(stream, state, finished, cb) {
    if (!finished) onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    finishMaybe(stream, state);
}
// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit('drain');
    }
}
// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while(entry){
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
        }
        buffer.allBuffers = allBuffers;
        doWrite(stream, state, true, state.length, buffer, '', holder.finish);
        // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
        } else state.corkedRequestsFree = new CorkedRequest(state);
        state.bufferedRequestCount = 0;
    } else {
        // Slow case, write chunks one-by-one
        while(entry){
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--;
            // if we didn't call the onwrite immediately, then
            // it means that we need to wait until it does.
            // also, that means that the chunk and cb are currently
            // being processed, so move the buffer counter past them.
            if (state.writing) break;
        }
        if (entry === null) state.lastBufferedRequest = null;
    }
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
}
Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new Error('_write() is not implemented'));
};
Writable.prototype._writev = null;
Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;
    if (typeof chunk === 'function') {
        cb = chunk;
        chunk = null;
        encoding = null;
    } else if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
    }
    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);
    // .end() fully uncorks
    if (state.corked) {
        state.corked = 1;
        this.uncork();
    }
    // ignore unnecessary end() calls.
    if (!state.ending) endWritable(this, state, cb);
};
function needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
    stream._final(function(err) {
        state.pendingcb--;
        if (err) stream.emit('error', err);
        state.prefinished = true;
        stream.emit('prefinish');
        finishMaybe(stream, state);
    });
}
function prefinish(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === 'function') {
            state.pendingcb++;
            state.finalCalled = true;
            pna.nextTick(callFinal, stream, state);
        } else {
            state.prefinished = true;
            stream.emit('prefinish');
        }
    }
}
function finishMaybe(stream, state) {
    var need = needFinish(state);
    if (need) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit('finish');
        }
    }
    return need;
}
function endWritable(stream, state, cb) {
    state.ending = true;
    finishMaybe(stream, state);
    if (cb) {
        if (state.finished) pna.nextTick(cb);
        else stream.once('finish', cb);
    }
    state.ended = true;
    stream.writable = false;
}
function onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while(entry){
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
    }
    // reuse the free corkReq.
    state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty(Writable.prototype, 'destroyed', {
    get: function() {
        if (this._writableState === undefined) return false;
        return this._writableState.destroyed;
    },
    set: function(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._writableState.destroyed = value;
    }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function(err, cb) {
    this.end();
    cb(err);
};

},{"6c800b281e0a9a0":"hHzEZ","e7c005d8f0ba1903":"aUVk5","10dad555ffe77dde":"bRL3M","dc51171b07b54af1":"j92NQ","44a3cc22ec64fcd3":"60BLS","b11d62463b2702d9":"5Tkjb","acf48fb5d9dc6204":"YI8DF","c5e7171d6f58d3c0":"kKNA3"}],"8qLE1":[function(require,module,exports,__globalThis) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';
/*<replacement>*/ var Buffer = require("da459cfeb4b18f6c").Buffer;
/*</replacement>*/ var isEncoding = Buffer.isEncoding || function(encoding) {
    encoding = '' + encoding;
    switch(encoding && encoding.toLowerCase()){
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
        case 'raw':
            return true;
        default:
            return false;
    }
};
function _normalizeEncoding(enc) {
    if (!enc) return 'utf8';
    var retried;
    while(true)switch(enc){
        case 'utf8':
        case 'utf-8':
            return 'utf8';
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return 'utf16le';
        case 'latin1':
        case 'binary':
            return 'latin1';
        case 'base64':
        case 'ascii':
        case 'hex':
            return enc;
        default:
            if (retried) return; // undefined
            enc = ('' + enc).toLowerCase();
            retried = true;
    }
}
// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
    var nenc = _normalizeEncoding(enc);
    if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
    return nenc || enc;
}
// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
    this.encoding = normalizeEncoding(encoding);
    var nb;
    switch(this.encoding){
        case 'utf16le':
            this.text = utf16Text;
            this.end = utf16End;
            nb = 4;
            break;
        case 'utf8':
            this.fillLast = utf8FillLast;
            nb = 4;
            break;
        case 'base64':
            this.text = base64Text;
            this.end = base64End;
            nb = 3;
            break;
        default:
            this.write = simpleWrite;
            this.end = simpleEnd;
            return;
    }
    this.lastNeed = 0;
    this.lastTotal = 0;
    this.lastChar = Buffer.allocUnsafe(nb);
}
StringDecoder.prototype.write = function(buf) {
    if (buf.length === 0) return '';
    var r;
    var i;
    if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === undefined) return '';
        i = this.lastNeed;
        this.lastNeed = 0;
    } else i = 0;
    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
    return r || '';
};
StringDecoder.prototype.end = utf8End;
// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;
// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function(buf) {
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
};
// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
    if (byte <= 0x7F) return 0;
    else if (byte >> 5 === 0x06) return 2;
    else if (byte >> 4 === 0x0E) return 3;
    else if (byte >> 3 === 0x1E) return 4;
    return byte >> 6 === 0x02 ? -1 : -2;
}
// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
    var j = buf.length - 1;
    if (j < i) return 0;
    var nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) {
            if (nb === 2) nb = 0;
            else self.lastNeed = nb - 3;
        }
        return nb;
    }
    return 0;
}
// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
    if ((buf[0] & 0xC0) !== 0x80) {
        self.lastNeed = 0;
        return '\ufffd';
    }
    if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 0xC0) !== 0x80) {
            self.lastNeed = 1;
            return '\ufffd';
        }
        if (self.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 0xC0) !== 0x80) {
                self.lastNeed = 2;
                return '\ufffd';
            }
        }
    }
}
// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
    var p = this.lastTotal - this.lastNeed;
    var r = utf8CheckExtraBytes(this, buf, p);
    if (r !== undefined) return r;
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, p, 0, buf.length);
    this.lastNeed -= buf.length;
}
// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
    var total = utf8CheckIncomplete(this, buf, i);
    if (!this.lastNeed) return buf.toString('utf8', i);
    this.lastTotal = total;
    var end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString('utf8', i, end);
}
// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + '\ufffd';
    return r;
}
// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
    if ((buf.length - i) % 2 === 0) {
        var r = buf.toString('utf16le', i);
        if (r) {
            var c = r.charCodeAt(r.length - 1);
            if (c >= 0xD800 && c <= 0xDBFF) {
                this.lastNeed = 2;
                this.lastTotal = 4;
                this.lastChar[0] = buf[buf.length - 2];
                this.lastChar[1] = buf[buf.length - 1];
                return r.slice(0, -1);
            }
        }
        return r;
    }
    this.lastNeed = 1;
    this.lastTotal = 2;
    this.lastChar[0] = buf[buf.length - 1];
    return buf.toString('utf16le', i, buf.length - 1);
}
// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString('utf16le', 0, end);
    }
    return r;
}
function base64Text(buf, i) {
    var n = (buf.length - i) % 3;
    if (n === 0) return buf.toString('base64', i);
    this.lastNeed = 3 - n;
    this.lastTotal = 3;
    if (n === 1) this.lastChar[0] = buf[buf.length - 1];
    else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
    }
    return buf.toString('base64', i, buf.length - n);
}
function base64End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
    return r;
}
// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
    return buf.toString(this.encoding);
}
function simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : '';
}

},{"da459cfeb4b18f6c":"5Tkjb"}],"ba8Mr":[function(require,module,exports,__globalThis) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
'use strict';
module.exports = Transform;
var Duplex = require("db11ebf938e536ed");
/*<replacement>*/ var util = Object.create(require("11a2a5d5defdcffa"));
util.inherits = require("82049677fa603d40");
/*</replacement>*/ util.inherits(Transform, Duplex);
function afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (!cb) return this.emit('error', new Error('write callback called multiple times'));
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null) this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
}
function Transform(options) {
    if (!(this instanceof Transform)) return new Transform(options);
    Duplex.call(this, options);
    this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
    };
    // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true;
    // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;
    if (options) {
        if (typeof options.transform === 'function') this._transform = options.transform;
        if (typeof options.flush === 'function') this._flush = options.flush;
    }
    // When the writable side finishes, then flush out anything remaining.
    this.on('prefinish', prefinish);
}
function prefinish() {
    var _this = this;
    if (typeof this._flush === 'function') this._flush(function(er, data) {
        done(_this, er, data);
    });
    else done(this, null, null);
}
Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex.prototype.push.call(this, chunk, encoding);
};
// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
    throw new Error('_transform() is not implemented');
};
Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
};
// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
    var ts = this._transformState;
    if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
};
Transform.prototype._destroy = function(err, cb) {
    var _this2 = this;
    Duplex.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
        _this2.emit('close');
    });
};
function done(stream, er, data) {
    if (er) return stream.emit('error', er);
    if (data != null) stream.push(data);
    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');
    if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');
    return stream.push(null);
}

},{"db11ebf938e536ed":"kKNA3","11a2a5d5defdcffa":"aUVk5","82049677fa603d40":"bRL3M"}],"2xP98":[function(require,module,exports,__globalThis) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
'use strict';
module.exports = PassThrough;
var Transform = require("7ab21291895ec3d2");
/*<replacement>*/ var util = Object.create(require("b9f805fab8ec0508"));
util.inherits = require("f24ec1883eef5e9b");
/*</replacement>*/ util.inherits(PassThrough, Transform);
function PassThrough(options) {
    if (!(this instanceof PassThrough)) return new PassThrough(options);
    Transform.call(this, options);
}
PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
};

},{"7ab21291895ec3d2":"ba8Mr","b9f805fab8ec0508":"aUVk5","f24ec1883eef5e9b":"bRL3M"}],"lDgyi":[function(require,module,exports,__globalThis) {
'use strict';
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var Buffer = require("6ae1d89b9934a98d").Buffer;
var createHmac = require("a8da94153ecfc34b");
var crt = require("51cccb2c4d98daac");
var EC = require("94cc3a287d70a03d").ec;
var BN = require("e83ac2526d8afeba");
var parseKeys = require("892f1603b4523d84");
var curves = require("d22eecc2600c2d97");
var RSA_PKCS1_PADDING = 1;
function sign(hash, key, hashType, signType, tag) {
    var priv = parseKeys(key);
    if (priv.curve) {
        // rsa keys can be interpreted as ecdsa ones in openssl
        if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type');
        return ecSign(hash, priv);
    } else if (priv.type === 'dsa') {
        if (signType !== 'dsa') throw new Error('wrong private key type');
        return dsaSign(hash, priv, hashType);
    }
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type');
    if (key.padding !== undefined && key.padding !== RSA_PKCS1_PADDING) throw new Error('illegal or unsupported padding mode');
    hash = Buffer.concat([
        tag,
        hash
    ]);
    var len = priv.modulus.byteLength();
    var pad = [
        0,
        1
    ];
    while(hash.length + pad.length + 1 < len)pad.push(0xff);
    pad.push(0x00);
    var i = -1;
    while(++i < hash.length)pad.push(hash[i]);
    var out = crt(pad, priv);
    return out;
}
function ecSign(hash, priv) {
    var curveId = curves[priv.curve.join('.')];
    if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'));
    var curve = new EC(curveId);
    var key = curve.keyFromPrivate(priv.privateKey);
    var out = key.sign(hash);
    return Buffer.from(out.toDER());
}
function dsaSign(hash, priv, algo) {
    var x = priv.params.priv_key;
    var p = priv.params.p;
    var q = priv.params.q;
    var g = priv.params.g;
    var r = new BN(0);
    var k;
    var H = bits2int(hash, q).mod(q);
    var s = false;
    var kv = getKey(x, q, hash, algo);
    while(s === false){
        k = makeKey(q, kv, algo);
        r = makeR(g, k, p, q);
        s = k.invm(q).imul(H.add(x.mul(r))).mod(q);
        if (s.cmpn(0) === 0) {
            s = false;
            r = new BN(0);
        }
    }
    return toDER(r, s);
}
function toDER(r, s) {
    r = r.toArray();
    s = s.toArray();
    // Pad values
    if (r[0] & 0x80) r = [
        0
    ].concat(r);
    if (s[0] & 0x80) s = [
        0
    ].concat(s);
    var total = r.length + s.length + 4;
    var res = [
        0x30,
        total,
        0x02,
        r.length
    ];
    res = res.concat(r, [
        0x02,
        s.length
    ], s);
    return Buffer.from(res);
}
function getKey(x, q, hash, algo) {
    x = Buffer.from(x.toArray());
    if (x.length < q.byteLength()) {
        var zeros = Buffer.alloc(q.byteLength() - x.length);
        x = Buffer.concat([
            zeros,
            x
        ]);
    }
    var hlen = hash.length;
    var hbits = bits2octets(hash, q);
    var v = Buffer.alloc(hlen);
    v.fill(1);
    var k = Buffer.alloc(hlen);
    k = createHmac(algo, k).update(v).update(Buffer.from([
        0
    ])).update(x).update(hbits).digest();
    v = createHmac(algo, k).update(v).digest();
    k = createHmac(algo, k).update(v).update(Buffer.from([
        1
    ])).update(x).update(hbits).digest();
    v = createHmac(algo, k).update(v).digest();
    return {
        k: k,
        v: v
    };
}
function bits2int(obits, q) {
    var bits = new BN(obits);
    var shift = (obits.length << 3) - q.bitLength();
    if (shift > 0) bits.ishrn(shift);
    return bits;
}
function bits2octets(bits, q) {
    bits = bits2int(bits, q);
    bits = bits.mod(q);
    var out = Buffer.from(bits.toArray());
    if (out.length < q.byteLength()) {
        var zeros = Buffer.alloc(q.byteLength() - out.length);
        out = Buffer.concat([
            zeros,
            out
        ]);
    }
    return out;
}
function makeKey(q, kv, algo) {
    var t;
    var k;
    do {
        t = Buffer.alloc(0);
        while(t.length * 8 < q.bitLength()){
            kv.v = createHmac(algo, kv.k).update(kv.v).digest();
            t = Buffer.concat([
                t,
                kv.v
            ]);
        }
        k = bits2int(t, q);
        kv.k = createHmac(algo, kv.k).update(kv.v).update(Buffer.from([
            0
        ])).digest();
        kv.v = createHmac(algo, kv.k).update(kv.v).digest();
    }while (k.cmp(q) !== -1);
    return k;
}
function makeR(g, k, p, q) {
    return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q);
}
module.exports = sign;
module.exports.getKey = getKey;
module.exports.makeKey = makeKey;

},{"6ae1d89b9934a98d":"eW7r9","a8da94153ecfc34b":"k1utz","51cccb2c4d98daac":"e594P","94cc3a287d70a03d":"1NKsH","e83ac2526d8afeba":"VopIn","892f1603b4523d84":"4Szbv","d22eecc2600c2d97":"iadQk"}],"e594P":[function(require,module,exports,__globalThis) {
'use strict';
var BN = require("5d911a7c773081c");
var randomBytes = require("cfe4d67488897360");
var Buffer = require("c3cdabfc1104331b").Buffer;
function getr(priv) {
    var len = priv.modulus.byteLength();
    var r;
    do r = new BN(randomBytes(len));
    while (r.cmp(priv.modulus) >= 0 || !r.umod(priv.prime1) || !r.umod(priv.prime2));
    return r;
}
function blind(priv) {
    var r = getr(priv);
    var blinder = r.toRed(BN.mont(priv.modulus)).redPow(new BN(priv.publicExponent)).fromRed();
    return {
        blinder: blinder,
        unblinder: r.invm(priv.modulus)
    };
}
function crt(msg, priv) {
    var blinds = blind(priv);
    var len = priv.modulus.byteLength();
    var blinded = new BN(msg).mul(blinds.blinder).umod(priv.modulus);
    var c1 = blinded.toRed(BN.mont(priv.prime1));
    var c2 = blinded.toRed(BN.mont(priv.prime2));
    var qinv = priv.coefficient;
    var p = priv.prime1;
    var q = priv.prime2;
    var m1 = c1.redPow(priv.exponent1).fromRed();
    var m2 = c2.redPow(priv.exponent2).fromRed();
    var h = m1.isub(m2).imul(qinv).umod(p).imul(q);
    return m2.iadd(h).imul(blinds.unblinder).umod(priv.modulus).toArrayLike(Buffer, 'be', len);
}
crt.getr = getr;
module.exports = crt;

},{"5d911a7c773081c":"VopIn","cfe4d67488897360":"8hjhE","c3cdabfc1104331b":"eW7r9"}],"VopIn":[function(require,module,exports,__globalThis) {
(function(module1, exports) {
    'use strict';
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || 'be');
        }
    }
    if (typeof module1 === 'object') module1.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') Buffer = window.Buffer;
        else Buffer = require("bd440367abe2ded7").Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') return this._initNumber(number, base, endian);
        if (typeof number === 'object') return this._initArray(number, base, endian);
        if (base === 'hex') base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === 'le') this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== 'le') return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === 'be') for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === 'le') for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this._strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // '0' - '9'
        if (c >= 48 && c <= 57) return c - 48;
        else if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else assert(false, 'Invalid character in ' + string);
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === 'be') for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this._strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) b = c - 49 + 0xa;
            else if (c >= 17) b = c - 17 + 0xa;
            else b = c;
            assert(c >= 0 && b < mul, 'Invalid character');
            r += b;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this._strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
    }
    BN.prototype._move = function _move(dest) {
        move(dest, this);
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype._strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    // Check Symbol.for because not everywhere where Symbol defined
    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
    if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') try {
        BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
    } catch (e) {
        BN.prototype.inspect = inspect;
    }
    else BN.prototype.inspect = inspect;
    function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    }
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
            out = '';
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = '';
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modrn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = '0' + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, 'Number can only safely store up to 53 bits');
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
    };
    if (Buffer) BN.prototype.toBuffer = function toBuffer(endian, length) {
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    var allocate = function allocate(ArrayType, size) {
        if (ArrayType.allocUnsafe) return ArrayType.allocUnsafe(size);
        return new ArrayType(size);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === 'le' ? 'LE' : 'BE';
        this['_toArrayLike' + postfix](res, byteLength);
        return res;
    };
    BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position++] = word & 0xff;
            if (position < res.length) res[position++] = word >> 8 & 0xff;
            if (position < res.length) res[position++] = word >> 16 & 0xff;
            if (shift === 6) {
                if (position < res.length) res[position++] = word >> 24 & 0xff;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position < res.length) {
            res[position++] = carry;
            while(position < res.length)res[position++] = 0;
        }
    };
    BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position--] = word & 0xff;
            if (position >= 0) res[position--] = word >> 8 & 0xff;
            if (position >= 0) res[position--] = word >> 16 & 0xff;
            if (shift === 6) {
                if (position >= 0) res[position--] = word >> 24 & 0xff;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position >= 0) {
            res[position--] = carry;
            while(position >= 0)res[position--] = 0;
        }
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = num.words[off] >>> wbit & 0x01;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this._strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this._strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this._strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this._strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this._strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this._strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out._strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out._strip();
    }
    function jumboMulTo(self, num, out) {
        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
        // var fftm = new FFTM();
        // return fftm.mulp(self, num, out);
        return bigMulTo(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this._strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this._strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this._strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) <= num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this._strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this._strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this._strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q._strip();
        a._strip();
        // Denormalize
        if (mode !== 'div' && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== 'mod') div = res.div.neg();
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== 'mod') div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === 'div') return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === 'mod') return {
                div: null,
                mod: new BN(this.modrn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modrn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return isNegNum ? -acc : acc;
    };
    // WARNING: DEPRECATED
    BN.prototype.modn = function modn(num) {
        return this.modrn(num);
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true);
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this._strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, 'Number is too big');
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is a BN v4 instance
        r.strip();
        else // r is a BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === 'k256') prime = new K256();
        else if (name === 'p224') prime = new P224();
        else if (name === 'p192') prime = new P192();
        else if (name === 'p25519') prime = new P25519();
        else throw new Error('Unknown prime ' + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === 'string') {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), 'modulus must be greater than 1');
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

},{"bd440367abe2ded7":"jhUEF"}],"1NKsH":[function(require,module,exports,__globalThis) {
'use strict';
var elliptic = exports;
elliptic.version = require("e6672bc3ba1c9961").version;
elliptic.utils = require("5bc72f89931ad0f5");
elliptic.rand = require("7f90d752a36f35cf");
elliptic.curve = require("d11da69c91421223");
elliptic.curves = require("6845bad4ed92c3e4");
// Protocols
elliptic.ec = require("b5f2e1f615acc4b");
elliptic.eddsa = require("79ae761761517980");

},{"e6672bc3ba1c9961":"bvED4","5bc72f89931ad0f5":"8sNT5","7f90d752a36f35cf":"8FGdh","d11da69c91421223":"72OoG","6845bad4ed92c3e4":"6yRo9","b5f2e1f615acc4b":"5gDK1","79ae761761517980":"jPbam"}],"bvED4":[function(require,module,exports,__globalThis) {
module.exports = JSON.parse("{\"name\":\"elliptic\",\"version\":\"6.6.1\",\"description\":\"EC cryptography\",\"main\":\"lib/elliptic.js\",\"files\":[\"lib\"],\"scripts\":{\"lint\":\"eslint lib test\",\"lint:fix\":\"npm run lint -- --fix\",\"unit\":\"istanbul test _mocha --reporter=spec test/index.js\",\"test\":\"npm run lint && npm run unit\",\"version\":\"grunt dist && git add dist/\"},\"repository\":{\"type\":\"git\",\"url\":\"git@github.com:indutny/elliptic\"},\"keywords\":[\"EC\",\"Elliptic\",\"curve\",\"Cryptography\"],\"author\":\"Fedor Indutny <fedor@indutny.com>\",\"license\":\"MIT\",\"bugs\":{\"url\":\"https://github.com/indutny/elliptic/issues\"},\"homepage\":\"https://github.com/indutny/elliptic\",\"devDependencies\":{\"brfs\":\"^2.0.2\",\"coveralls\":\"^3.1.0\",\"eslint\":\"^7.6.0\",\"grunt\":\"^1.2.1\",\"grunt-browserify\":\"^5.3.0\",\"grunt-cli\":\"^1.3.2\",\"grunt-contrib-connect\":\"^3.0.0\",\"grunt-contrib-copy\":\"^1.0.0\",\"grunt-contrib-uglify\":\"^5.0.0\",\"grunt-mocha-istanbul\":\"^5.0.2\",\"grunt-saucelabs\":\"^9.0.1\",\"istanbul\":\"^0.4.5\",\"mocha\":\"^8.0.1\"},\"dependencies\":{\"bn.js\":\"^4.11.9\",\"brorand\":\"^1.1.0\",\"hash.js\":\"^1.0.0\",\"hmac-drbg\":\"^1.0.1\",\"inherits\":\"^2.0.4\",\"minimalistic-assert\":\"^1.0.1\",\"minimalistic-crypto-utils\":\"^1.0.1\"}}");

},{}],"8sNT5":[function(require,module,exports,__globalThis) {
'use strict';
var utils = exports;
var BN = require("f4cbcf6f6eb25ca0");
var minAssert = require("d8ee30463f95a0fd");
var minUtils = require("997429d6bbd82d59");
utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode;
// Represent num in a w-NAF form
function getNAF(num, w, bits) {
    var naf = new Array(Math.max(num.bitLength(), bits) + 1);
    var i;
    for(i = 0; i < naf.length; i += 1)naf[i] = 0;
    var ws = 1 << w + 1;
    var k = num.clone();
    for(i = 0; i < naf.length; i++){
        var z;
        var mod = k.andln(ws - 1);
        if (k.isOdd()) {
            if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;
            else z = mod;
            k.isubn(z);
        } else z = 0;
        naf[i] = z;
        k.iushrn(1);
    }
    return naf;
}
utils.getNAF = getNAF;
// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
    var jsf = [
        [],
        []
    ];
    k1 = k1.clone();
    k2 = k2.clone();
    var d1 = 0;
    var d2 = 0;
    var m8;
    while(k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0){
        // First phase
        var m14 = k1.andln(3) + d1 & 3;
        var m24 = k2.andln(3) + d2 & 3;
        if (m14 === 3) m14 = -1;
        if (m24 === 3) m24 = -1;
        var u1;
        if ((m14 & 1) === 0) u1 = 0;
        else {
            m8 = k1.andln(7) + d1 & 7;
            if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;
            else u1 = m14;
        }
        jsf[0].push(u1);
        var u2;
        if ((m24 & 1) === 0) u2 = 0;
        else {
            m8 = k2.andln(7) + d2 & 7;
            if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;
            else u2 = m24;
        }
        jsf[1].push(u2);
        // Second phase
        if (2 * d1 === u1 + 1) d1 = 1 - d1;
        if (2 * d2 === u2 + 1) d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
    }
    return jsf;
}
utils.getJSF = getJSF;
function cachedProperty(obj, name, computer) {
    var key = '_' + name;
    obj.prototype[name] = function cachedProperty() {
        return this[key] !== undefined ? this[key] : this[key] = computer.call(this);
    };
}
utils.cachedProperty = cachedProperty;
function parseBytes(bytes) {
    return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') : bytes;
}
utils.parseBytes = parseBytes;
function intFromLE(bytes) {
    return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;

},{"f4cbcf6f6eb25ca0":"d0RHy","d8ee30463f95a0fd":"8OvWh","997429d6bbd82d59":"6f39G"}],"d0RHy":[function(require,module,exports,__globalThis) {
(function(module1, exports) {
    'use strict';
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || 'be');
        }
    }
    if (typeof module1 === 'object') module1.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') Buffer = window.Buffer;
        else Buffer = require("1cf9b8cfa268aab5").Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') return this._initNumber(number, base, endian);
        if (typeof number === 'object') return this._initArray(number, base, endian);
        if (base === 'hex') base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === 'le') this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== 'le') return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === 'be') for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === 'le') for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 0xf;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === 'be') for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 0xa;
            else if (c >= 17) r += c - 17 + 0xa;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
            out = '';
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = '';
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = '0' + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, 'Number can only safely store up to 53 bits');
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== 'undefined');
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        this.strip();
        var littleEndian = endian === 'le';
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== 'div' && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== 'mod') div = res.div.neg();
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== 'mod') div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === 'div') return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === 'mod') return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true);
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, 'Number is too big');
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === 'k256') prime = new K256();
        else if (name === 'p224') prime = new P224();
        else if (name === 'p192') prime = new P192();
        else if (name === 'p25519') prime = new P25519();
        else throw new Error('Unknown prime ' + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === 'string') {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), 'modulus must be greater than 1');
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

},{"1cf9b8cfa268aab5":"jhUEF"}],"6f39G":[function(require,module,exports,__globalThis) {
'use strict';
var utils = exports;
function toArray(msg, enc) {
    if (Array.isArray(msg)) return msg.slice();
    if (!msg) return [];
    var res = [];
    if (typeof msg !== 'string') {
        for(var i = 0; i < msg.length; i++)res[i] = msg[i] | 0;
        return res;
    }
    if (enc === 'hex') {
        msg = msg.replace(/[^a-z0-9]+/ig, '');
        if (msg.length % 2 !== 0) msg = '0' + msg;
        for(var i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));
    } else for(var i = 0; i < msg.length; i++){
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi) res.push(hi, lo);
        else res.push(lo);
    }
    return res;
}
utils.toArray = toArray;
function zero2(word) {
    if (word.length === 1) return '0' + word;
    else return word;
}
utils.zero2 = zero2;
function toHex(msg) {
    var res = '';
    for(var i = 0; i < msg.length; i++)res += zero2(msg[i].toString(16));
    return res;
}
utils.toHex = toHex;
utils.encode = function encode(arr, enc) {
    if (enc === 'hex') return toHex(arr);
    else return arr;
};

},{}],"72OoG":[function(require,module,exports,__globalThis) {
'use strict';
var curve = exports;
curve.base = require("59d486bd2037506a");
curve.short = require("eb37617ef6927580");
curve.mont = require("be9c662572da2183");
curve.edwards = require("60763dd06fe64e8d");

},{"59d486bd2037506a":"kvY1a","eb37617ef6927580":"e7TRt","be9c662572da2183":"2JhQH","60763dd06fe64e8d":"3idNZ"}],"kvY1a":[function(require,module,exports,__globalThis) {
'use strict';
var BN = require("70865a568c61cc60");
var utils = require("fb5111a3810a8235");
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;
function BaseCurve(type, conf) {
    this.type = type;
    this.p = new BN(conf.p, 16);
    // Use Montgomery, when there is no fast reduction for the prime
    this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);
    // Useful for many curves
    this.zero = new BN(0).toRed(this.red);
    this.one = new BN(1).toRed(this.red);
    this.two = new BN(2).toRed(this.red);
    // Curve configuration, optional
    this.n = conf.n && new BN(conf.n, 16);
    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
    // Temporary arrays
    this._wnafT1 = new Array(4);
    this._wnafT2 = new Array(4);
    this._wnafT3 = new Array(4);
    this._wnafT4 = new Array(4);
    this._bitLength = this.n ? this.n.bitLength() : 0;
    // Generalized Greg Maxwell's trick
    var adjustCount = this.n && this.p.div(this.n);
    if (!adjustCount || adjustCount.cmpn(100) > 0) this.redN = null;
    else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
    }
}
module.exports = BaseCurve;
BaseCurve.prototype.point = function point() {
    throw new Error('Not implemented');
};
BaseCurve.prototype.validate = function validate() {
    throw new Error('Not implemented');
};
BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
    assert(p.precomputed);
    var doubles = p._getDoubles();
    var naf = getNAF(k, 1, this._bitLength);
    var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
    I /= 3;
    // Translate into more windowed form
    var repr = [];
    var j;
    var nafW;
    for(j = 0; j < naf.length; j += doubles.step){
        nafW = 0;
        for(var l = j + doubles.step - 1; l >= j; l--)nafW = (nafW << 1) + naf[l];
        repr.push(nafW);
    }
    var a = this.jpoint(null, null, null);
    var b = this.jpoint(null, null, null);
    for(var i = I; i > 0; i--){
        for(j = 0; j < repr.length; j++){
            nafW = repr[j];
            if (nafW === i) b = b.mixedAdd(doubles.points[j]);
            else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
    }
    return a.toP();
};
BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
    var w = 4;
    // Precompute window
    var nafPoints = p._getNAFPoints(w);
    w = nafPoints.wnd;
    var wnd = nafPoints.points;
    // Get NAF form
    var naf = getNAF(k, w, this._bitLength);
    // Add `this`*(N+1) for every w-NAF index
    var acc = this.jpoint(null, null, null);
    for(var i = naf.length - 1; i >= 0; i--){
        // Count zeroes
        for(var l = 0; i >= 0 && naf[i] === 0; i--)l++;
        if (i >= 0) l++;
        acc = acc.dblp(l);
        if (i < 0) break;
        var z = naf[i];
        assert(z !== 0);
        if (p.type === 'affine') {
            // J +- P
            if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);
            else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
        } else // J +- J
        if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);
        else acc = acc.add(wnd[-z - 1 >> 1].neg());
    }
    return p.type === 'affine' ? acc.toP() : acc;
};
BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
    var wndWidth = this._wnafT1;
    var wnd = this._wnafT2;
    var naf = this._wnafT3;
    // Fill all arrays
    var max = 0;
    var i;
    var j;
    var p;
    for(i = 0; i < len; i++){
        p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
    }
    // Comb small window NAFs
    for(i = len - 1; i >= 1; i -= 2){
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
            naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
            naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
            max = Math.max(naf[a].length, max);
            max = Math.max(naf[b].length, max);
            continue;
        }
        var comb = [
            points[a],
            /* 1 */ null,
            /* 3 */ null,
            /* 5 */ points[b]
        ];
        // Try to avoid Projective points, if possible
        if (points[a].y.cmp(points[b].y) === 0) {
            comb[1] = points[a].add(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].add(points[b].neg());
        } else {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }
        var index = [
            -3,
            /* -1 -1 */ -1,
            /* -1 0 */ -5,
            /* -1 1 */ -7,
            /* 0 -1 */ 0,
            /* 0 0 */ 7,
            /* 0 1 */ 5,
            /* 1 -1 */ 1,
            /* 1 0 */ 3
        ];
        var jsf = getJSF(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for(j = 0; j < max; j++){
            var ja = jsf[0][j] | 0;
            var jb = jsf[1][j] | 0;
            naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
            naf[b][j] = 0;
            wnd[a] = comb;
        }
    }
    var acc = this.jpoint(null, null, null);
    var tmp = this._wnafT4;
    for(i = max; i >= 0; i--){
        var k = 0;
        while(i >= 0){
            var zero = true;
            for(j = 0; j < len; j++){
                tmp[j] = naf[j][i] | 0;
                if (tmp[j] !== 0) zero = false;
            }
            if (!zero) break;
            k++;
            i--;
        }
        if (i >= 0) k++;
        acc = acc.dblp(k);
        if (i < 0) break;
        for(j = 0; j < len; j++){
            var z = tmp[j];
            p;
            if (z === 0) continue;
            else if (z > 0) p = wnd[j][z - 1 >> 1];
            else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();
            if (p.type === 'affine') acc = acc.mixedAdd(p);
            else acc = acc.add(p);
        }
    }
    // Zeroify references
    for(i = 0; i < len; i++)wnd[i] = null;
    if (jacobianResult) return acc;
    else return acc.toP();
};
function BasePoint(curve, type) {
    this.curve = curve;
    this.type = type;
    this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;
BasePoint.prototype.eq = function eq() {
    throw new Error('Not implemented');
};
BasePoint.prototype.validate = function validate() {
    return this.curve.validate(this);
};
BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    bytes = utils.toArray(bytes, enc);
    var len = this.p.byteLength();
    // uncompressed, hybrid-odd, hybrid-even
    if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) && bytes.length - 1 === 2 * len) {
        if (bytes[0] === 0x06) assert(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 0x07) assert(bytes[bytes.length - 1] % 2 === 1);
        var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));
        return res;
    } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) && bytes.length - 1 === len) return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
    throw new Error('Unknown point format');
};
BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
    return this.encode(enc, true);
};
BasePoint.prototype._encode = function _encode(compact) {
    var len = this.curve.p.byteLength();
    var x = this.getX().toArray('be', len);
    if (compact) return [
        this.getY().isEven() ? 0x02 : 0x03
    ].concat(x);
    return [
        0x04
    ].concat(x, this.getY().toArray('be', len));
};
BasePoint.prototype.encode = function encode(enc, compact) {
    return utils.encode(this._encode(compact), enc);
};
BasePoint.prototype.precompute = function precompute(power) {
    if (this.precomputed) return this;
    var precomputed = {
        doubles: null,
        naf: null,
        beta: null
    };
    precomputed.naf = this._getNAFPoints(8);
    precomputed.doubles = this._getDoubles(4, power);
    precomputed.beta = this._getBeta();
    this.precomputed = precomputed;
    return this;
};
BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
    if (!this.precomputed) return false;
    var doubles = this.precomputed.doubles;
    if (!doubles) return false;
    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};
BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
    if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
    var doubles = [
        this
    ];
    var acc = this;
    for(var i = 0; i < power; i += step){
        for(var j = 0; j < step; j++)acc = acc.dbl();
        doubles.push(acc);
    }
    return {
        step: step,
        points: doubles
    };
};
BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
    if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
    var res = [
        this
    ];
    var max = (1 << wnd) - 1;
    var dbl = max === 1 ? null : this.dbl();
    for(var i = 1; i < max; i++)res[i] = res[i - 1].add(dbl);
    return {
        wnd: wnd,
        points: res
    };
};
BasePoint.prototype._getBeta = function _getBeta() {
    return null;
};
BasePoint.prototype.dblp = function dblp(k) {
    var r = this;
    for(var i = 0; i < k; i++)r = r.dbl();
    return r;
};

},{"70865a568c61cc60":"d0RHy","fb5111a3810a8235":"8sNT5"}],"e7TRt":[function(require,module,exports,__globalThis) {
'use strict';
var utils = require("89f794ef417dc31c");
var BN = require("c314b0ac30b69c4a");
var inherits = require("6ac4d7c73f24ab9c");
var Base = require("6e622edb7498c94");
var assert = utils.assert;
function ShortCurve(conf) {
    Base.call(this, 'short', conf);
    this.a = new BN(conf.a, 16).toRed(this.red);
    this.b = new BN(conf.b, 16).toRed(this.red);
    this.tinv = this.two.redInvm();
    this.zeroA = this.a.fromRed().cmpn(0) === 0;
    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
    // If the curve is endomorphic, precalculate beta and lambda
    this.endo = this._getEndomorphism(conf);
    this._endoWnafT1 = new Array(4);
    this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;
ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
    // No efficient endomorphism
    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return;
    // Compute beta and lambda, that lambda * P = (beta * Px; Py)
    var beta;
    var lambda;
    if (conf.beta) beta = new BN(conf.beta, 16).toRed(this.red);
    else {
        var betas = this._getEndoRoots(this.p);
        // Choose the smallest beta
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
    }
    if (conf.lambda) lambda = new BN(conf.lambda, 16);
    else {
        // Choose the lambda that is matching selected beta
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) lambda = lambdas[0];
        else {
            lambda = lambdas[1];
            assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
    }
    // Get basis vectors, used for balanced length-two representation
    var basis;
    if (conf.basis) basis = conf.basis.map(function(vec) {
        return {
            a: new BN(vec.a, 16),
            b: new BN(vec.b, 16)
        };
    });
    else basis = this._getEndoBasis(lambda);
    return {
        beta: beta,
        lambda: lambda,
        basis: basis
    };
};
ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
    // Find roots of for x^2 + x + 1 in F
    // Root = (-1 +- Sqrt(-3)) / 2
    //
    var red = num === this.p ? this.red : BN.mont(num);
    var tinv = new BN(2).toRed(red).redInvm();
    var ntinv = tinv.redNeg();
    var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);
    var l1 = ntinv.redAdd(s).fromRed();
    var l2 = ntinv.redSub(s).fromRed();
    return [
        l1,
        l2
    ];
};
ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
    // aprxSqrt >= sqrt(this.n)
    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
    // 3.74
    // Run EGCD, until r(L + 1) < aprxSqrt
    var u = lambda;
    var v = this.n.clone();
    var x1 = new BN(1);
    var y1 = new BN(0);
    var x2 = new BN(0);
    var y2 = new BN(1);
    // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
    var a0;
    var b0;
    // First vector
    var a1;
    var b1;
    // Second vector
    var a2;
    var b2;
    var prevR;
    var i = 0;
    var r;
    var x;
    while(u.cmpn(0) !== 0){
        var q = v.div(u);
        r = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));
        if (!a1 && r.cmp(aprxSqrt) < 0) {
            a0 = prevR.neg();
            b0 = x1;
            a1 = r.neg();
            b1 = x;
        } else if (a1 && ++i === 2) break;
        prevR = r;
        v = u;
        u = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
    }
    a2 = r.neg();
    b2 = x;
    var len1 = a1.sqr().add(b1.sqr());
    var len2 = a2.sqr().add(b2.sqr());
    if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
    }
    // Normalize signs
    if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
    }
    if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
    }
    return [
        {
            a: a1,
            b: b1
        },
        {
            a: a2,
            b: b2
        }
    ];
};
ShortCurve.prototype._endoSplit = function _endoSplit(k) {
    var basis = this.endo.basis;
    var v1 = basis[0];
    var v2 = basis[1];
    var c1 = v2.b.mul(k).divRound(this.n);
    var c2 = v1.b.neg().mul(k).divRound(this.n);
    var p1 = c1.mul(v1.a);
    var p2 = c2.mul(v2.a);
    var q1 = c1.mul(v1.b);
    var q2 = c2.mul(v2.b);
    // Calculate answer
    var k1 = k.sub(p1).sub(p2);
    var k2 = q1.add(q2).neg();
    return {
        k1: k1,
        k2: k2
    };
};
ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new BN(x, 16);
    if (!x.red) x = x.toRed(this.red);
    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point');
    // XXX Is there any way to tell if the number is odd without converting it
    // to non-red form?
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
    return this.point(x, y);
};
ShortCurve.prototype.validate = function validate(point) {
    if (point.inf) return true;
    var x = point.x;
    var y = point.y;
    var ax = this.a.redMul(x);
    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
    return y.redSqr().redISub(rhs).cmpn(0) === 0;
};
ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
    var npoints = this._endoWnafT1;
    var ncoeffs = this._endoWnafT2;
    for(var i = 0; i < points.length; i++){
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();
        if (split.k1.negative) {
            split.k1.ineg();
            p = p.neg(true);
        }
        if (split.k2.negative) {
            split.k2.ineg();
            beta = beta.neg(true);
        }
        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
    }
    var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);
    // Clean-up references to points and coefficients
    for(var j = 0; j < i * 2; j++){
        npoints[j] = null;
        ncoeffs[j] = null;
    }
    return res;
};
function Point(curve, x, y, isRed) {
    Base.BasePoint.call(this, curve, 'affine');
    if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
    } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        // Force redgomery representation when loading from JSON
        if (isRed) {
            this.x.forceRed(this.curve.red);
            this.y.forceRed(this.curve.red);
        }
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        this.inf = false;
    }
}
inherits(Point, Base.BasePoint);
ShortCurve.prototype.point = function point(x, y, isRed) {
    return new Point(this, x, y, isRed);
};
ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
    return Point.fromJSON(this, obj, red);
};
Point.prototype._getBeta = function _getBeta() {
    if (!this.curve.endo) return;
    var pre = this.precomputed;
    if (pre && pre.beta) return pre.beta;
    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
    if (pre) {
        var curve = this.curve;
        var endoMul = function(p) {
            return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
            beta: null,
            naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(endoMul)
            },
            doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(endoMul)
            }
        };
    }
    return beta;
};
Point.prototype.toJSON = function toJSON() {
    if (!this.precomputed) return [
        this.x,
        this.y
    ];
    return [
        this.x,
        this.y,
        this.precomputed && {
            doubles: this.precomputed.doubles && {
                step: this.precomputed.doubles.step,
                points: this.precomputed.doubles.points.slice(1)
            },
            naf: this.precomputed.naf && {
                wnd: this.precomputed.naf.wnd,
                points: this.precomputed.naf.points.slice(1)
            }
        }
    ];
};
Point.fromJSON = function fromJSON(curve, obj, red) {
    if (typeof obj === 'string') obj = JSON.parse(obj);
    var res = curve.point(obj[0], obj[1], red);
    if (!obj[2]) return res;
    function obj2point(obj) {
        return curve.point(obj[0], obj[1], red);
    }
    var pre = obj[2];
    res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
            step: pre.doubles.step,
            points: [
                res
            ].concat(pre.doubles.points.map(obj2point))
        },
        naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: [
                res
            ].concat(pre.naf.points.map(obj2point))
        }
    };
    return res;
};
Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};
Point.prototype.isInfinity = function isInfinity() {
    return this.inf;
};
Point.prototype.add = function add(p) {
    // O + P = P
    if (this.inf) return p;
    // P + O = P
    if (p.inf) return this;
    // P + P = 2P
    if (this.eq(p)) return this.dbl();
    // P + (-P) = O
    if (this.neg().eq(p)) return this.curve.point(null, null);
    // P + Q = O
    if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);
    var c = this.y.redSub(p.y);
    if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());
    var nx = c.redSqr().redISub(this.x).redISub(p.x);
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
};
Point.prototype.dbl = function dbl() {
    if (this.inf) return this;
    // 2P = O
    var ys1 = this.y.redAdd(this.y);
    if (ys1.cmpn(0) === 0) return this.curve.point(null, null);
    var a = this.curve.a;
    var x2 = this.x.redSqr();
    var dyinv = ys1.redInvm();
    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
    var nx = c.redSqr().redISub(this.x.redAdd(this.x));
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
};
Point.prototype.getX = function getX() {
    return this.x.fromRed();
};
Point.prototype.getY = function getY() {
    return this.y.fromRed();
};
Point.prototype.mul = function mul(k) {
    k = new BN(k, 16);
    if (this.isInfinity()) return this;
    else if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
    else if (this.curve.endo) return this.curve._endoWnafMulAdd([
        this
    ], [
        k
    ]);
    else return this.curve._wnafMul(this, k);
};
Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
    var points = [
        this,
        p2
    ];
    var coeffs = [
        k1,
        k2
    ];
    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);
    else return this.curve._wnafMulAdd(1, points, coeffs, 2);
};
Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
    var points = [
        this,
        p2
    ];
    var coeffs = [
        k1,
        k2
    ];
    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);
    else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};
Point.prototype.eq = function eq(p) {
    return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};
Point.prototype.neg = function neg(_precompute) {
    if (this.inf) return this;
    var res = this.curve.point(this.x, this.y.redNeg());
    if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p) {
            return p.neg();
        };
        res.precomputed = {
            naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(negate)
            },
            doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(negate)
            }
        };
    }
    return res;
};
Point.prototype.toJ = function toJ() {
    if (this.inf) return this.curve.jpoint(null, null, null);
    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
    return res;
};
function JPoint(curve, x, y, z) {
    Base.BasePoint.call(this, curve, 'jacobian');
    if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new BN(0);
    } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = new BN(z, 16);
    }
    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.y.red) this.y = this.y.toRed(this.curve.red);
    if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);
ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
    return new JPoint(this, x, y, z);
};
JPoint.prototype.toP = function toP() {
    if (this.isInfinity()) return this.curve.point(null, null);
    var zinv = this.z.redInvm();
    var zinv2 = zinv.redSqr();
    var ax = this.x.redMul(zinv2);
    var ay = this.y.redMul(zinv2).redMul(zinv);
    return this.curve.point(ax, ay);
};
JPoint.prototype.neg = function neg() {
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};
JPoint.prototype.add = function add(p) {
    // O + P = P
    if (this.isInfinity()) return p;
    // P + O = P
    if (p.isInfinity()) return this;
    // 12M + 4S + 7A
    var pz2 = p.z.redSqr();
    var z2 = this.z.redSqr();
    var u1 = this.x.redMul(pz2);
    var u2 = p.x.redMul(z2);
    var s1 = this.y.redMul(pz2.redMul(p.z));
    var s2 = p.y.redMul(z2.redMul(this.z));
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
        else return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(p.z).redMul(h);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.mixedAdd = function mixedAdd(p) {
    // O + P = P
    if (this.isInfinity()) return p.toJ();
    // P + O = P
    if (p.isInfinity()) return this;
    // 8M + 3S + 7A
    var z2 = this.z.redSqr();
    var u1 = this.x;
    var u2 = p.x.redMul(z2);
    var s1 = this.y;
    var s2 = p.y.redMul(z2).redMul(this.z);
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
        else return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(h);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.dblp = function dblp(pow) {
    if (pow === 0) return this;
    if (this.isInfinity()) return this;
    if (!pow) return this.dbl();
    var i;
    if (this.curve.zeroA || this.curve.threeA) {
        var r = this;
        for(i = 0; i < pow; i++)r = r.dbl();
        return r;
    }
    // 1M + 2S + 1A + N * (4S + 5M + 8A)
    // N = 1 => 6M + 6S + 9A
    var a = this.curve.a;
    var tinv = this.curve.tinv;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    // Reuse results
    var jyd = jy.redAdd(jy);
    for(i = 0; i < pow; i++){
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow) jz4 = jz4.redMul(jyd4);
        jx = nx;
        jz = nz;
        jyd = dny;
    }
    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};
JPoint.prototype.dbl = function dbl() {
    if (this.isInfinity()) return this;
    if (this.curve.zeroA) return this._zeroDbl();
    else if (this.curve.threeA) return this._threeDbl();
    else return this._dbl();
};
JPoint.prototype._zeroDbl = function _zeroDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 14A
        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a; a = 0
        var m = xx.redAdd(xx).redIAdd(xx);
        // T = M ^ 2 - 2*S
        var t = m.redSqr().redISub(s).redISub(s);
        // 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2*Y1
        nz = this.y.redAdd(this.y);
    } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-dbl-2009-l
        // 2M + 5S + 13A
        // A = X1^2
        var a = this.x.redSqr();
        // B = Y1^2
        var b = this.y.redSqr();
        // C = B^2
        var c = b.redSqr();
        // D = 2 * ((X1 + B)^2 - A - C)
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        // E = 3 * A
        var e = a.redAdd(a).redIAdd(a);
        // F = E^2
        var f = e.redSqr();
        // 8 * C
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);
        // X3 = F - 2 * D
        nx = f.redISub(d).redISub(d);
        // Y3 = E * (D - X3) - 8 * C
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        // Z3 = 2 * Y1 * Z1
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
    }
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype._threeDbl = function _threeDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 15A
        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        // T = M^2 - 2 * S
        var t = m.redSqr().redISub(s).redISub(s);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2 * Y1
        nz = this.y.redAdd(this.y);
    } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
        // 3M + 5S
        // delta = Z1^2
        var delta = this.z.redSqr();
        // gamma = Y1^2
        var gamma = this.y.redSqr();
        // beta = X1 * gamma
        var beta = this.x.redMul(gamma);
        // alpha = 3 * (X1 - delta) * (X1 + delta)
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        // X3 = alpha^2 - 8 * beta
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        // Z3 = (Y1 + Z1)^2 - gamma - delta
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
    }
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype._dbl = function _dbl() {
    var a = this.curve.a;
    // 4M + 6S + 10A
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jx2 = jx.redSqr();
    var jy2 = jy.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
    var jxd4 = jx.redAdd(jx);
    jxd4 = jxd4.redIAdd(jxd4);
    var t1 = jxd4.redMul(jy2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var jyd8 = jy2.redSqr();
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    var ny = c.redMul(t2).redISub(jyd8);
    var nz = jy.redAdd(jy).redMul(jz);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.trpl = function trpl() {
    if (!this.curve.zeroA) return this.dbl().add(this);
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
    // 5M + 10S + ...
    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // ZZ = Z1^2
    var zz = this.z.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // M = 3 * XX + a * ZZ2; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // MM = M^2
    var mm = m.redSqr();
    // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    e = e.redIAdd(e);
    e = e.redAdd(e).redIAdd(e);
    e = e.redISub(mm);
    // EE = E^2
    var ee = e.redSqr();
    // T = 16*YYYY
    var t = yyyy.redIAdd(yyyy);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    // U = (M + E)^2 - MM - EE - T
    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
    // X3 = 4 * (X1 * EE - 4 * YY * U)
    var yyu4 = yy.redMul(u);
    yyu4 = yyu4.redIAdd(yyu4);
    yyu4 = yyu4.redIAdd(yyu4);
    var nx = this.x.redMul(ee).redISub(yyu4);
    nx = nx.redIAdd(nx);
    nx = nx.redIAdd(nx);
    // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    // Z3 = (Z1 + E)^2 - ZZ - EE
    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.mul = function mul(k, kbase) {
    k = new BN(k, kbase);
    return this.curve._wnafMul(this, k);
};
JPoint.prototype.eq = function eq(p) {
    if (p.type === 'affine') return this.eq(p.toJ());
    if (this === p) return true;
    // x1 * z2^2 == x2 * z1^2
    var z2 = this.z.redSqr();
    var pz2 = p.z.redSqr();
    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false;
    // y1 * z2^3 == y2 * z1^3
    var z3 = z2.redMul(this.z);
    var pz3 = pz2.redMul(p.z);
    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};
JPoint.prototype.eqXToP = function eqXToP(x) {
    var zs = this.z.redSqr();
    var rx = x.toRed(this.curve.red).redMul(zs);
    if (this.x.cmp(rx) === 0) return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(zs);
    for(;;){
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0) return true;
    }
};
JPoint.prototype.inspect = function inspect() {
    if (this.isInfinity()) return '<EC JPoint Infinity>';
    return '<EC JPoint x: ' + this.x.toString(16, 2) + ' y: ' + this.y.toString(16, 2) + ' z: ' + this.z.toString(16, 2) + '>';
};
JPoint.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
};

},{"89f794ef417dc31c":"8sNT5","c314b0ac30b69c4a":"d0RHy","6ac4d7c73f24ab9c":"bRL3M","6e622edb7498c94":"kvY1a"}],"2JhQH":[function(require,module,exports,__globalThis) {
'use strict';
var BN = require("ebdf19f04f3ed250");
var inherits = require("cb5bb4841a749f68");
var Base = require("51280941230b3f98");
var utils = require("ea7949a80be00261");
function MontCurve(conf) {
    Base.call(this, 'mont', conf);
    this.a = new BN(conf.a, 16).toRed(this.red);
    this.b = new BN(conf.b, 16).toRed(this.red);
    this.i4 = new BN(4).toRed(this.red).redInvm();
    this.two = new BN(2).toRed(this.red);
    this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;
MontCurve.prototype.validate = function validate(point) {
    var x = point.normalize().x;
    var x2 = x.redSqr();
    var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
    var y = rhs.redSqrt();
    return y.redSqr().cmp(rhs) === 0;
};
function Point(curve, x, z) {
    Base.BasePoint.call(this, curve, 'projective');
    if (x === null && z === null) {
        this.x = this.curve.one;
        this.z = this.curve.zero;
    } else {
        this.x = new BN(x, 16);
        this.z = new BN(z, 16);
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    }
}
inherits(Point, Base.BasePoint);
MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    return this.point(utils.toArray(bytes, enc), 1);
};
MontCurve.prototype.point = function point(x, z) {
    return new Point(this, x, z);
};
MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
};
Point.prototype.precompute = function precompute() {
// No-op
};
Point.prototype._encode = function _encode() {
    return this.getX().toArray('be', this.curve.p.byteLength());
};
Point.fromJSON = function fromJSON(curve, obj) {
    return new Point(curve, obj[0], obj[1] || curve.one);
};
Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};
Point.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
};
Point.prototype.dbl = function dbl() {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
    // 2M + 2S + 4A
    // A = X1 + Z1
    var a = this.x.redAdd(this.z);
    // AA = A^2
    var aa = a.redSqr();
    // B = X1 - Z1
    var b = this.x.redSub(this.z);
    // BB = B^2
    var bb = b.redSqr();
    // C = AA - BB
    var c = aa.redSub(bb);
    // X3 = AA * BB
    var nx = aa.redMul(bb);
    // Z3 = C * (BB + A24 * C)
    var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
    return this.curve.point(nx, nz);
};
Point.prototype.add = function add() {
    throw new Error('Not supported on Montgomery curve');
};
Point.prototype.diffAdd = function diffAdd(p, diff) {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
    // 4M + 2S + 6A
    // A = X2 + Z2
    var a = this.x.redAdd(this.z);
    // B = X2 - Z2
    var b = this.x.redSub(this.z);
    // C = X3 + Z3
    var c = p.x.redAdd(p.z);
    // D = X3 - Z3
    var d = p.x.redSub(p.z);
    // DA = D * A
    var da = d.redMul(a);
    // CB = C * B
    var cb = c.redMul(b);
    // X5 = Z1 * (DA + CB)^2
    var nx = diff.z.redMul(da.redAdd(cb).redSqr());
    // Z5 = X1 * (DA - CB)^2
    var nz = diff.x.redMul(da.redISub(cb).redSqr());
    return this.curve.point(nx, nz);
};
Point.prototype.mul = function mul(k) {
    var t = k.clone();
    var a = this; // (N / 2) * Q + Q
    var b = this.curve.point(null, null); // (N / 2) * Q
    var c = this; // Q
    for(var bits = []; t.cmpn(0) !== 0; t.iushrn(1))bits.push(t.andln(1));
    for(var i = bits.length - 1; i >= 0; i--)if (bits[i] === 0) {
        // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
        a = a.diffAdd(b, c);
        // N * Q = 2 * ((N / 2) * Q + Q))
        b = b.dbl();
    } else {
        // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
        b = a.diffAdd(b, c);
        // N * Q + Q = 2 * ((N / 2) * Q + Q)
        a = a.dbl();
    }
    return b;
};
Point.prototype.mulAdd = function mulAdd() {
    throw new Error('Not supported on Montgomery curve');
};
Point.prototype.jumlAdd = function jumlAdd() {
    throw new Error('Not supported on Montgomery curve');
};
Point.prototype.eq = function eq(other) {
    return this.getX().cmp(other.getX()) === 0;
};
Point.prototype.normalize = function normalize() {
    this.x = this.x.redMul(this.z.redInvm());
    this.z = this.curve.one;
    return this;
};
Point.prototype.getX = function getX() {
    // Normalize coordinates
    this.normalize();
    return this.x.fromRed();
};

},{"ebdf19f04f3ed250":"d0RHy","cb5bb4841a749f68":"bRL3M","51280941230b3f98":"kvY1a","ea7949a80be00261":"8sNT5"}],"3idNZ":[function(require,module,exports,__globalThis) {
'use strict';
var utils = require("7bd66a4710450b08");
var BN = require("ccef46dcf03d45c6");
var inherits = require("19937272cbe23c92");
var Base = require("108c8ead5f54502b");
var assert = utils.assert;
function EdwardsCurve(conf) {
    // NOTE: Important as we are creating point in Base.call()
    this.twisted = (conf.a | 0) !== 1;
    this.mOneA = this.twisted && (conf.a | 0) === -1;
    this.extended = this.mOneA;
    Base.call(this, 'edwards', conf);
    this.a = new BN(conf.a, 16).umod(this.red.m);
    this.a = this.a.toRed(this.red);
    this.c = new BN(conf.c, 16).toRed(this.red);
    this.c2 = this.c.redSqr();
    this.d = new BN(conf.d, 16).toRed(this.red);
    this.dd = this.d.redAdd(this.d);
    assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
    this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;
EdwardsCurve.prototype._mulA = function _mulA(num) {
    if (this.mOneA) return num.redNeg();
    else return this.a.redMul(num);
};
EdwardsCurve.prototype._mulC = function _mulC(num) {
    if (this.oneC) return num;
    else return this.c.redMul(num);
};
// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
    return this.point(x, y, z, t);
};
EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new BN(x, 16);
    if (!x.red) x = x.toRed(this.red);
    var x2 = x.redSqr();
    var rhs = this.c2.redSub(this.a.redMul(x2));
    var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
    var y2 = rhs.redMul(lhs.redInvm());
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point');
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
    return this.point(x, y);
};
EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
    y = new BN(y, 16);
    if (!y.red) y = y.toRed(this.red);
    // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
    var y2 = y.redSqr();
    var lhs = y2.redSub(this.c2);
    var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
    var x2 = lhs.redMul(rhs.redInvm());
    if (x2.cmp(this.zero) === 0) {
        if (odd) throw new Error('invalid point');
        else return this.point(this.zero, y);
    }
    var x = x2.redSqrt();
    if (x.redSqr().redSub(x2).cmp(this.zero) !== 0) throw new Error('invalid point');
    if (x.fromRed().isOdd() !== odd) x = x.redNeg();
    return this.point(x, y);
};
EdwardsCurve.prototype.validate = function validate(point) {
    if (point.isInfinity()) return true;
    // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
    point.normalize();
    var x2 = point.x.redSqr();
    var y2 = point.y.redSqr();
    var lhs = x2.redMul(this.a).redAdd(y2);
    var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
    return lhs.cmp(rhs) === 0;
};
function Point(curve, x, y, z, t) {
    Base.BasePoint.call(this, curve, 'projective');
    if (x === null && y === null && z === null) {
        this.x = this.curve.zero;
        this.y = this.curve.one;
        this.z = this.curve.one;
        this.t = this.curve.zero;
        this.zOne = true;
    } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = z ? new BN(z, 16) : this.curve.one;
        this.t = t && new BN(t, 16);
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
        if (this.t && !this.t.red) this.t = this.t.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;
        // Use extended coordinates
        if (this.curve.extended && !this.t) {
            this.t = this.x.redMul(this.y);
            if (!this.zOne) this.t = this.t.redMul(this.z.redInvm());
        }
    }
}
inherits(Point, Base.BasePoint);
EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
};
EdwardsCurve.prototype.point = function point(x, y, z, t) {
    return new Point(this, x, y, z, t);
};
Point.fromJSON = function fromJSON(curve, obj) {
    return new Point(curve, obj[0], obj[1], obj[2]);
};
Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};
Point.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
};
Point.prototype._extDbl = function _extDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #doubling-dbl-2008-hwcd
    // 4M + 4S
    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = 2 * Z1^2
    var c = this.z.redSqr();
    c = c.redIAdd(c);
    // D = a * A
    var d = this.curve._mulA(a);
    // E = (X1 + Y1)^2 - A - B
    var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
    // G = D + B
    var g = d.redAdd(b);
    // F = G - C
    var f = g.redSub(c);
    // H = D - B
    var h = d.redSub(b);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
};
Point.prototype._projDbl = function _projDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #doubling-dbl-2008-bbjlp
    //     #doubling-dbl-2007-bl
    // and others
    // Generally 3M + 4S or 2M + 4S
    // B = (X1 + Y1)^2
    var b = this.x.redAdd(this.y).redSqr();
    // C = X1^2
    var c = this.x.redSqr();
    // D = Y1^2
    var d = this.y.redSqr();
    var nx;
    var ny;
    var nz;
    var e;
    var h;
    var j;
    if (this.curve.twisted) {
        // E = a * C
        e = this.curve._mulA(c);
        // F = E + D
        var f = e.redAdd(d);
        if (this.zOne) {
            // X3 = (B - C - D) * (F - 2)
            nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
            // Y3 = F * (E - D)
            ny = f.redMul(e.redSub(d));
            // Z3 = F^2 - 2 * F
            nz = f.redSqr().redSub(f).redSub(f);
        } else {
            // H = Z1^2
            h = this.z.redSqr();
            // J = F - 2 * H
            j = f.redSub(h).redISub(h);
            // X3 = (B-C-D)*J
            nx = b.redSub(c).redISub(d).redMul(j);
            // Y3 = F * (E - D)
            ny = f.redMul(e.redSub(d));
            // Z3 = F * J
            nz = f.redMul(j);
        }
    } else {
        // E = C + D
        e = c.redAdd(d);
        // H = (c * Z1)^2
        h = this.curve._mulC(this.z).redSqr();
        // J = E - 2 * H
        j = e.redSub(h).redSub(h);
        // X3 = c * (B - E) * J
        nx = this.curve._mulC(b.redISub(e)).redMul(j);
        // Y3 = c * E * (C - D)
        ny = this.curve._mulC(e).redMul(c.redISub(d));
        // Z3 = E * J
        nz = e.redMul(j);
    }
    return this.curve.point(nx, ny, nz);
};
Point.prototype.dbl = function dbl() {
    if (this.isInfinity()) return this;
    // Double in extended coordinates
    if (this.curve.extended) return this._extDbl();
    else return this._projDbl();
};
Point.prototype._extAdd = function _extAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #addition-add-2008-hwcd-3
    // 8M
    // A = (Y1 - X1) * (Y2 - X2)
    var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
    // B = (Y1 + X1) * (Y2 + X2)
    var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
    // C = T1 * k * T2
    var c = this.t.redMul(this.curve.dd).redMul(p.t);
    // D = Z1 * 2 * Z2
    var d = this.z.redMul(p.z.redAdd(p.z));
    // E = B - A
    var e = b.redSub(a);
    // F = D - C
    var f = d.redSub(c);
    // G = D + C
    var g = d.redAdd(c);
    // H = B + A
    var h = b.redAdd(a);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
};
Point.prototype._projAdd = function _projAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #addition-add-2008-bbjlp
    //     #addition-add-2007-bl
    // 10M + 1S
    // A = Z1 * Z2
    var a = this.z.redMul(p.z);
    // B = A^2
    var b = a.redSqr();
    // C = X1 * X2
    var c = this.x.redMul(p.x);
    // D = Y1 * Y2
    var d = this.y.redMul(p.y);
    // E = d * C * D
    var e = this.curve.d.redMul(c).redMul(d);
    // F = B - E
    var f = b.redSub(e);
    // G = B + E
    var g = b.redAdd(e);
    // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
    var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
    var nx = a.redMul(f).redMul(tmp);
    var ny;
    var nz;
    if (this.curve.twisted) {
        // Y3 = A * G * (D - a * C)
        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
        // Z3 = F * G
        nz = f.redMul(g);
    } else {
        // Y3 = A * G * (D - C)
        ny = a.redMul(g).redMul(d.redSub(c));
        // Z3 = c * F * G
        nz = this.curve._mulC(f).redMul(g);
    }
    return this.curve.point(nx, ny, nz);
};
Point.prototype.add = function add(p) {
    if (this.isInfinity()) return p;
    if (p.isInfinity()) return this;
    if (this.curve.extended) return this._extAdd(p);
    else return this._projAdd(p);
};
Point.prototype.mul = function mul(k) {
    if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
    else return this.curve._wnafMul(this, k);
};
Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [
        this,
        p
    ], [
        k1,
        k2
    ], 2, false);
};
Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [
        this,
        p
    ], [
        k1,
        k2
    ], 2, true);
};
Point.prototype.normalize = function normalize() {
    if (this.zOne) return this;
    // Normalize coordinates
    var zi = this.z.redInvm();
    this.x = this.x.redMul(zi);
    this.y = this.y.redMul(zi);
    if (this.t) this.t = this.t.redMul(zi);
    this.z = this.curve.one;
    this.zOne = true;
    return this;
};
Point.prototype.neg = function neg() {
    return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
};
Point.prototype.getX = function getX() {
    this.normalize();
    return this.x.fromRed();
};
Point.prototype.getY = function getY() {
    this.normalize();
    return this.y.fromRed();
};
Point.prototype.eq = function eq(other) {
    return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
};
Point.prototype.eqXToP = function eqXToP(x) {
    var rx = x.toRed(this.curve.red).redMul(this.z);
    if (this.x.cmp(rx) === 0) return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(this.z);
    for(;;){
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0) return true;
    }
};
// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

},{"7bd66a4710450b08":"8sNT5","ccef46dcf03d45c6":"d0RHy","19937272cbe23c92":"bRL3M","108c8ead5f54502b":"kvY1a"}],"6yRo9":[function(require,module,exports,__globalThis) {
'use strict';
var curves = exports;
var hash = require("1c9db357c0845afa");
var curve = require("47ec78745540f875");
var utils = require("e30b16e4a47a5405");
var assert = utils.assert;
function PresetCurve(options) {
    if (options.type === 'short') this.curve = new curve.short(options);
    else if (options.type === 'edwards') this.curve = new curve.edwards(options);
    else this.curve = new curve.mont(options);
    this.g = this.curve.g;
    this.n = this.curve.n;
    this.hash = options.hash;
    assert(this.g.validate(), 'Invalid curve');
    assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;
function defineCurve(name, options) {
    Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        get: function() {
            var curve = new PresetCurve(options);
            Object.defineProperty(curves, name, {
                configurable: true,
                enumerable: true,
                value: curve
            });
            return curve;
        }
    });
}
defineCurve('p192', {
    type: 'short',
    prime: 'p192',
    p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
    b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
    n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
    hash: hash.sha256,
    gRed: false,
    g: [
        '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
        '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
    ]
});
defineCurve('p224', {
    type: 'short',
    prime: 'p224',
    p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
    b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
    n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
    hash: hash.sha256,
    gRed: false,
    g: [
        'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
        'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
    ]
});
defineCurve('p256', {
    type: 'short',
    prime: null,
    p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
    a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
    b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
    n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
    hash: hash.sha256,
    gRed: false,
    g: [
        '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
        '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
    ]
});
defineCurve('p384', {
    type: 'short',
    prime: null,
    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
    a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
    b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
    n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
    hash: hash.sha384,
    gRed: false,
    g: [
        "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
        "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
    ]
});
defineCurve('p521', {
    type: 'short',
    prime: null,
    p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
    a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
    b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
    n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
    hash: hash.sha512,
    gRed: false,
    g: [
        "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
        "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
    ]
});
defineCurve('curve25519', {
    type: 'mont',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '76d06',
    b: '1',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: hash.sha256,
    gRed: false,
    g: [
        '9'
    ]
});
defineCurve('ed25519', {
    type: 'edwards',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '-1',
    c: '1',
    // -121665 * (121666^(-1)) (mod P)
    d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: hash.sha256,
    gRed: false,
    g: [
        '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',
        // 4/5
        '6666666666666666666666666666666666666666666666666666666666666658'
    ]
});
var pre;
try {
    pre = require("9eada5f7049e7dfd");
} catch (e) {
    pre = undefined;
}
defineCurve('secp256k1', {
    type: 'short',
    prime: 'k256',
    p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
    a: '0',
    b: '7',
    n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
    h: '1',
    hash: hash.sha256,
    // Precomputed endomorphism
    beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
    lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
    basis: [
        {
            a: '3086d221a7d46bcde86c90e49284eb15',
            b: '-e4437ed6010e88286f547fa90abfe4c3'
        },
        {
            a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
            b: '3086d221a7d46bcde86c90e49284eb15'
        }
    ],
    gRed: false,
    g: [
        '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
        '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
        pre
    ]
});

},{"1c9db357c0845afa":"gOEGU","47ec78745540f875":"72OoG","e30b16e4a47a5405":"8sNT5","9eada5f7049e7dfd":"lgNSV"}],"gOEGU":[function(require,module,exports,__globalThis) {
var hash = exports;
hash.utils = require("38593959f18bd562");
hash.common = require("31a457752237e8ad");
hash.sha = require("3e37816d2a2fd68d");
hash.ripemd = require("ce5a13b5bd10f171");
hash.hmac = require("c32fbac97a361580");
// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"38593959f18bd562":"kfzn2","31a457752237e8ad":"ecAfF","3e37816d2a2fd68d":"8nbee","ce5a13b5bd10f171":"9kyRQ","c32fbac97a361580":"5KrrE"}],"kfzn2":[function(require,module,exports,__globalThis) {
'use strict';
var assert = require("6002b0feade022a4");
var inherits = require("d4826c9d0ff1b1f");
exports.inherits = inherits;
function isSurrogatePair(msg, i) {
    if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) return false;
    if (i < 0 || i + 1 >= msg.length) return false;
    return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
}
function toArray(msg, enc) {
    if (Array.isArray(msg)) return msg.slice();
    if (!msg) return [];
    var res = [];
    if (typeof msg === 'string') {
        if (!enc) {
            // Inspired by stringToUtf8ByteArray() in closure-library by Google
            // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
            // Apache License 2.0
            // https://github.com/google/closure-library/blob/master/LICENSE
            var p = 0;
            for(var i = 0; i < msg.length; i++){
                var c = msg.charCodeAt(i);
                if (c < 128) res[p++] = c;
                else if (c < 2048) {
                    res[p++] = c >> 6 | 192;
                    res[p++] = c & 63 | 128;
                } else if (isSurrogatePair(msg, i)) {
                    c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
                    res[p++] = c >> 18 | 240;
                    res[p++] = c >> 12 & 63 | 128;
                    res[p++] = c >> 6 & 63 | 128;
                    res[p++] = c & 63 | 128;
                } else {
                    res[p++] = c >> 12 | 224;
                    res[p++] = c >> 6 & 63 | 128;
                    res[p++] = c & 63 | 128;
                }
            }
        } else if (enc === 'hex') {
            msg = msg.replace(/[^a-z0-9]+/ig, '');
            if (msg.length % 2 !== 0) msg = '0' + msg;
            for(i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));
        }
    } else for(i = 0; i < msg.length; i++)res[i] = msg[i] | 0;
    return res;
}
exports.toArray = toArray;
function toHex(msg) {
    var res = '';
    for(var i = 0; i < msg.length; i++)res += zero2(msg[i].toString(16));
    return res;
}
exports.toHex = toHex;
function htonl(w) {
    var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;
    return res >>> 0;
}
exports.htonl = htonl;
function toHex32(msg, endian) {
    var res = '';
    for(var i = 0; i < msg.length; i++){
        var w = msg[i];
        if (endian === 'little') w = htonl(w);
        res += zero8(w.toString(16));
    }
    return res;
}
exports.toHex32 = toHex32;
function zero2(word) {
    if (word.length === 1) return '0' + word;
    else return word;
}
exports.zero2 = zero2;
function zero8(word) {
    if (word.length === 7) return '0' + word;
    else if (word.length === 6) return '00' + word;
    else if (word.length === 5) return '000' + word;
    else if (word.length === 4) return '0000' + word;
    else if (word.length === 3) return '00000' + word;
    else if (word.length === 2) return '000000' + word;
    else if (word.length === 1) return '0000000' + word;
    else return word;
}
exports.zero8 = zero8;
function join32(msg, start, end, endian) {
    var len = end - start;
    assert(len % 4 === 0);
    var res = new Array(len / 4);
    for(var i = 0, k = start; i < res.length; i++, k += 4){
        var w;
        if (endian === 'big') w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];
        else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
        res[i] = w >>> 0;
    }
    return res;
}
exports.join32 = join32;
function split32(msg, endian) {
    var res = new Array(msg.length * 4);
    for(var i = 0, k = 0; i < msg.length; i++, k += 4){
        var m = msg[i];
        if (endian === 'big') {
            res[k] = m >>> 24;
            res[k + 1] = m >>> 16 & 0xff;
            res[k + 2] = m >>> 8 & 0xff;
            res[k + 3] = m & 0xff;
        } else {
            res[k + 3] = m >>> 24;
            res[k + 2] = m >>> 16 & 0xff;
            res[k + 1] = m >>> 8 & 0xff;
            res[k] = m & 0xff;
        }
    }
    return res;
}
exports.split32 = split32;
function rotr32(w, b) {
    return w >>> b | w << 32 - b;
}
exports.rotr32 = rotr32;
function rotl32(w, b) {
    return w << b | w >>> 32 - b;
}
exports.rotl32 = rotl32;
function sum32(a, b) {
    return a + b >>> 0;
}
exports.sum32 = sum32;
function sum32_3(a, b, c) {
    return a + b + c >>> 0;
}
exports.sum32_3 = sum32_3;
function sum32_4(a, b, c, d) {
    return a + b + c + d >>> 0;
}
exports.sum32_4 = sum32_4;
function sum32_5(a, b, c, d, e) {
    return a + b + c + d + e >>> 0;
}
exports.sum32_5 = sum32_5;
function sum64(buf, pos, ah, al) {
    var bh = buf[pos];
    var bl = buf[pos + 1];
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    buf[pos] = hi >>> 0;
    buf[pos + 1] = lo;
}
exports.sum64 = sum64;
function sum64_hi(ah, al, bh, bl) {
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    return hi >>> 0;
}
exports.sum64_hi = sum64_hi;
function sum64_lo(ah, al, bh, bl) {
    var lo = al + bl;
    return lo >>> 0;
}
exports.sum64_lo = sum64_lo;
function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    var hi = ah + bh + ch + dh + carry;
    return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;
function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
    var lo = al + bl + cl + dl;
    return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;
function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    lo = lo + el >>> 0;
    carry += lo < el ? 1 : 0;
    var hi = ah + bh + ch + dh + eh + carry;
    return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;
function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var lo = al + bl + cl + dl + el;
    return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;
function rotr64_hi(ah, al, num) {
    var r = al << 32 - num | ah >>> num;
    return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;
function rotr64_lo(ah, al, num) {
    var r = ah << 32 - num | al >>> num;
    return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;
function shr64_hi(ah, al, num) {
    return ah >>> num;
}
exports.shr64_hi = shr64_hi;
function shr64_lo(ah, al, num) {
    var r = ah << 32 - num | al >>> num;
    return r >>> 0;
}
exports.shr64_lo = shr64_lo;

},{"6002b0feade022a4":"8OvWh","d4826c9d0ff1b1f":"bRL3M"}],"ecAfF":[function(require,module,exports,__globalThis) {
'use strict';
var utils = require("e9291abdfb47ee4f");
var assert = require("ea8841b701712638");
function BlockHash() {
    this.pending = null;
    this.pendingTotal = 0;
    this.blockSize = this.constructor.blockSize;
    this.outSize = this.constructor.outSize;
    this.hmacStrength = this.constructor.hmacStrength;
    this.padLength = this.constructor.padLength / 8;
    this.endian = 'big';
    this._delta8 = this.blockSize / 8;
    this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;
BlockHash.prototype.update = function update(msg, enc) {
    // Convert message to array, pad it, and join into 32bit blocks
    msg = utils.toArray(msg, enc);
    if (!this.pending) this.pending = msg;
    else this.pending = this.pending.concat(msg);
    this.pendingTotal += msg.length;
    // Enough data, try updating
    if (this.pending.length >= this._delta8) {
        msg = this.pending;
        // Process pending data in blocks
        var r = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r, msg.length);
        if (this.pending.length === 0) this.pending = null;
        msg = utils.join32(msg, 0, msg.length - r, this.endian);
        for(var i = 0; i < msg.length; i += this._delta32)this._update(msg, i, i + this._delta32);
    }
    return this;
};
BlockHash.prototype.digest = function digest(enc) {
    this.update(this._pad());
    assert(this.pending === null);
    return this._digest(enc);
};
BlockHash.prototype._pad = function pad() {
    var len = this.pendingTotal;
    var bytes = this._delta8;
    var k = bytes - (len + this.padLength) % bytes;
    var res = new Array(k + this.padLength);
    res[0] = 0x80;
    for(var i = 1; i < k; i++)res[i] = 0;
    // Append length
    len <<= 3;
    if (this.endian === 'big') {
        for(var t = 8; t < this.padLength; t++)res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = len >>> 24 & 0xff;
        res[i++] = len >>> 16 & 0xff;
        res[i++] = len >>> 8 & 0xff;
        res[i++] = len & 0xff;
    } else {
        res[i++] = len & 0xff;
        res[i++] = len >>> 8 & 0xff;
        res[i++] = len >>> 16 & 0xff;
        res[i++] = len >>> 24 & 0xff;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        for(t = 8; t < this.padLength; t++)res[i++] = 0;
    }
    return res;
};

},{"e9291abdfb47ee4f":"kfzn2","ea8841b701712638":"8OvWh"}],"8nbee":[function(require,module,exports,__globalThis) {
'use strict';
exports.sha1 = require("3835379564860fd7");
exports.sha224 = require("bb9f72f042233648");
exports.sha256 = require("20a3b0fa42e37dfe");
exports.sha384 = require("ad4827efa7d953c2");
exports.sha512 = require("301292595a944c1d");

},{"3835379564860fd7":"fnjyb","bb9f72f042233648":"9x7tY","20a3b0fa42e37dfe":"9bCbT","ad4827efa7d953c2":"lJMiS","301292595a944c1d":"8y482"}],"fnjyb":[function(require,module,exports,__globalThis) {
'use strict';
var utils = require("b75f3c1442bf9100");
var common = require("a29e68029e4c48f8");
var shaCommon = require("1be62f90a237cba5");
var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;
var sha1_K = [
    0x5A827999,
    0x6ED9EBA1,
    0x8F1BBCDC,
    0xCA62C1D6
];
function SHA1() {
    if (!(this instanceof SHA1)) return new SHA1();
    BlockHash.call(this);
    this.h = [
        0x67452301,
        0xefcdab89,
        0x98badcfe,
        0x10325476,
        0xc3d2e1f0
    ];
    this.W = new Array(80);
}
utils.inherits(SHA1, BlockHash);
module.exports = SHA1;
SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;
SHA1.prototype._update = function _update(msg, start) {
    var W = this.W;
    for(var i = 0; i < 16; i++)W[i] = msg[start + i];
    for(; i < W.length; i++)W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    for(i = 0; i < W.length; i++){
        var s = ~~(i / 20);
        var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
        e = d;
        d = c;
        c = rotl32(b, 30);
        b = a;
        a = t;
    }
    this.h[0] = sum32(this.h[0], a);
    this.h[1] = sum32(this.h[1], b);
    this.h[2] = sum32(this.h[2], c);
    this.h[3] = sum32(this.h[3], d);
    this.h[4] = sum32(this.h[4], e);
};
SHA1.prototype._digest = function digest(enc) {
    if (enc === 'hex') return utils.toHex32(this.h, 'big');
    else return utils.split32(this.h, 'big');
};

},{"b75f3c1442bf9100":"kfzn2","a29e68029e4c48f8":"ecAfF","1be62f90a237cba5":"gzrNi"}],"gzrNi":[function(require,module,exports,__globalThis) {
'use strict';
var utils = require("f0fb61f828bacd0f");
var rotr32 = utils.rotr32;
function ft_1(s, x, y, z) {
    if (s === 0) return ch32(x, y, z);
    if (s === 1 || s === 3) return p32(x, y, z);
    if (s === 2) return maj32(x, y, z);
}
exports.ft_1 = ft_1;
function ch32(x, y, z) {
    return x & y ^ ~x & z;
}
exports.ch32 = ch32;
function maj32(x, y, z) {
    return x & y ^ x & z ^ y & z;
}
exports.maj32 = maj32;
function p32(x, y, z) {
    return x ^ y ^ z;
}
exports.p32 = p32;
function s0_256(x) {
    return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;
function s1_256(x) {
    return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;
function g0_256(x) {
    return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;
}
exports.g0_256 = g0_256;
function g1_256(x) {
    return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;
}
exports.g1_256 = g1_256;

},{"f0fb61f828bacd0f":"kfzn2"}],"9x7tY":[function(require,module,exports,__globalThis) {
'use strict';
var utils = require("fe5acd040463c159");
var SHA256 = require("fa3503eda3738d05");
function SHA224() {
    if (!(this instanceof SHA224)) return new SHA224();
    SHA256.call(this);
    this.h = [
        0xc1059ed8,
        0x367cd507,
        0x3070dd17,
        0xf70e5939,
        0xffc00b31,
        0x68581511,
        0x64f98fa7,
        0xbefa4fa4
    ];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;
SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;
SHA224.prototype._digest = function digest(enc) {
    // Just truncate output
    if (enc === 'hex') return utils.toHex32(this.h.slice(0, 7), 'big');
    else return utils.split32(this.h.slice(0, 7), 'big');
};

},{"fe5acd040463c159":"kfzn2","fa3503eda3738d05":"9bCbT"}],"9bCbT":[function(require,module,exports,__globalThis) {
'use strict';
var utils = require("32ad3e510bd41f2a");
var common = require("469ad88ad505772a");
var shaCommon = require("fffa7d1ddf1f0b43");
var assert = require("126369f57b5225ed");
var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;
var BlockHash = common.BlockHash;
var sha256_K = [
    0x428a2f98,
    0x71374491,
    0xb5c0fbcf,
    0xe9b5dba5,
    0x3956c25b,
    0x59f111f1,
    0x923f82a4,
    0xab1c5ed5,
    0xd807aa98,
    0x12835b01,
    0x243185be,
    0x550c7dc3,
    0x72be5d74,
    0x80deb1fe,
    0x9bdc06a7,
    0xc19bf174,
    0xe49b69c1,
    0xefbe4786,
    0x0fc19dc6,
    0x240ca1cc,
    0x2de92c6f,
    0x4a7484aa,
    0x5cb0a9dc,
    0x76f988da,
    0x983e5152,
    0xa831c66d,
    0xb00327c8,
    0xbf597fc7,
    0xc6e00bf3,
    0xd5a79147,
    0x06ca6351,
    0x14292967,
    0x27b70a85,
    0x2e1b2138,
    0x4d2c6dfc,
    0x53380d13,
    0x650a7354,
    0x766a0abb,
    0x81c2c92e,
    0x92722c85,
    0xa2bfe8a1,
    0xa81a664b,
    0xc24b8b70,
    0xc76c51a3,
    0xd192e819,
    0xd6990624,
    0xf40e3585,
    0x106aa070,
    0x19a4c116,
    0x1e376c08,
    0x2748774c,
    0x34b0bcb5,
    0x391c0cb3,
    0x4ed8aa4a,
    0x5b9cca4f,
    0x682e6ff3,
    0x748f82ee,
    0x78a5636f,
    0x84c87814,
    0x8cc70208,
    0x90befffa,
    0xa4506ceb,
    0xbef9a3f7,
    0xc67178f2
];
function SHA256() {
    if (!(this instanceof SHA256)) return new SHA256();
    BlockHash.call(this);
    this.h = [
        0x6a09e667,
        0xbb67ae85,
        0x3c6ef372,
        0xa54ff53a,
        0x510e527f,
        0x9b05688c,
        0x1f83d9ab,
        0x5be0cd19
    ];
    this.k = sha256_K;
    this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;
SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;
SHA256.prototype._update = function _update(msg, start) {
    var W = this.W;
    for(var i = 0; i < 16; i++)W[i] = msg[start + i];
    for(; i < W.length; i++)W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    var f = this.h[5];
    var g = this.h[6];
    var h = this.h[7];
    assert(this.k.length === W.length);
    for(i = 0; i < W.length; i++){
        var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
        var T2 = sum32(s0_256(a), maj32(a, b, c));
        h = g;
        g = f;
        f = e;
        e = sum32(d, T1);
        d = c;
        c = b;
        b = a;
        a = sum32(T1, T2);
    }
    this.h[0] = sum32(this.h[0], a);
    this.h[1] = sum32(this.h[1], b);
    this.h[2] = sum32(this.h[2], c);
    this.h[3] = sum32(this.h[3], d);
    this.h[4] = sum32(this.h[4], e);
    this.h[5] = sum32(this.h[5], f);
    this.h[6] = sum32(this.h[6], g);
    this.h[7] = sum32(this.h[7], h);
};
SHA256.prototype._digest = function digest(enc) {
    if (enc === 'hex') return utils.toHex32(this.h, 'big');
    else return utils.split32(this.h, 'big');
};

},{"32ad3e510bd41f2a":"kfzn2","469ad88ad505772a":"ecAfF","fffa7d1ddf1f0b43":"gzrNi","126369f57b5225ed":"8OvWh"}],"lJMiS":[function(require,module,exports,__globalThis) {
'use strict';
var utils = require("a696ee34c45713da");
var SHA512 = require("fff95253fdaa49ea");
function SHA384() {
    if (!(this instanceof SHA384)) return new SHA384();
    SHA512.call(this);
    this.h = [
        0xcbbb9d5d,
        0xc1059ed8,
        0x629a292a,
        0x367cd507,
        0x9159015a,
        0x3070dd17,
        0x152fecd8,
        0xf70e5939,
        0x67332667,
        0xffc00b31,
        0x8eb44a87,
        0x68581511,
        0xdb0c2e0d,
        0x64f98fa7,
        0x47b5481d,
        0xbefa4fa4
    ];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;
SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;
SHA384.prototype._digest = function digest(enc) {
    if (enc === 'hex') return utils.toHex32(this.h.slice(0, 12), 'big');
    else return utils.split32(this.h.slice(0, 12), 'big');
};

},{"a696ee34c45713da":"kfzn2","fff95253fdaa49ea":"8y482"}],"8y482":[function(require,module,exports,__globalThis) {
'use strict';
var utils = require("7753b1fa702fbb54");
var common = require("81b6970d75627ce1");
var assert = require("f660976cede694e2");
var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;
var BlockHash = common.BlockHash;
var sha512_K = [
    0x428a2f98,
    0xd728ae22,
    0x71374491,
    0x23ef65cd,
    0xb5c0fbcf,
    0xec4d3b2f,
    0xe9b5dba5,
    0x8189dbbc,
    0x3956c25b,
    0xf348b538,
    0x59f111f1,
    0xb605d019,
    0x923f82a4,
    0xaf194f9b,
    0xab1c5ed5,
    0xda6d8118,
    0xd807aa98,
    0xa3030242,
    0x12835b01,
    0x45706fbe,
    0x243185be,
    0x4ee4b28c,
    0x550c7dc3,
    0xd5ffb4e2,
    0x72be5d74,
    0xf27b896f,
    0x80deb1fe,
    0x3b1696b1,
    0x9bdc06a7,
    0x25c71235,
    0xc19bf174,
    0xcf692694,
    0xe49b69c1,
    0x9ef14ad2,
    0xefbe4786,
    0x384f25e3,
    0x0fc19dc6,
    0x8b8cd5b5,
    0x240ca1cc,
    0x77ac9c65,
    0x2de92c6f,
    0x592b0275,
    0x4a7484aa,
    0x6ea6e483,
    0x5cb0a9dc,
    0xbd41fbd4,
    0x76f988da,
    0x831153b5,
    0x983e5152,
    0xee66dfab,
    0xa831c66d,
    0x2db43210,
    0xb00327c8,
    0x98fb213f,
    0xbf597fc7,
    0xbeef0ee4,
    0xc6e00bf3,
    0x3da88fc2,
    0xd5a79147,
    0x930aa725,
    0x06ca6351,
    0xe003826f,
    0x14292967,
    0x0a0e6e70,
    0x27b70a85,
    0x46d22ffc,
    0x2e1b2138,
    0x5c26c926,
    0x4d2c6dfc,
    0x5ac42aed,
    0x53380d13,
    0x9d95b3df,
    0x650a7354,
    0x8baf63de,
    0x766a0abb,
    0x3c77b2a8,
    0x81c2c92e,
    0x47edaee6,
    0x92722c85,
    0x1482353b,
    0xa2bfe8a1,
    0x4cf10364,
    0xa81a664b,
    0xbc423001,
    0xc24b8b70,
    0xd0f89791,
    0xc76c51a3,
    0x0654be30,
    0xd192e819,
    0xd6ef5218,
    0xd6990624,
    0x5565a910,
    0xf40e3585,
    0x5771202a,
    0x106aa070,
    0x32bbd1b8,
    0x19a4c116,
    0xb8d2d0c8,
    0x1e376c08,
    0x5141ab53,
    0x2748774c,
    0xdf8eeb99,
    0x34b0bcb5,
    0xe19b48a8,
    0x391c0cb3,
    0xc5c95a63,
    0x4ed8aa4a,
    0xe3418acb,
    0x5b9cca4f,
    0x7763e373,
    0x682e6ff3,
    0xd6b2b8a3,
    0x748f82ee,
    0x5defb2fc,
    0x78a5636f,
    0x43172f60,
    0x84c87814,
    0xa1f0ab72,
    0x8cc70208,
    0x1a6439ec,
    0x90befffa,
    0x23631e28,
    0xa4506ceb,
    0xde82bde9,
    0xbef9a3f7,
    0xb2c67915,
    0xc67178f2,
    0xe372532b,
    0xca273ece,
    0xea26619c,
    0xd186b8c7,
    0x21c0c207,
    0xeada7dd6,
    0xcde0eb1e,
    0xf57d4f7f,
    0xee6ed178,
    0x06f067aa,
    0x72176fba,
    0x0a637dc5,
    0xa2c898a6,
    0x113f9804,
    0xbef90dae,
    0x1b710b35,
    0x131c471b,
    0x28db77f5,
    0x23047d84,
    0x32caab7b,
    0x40c72493,
    0x3c9ebe0a,
    0x15c9bebc,
    0x431d67c4,
    0x9c100d4c,
    0x4cc5d4be,
    0xcb3e42b6,
    0x597f299c,
    0xfc657e2a,
    0x5fcb6fab,
    0x3ad6faec,
    0x6c44198c,
    0x4a475817
];
function SHA512() {
    if (!(this instanceof SHA512)) return new SHA512();
    BlockHash.call(this);
    this.h = [
        0x6a09e667,
        0xf3bcc908,
        0xbb67ae85,
        0x84caa73b,
        0x3c6ef372,
        0xfe94f82b,
        0xa54ff53a,
        0x5f1d36f1,
        0x510e527f,
        0xade682d1,
        0x9b05688c,
        0x2b3e6c1f,
        0x1f83d9ab,
        0xfb41bd6b,
        0x5be0cd19,
        0x137e2179
    ];
    this.k = sha512_K;
    this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;
SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;
SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
    var W = this.W;
    // 32 x 32bit words
    for(var i = 0; i < 32; i++)W[i] = msg[start + i];
    for(; i < W.length; i += 2){
        var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2
        var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
        var c1_hi = W[i - 14]; // i - 7
        var c1_lo = W[i - 13];
        var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15
        var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
        var c3_hi = W[i - 32]; // i - 16
        var c3_lo = W[i - 31];
        W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
        W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
    }
};
SHA512.prototype._update = function _update(msg, start) {
    this._prepareBlock(msg, start);
    var W = this.W;
    var ah = this.h[0];
    var al = this.h[1];
    var bh = this.h[2];
    var bl = this.h[3];
    var ch = this.h[4];
    var cl = this.h[5];
    var dh = this.h[6];
    var dl = this.h[7];
    var eh = this.h[8];
    var el = this.h[9];
    var fh = this.h[10];
    var fl = this.h[11];
    var gh = this.h[12];
    var gl = this.h[13];
    var hh = this.h[14];
    var hl = this.h[15];
    assert(this.k.length === W.length);
    for(var i = 0; i < W.length; i += 2){
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = s1_512_hi(eh, el);
        var c1_lo = s1_512_lo(eh, el);
        var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i];
        var c3_lo = this.k[i + 1];
        var c4_hi = W[i];
        var c4_lo = W[i + 1];
        var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        c0_hi = s0_512_hi(ah, al);
        c0_lo = s0_512_lo(ah, al);
        c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        eh = sum64_hi(dh, dl, T1_hi, T1_lo);
        el = sum64_lo(dl, dl, T1_hi, T1_lo);
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
    }
    sum64(this.h, 0, ah, al);
    sum64(this.h, 2, bh, bl);
    sum64(this.h, 4, ch, cl);
    sum64(this.h, 6, dh, dl);
    sum64(this.h, 8, eh, el);
    sum64(this.h, 10, fh, fl);
    sum64(this.h, 12, gh, gl);
    sum64(this.h, 14, hh, hl);
};
SHA512.prototype._digest = function digest(enc) {
    if (enc === 'hex') return utils.toHex32(this.h, 'big');
    else return utils.split32(this.h, 'big');
};
function ch64_hi(xh, xl, yh, yl, zh) {
    var r = xh & yh ^ ~xh & zh;
    if (r < 0) r += 0x100000000;
    return r;
}
function ch64_lo(xh, xl, yh, yl, zh, zl) {
    var r = xl & yl ^ ~xl & zl;
    if (r < 0) r += 0x100000000;
    return r;
}
function maj64_hi(xh, xl, yh, yl, zh) {
    var r = xh & yh ^ xh & zh ^ yh & zh;
    if (r < 0) r += 0x100000000;
    return r;
}
function maj64_lo(xh, xl, yh, yl, zh, zl) {
    var r = xl & yl ^ xl & zl ^ yl & zl;
    if (r < 0) r += 0x100000000;
    return r;
}
function s0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 28);
    var c1_hi = rotr64_hi(xl, xh, 2); // 34
    var c2_hi = rotr64_hi(xl, xh, 7); // 39
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}
function s0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 28);
    var c1_lo = rotr64_lo(xl, xh, 2); // 34
    var c2_lo = rotr64_lo(xl, xh, 7); // 39
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}
function s1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 14);
    var c1_hi = rotr64_hi(xh, xl, 18);
    var c2_hi = rotr64_hi(xl, xh, 9); // 41
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}
function s1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 14);
    var c1_lo = rotr64_lo(xh, xl, 18);
    var c2_lo = rotr64_lo(xl, xh, 9); // 41
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}
function g0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 1);
    var c1_hi = rotr64_hi(xh, xl, 8);
    var c2_hi = shr64_hi(xh, xl, 7);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}
function g0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 1);
    var c1_lo = rotr64_lo(xh, xl, 8);
    var c2_lo = shr64_lo(xh, xl, 7);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}
function g1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 19);
    var c1_hi = rotr64_hi(xl, xh, 29); // 61
    var c2_hi = shr64_hi(xh, xl, 6);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}
function g1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 19);
    var c1_lo = rotr64_lo(xl, xh, 29); // 61
    var c2_lo = shr64_lo(xh, xl, 6);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}

},{"7753b1fa702fbb54":"kfzn2","81b6970d75627ce1":"ecAfF","f660976cede694e2":"8OvWh"}],"9kyRQ":[function(require,module,exports,__globalThis) {
'use strict';
var utils = require("36495272d446418f");
var common = require("ad8cf0490e28e8d7");
var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;
function RIPEMD160() {
    if (!(this instanceof RIPEMD160)) return new RIPEMD160();
    BlockHash.call(this);
    this.h = [
        0x67452301,
        0xefcdab89,
        0x98badcfe,
        0x10325476,
        0xc3d2e1f0
    ];
    this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;
RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;
RIPEMD160.prototype._update = function update(msg, start) {
    var A = this.h[0];
    var B = this.h[1];
    var C = this.h[2];
    var D = this.h[3];
    var E = this.h[4];
    var Ah = A;
    var Bh = B;
    var Ch = C;
    var Dh = D;
    var Eh = E;
    for(var j = 0; j < 80; j++){
        var T = sum32(rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);
        A = E;
        E = D;
        D = rotl32(C, 10);
        C = B;
        B = T;
        T = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);
        Ah = Eh;
        Eh = Dh;
        Dh = rotl32(Ch, 10);
        Ch = Bh;
        Bh = T;
    }
    T = sum32_3(this.h[1], C, Dh);
    this.h[1] = sum32_3(this.h[2], D, Eh);
    this.h[2] = sum32_3(this.h[3], E, Ah);
    this.h[3] = sum32_3(this.h[4], A, Bh);
    this.h[4] = sum32_3(this.h[0], B, Ch);
    this.h[0] = T;
};
RIPEMD160.prototype._digest = function digest(enc) {
    if (enc === 'hex') return utils.toHex32(this.h, 'little');
    else return utils.split32(this.h, 'little');
};
function f(j, x, y, z) {
    if (j <= 15) return x ^ y ^ z;
    else if (j <= 31) return x & y | ~x & z;
    else if (j <= 47) return (x | ~y) ^ z;
    else if (j <= 63) return x & z | y & ~z;
    else return x ^ (y | ~z);
}
function K(j) {
    if (j <= 15) return 0x00000000;
    else if (j <= 31) return 0x5a827999;
    else if (j <= 47) return 0x6ed9eba1;
    else if (j <= 63) return 0x8f1bbcdc;
    else return 0xa953fd4e;
}
function Kh(j) {
    if (j <= 15) return 0x50a28be6;
    else if (j <= 31) return 0x5c4dd124;
    else if (j <= 47) return 0x6d703ef3;
    else if (j <= 63) return 0x7a6d76e9;
    else return 0x00000000;
}
var r = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
];
var rh = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
];
var s = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
];
var sh = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
];

},{"36495272d446418f":"kfzn2","ad8cf0490e28e8d7":"ecAfF"}],"5KrrE":[function(require,module,exports,__globalThis) {
'use strict';
var utils = require("596c08b6835a6e2d");
var assert = require("be527907d4f06808");
function Hmac(hash, key, enc) {
    if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);
    this.Hash = hash;
    this.blockSize = hash.blockSize / 8;
    this.outSize = hash.outSize / 8;
    this.inner = null;
    this.outer = null;
    this._init(utils.toArray(key, enc));
}
module.exports = Hmac;
Hmac.prototype._init = function init(key) {
    // Shorten key, if needed
    if (key.length > this.blockSize) key = new this.Hash().update(key).digest();
    assert(key.length <= this.blockSize);
    // Add padding to key
    for(var i = key.length; i < this.blockSize; i++)key.push(0);
    for(i = 0; i < key.length; i++)key[i] ^= 0x36;
    this.inner = new this.Hash().update(key);
    // 0x36 ^ 0x5c = 0x6a
    for(i = 0; i < key.length; i++)key[i] ^= 0x6a;
    this.outer = new this.Hash().update(key);
};
Hmac.prototype.update = function update(msg, enc) {
    this.inner.update(msg, enc);
    return this;
};
Hmac.prototype.digest = function digest(enc) {
    this.outer.update(this.inner.digest());
    return this.outer.digest(enc);
};

},{"596c08b6835a6e2d":"kfzn2","be527907d4f06808":"8OvWh"}],"lgNSV":[function(require,module,exports,__globalThis) {
module.exports = {
    doubles: {
        step: 4,
        points: [
            [
                'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
                'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
            ],
            [
                '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
                '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
            ],
            [
                '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
                'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
            ],
            [
                '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
                '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
            ],
            [
                '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
                '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
            ],
            [
                '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
                '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
            ],
            [
                'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
                '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
            ],
            [
                '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
                'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
            ],
            [
                'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
                '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
            ],
            [
                'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
                'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
            ],
            [
                'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
                '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
            ],
            [
                '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
                '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
            ],
            [
                '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
                '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
            ],
            [
                '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
                '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
            ],
            [
                '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
                '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
            ],
            [
                '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
                '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
            ],
            [
                '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
                '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
            ],
            [
                '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
                '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
            ],
            [
                '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
                'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
            ],
            [
                'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
                '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
            ],
            [
                'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
                '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
            ],
            [
                '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
                '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
            ],
            [
                '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
                '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
            ],
            [
                'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
                '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
            ],
            [
                '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
                'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
            ],
            [
                'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
                '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
            ],
            [
                'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
                'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
            ],
            [
                'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
                '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
            ],
            [
                'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
                'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
            ],
            [
                'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
                '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
            ],
            [
                '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
                'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
            ],
            [
                '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
                '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
            ],
            [
                'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
                '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
            ],
            [
                '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
                'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
            ],
            [
                'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
                '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
            ],
            [
                'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
                '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
            ],
            [
                'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
                'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
            ],
            [
                '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
                '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
            ],
            [
                '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
                '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
            ],
            [
                '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
                'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
            ],
            [
                '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
                '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
            ],
            [
                'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
                '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
            ],
            [
                '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
                '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
            ],
            [
                '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
                'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
            ],
            [
                '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
                '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
            ],
            [
                'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
                '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
            ],
            [
                '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
                'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
            ],
            [
                'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
                'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
            ],
            [
                'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
                '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
            ],
            [
                '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
                'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
            ],
            [
                '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
                'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
            ],
            [
                'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
                '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
            ],
            [
                'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
                '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
            ],
            [
                'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
                '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
            ],
            [
                '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
                'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
            ],
            [
                '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
                '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
            ],
            [
                'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
                'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
            ],
            [
                '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
                'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
            ],
            [
                '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
                '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
            ],
            [
                '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
                '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
            ],
            [
                'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
                'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
            ],
            [
                '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
                '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
            ],
            [
                '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
                '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
            ],
            [
                'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
                '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
            ],
            [
                'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
                'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
            ]
        ]
    },
    naf: {
        wnd: 7,
        points: [
            [
                'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
                '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
            ],
            [
                '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
                'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
            ],
            [
                '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
                '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
            ],
            [
                'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
                'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
            ],
            [
                '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
                'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
            ],
            [
                'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
                'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
            ],
            [
                'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
                '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
            ],
            [
                'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
                '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
            ],
            [
                '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
                '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
            ],
            [
                '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
                '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
            ],
            [
                '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
                '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
            ],
            [
                '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
                '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
            ],
            [
                'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
                'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
            ],
            [
                'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
                '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
            ],
            [
                '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
                'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
            ],
            [
                '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
                'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
            ],
            [
                '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
                '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
            ],
            [
                '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
                '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
            ],
            [
                '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
                '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
            ],
            [
                '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
                'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
            ],
            [
                'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
                'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
            ],
            [
                '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
                '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
            ],
            [
                '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
                '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
            ],
            [
                'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
                'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
            ],
            [
                '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
                '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
            ],
            [
                'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
                'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
            ],
            [
                'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
                'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
            ],
            [
                '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
                '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
            ],
            [
                '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
                '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
            ],
            [
                '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
                '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
            ],
            [
                'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
                '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
            ],
            [
                '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
                '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
            ],
            [
                'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
                '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
            ],
            [
                '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
                'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
            ],
            [
                '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
                'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
            ],
            [
                'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
                'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
            ],
            [
                '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
                '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
            ],
            [
                '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
                'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
            ],
            [
                'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
                'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
            ],
            [
                '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
                '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
            ],
            [
                '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
                'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
            ],
            [
                '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
                '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
            ],
            [
                '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
                'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
            ],
            [
                'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
                '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
            ],
            [
                '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
                '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
            ],
            [
                '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
                'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
            ],
            [
                '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
                'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
            ],
            [
                'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
                'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
            ],
            [
                'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
                'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
            ],
            [
                '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
                '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
            ],
            [
                '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
                '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
            ],
            [
                'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
                '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
            ],
            [
                'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
                'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
            ],
            [
                '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
                '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
            ],
            [
                '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
                '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
            ],
            [
                'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
                '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
            ],
            [
                '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
                '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
            ],
            [
                'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
                'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
            ],
            [
                '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
                'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
            ],
            [
                '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
                '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
            ],
            [
                'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
                '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
            ],
            [
                'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
                '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
            ],
            [
                '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
                '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
            ],
            [
                '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
                '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
            ],
            [
                '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
                'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
            ],
            [
                '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
                'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
            ],
            [
                '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
                '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
            ],
            [
                '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
                '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
            ],
            [
                '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
                '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
            ],
            [
                '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
                'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
            ],
            [
                'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
                'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
            ],
            [
                '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
                'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
            ],
            [
                'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
                '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
            ],
            [
                'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
                '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
            ],
            [
                'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
                '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
            ],
            [
                'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
                '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
            ],
            [
                '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
                'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
            ],
            [
                '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
                '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
            ],
            [
                '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
                'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
            ],
            [
                'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
                'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
            ],
            [
                'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
                '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
            ],
            [
                'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
                'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
            ],
            [
                'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
                '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
            ],
            [
                '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
                '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
            ],
            [
                'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
                '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
            ],
            [
                'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
                '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
            ],
            [
                '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
                '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
            ],
            [
                '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
                'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
            ],
            [
                'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
                '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
            ],
            [
                'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
                '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
            ],
            [
                'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
                '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
            ],
            [
                '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
                '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
            ],
            [
                'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
                'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
            ],
            [
                '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
                'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
            ],
            [
                'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
                'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
            ],
            [
                'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
                '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
            ],
            [
                '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
                'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
            ],
            [
                'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
                '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
            ],
            [
                'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
                '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
            ],
            [
                'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
                '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
            ],
            [
                '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
                'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
            ],
            [
                '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
                'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
            ],
            [
                'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
                '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
            ],
            [
                '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
                'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
            ],
            [
                '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
                '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
            ],
            [
                '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
                'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
            ],
            [
                'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
                'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
            ],
            [
                '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
                'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
            ],
            [
                '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
                '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
            ],
            [
                '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
                'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
            ],
            [
                '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
                '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
            ],
            [
                'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
                'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
            ],
            [
                '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
                '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
            ],
            [
                'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
                '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
            ],
            [
                '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
                '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
            ],
            [
                'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
                'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
            ],
            [
                'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
                '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
            ],
            [
                'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
                'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
            ],
            [
                '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
                'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
            ],
            [
                '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
                '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
            ],
            [
                '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
                'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
            ],
            [
                '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
                '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
            ],
            [
                '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
                '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
            ],
            [
                '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
                'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
            ],
            [
                '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
                '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
            ],
            [
                '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
                '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
            ],
            [
                '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
                '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
            ]
        ]
    }
};

},{}],"5gDK1":[function(require,module,exports,__globalThis) {
'use strict';
var BN = require("2e69183faf5285a1");
var HmacDRBG = require("b0cb641292e4911d");
var utils = require("eab3e45147b180ba");
var curves = require("a5ce61d26ce01c4c");
var rand = require("f6342f89ac472937");
var assert = utils.assert;
var KeyPair = require("eb5ba559e423f6e9");
var Signature = require("7c5e2c76c574ce41");
function EC(options) {
    if (!(this instanceof EC)) return new EC(options);
    // Shortcut `elliptic.ec(curve-name)`
    if (typeof options === 'string') {
        assert(Object.prototype.hasOwnProperty.call(curves, options), 'Unknown curve ' + options);
        options = curves[options];
    }
    // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
    if (options instanceof curves.PresetCurve) options = {
        curve: options
    };
    this.curve = options.curve.curve;
    this.n = this.curve.n;
    this.nh = this.n.ushrn(1);
    this.g = this.curve.g;
    // Point on curve
    this.g = options.curve.g;
    this.g.precompute(options.curve.n.bitLength() + 1);
    // Hash for function for DRBG
    this.hash = options.hash || options.curve.hash;
}
module.exports = EC;
EC.prototype.keyPair = function keyPair(options) {
    return new KeyPair(this, options);
};
EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
    return KeyPair.fromPrivate(this, priv, enc);
};
EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
    return KeyPair.fromPublic(this, pub, enc);
};
EC.prototype.genKeyPair = function genKeyPair(options) {
    if (!options) options = {};
    // Instantiate Hmac_DRBG
    var drbg = new HmacDRBG({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8',
        entropy: options.entropy || rand(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || 'utf8',
        nonce: this.n.toArray()
    });
    var bytes = this.n.byteLength();
    var ns2 = this.n.sub(new BN(2));
    for(;;){
        var priv = new BN(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0) continue;
        priv.iaddn(1);
        return this.keyFromPrivate(priv);
    }
};
EC.prototype._truncateToN = function _truncateToN(msg, truncOnly, bitLength) {
    var byteLength;
    if (BN.isBN(msg) || typeof msg === 'number') {
        msg = new BN(msg, 16);
        byteLength = msg.byteLength();
    } else if (typeof msg === 'object') {
        // BN assumes an array-like input and asserts length
        byteLength = msg.length;
        msg = new BN(msg, 16);
    } else {
        // BN converts the value to string
        var str = msg.toString();
        // HEX encoding
        byteLength = str.length + 1 >>> 1;
        msg = new BN(str, 16);
    }
    // Allow overriding
    if (typeof bitLength !== 'number') bitLength = byteLength * 8;
    var delta = bitLength - this.n.bitLength();
    if (delta > 0) msg = msg.ushrn(delta);
    if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);
    else return msg;
};
EC.prototype.sign = function sign(msg, key, enc, options) {
    if (typeof enc === 'object') {
        options = enc;
        enc = null;
    }
    if (!options) options = {};
    if (typeof msg !== 'string' && typeof msg !== 'number' && !BN.isBN(msg)) {
        assert(typeof msg === 'object' && msg && typeof msg.length === 'number', 'Expected message to be an array-like, a hex string, or a BN instance');
        assert(msg.length >>> 0 === msg.length); // non-negative 32-bit integer
        for(var i = 0; i < msg.length; i++)assert((msg[i] & 255) === msg[i]);
    }
    key = this.keyFromPrivate(key, enc);
    msg = this._truncateToN(msg, false, options.msgBitLength);
    // Would fail further checks, but let's make the error message clear
    assert(!msg.isNeg(), 'Can not sign a negative message');
    // Zero-extend key to provide enough entropy
    var bytes = this.n.byteLength();
    var bkey = key.getPrivate().toArray('be', bytes);
    // Zero-extend nonce to have the same byte size as N
    var nonce = msg.toArray('be', bytes);
    // Recheck nonce to be bijective to msg
    assert(new BN(nonce).eq(msg), 'Can not sign message');
    // Instantiate Hmac_DRBG
    var drbg = new HmacDRBG({
        hash: this.hash,
        entropy: bkey,
        nonce: nonce,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8'
    });
    // Number of bytes to generate
    var ns1 = this.n.sub(new BN(1));
    for(var iter = 0;; iter++){
        var k = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;
        var kp = this.g.mul(k);
        if (kp.isInfinity()) continue;
        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (r.cmpn(0) === 0) continue;
        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0) continue;
        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);
        // Use complement of `s`, if it is > `n / 2`
        if (options.canonical && s.cmp(this.nh) > 0) {
            s = this.n.sub(s);
            recoveryParam ^= 1;
        }
        return new Signature({
            r: r,
            s: s,
            recoveryParam: recoveryParam
        });
    }
};
EC.prototype.verify = function verify(msg, signature, key, enc, options) {
    if (!options) options = {};
    msg = this._truncateToN(msg, false, options.msgBitLength);
    key = this.keyFromPublic(key, enc);
    signature = new Signature(signature, 'hex');
    // Perform primitive values validation
    var r = signature.r;
    var s = signature.s;
    if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
    if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false;
    // Validate signature
    var sinv = s.invm(this.n);
    var u1 = sinv.mul(msg).umod(this.n);
    var u2 = sinv.mul(r).umod(this.n);
    var p;
    if (!this.curve._maxwellTrick) {
        p = this.g.mulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity()) return false;
        return p.getX().umod(this.n).cmp(r) === 0;
    }
    // NOTE: Greg Maxwell's trick, inspired by:
    // https://git.io/vad3K
    p = this.g.jmulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity()) return false;
    // Compare `p.x` of Jacobian point with `r`,
    // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
    // inverse of `p.z^2`
    return p.eqXToP(r);
};
EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
    assert((3 & j) === j, 'The recovery param is more than two bits');
    signature = new Signature(signature, enc);
    var n = this.n;
    var e = new BN(msg);
    var r = signature.r;
    var s = signature.s;
    // A set LSB signifies that the y-coordinate is odd
    var isYOdd = j & 1;
    var isSecondKey = j >> 1;
    if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error('Unable to find sencond key candinate');
    // 1.1. Let x = r + jn.
    if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
    else r = this.curve.pointFromX(r, isYOdd);
    var rInv = signature.r.invm(n);
    var s1 = n.sub(e).mul(rInv).umod(n);
    var s2 = s.mul(rInv).umod(n);
    // 1.6.1 Compute Q = r^-1 (sR -  eG)
    //               Q = r^-1 (sR + -eG)
    return this.g.mulAdd(s1, r, s2);
};
EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
    signature = new Signature(signature, enc);
    if (signature.recoveryParam !== null) return signature.recoveryParam;
    for(var i = 0; i < 4; i++){
        var Qprime;
        try {
            Qprime = this.recoverPubKey(e, signature, i);
        } catch (e) {
            continue;
        }
        if (Qprime.eq(Q)) return i;
    }
    throw new Error('Unable to find valid recovery factor');
};

},{"2e69183faf5285a1":"d0RHy","b0cb641292e4911d":"eMMR6","eab3e45147b180ba":"8sNT5","a5ce61d26ce01c4c":"6yRo9","f6342f89ac472937":"8FGdh","eb5ba559e423f6e9":"c4oIH","7c5e2c76c574ce41":"cRuxW"}],"eMMR6":[function(require,module,exports,__globalThis) {
'use strict';
var hash = require("629972fec592198f");
var utils = require("c20531edfb274a2c");
var assert = require("43ff1863ab3fce20");
function HmacDRBG(options) {
    if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);
    this.hash = options.hash;
    this.predResist = !!options.predResist;
    this.outLen = this.hash.outSize;
    this.minEntropy = options.minEntropy || this.hash.hmacStrength;
    this._reseed = null;
    this.reseedInterval = null;
    this.K = null;
    this.V = null;
    var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
    var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
    var pers = utils.toArray(options.pers, options.persEnc || 'hex');
    assert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
    this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;
HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
    var seed = entropy.concat(nonce).concat(pers);
    this.K = new Array(this.outLen / 8);
    this.V = new Array(this.outLen / 8);
    for(var i = 0; i < this.V.length; i++){
        this.K[i] = 0x00;
        this.V[i] = 0x01;
    }
    this._update(seed);
    this._reseed = 1;
    this.reseedInterval = 0x1000000000000; // 2^48
};
HmacDRBG.prototype._hmac = function hmac() {
    return new hash.hmac(this.hash, this.K);
};
HmacDRBG.prototype._update = function update(seed) {
    var kmac = this._hmac().update(this.V).update([
        0x00
    ]);
    if (seed) kmac = kmac.update(seed);
    this.K = kmac.digest();
    this.V = this._hmac().update(this.V).digest();
    if (!seed) return;
    this.K = this._hmac().update(this.V).update([
        0x01
    ]).update(seed).digest();
    this.V = this._hmac().update(this.V).digest();
};
HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
    // Optional entropy enc
    if (typeof entropyEnc !== 'string') {
        addEnc = add;
        add = entropyEnc;
        entropyEnc = null;
    }
    entropy = utils.toArray(entropy, entropyEnc);
    add = utils.toArray(add, addEnc);
    assert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
    this._update(entropy.concat(add || []));
    this._reseed = 1;
};
HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
    if (this._reseed > this.reseedInterval) throw new Error('Reseed is required');
    // Optional encoding
    if (typeof enc !== 'string') {
        addEnc = add;
        add = enc;
        enc = null;
    }
    // Optional additional data
    if (add) {
        add = utils.toArray(add, addEnc || 'hex');
        this._update(add);
    }
    var temp = [];
    while(temp.length < len){
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
    }
    var res = temp.slice(0, len);
    this._update(add);
    this._reseed++;
    return utils.encode(res, enc);
};

},{"629972fec592198f":"gOEGU","c20531edfb274a2c":"6f39G","43ff1863ab3fce20":"8OvWh"}],"c4oIH":[function(require,module,exports,__globalThis) {
'use strict';
var BN = require("55cc33a33cda153d");
var utils = require("bda8b1ff480a7f3");
var assert = utils.assert;
function KeyPair(ec, options) {
    this.ec = ec;
    this.priv = null;
    this.pub = null;
    // KeyPair(ec, { priv: ..., pub: ... })
    if (options.priv) this._importPrivate(options.priv, options.privEnc);
    if (options.pub) this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;
KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
    if (pub instanceof KeyPair) return pub;
    return new KeyPair(ec, {
        pub: pub,
        pubEnc: enc
    });
};
KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
    if (priv instanceof KeyPair) return priv;
    return new KeyPair(ec, {
        priv: priv,
        privEnc: enc
    });
};
KeyPair.prototype.validate = function validate() {
    var pub = this.getPublic();
    if (pub.isInfinity()) return {
        result: false,
        reason: 'Invalid public key'
    };
    if (!pub.validate()) return {
        result: false,
        reason: 'Public key is not a point'
    };
    if (!pub.mul(this.ec.curve.n).isInfinity()) return {
        result: false,
        reason: 'Public key * N != O'
    };
    return {
        result: true,
        reason: null
    };
};
KeyPair.prototype.getPublic = function getPublic(compact, enc) {
    // compact is optional argument
    if (typeof compact === 'string') {
        enc = compact;
        compact = null;
    }
    if (!this.pub) this.pub = this.ec.g.mul(this.priv);
    if (!enc) return this.pub;
    return this.pub.encode(enc, compact);
};
KeyPair.prototype.getPrivate = function getPrivate(enc) {
    if (enc === 'hex') return this.priv.toString(16, 2);
    else return this.priv;
};
KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
    this.priv = new BN(key, enc || 16);
    // Ensure that the priv won't be bigger than n, otherwise we may fail
    // in fixed multiplication method
    this.priv = this.priv.umod(this.ec.curve.n);
};
KeyPair.prototype._importPublic = function _importPublic(key, enc) {
    if (key.x || key.y) {
        // Montgomery points only have an `x` coordinate.
        // Weierstrass/Edwards points on the other hand have both `x` and
        // `y` coordinates.
        if (this.ec.curve.type === 'mont') assert(key.x, 'Need x coordinate');
        else if (this.ec.curve.type === 'short' || this.ec.curve.type === 'edwards') assert(key.x && key.y, 'Need both x and y coordinate');
        this.pub = this.ec.curve.point(key.x, key.y);
        return;
    }
    this.pub = this.ec.curve.decodePoint(key, enc);
};
// ECDH
KeyPair.prototype.derive = function derive(pub) {
    if (!pub.validate()) assert(pub.validate(), 'public point not validated');
    return pub.mul(this.priv).getX();
};
// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
    return this.ec.sign(msg, this, enc, options);
};
KeyPair.prototype.verify = function verify(msg, signature, options) {
    return this.ec.verify(msg, signature, this, undefined, options);
};
KeyPair.prototype.inspect = function inspect() {
    return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) + ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

},{"55cc33a33cda153d":"d0RHy","bda8b1ff480a7f3":"8sNT5"}],"cRuxW":[function(require,module,exports,__globalThis) {
'use strict';
var BN = require("a7ae8f0fe39990e7");
var utils = require("5df7da4811374387");
var assert = utils.assert;
function Signature(options, enc) {
    if (options instanceof Signature) return options;
    if (this._importDER(options, enc)) return;
    assert(options.r && options.s, 'Signature without r or s');
    this.r = new BN(options.r, 16);
    this.s = new BN(options.s, 16);
    if (options.recoveryParam === undefined) this.recoveryParam = null;
    else this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;
function Position() {
    this.place = 0;
}
function getLength(buf, p) {
    var initial = buf[p.place++];
    if (!(initial & 0x80)) return initial;
    var octetLen = initial & 0xf;
    // Indefinite length or overflow
    if (octetLen === 0 || octetLen > 4) return false;
    if (buf[p.place] === 0x00) return false;
    var val = 0;
    for(var i = 0, off = p.place; i < octetLen; i++, off++){
        val <<= 8;
        val |= buf[off];
        val >>>= 0;
    }
    // Leading zeroes
    if (val <= 0x7f) return false;
    p.place = off;
    return val;
}
function rmPadding(buf) {
    var i = 0;
    var len = buf.length - 1;
    while(!buf[i] && !(buf[i + 1] & 0x80) && i < len)i++;
    if (i === 0) return buf;
    return buf.slice(i);
}
Signature.prototype._importDER = function _importDER(data, enc) {
    data = utils.toArray(data, enc);
    var p = new Position();
    if (data[p.place++] !== 0x30) return false;
    var len = getLength(data, p);
    if (len === false) return false;
    if (len + p.place !== data.length) return false;
    if (data[p.place++] !== 0x02) return false;
    var rlen = getLength(data, p);
    if (rlen === false) return false;
    if ((data[p.place] & 128) !== 0) return false;
    var r = data.slice(p.place, rlen + p.place);
    p.place += rlen;
    if (data[p.place++] !== 0x02) return false;
    var slen = getLength(data, p);
    if (slen === false) return false;
    if (data.length !== slen + p.place) return false;
    if ((data[p.place] & 128) !== 0) return false;
    var s = data.slice(p.place, slen + p.place);
    if (r[0] === 0) {
        if (r[1] & 0x80) r = r.slice(1);
        else // Leading zeroes
        return false;
    }
    if (s[0] === 0) {
        if (s[1] & 0x80) s = s.slice(1);
        else // Leading zeroes
        return false;
    }
    this.r = new BN(r);
    this.s = new BN(s);
    this.recoveryParam = null;
    return true;
};
function constructLength(arr, len) {
    if (len < 0x80) {
        arr.push(len);
        return;
    }
    var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
    arr.push(octets | 0x80);
    while(--octets)arr.push(len >>> (octets << 3) & 0xff);
    arr.push(len);
}
Signature.prototype.toDER = function toDER(enc) {
    var r = this.r.toArray();
    var s = this.s.toArray();
    // Pad values
    if (r[0] & 0x80) r = [
        0
    ].concat(r);
    // Pad values
    if (s[0] & 0x80) s = [
        0
    ].concat(s);
    r = rmPadding(r);
    s = rmPadding(s);
    while(!s[0] && !(s[1] & 0x80))s = s.slice(1);
    var arr = [
        0x02
    ];
    constructLength(arr, r.length);
    arr = arr.concat(r);
    arr.push(0x02);
    constructLength(arr, s.length);
    var backHalf = arr.concat(s);
    var res = [
        0x30
    ];
    constructLength(res, backHalf.length);
    res = res.concat(backHalf);
    return utils.encode(res, enc);
};

},{"a7ae8f0fe39990e7":"d0RHy","5df7da4811374387":"8sNT5"}],"jPbam":[function(require,module,exports,__globalThis) {
'use strict';
var hash = require("50f9bfa8a484d5d8");
var curves = require("68956d27442d6321");
var utils = require("99ec52641eff141d");
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = require("2ad2982d76b37f15");
var Signature = require("76c25a1d63d10c1b");
function EDDSA(curve) {
    assert(curve === 'ed25519', 'only tested with ed25519 so far');
    if (!(this instanceof EDDSA)) return new EDDSA(curve);
    curve = curves[curve].curve;
    this.curve = curve;
    this.g = curve.g;
    this.g.precompute(curve.n.bitLength() + 1);
    this.pointClass = curve.point().constructor;
    this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
    this.hash = hash.sha512;
}
module.exports = EDDSA;
/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/ EDDSA.prototype.sign = function sign(message, secret) {
    message = parseBytes(message);
    var key = this.keyFromSecret(secret);
    var r = this.hashInt(key.messagePrefix(), message);
    var R = this.g.mul(r);
    var Rencoded = this.encodePoint(R);
    var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
    var S = r.add(s_).umod(this.curve.n);
    return this.makeSignature({
        R: R,
        S: S,
        Rencoded: Rencoded
    });
};
/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/ EDDSA.prototype.verify = function verify(message, sig, pub) {
    message = parseBytes(message);
    sig = this.makeSignature(sig);
    if (sig.S().gte(sig.eddsa.curve.n) || sig.S().isNeg()) return false;
    var key = this.keyFromPublic(pub);
    var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
    var SG = this.g.mul(sig.S());
    var RplusAh = sig.R().add(key.pub().mul(h));
    return RplusAh.eq(SG);
};
EDDSA.prototype.hashInt = function hashInt() {
    var hash = this.hash();
    for(var i = 0; i < arguments.length; i++)hash.update(arguments[i]);
    return utils.intFromLE(hash.digest()).umod(this.curve.n);
};
EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
    return KeyPair.fromPublic(this, pub);
};
EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
    return KeyPair.fromSecret(this, secret);
};
EDDSA.prototype.makeSignature = function makeSignature(sig) {
    if (sig instanceof Signature) return sig;
    return new Signature(this, sig);
};
/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/ EDDSA.prototype.encodePoint = function encodePoint(point) {
    var enc = point.getY().toArray('le', this.encodingLength);
    enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
    return enc;
};
EDDSA.prototype.decodePoint = function decodePoint(bytes) {
    bytes = utils.parseBytes(bytes);
    var lastIx = bytes.length - 1;
    var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & -129);
    var xIsOdd = (bytes[lastIx] & 0x80) !== 0;
    var y = utils.intFromLE(normed);
    return this.curve.pointFromY(y, xIsOdd);
};
EDDSA.prototype.encodeInt = function encodeInt(num) {
    return num.toArray('le', this.encodingLength);
};
EDDSA.prototype.decodeInt = function decodeInt(bytes) {
    return utils.intFromLE(bytes);
};
EDDSA.prototype.isPoint = function isPoint(val) {
    return val instanceof this.pointClass;
};

},{"50f9bfa8a484d5d8":"gOEGU","68956d27442d6321":"6yRo9","99ec52641eff141d":"8sNT5","2ad2982d76b37f15":"hOVET","76c25a1d63d10c1b":"a5qj9"}],"hOVET":[function(require,module,exports,__globalThis) {
'use strict';
var utils = require("387ffb9c0bf065ab");
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;
/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/ function KeyPair(eddsa, params) {
    this.eddsa = eddsa;
    this._secret = parseBytes(params.secret);
    if (eddsa.isPoint(params.pub)) this._pub = params.pub;
    else this._pubBytes = parseBytes(params.pub);
}
KeyPair.fromPublic = function fromPublic(eddsa, pub) {
    if (pub instanceof KeyPair) return pub;
    return new KeyPair(eddsa, {
        pub: pub
    });
};
KeyPair.fromSecret = function fromSecret(eddsa, secret) {
    if (secret instanceof KeyPair) return secret;
    return new KeyPair(eddsa, {
        secret: secret
    });
};
KeyPair.prototype.secret = function secret() {
    return this._secret;
};
cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
    return this.eddsa.encodePoint(this.pub());
});
cachedProperty(KeyPair, 'pub', function pub() {
    if (this._pubBytes) return this.eddsa.decodePoint(this._pubBytes);
    return this.eddsa.g.mul(this.priv());
});
cachedProperty(KeyPair, 'privBytes', function privBytes() {
    var eddsa = this.eddsa;
    var hash = this.hash();
    var lastIx = eddsa.encodingLength - 1;
    var a = hash.slice(0, eddsa.encodingLength);
    a[0] &= 248;
    a[lastIx] &= 127;
    a[lastIx] |= 64;
    return a;
});
cachedProperty(KeyPair, 'priv', function priv() {
    return this.eddsa.decodeInt(this.privBytes());
});
cachedProperty(KeyPair, 'hash', function hash() {
    return this.eddsa.hash().update(this.secret()).digest();
});
cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
    return this.hash().slice(this.eddsa.encodingLength);
});
KeyPair.prototype.sign = function sign(message) {
    assert(this._secret, 'KeyPair can only verify');
    return this.eddsa.sign(message, this);
};
KeyPair.prototype.verify = function verify(message, sig) {
    return this.eddsa.verify(message, sig, this);
};
KeyPair.prototype.getSecret = function getSecret(enc) {
    assert(this._secret, 'KeyPair is public only');
    return utils.encode(this.secret(), enc);
};
KeyPair.prototype.getPublic = function getPublic(enc) {
    return utils.encode(this.pubBytes(), enc);
};
module.exports = KeyPair;

},{"387ffb9c0bf065ab":"8sNT5"}],"a5qj9":[function(require,module,exports,__globalThis) {
'use strict';
var BN = require("696e2c87f819d166");
var utils = require("51b94bcac1dcb2b2");
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;
/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/ function Signature(eddsa, sig) {
    this.eddsa = eddsa;
    if (typeof sig !== 'object') sig = parseBytes(sig);
    if (Array.isArray(sig)) {
        assert(sig.length === eddsa.encodingLength * 2, 'Signature has invalid size');
        sig = {
            R: sig.slice(0, eddsa.encodingLength),
            S: sig.slice(eddsa.encodingLength)
        };
    }
    assert(sig.R && sig.S, 'Signature without R or S');
    if (eddsa.isPoint(sig.R)) this._R = sig.R;
    if (sig.S instanceof BN) this._S = sig.S;
    this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
    this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}
cachedProperty(Signature, 'S', function S() {
    return this.eddsa.decodeInt(this.Sencoded());
});
cachedProperty(Signature, 'R', function R() {
    return this.eddsa.decodePoint(this.Rencoded());
});
cachedProperty(Signature, 'Rencoded', function Rencoded() {
    return this.eddsa.encodePoint(this.R());
});
cachedProperty(Signature, 'Sencoded', function Sencoded() {
    return this.eddsa.encodeInt(this.S());
});
Signature.prototype.toBytes = function toBytes() {
    return this.Rencoded().concat(this.Sencoded());
};
Signature.prototype.toHex = function toHex() {
    return utils.encode(this.toBytes(), 'hex').toUpperCase();
};
module.exports = Signature;

},{"696e2c87f819d166":"d0RHy","51b94bcac1dcb2b2":"8sNT5"}],"4Szbv":[function(require,module,exports,__globalThis) {
'use strict';
var asn1 = require("a33d2f68b0ffe26d");
var aesid = require("c39bbd52d12adb70");
var fixProc = require("7247fe0465255c67");
var ciphers = require("ea725b5eadc96106");
var compat = require("aa2a622927353f9f");
var Buffer = require("11d61e4bc73f5fdc").Buffer;
function decrypt(data, password) {
    var salt = data.algorithm.decrypt.kde.kdeparams.salt;
    var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);
    var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')];
    var iv = data.algorithm.decrypt.cipher.iv;
    var cipherText = data.subjectPrivateKey;
    var keylen = parseInt(algo.split('-')[1], 10) / 8;
    var key = compat.pbkdf2Sync(password, salt, iters, keylen, 'sha1');
    var cipher = ciphers.createDecipheriv(algo, key, iv);
    var out = [];
    out.push(cipher.update(cipherText));
    out.push(cipher['final']());
    return Buffer.concat(out);
}
function parseKeys(buffer) {
    var password;
    if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
        password = buffer.passphrase;
        buffer = buffer.key;
    }
    if (typeof buffer === 'string') buffer = Buffer.from(buffer);
    var stripped = fixProc(buffer, password);
    var type = stripped.tag;
    var data = stripped.data;
    var subtype, ndata;
    switch(type){
        case 'CERTIFICATE':
            ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo;
        // falls through
        case 'PUBLIC KEY':
            if (!ndata) ndata = asn1.PublicKey.decode(data, 'der');
            subtype = ndata.algorithm.algorithm.join('.');
            switch(subtype){
                case '1.2.840.113549.1.1.1':
                    return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der');
                case '1.2.840.10045.2.1':
                    ndata.subjectPrivateKey = ndata.subjectPublicKey;
                    return {
                        type: 'ec',
                        data: ndata
                    };
                case '1.2.840.10040.4.1':
                    ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der');
                    return {
                        type: 'dsa',
                        data: ndata.algorithm.params
                    };
                default:
                    throw new Error('unknown key id ' + subtype);
            }
        // throw new Error('unknown key type ' + type)
        case 'ENCRYPTED PRIVATE KEY':
            data = asn1.EncryptedPrivateKey.decode(data, 'der');
            data = decrypt(data, password);
        // falls through
        case 'PRIVATE KEY':
            ndata = asn1.PrivateKey.decode(data, 'der');
            subtype = ndata.algorithm.algorithm.join('.');
            switch(subtype){
                case '1.2.840.113549.1.1.1':
                    return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der');
                case '1.2.840.10045.2.1':
                    return {
                        curve: ndata.algorithm.curve,
                        privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
                    };
                case '1.2.840.10040.4.1':
                    ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der');
                    return {
                        type: 'dsa',
                        params: ndata.algorithm.params
                    };
                default:
                    throw new Error('unknown key id ' + subtype);
            }
        // throw new Error('unknown key type ' + type)
        case 'RSA PUBLIC KEY':
            return asn1.RSAPublicKey.decode(data, 'der');
        case 'RSA PRIVATE KEY':
            return asn1.RSAPrivateKey.decode(data, 'der');
        case 'DSA PRIVATE KEY':
            return {
                type: 'dsa',
                params: asn1.DSAPrivateKey.decode(data, 'der')
            };
        case 'EC PRIVATE KEY':
            data = asn1.ECPrivateKey.decode(data, 'der');
            return {
                curve: data.parameters.value,
                privateKey: data.privateKey
            };
        default:
            throw new Error('unknown key type ' + type);
    }
}
parseKeys.signature = asn1.signature;
module.exports = parseKeys;

},{"a33d2f68b0ffe26d":"l0ugz","c39bbd52d12adb70":"bvb6u","7247fe0465255c67":"bNDUb","ea725b5eadc96106":"hnlHj","aa2a622927353f9f":"g38Hg","11d61e4bc73f5fdc":"eW7r9"}],"l0ugz":[function(require,module,exports,__globalThis) {
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.
'use strict';
var asn1 = require("821e6411e0aeb10a");
exports.certificate = require("6bb4fbbd6e2d2384");
var RSAPrivateKey = asn1.define('RSAPrivateKey', function() {
    this.seq().obj(this.key('version')['int'](), this.key('modulus')['int'](), this.key('publicExponent')['int'](), this.key('privateExponent')['int'](), this.key('prime1')['int'](), this.key('prime2')['int'](), this.key('exponent1')['int'](), this.key('exponent2')['int'](), this.key('coefficient')['int']());
});
exports.RSAPrivateKey = RSAPrivateKey;
var RSAPublicKey = asn1.define('RSAPublicKey', function() {
    this.seq().obj(this.key('modulus')['int'](), this.key('publicExponent')['int']());
});
exports.RSAPublicKey = RSAPublicKey;
var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function() {
    this.seq().obj(this.key('algorithm').objid(), this.key('none').null_().optional(), this.key('curve').objid().optional(), this.key('params').seq().obj(this.key('p')['int'](), this.key('q')['int'](), this.key('g')['int']()).optional());
});
var PublicKey = asn1.define('SubjectPublicKeyInfo', function() {
    this.seq().obj(this.key('algorithm').use(AlgorithmIdentifier), this.key('subjectPublicKey').bitstr());
});
exports.PublicKey = PublicKey;
var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function() {
    this.seq().obj(this.key('version')['int'](), this.key('algorithm').use(AlgorithmIdentifier), this.key('subjectPrivateKey').octstr());
});
exports.PrivateKey = PrivateKeyInfo;
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function() {
    this.seq().obj(this.key('algorithm').seq().obj(this.key('id').objid(), this.key('decrypt').seq().obj(this.key('kde').seq().obj(this.key('id').objid(), this.key('kdeparams').seq().obj(this.key('salt').octstr(), this.key('iters')['int']())), this.key('cipher').seq().obj(this.key('algo').objid(), this.key('iv').octstr()))), this.key('subjectPrivateKey').octstr());
});
exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo;
var DSAPrivateKey = asn1.define('DSAPrivateKey', function() {
    this.seq().obj(this.key('version')['int'](), this.key('p')['int'](), this.key('q')['int'](), this.key('g')['int'](), this.key('pub_key')['int'](), this.key('priv_key')['int']());
});
exports.DSAPrivateKey = DSAPrivateKey;
exports.DSAparam = asn1.define('DSAparam', function() {
    this['int']();
});
var ECParameters = asn1.define('ECParameters', function() {
    this.choice({
        namedCurve: this.objid()
    });
});
var ECPrivateKey = asn1.define('ECPrivateKey', function() {
    this.seq().obj(this.key('version')['int'](), this.key('privateKey').octstr(), this.key('parameters').optional().explicit(0).use(ECParameters), this.key('publicKey').optional().explicit(1).bitstr());
});
exports.ECPrivateKey = ECPrivateKey;
exports.signature = asn1.define('signature', function() {
    this.seq().obj(this.key('r')['int'](), this.key('s')['int']());
});

},{"821e6411e0aeb10a":"iV1JX","6bb4fbbd6e2d2384":"Tf0QA"}],"iV1JX":[function(require,module,exports,__globalThis) {
var asn1 = exports;
asn1.bignum = require("b4f67f473458f037");
asn1.define = require("3a96ab8454f69498").define;
asn1.base = require("82a96f1d67e1a13d");
asn1.constants = require("f666a445bd64a777");
asn1.decoders = require("e200f1dc591d286b");
asn1.encoders = require("5ea4ddb7d1e6fcb9");

},{"b4f67f473458f037":"65jkx","3a96ab8454f69498":"2oHUo","82a96f1d67e1a13d":"3q4wA","f666a445bd64a777":"oiTK8","e200f1dc591d286b":"awa6C","5ea4ddb7d1e6fcb9":"2psTt"}],"65jkx":[function(require,module,exports,__globalThis) {
(function(module1, exports) {
    'use strict';
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || 'be');
        }
    }
    if (typeof module1 === 'object') module1.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') Buffer = window.Buffer;
        else Buffer = require("7f1ee543ef73731a").Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') return this._initNumber(number, base, endian);
        if (typeof number === 'object') return this._initArray(number, base, endian);
        if (base === 'hex') base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === 'le') this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== 'le') return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === 'be') for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === 'le') for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 0xf;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === 'be') for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 0xa;
            else if (c >= 17) r += c - 17 + 0xa;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
            out = '';
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = '';
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = '0' + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, 'Number can only safely store up to 53 bits');
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== 'undefined');
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        this.strip();
        var littleEndian = endian === 'le';
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== 'div' && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== 'mod') div = res.div.neg();
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== 'mod') div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === 'div') return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === 'mod') return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true);
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, 'Number is too big');
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === 'k256') prime = new K256();
        else if (name === 'p224') prime = new P224();
        else if (name === 'p192') prime = new P192();
        else if (name === 'p25519') prime = new P25519();
        else throw new Error('Unknown prime ' + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === 'string') {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), 'modulus must be greater than 1');
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

},{"7f1ee543ef73731a":"jhUEF"}],"2oHUo":[function(require,module,exports,__globalThis) {
var asn1 = require("ab532762dbbdc666");
var inherits = require("64c493c8ea32f1a7");
var api = exports;
api.define = function define(name, body) {
    return new Entity(name, body);
};
function Entity(name, body) {
    this.name = name;
    this.body = body;
    this.decoders = {};
    this.encoders = {};
}
Entity.prototype._createNamed = function createNamed(base) {
    var named;
    try {
        named = require("62c08f34eab7465f").runInThisContext('(function ' + this.name + '(entity) {\n' + '  this._initNamed(entity);\n' + '})');
    } catch (e) {
        named = function(entity) {
            this._initNamed(entity);
        };
    }
    inherits(named, base);
    named.prototype._initNamed = function initnamed(entity) {
        base.call(this, entity);
    };
    return new named(this);
};
Entity.prototype._getDecoder = function _getDecoder(enc) {
    enc = enc || 'der';
    // Lazily create decoder
    if (!this.decoders.hasOwnProperty(enc)) this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
    return this.decoders[enc];
};
Entity.prototype.decode = function decode(data, enc, options) {
    return this._getDecoder(enc).decode(data, options);
};
Entity.prototype._getEncoder = function _getEncoder(enc) {
    enc = enc || 'der';
    // Lazily create encoder
    if (!this.encoders.hasOwnProperty(enc)) this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
    return this.encoders[enc];
};
Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
    return this._getEncoder(enc).encode(data, reporter);
};

},{"ab532762dbbdc666":"iV1JX","64c493c8ea32f1a7":"bRL3M","62c08f34eab7465f":"2tCHD"}],"2tCHD":[function(require,module,exports,__globalThis) {
var indexOf = function(xs, item) {
    if (xs.indexOf) return xs.indexOf(item);
    else for(var i = 0; i < xs.length; i++){
        if (xs[i] === item) return i;
    }
    return -1;
};
var Object_keys = function(obj) {
    if (Object.keys) return Object.keys(obj);
    else {
        var res = [];
        for(var key in obj)res.push(key);
        return res;
    }
};
var forEach = function(xs, fn) {
    if (xs.forEach) return xs.forEach(fn);
    else for(var i = 0; i < xs.length; i++)fn(xs[i], i, xs);
};
var defineProp = function() {
    try {
        Object.defineProperty({}, '_', {});
        return function(obj, name, value) {
            Object.defineProperty(obj, name, {
                writable: true,
                enumerable: false,
                configurable: true,
                value: value
            });
        };
    } catch (e) {
        return function(obj, name, value) {
            obj[name] = value;
        };
    }
}();
var globals = [
    'Array',
    'Boolean',
    'Date',
    'Error',
    'EvalError',
    'Function',
    'Infinity',
    'JSON',
    'Math',
    'NaN',
    'Number',
    'Object',
    'RangeError',
    'ReferenceError',
    'RegExp',
    'String',
    'SyntaxError',
    'TypeError',
    'URIError',
    'decodeURI',
    'decodeURIComponent',
    'encodeURI',
    'encodeURIComponent',
    'escape',
    'eval',
    'isFinite',
    'isNaN',
    'parseFloat',
    'parseInt',
    'undefined',
    'unescape'
];
function Context() {}
Context.prototype = {};
var Script = exports.Script = function NodeScript(code) {
    if (!(this instanceof Script)) return new Script(code);
    this.code = code;
};
Script.prototype.runInContext = function(context) {
    if (!(context instanceof Context)) throw new TypeError("needs a 'context' argument.");
    var iframe = document.createElement('iframe');
    if (!iframe.style) iframe.style = {};
    iframe.style.display = 'none';
    document.body.appendChild(iframe);
    var win = iframe.contentWindow;
    var wEval = win.eval, wExecScript = win.execScript;
    if (!wEval && wExecScript) {
        // win.eval() magically appears when this is called in IE:
        wExecScript.call(win, 'null');
        wEval = win.eval;
    }
    forEach(Object_keys(context), function(key) {
        win[key] = context[key];
    });
    forEach(globals, function(key) {
        if (context[key]) win[key] = context[key];
    });
    var winKeys = Object_keys(win);
    var res = wEval.call(win, this.code);
    forEach(Object_keys(win), function(key) {
        // Avoid copying circular objects like `top` and `window` by only
        // updating existing context properties or new properties in the `win`
        // that was only introduced after the eval.
        if (key in context || indexOf(winKeys, key) === -1) context[key] = win[key];
    });
    forEach(globals, function(key) {
        if (!(key in context)) defineProp(context, key, win[key]);
    });
    document.body.removeChild(iframe);
    return res;
};
Script.prototype.runInThisContext = function() {
    return eval(this.code); // maybe...
};
Script.prototype.runInNewContext = function(context) {
    var ctx = Script.createContext(context);
    var res = this.runInContext(ctx);
    if (context) forEach(Object_keys(ctx), function(key) {
        context[key] = ctx[key];
    });
    return res;
};
forEach(Object_keys(Script.prototype), function(name) {
    exports[name] = Script[name] = function(code) {
        var s = Script(code);
        return s[name].apply(s, [].slice.call(arguments, 1));
    };
});
exports.isContext = function(context) {
    return context instanceof Context;
};
exports.createScript = function(code) {
    return exports.Script(code);
};
exports.createContext = Script.createContext = function(context) {
    var copy = new Context();
    if (typeof context === 'object') forEach(Object_keys(context), function(key) {
        copy[key] = context[key];
    });
    return copy;
};

},{}],"3q4wA":[function(require,module,exports,__globalThis) {
var base = exports;
base.Reporter = require("59a43dc644aa14a1").Reporter;
base.DecoderBuffer = require("bb5e01939a3ed5de").DecoderBuffer;
base.EncoderBuffer = require("bb5e01939a3ed5de").EncoderBuffer;
base.Node = require("97802675bd1acef");

},{"59a43dc644aa14a1":"2Vti8","bb5e01939a3ed5de":"1GNVB","97802675bd1acef":"l9Edp"}],"2Vti8":[function(require,module,exports,__globalThis) {
var inherits = require("cca99c6acf69321b");
function Reporter(options) {
    this._reporterState = {
        obj: null,
        path: [],
        options: options || {},
        errors: []
    };
}
exports.Reporter = Reporter;
Reporter.prototype.isError = function isError(obj) {
    return obj instanceof ReporterError;
};
Reporter.prototype.save = function save() {
    var state = this._reporterState;
    return {
        obj: state.obj,
        pathLen: state.path.length
    };
};
Reporter.prototype.restore = function restore(data) {
    var state = this._reporterState;
    state.obj = data.obj;
    state.path = state.path.slice(0, data.pathLen);
};
Reporter.prototype.enterKey = function enterKey(key) {
    return this._reporterState.path.push(key);
};
Reporter.prototype.exitKey = function exitKey(index) {
    var state = this._reporterState;
    state.path = state.path.slice(0, index - 1);
};
Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
    var state = this._reporterState;
    this.exitKey(index);
    if (state.obj !== null) state.obj[key] = value;
};
Reporter.prototype.path = function path() {
    return this._reporterState.path.join('/');
};
Reporter.prototype.enterObject = function enterObject() {
    var state = this._reporterState;
    var prev = state.obj;
    state.obj = {};
    return prev;
};
Reporter.prototype.leaveObject = function leaveObject(prev) {
    var state = this._reporterState;
    var now = state.obj;
    state.obj = prev;
    return now;
};
Reporter.prototype.error = function error(msg) {
    var err;
    var state = this._reporterState;
    var inherited = msg instanceof ReporterError;
    if (inherited) err = msg;
    else err = new ReporterError(state.path.map(function(elem) {
        return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
    if (!state.options.partial) throw err;
    if (!inherited) state.errors.push(err);
    return err;
};
Reporter.prototype.wrapResult = function wrapResult(result) {
    var state = this._reporterState;
    if (!state.options.partial) return result;
    return {
        result: this.isError(result) ? null : result,
        errors: state.errors
    };
};
function ReporterError(path, msg) {
    this.path = path;
    this.rethrow(msg);
}
inherits(ReporterError, Error);
ReporterError.prototype.rethrow = function rethrow(msg) {
    this.message = msg + ' at: ' + (this.path || '(shallow)');
    if (Error.captureStackTrace) Error.captureStackTrace(this, ReporterError);
    if (!this.stack) try {
        // IE only adds stack when thrown
        throw new Error(this.message);
    } catch (e) {
        this.stack = e.stack;
    }
    return this;
};

},{"cca99c6acf69321b":"bRL3M"}],"1GNVB":[function(require,module,exports,__globalThis) {
var inherits = require("ff35534ecc380ed3");
var Reporter = require("5e377fc82488d72a").Reporter;
var Buffer = require("e61f132f215e12f9").Buffer;
function DecoderBuffer(base, options) {
    Reporter.call(this, options);
    if (!Buffer.isBuffer(base)) {
        this.error('Input not Buffer');
        return;
    }
    this.base = base;
    this.offset = 0;
    this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;
DecoderBuffer.prototype.save = function save() {
    return {
        offset: this.offset,
        reporter: Reporter.prototype.save.call(this)
    };
};
DecoderBuffer.prototype.restore = function restore(save) {
    // Return skipped data
    var res = new DecoderBuffer(this.base);
    res.offset = save.offset;
    res.length = this.offset;
    this.offset = save.offset;
    Reporter.prototype.restore.call(this, save.reporter);
    return res;
};
DecoderBuffer.prototype.isEmpty = function isEmpty() {
    return this.offset === this.length;
};
DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
    if (this.offset + 1 <= this.length) return this.base.readUInt8(this.offset++, true);
    else return this.error(fail || 'DecoderBuffer overrun');
};
DecoderBuffer.prototype.skip = function skip(bytes, fail) {
    if (!(this.offset + bytes <= this.length)) return this.error(fail || 'DecoderBuffer overrun');
    var res = new DecoderBuffer(this.base);
    // Share reporter state
    res._reporterState = this._reporterState;
    res.offset = this.offset;
    res.length = this.offset + bytes;
    this.offset += bytes;
    return res;
};
DecoderBuffer.prototype.raw = function raw(save) {
    return this.base.slice(save ? save.offset : this.offset, this.length);
};
function EncoderBuffer(value, reporter) {
    if (Array.isArray(value)) {
        this.length = 0;
        this.value = value.map(function(item) {
            if (!(item instanceof EncoderBuffer)) item = new EncoderBuffer(item, reporter);
            this.length += item.length;
            return item;
        }, this);
    } else if (typeof value === 'number') {
        if (!(0 <= value && value <= 0xff)) return reporter.error('non-byte EncoderBuffer value');
        this.value = value;
        this.length = 1;
    } else if (typeof value === 'string') {
        this.value = value;
        this.length = Buffer.byteLength(value);
    } else if (Buffer.isBuffer(value)) {
        this.value = value;
        this.length = value.length;
    } else return reporter.error('Unsupported type: ' + typeof value);
}
exports.EncoderBuffer = EncoderBuffer;
EncoderBuffer.prototype.join = function join(out, offset) {
    if (!out) out = new Buffer(this.length);
    if (!offset) offset = 0;
    if (this.length === 0) return out;
    if (Array.isArray(this.value)) this.value.forEach(function(item) {
        item.join(out, offset);
        offset += item.length;
    });
    else {
        if (typeof this.value === 'number') out[offset] = this.value;
        else if (typeof this.value === 'string') out.write(this.value, offset);
        else if (Buffer.isBuffer(this.value)) this.value.copy(out, offset);
        offset += this.length;
    }
    return out;
};

},{"ff35534ecc380ed3":"bRL3M","5e377fc82488d72a":"3q4wA","e61f132f215e12f9":"fCgem"}],"l9Edp":[function(require,module,exports,__globalThis) {
var Reporter = require("b93dc035fd1a2dd2").Reporter;
var EncoderBuffer = require("b93dc035fd1a2dd2").EncoderBuffer;
var DecoderBuffer = require("b93dc035fd1a2dd2").DecoderBuffer;
var assert = require("1bf7ce79b1c01d8b");
// Supported tags
var tags = [
    'seq',
    'seqof',
    'set',
    'setof',
    'objid',
    'bool',
    'gentime',
    'utctime',
    'null_',
    'enum',
    'int',
    'objDesc',
    'bitstr',
    'bmpstr',
    'charstr',
    'genstr',
    'graphstr',
    'ia5str',
    'iso646str',
    'numstr',
    'octstr',
    'printstr',
    't61str',
    'unistr',
    'utf8str',
    'videostr'
];
// Public methods list
var methods = [
    'key',
    'obj',
    'use',
    'optional',
    'explicit',
    'implicit',
    'def',
    'choice',
    'any',
    'contains'
].concat(tags);
// Overrided methods list
var overrided = [
    '_peekTag',
    '_decodeTag',
    '_use',
    '_decodeStr',
    '_decodeObjid',
    '_decodeTime',
    '_decodeNull',
    '_decodeInt',
    '_decodeBool',
    '_decodeList',
    '_encodeComposite',
    '_encodeStr',
    '_encodeObjid',
    '_encodeTime',
    '_encodeNull',
    '_encodeInt',
    '_encodeBool'
];
function Node(enc, parent) {
    var state = {};
    this._baseState = state;
    state.enc = enc;
    state.parent = parent || null;
    state.children = null;
    // State
    state.tag = null;
    state.args = null;
    state.reverseArgs = null;
    state.choice = null;
    state.optional = false;
    state.any = false;
    state.obj = false;
    state.use = null;
    state.useDecoder = null;
    state.key = null;
    state['default'] = null;
    state.explicit = null;
    state.implicit = null;
    state.contains = null;
    // Should create new instance on each method
    if (!state.parent) {
        state.children = [];
        this._wrap();
    }
}
module.exports = Node;
var stateProps = [
    'enc',
    'parent',
    'children',
    'tag',
    'args',
    'reverseArgs',
    'choice',
    'optional',
    'any',
    'obj',
    'use',
    'alteredUse',
    'key',
    'default',
    'explicit',
    'implicit',
    'contains'
];
Node.prototype.clone = function clone() {
    var state = this._baseState;
    var cstate = {};
    stateProps.forEach(function(prop) {
        cstate[prop] = state[prop];
    });
    var res = new this.constructor(cstate.parent);
    res._baseState = cstate;
    return res;
};
Node.prototype._wrap = function wrap() {
    var state = this._baseState;
    methods.forEach(function(method) {
        this[method] = function _wrappedMethod() {
            var clone = new this.constructor(this);
            state.children.push(clone);
            return clone[method].apply(clone, arguments);
        };
    }, this);
};
Node.prototype._init = function init(body) {
    var state = this._baseState;
    assert(state.parent === null);
    body.call(this);
    // Filter children
    state.children = state.children.filter(function(child) {
        return child._baseState.parent === this;
    }, this);
    assert.equal(state.children.length, 1, 'Root node can have only one child');
};
Node.prototype._useArgs = function useArgs(args) {
    var state = this._baseState;
    // Filter children and args
    var children = args.filter(function(arg) {
        return arg instanceof this.constructor;
    }, this);
    args = args.filter(function(arg) {
        return !(arg instanceof this.constructor);
    }, this);
    if (children.length !== 0) {
        assert(state.children === null);
        state.children = children;
        // Replace parent to maintain backward link
        children.forEach(function(child) {
            child._baseState.parent = this;
        }, this);
    }
    if (args.length !== 0) {
        assert(state.args === null);
        state.args = args;
        state.reverseArgs = args.map(function(arg) {
            if (typeof arg !== 'object' || arg.constructor !== Object) return arg;
            var res = {};
            Object.keys(arg).forEach(function(key) {
                if (key == (key | 0)) key |= 0;
                var value = arg[key];
                res[value] = key;
            });
            return res;
        });
    }
};
//
// Overrided methods
//
overrided.forEach(function(method) {
    Node.prototype[method] = function _overrided() {
        var state = this._baseState;
        throw new Error(method + ' not implemented for encoding: ' + state.enc);
    };
});
//
// Public methods
//
tags.forEach(function(tag) {
    Node.prototype[tag] = function _tagMethod() {
        var state = this._baseState;
        var args = Array.prototype.slice.call(arguments);
        assert(state.tag === null);
        state.tag = tag;
        this._useArgs(args);
        return this;
    };
});
Node.prototype.use = function use(item) {
    assert(item);
    var state = this._baseState;
    assert(state.use === null);
    state.use = item;
    return this;
};
Node.prototype.optional = function optional() {
    var state = this._baseState;
    state.optional = true;
    return this;
};
Node.prototype.def = function def(val) {
    var state = this._baseState;
    assert(state['default'] === null);
    state['default'] = val;
    state.optional = true;
    return this;
};
Node.prototype.explicit = function explicit(num) {
    var state = this._baseState;
    assert(state.explicit === null && state.implicit === null);
    state.explicit = num;
    return this;
};
Node.prototype.implicit = function implicit(num) {
    var state = this._baseState;
    assert(state.explicit === null && state.implicit === null);
    state.implicit = num;
    return this;
};
Node.prototype.obj = function obj() {
    var state = this._baseState;
    var args = Array.prototype.slice.call(arguments);
    state.obj = true;
    if (args.length !== 0) this._useArgs(args);
    return this;
};
Node.prototype.key = function key(newKey) {
    var state = this._baseState;
    assert(state.key === null);
    state.key = newKey;
    return this;
};
Node.prototype.any = function any() {
    var state = this._baseState;
    state.any = true;
    return this;
};
Node.prototype.choice = function choice(obj) {
    var state = this._baseState;
    assert(state.choice === null);
    state.choice = obj;
    this._useArgs(Object.keys(obj).map(function(key) {
        return obj[key];
    }));
    return this;
};
Node.prototype.contains = function contains(item) {
    var state = this._baseState;
    assert(state.use === null);
    state.contains = item;
    return this;
};
//
// Decoding
//
Node.prototype._decode = function decode(input, options) {
    var state = this._baseState;
    // Decode root node
    if (state.parent === null) return input.wrapResult(state.children[0]._decode(input, options));
    var result = state['default'];
    var present = true;
    var prevKey = null;
    if (state.key !== null) prevKey = input.enterKey(state.key);
    // Check if tag is there
    if (state.optional) {
        var tag = null;
        if (state.explicit !== null) tag = state.explicit;
        else if (state.implicit !== null) tag = state.implicit;
        else if (state.tag !== null) tag = state.tag;
        if (tag === null && !state.any) {
            // Trial and Error
            var save = input.save();
            try {
                if (state.choice === null) this._decodeGeneric(state.tag, input, options);
                else this._decodeChoice(input, options);
                present = true;
            } catch (e) {
                present = false;
            }
            input.restore(save);
        } else {
            present = this._peekTag(input, tag, state.any);
            if (input.isError(present)) return present;
        }
    }
    // Push object on stack
    var prevObj;
    if (state.obj && present) prevObj = input.enterObject();
    if (present) {
        // Unwrap explicit values
        if (state.explicit !== null) {
            var explicit = this._decodeTag(input, state.explicit);
            if (input.isError(explicit)) return explicit;
            input = explicit;
        }
        var start = input.offset;
        // Unwrap implicit and normal values
        if (state.use === null && state.choice === null) {
            if (state.any) var save = input.save();
            var body = this._decodeTag(input, state.implicit !== null ? state.implicit : state.tag, state.any);
            if (input.isError(body)) return body;
            if (state.any) result = input.raw(save);
            else input = body;
        }
        if (options && options.track && state.tag !== null) options.track(input.path(), start, input.length, 'tagged');
        if (options && options.track && state.tag !== null) options.track(input.path(), input.offset, input.length, 'content');
        // Select proper method for tag
        if (state.any) result;
        else if (state.choice === null) result = this._decodeGeneric(state.tag, input, options);
        else result = this._decodeChoice(input, options);
        if (input.isError(result)) return result;
        // Decode children
        if (!state.any && state.choice === null && state.children !== null) state.children.forEach(function decodeChildren(child) {
            // NOTE: We are ignoring errors here, to let parser continue with other
            // parts of encoded data
            child._decode(input, options);
        });
        // Decode contained/encoded by schema, only in bit or octet strings
        if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
            var data = new DecoderBuffer(result);
            result = this._getUse(state.contains, input._reporterState.obj)._decode(data, options);
        }
    }
    // Pop object
    if (state.obj && present) result = input.leaveObject(prevObj);
    // Set key
    if (state.key !== null && (result !== null || present === true)) input.leaveKey(prevKey, state.key, result);
    else if (prevKey !== null) input.exitKey(prevKey);
    return result;
};
Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
    var state = this._baseState;
    if (tag === 'seq' || tag === 'set') return null;
    if (tag === 'seqof' || tag === 'setof') return this._decodeList(input, tag, state.args[0], options);
    else if (/str$/.test(tag)) return this._decodeStr(input, tag, options);
    else if (tag === 'objid' && state.args) return this._decodeObjid(input, state.args[0], state.args[1], options);
    else if (tag === 'objid') return this._decodeObjid(input, null, null, options);
    else if (tag === 'gentime' || tag === 'utctime') return this._decodeTime(input, tag, options);
    else if (tag === 'null_') return this._decodeNull(input, options);
    else if (tag === 'bool') return this._decodeBool(input, options);
    else if (tag === 'objDesc') return this._decodeStr(input, tag, options);
    else if (tag === 'int' || tag === 'enum') return this._decodeInt(input, state.args && state.args[0], options);
    if (state.use !== null) return this._getUse(state.use, input._reporterState.obj)._decode(input, options);
    else return input.error('unknown tag: ' + tag);
};
Node.prototype._getUse = function _getUse(entity, obj) {
    var state = this._baseState;
    // Create altered use decoder if implicit is set
    state.useDecoder = this._use(entity, obj);
    assert(state.useDecoder._baseState.parent === null);
    state.useDecoder = state.useDecoder._baseState.children[0];
    if (state.implicit !== state.useDecoder._baseState.implicit) {
        state.useDecoder = state.useDecoder.clone();
        state.useDecoder._baseState.implicit = state.implicit;
    }
    return state.useDecoder;
};
Node.prototype._decodeChoice = function decodeChoice(input, options) {
    var state = this._baseState;
    var result = null;
    var match = false;
    Object.keys(state.choice).some(function(key) {
        var save = input.save();
        var node = state.choice[key];
        try {
            var value = node._decode(input, options);
            if (input.isError(value)) return false;
            result = {
                type: key,
                value: value
            };
            match = true;
        } catch (e) {
            input.restore(save);
            return false;
        }
        return true;
    }, this);
    if (!match) return input.error('Choice not matched');
    return result;
};
//
// Encoding
//
Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
    return new EncoderBuffer(data, this.reporter);
};
Node.prototype._encode = function encode(data, reporter, parent) {
    var state = this._baseState;
    if (state['default'] !== null && state['default'] === data) return;
    var result = this._encodeValue(data, reporter, parent);
    if (result === undefined) return;
    if (this._skipDefault(result, reporter, parent)) return;
    return result;
};
Node.prototype._encodeValue = function encode(data, reporter, parent) {
    var state = this._baseState;
    // Decode root node
    if (state.parent === null) return state.children[0]._encode(data, reporter || new Reporter());
    var result = null;
    // Set reporter to share it with a child class
    this.reporter = reporter;
    // Check if data is there
    if (state.optional && data === undefined) {
        if (state['default'] !== null) data = state['default'];
        else return;
    }
    // Encode children first
    var content = null;
    var primitive = false;
    if (state.any) // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
    else if (state.choice) result = this._encodeChoice(data, reporter);
    else if (state.contains) {
        content = this._getUse(state.contains, parent)._encode(data, reporter);
        primitive = true;
    } else if (state.children) {
        content = state.children.map(function(child) {
            if (child._baseState.tag === 'null_') return child._encode(null, reporter, data);
            if (child._baseState.key === null) return reporter.error('Child should have a key');
            var prevKey = reporter.enterKey(child._baseState.key);
            if (typeof data !== 'object') return reporter.error('Child expected, but input is not object');
            var res = child._encode(data[child._baseState.key], reporter, data);
            reporter.leaveKey(prevKey);
            return res;
        }, this).filter(function(child) {
            return child;
        });
        content = this._createEncoderBuffer(content);
    } else {
        if (state.tag === 'seqof' || state.tag === 'setof') {
            // TODO(indutny): this should be thrown on DSL level
            if (!(state.args && state.args.length === 1)) return reporter.error('Too many args for : ' + state.tag);
            if (!Array.isArray(data)) return reporter.error('seqof/setof, but data is not Array');
            var child = this.clone();
            child._baseState.implicit = null;
            content = this._createEncoderBuffer(data.map(function(item) {
                var state = this._baseState;
                return this._getUse(state.args[0], data)._encode(item, reporter);
            }, child));
        } else if (state.use !== null) result = this._getUse(state.use, parent)._encode(data, reporter);
        else {
            content = this._encodePrimitive(state.tag, data);
            primitive = true;
        }
    }
    // Encode data itself
    var result;
    if (!state.any && state.choice === null) {
        var tag = state.implicit !== null ? state.implicit : state.tag;
        var cls = state.implicit === null ? 'universal' : 'context';
        if (tag === null) {
            if (state.use === null) reporter.error('Tag could be omitted only for .use()');
        } else if (state.use === null) result = this._encodeComposite(tag, primitive, cls, content);
    }
    // Wrap in explicit
    if (state.explicit !== null) result = this._encodeComposite(state.explicit, false, 'context', result);
    return result;
};
Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
    var state = this._baseState;
    var node = state.choice[data.type];
    if (!node) assert(false, data.type + ' not found in ' + JSON.stringify(Object.keys(state.choice)));
    return node._encode(data.value, reporter);
};
Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
    var state = this._baseState;
    if (/str$/.test(tag)) return this._encodeStr(data, tag);
    else if (tag === 'objid' && state.args) return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
    else if (tag === 'objid') return this._encodeObjid(data, null, null);
    else if (tag === 'gentime' || tag === 'utctime') return this._encodeTime(data, tag);
    else if (tag === 'null_') return this._encodeNull();
    else if (tag === 'int' || tag === 'enum') return this._encodeInt(data, state.args && state.reverseArgs[0]);
    else if (tag === 'bool') return this._encodeBool(data);
    else if (tag === 'objDesc') return this._encodeStr(data, tag);
    else throw new Error('Unsupported tag: ' + tag);
};
Node.prototype._isNumstr = function isNumstr(str) {
    return /^[0-9 ]*$/.test(str);
};
Node.prototype._isPrintstr = function isPrintstr(str) {
    return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str);
};

},{"b93dc035fd1a2dd2":"3q4wA","1bf7ce79b1c01d8b":"8OvWh"}],"oiTK8":[function(require,module,exports,__globalThis) {
var constants = exports;
// Helper
constants._reverse = function reverse(map) {
    var res = {};
    Object.keys(map).forEach(function(key) {
        // Convert key to integer if it is stringified
        if ((key | 0) == key) key = key | 0;
        var value = map[key];
        res[value] = key;
    });
    return res;
};
constants.der = require("cd34b6c5ba00554c");

},{"cd34b6c5ba00554c":"i6Hqy"}],"i6Hqy":[function(require,module,exports,__globalThis) {
var constants = require("c9de207563729b47");
exports.tagClass = {
    0: 'universal',
    1: 'application',
    2: 'context',
    3: 'private'
};
exports.tagClassByName = constants._reverse(exports.tagClass);
exports.tag = {
    0x00: 'end',
    0x01: 'bool',
    0x02: 'int',
    0x03: 'bitstr',
    0x04: 'octstr',
    0x05: 'null_',
    0x06: 'objid',
    0x07: 'objDesc',
    0x08: 'external',
    0x09: 'real',
    0x0a: 'enum',
    0x0b: 'embed',
    0x0c: 'utf8str',
    0x0d: 'relativeOid',
    0x10: 'seq',
    0x11: 'set',
    0x12: 'numstr',
    0x13: 'printstr',
    0x14: 't61str',
    0x15: 'videostr',
    0x16: 'ia5str',
    0x17: 'utctime',
    0x18: 'gentime',
    0x19: 'graphstr',
    0x1a: 'iso646str',
    0x1b: 'genstr',
    0x1c: 'unistr',
    0x1d: 'charstr',
    0x1e: 'bmpstr'
};
exports.tagByName = constants._reverse(exports.tag);

},{"c9de207563729b47":"oiTK8"}],"awa6C":[function(require,module,exports,__globalThis) {
var decoders = exports;
decoders.der = require("abb46f93da4a6a9");
decoders.pem = require("f1e062afeaaaac02");

},{"abb46f93da4a6a9":"foBr8","f1e062afeaaaac02":"iexo6"}],"foBr8":[function(require,module,exports,__globalThis) {
var inherits = require("7c238308bb002386");
var asn1 = require("2acbc866baed26c6");
var base = asn1.base;
var bignum = asn1.bignum;
// Import DER constants
var der = asn1.constants.der;
function DERDecoder(entity) {
    this.enc = 'der';
    this.name = entity.name;
    this.entity = entity;
    // Construct base tree
    this.tree = new DERNode();
    this.tree._init(entity.body);
}
module.exports = DERDecoder;
DERDecoder.prototype.decode = function decode(data, options) {
    if (!(data instanceof base.DecoderBuffer)) data = new base.DecoderBuffer(data, options);
    return this.tree._decode(data, options);
};
// Tree methods
function DERNode(parent) {
    base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);
DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
    if (buffer.isEmpty()) return false;
    var state = buffer.save();
    var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
    if (buffer.isError(decodedTag)) return decodedTag;
    buffer.restore(state);
    return decodedTag.tag === tag || decodedTag.tagStr === tag || decodedTag.tagStr + 'of' === tag || any;
};
DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
    var decodedTag = derDecodeTag(buffer, 'Failed to decode tag of "' + tag + '"');
    if (buffer.isError(decodedTag)) return decodedTag;
    var len = derDecodeLen(buffer, decodedTag.primitive, 'Failed to get length of "' + tag + '"');
    // Failure
    if (buffer.isError(len)) return len;
    if (!any && decodedTag.tag !== tag && decodedTag.tagStr !== tag && decodedTag.tagStr + 'of' !== tag) return buffer.error('Failed to match tag: "' + tag + '"');
    if (decodedTag.primitive || len !== null) return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
    // Indefinite length... find END tag
    var state = buffer.save();
    var res = this._skipUntilEnd(buffer, 'Failed to skip indefinite length body: "' + this.tag + '"');
    if (buffer.isError(res)) return res;
    len = buffer.offset - state.offset;
    buffer.restore(state);
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};
DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
    while(true){
        var tag = derDecodeTag(buffer, fail);
        if (buffer.isError(tag)) return tag;
        var len = derDecodeLen(buffer, tag.primitive, fail);
        if (buffer.isError(len)) return len;
        var res;
        if (tag.primitive || len !== null) res = buffer.skip(len);
        else res = this._skipUntilEnd(buffer, fail);
        // Failure
        if (buffer.isError(res)) return res;
        if (tag.tagStr === 'end') break;
    }
};
DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder, options) {
    var result = [];
    while(!buffer.isEmpty()){
        var possibleEnd = this._peekTag(buffer, 'end');
        if (buffer.isError(possibleEnd)) return possibleEnd;
        var res = decoder.decode(buffer, 'der', options);
        if (buffer.isError(res) && possibleEnd) break;
        result.push(res);
    }
    return result;
};
DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
    if (tag === 'bitstr') {
        var unused = buffer.readUInt8();
        if (buffer.isError(unused)) return unused;
        return {
            unused: unused,
            data: buffer.raw()
        };
    } else if (tag === 'bmpstr') {
        var raw = buffer.raw();
        if (raw.length % 2 === 1) return buffer.error('Decoding of string type: bmpstr length mismatch');
        var str = '';
        for(var i = 0; i < raw.length / 2; i++)str += String.fromCharCode(raw.readUInt16BE(i * 2));
        return str;
    } else if (tag === 'numstr') {
        var numstr = buffer.raw().toString('ascii');
        if (!this._isNumstr(numstr)) return buffer.error("Decoding of string type: numstr unsupported characters");
        return numstr;
    } else if (tag === 'octstr') return buffer.raw();
    else if (tag === 'objDesc') return buffer.raw();
    else if (tag === 'printstr') {
        var printstr = buffer.raw().toString('ascii');
        if (!this._isPrintstr(printstr)) return buffer.error("Decoding of string type: printstr unsupported characters");
        return printstr;
    } else if (/str$/.test(tag)) return buffer.raw().toString();
    else return buffer.error('Decoding of string type: ' + tag + ' unsupported');
};
DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
    var result;
    var identifiers = [];
    var ident = 0;
    while(!buffer.isEmpty()){
        var subident = buffer.readUInt8();
        ident <<= 7;
        ident |= subident & 0x7f;
        if ((subident & 0x80) === 0) {
            identifiers.push(ident);
            ident = 0;
        }
    }
    if (subident & 0x80) identifiers.push(ident);
    var first = identifiers[0] / 40 | 0;
    var second = identifiers[0] % 40;
    if (relative) result = identifiers;
    else result = [
        first,
        second
    ].concat(identifiers.slice(1));
    if (values) {
        var tmp = values[result.join(' ')];
        if (tmp === undefined) tmp = values[result.join('.')];
        if (tmp !== undefined) result = tmp;
    }
    return result;
};
DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
    var str = buffer.raw().toString();
    if (tag === 'gentime') {
        var year = str.slice(0, 4) | 0;
        var mon = str.slice(4, 6) | 0;
        var day = str.slice(6, 8) | 0;
        var hour = str.slice(8, 10) | 0;
        var min = str.slice(10, 12) | 0;
        var sec = str.slice(12, 14) | 0;
    } else if (tag === 'utctime') {
        var year = str.slice(0, 2) | 0;
        var mon = str.slice(2, 4) | 0;
        var day = str.slice(4, 6) | 0;
        var hour = str.slice(6, 8) | 0;
        var min = str.slice(8, 10) | 0;
        var sec = str.slice(10, 12) | 0;
        if (year < 70) year = 2000 + year;
        else year = 1900 + year;
    } else return buffer.error('Decoding ' + tag + ' time is not supported yet');
    return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};
DERNode.prototype._decodeNull = function decodeNull(buffer) {
    return null;
};
DERNode.prototype._decodeBool = function decodeBool(buffer) {
    var res = buffer.readUInt8();
    if (buffer.isError(res)) return res;
    else return res !== 0;
};
DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
    // Bigint, return as it is (assume big endian)
    var raw = buffer.raw();
    var res = new bignum(raw);
    if (values) res = values[res.toString(10)] || res;
    return res;
};
DERNode.prototype._use = function use(entity, obj) {
    if (typeof entity === 'function') entity = entity(obj);
    return entity._getDecoder('der').tree;
};
// Utility methods
function derDecodeTag(buf, fail) {
    var tag = buf.readUInt8(fail);
    if (buf.isError(tag)) return tag;
    var cls = der.tagClass[tag >> 6];
    var primitive = (tag & 0x20) === 0;
    // Multi-octet tag - load
    if ((tag & 0x1f) === 0x1f) {
        var oct = tag;
        tag = 0;
        while((oct & 0x80) === 0x80){
            oct = buf.readUInt8(fail);
            if (buf.isError(oct)) return oct;
            tag <<= 7;
            tag |= oct & 0x7f;
        }
    } else tag &= 0x1f;
    var tagStr = der.tag[tag];
    return {
        cls: cls,
        primitive: primitive,
        tag: tag,
        tagStr: tagStr
    };
}
function derDecodeLen(buf, primitive, fail) {
    var len = buf.readUInt8(fail);
    if (buf.isError(len)) return len;
    // Indefinite form
    if (!primitive && len === 0x80) return null;
    // Definite form
    if ((len & 0x80) === 0) // Short form
    return len;
    // Long form
    var num = len & 0x7f;
    if (num > 4) return buf.error('length octect is too long');
    len = 0;
    for(var i = 0; i < num; i++){
        len <<= 8;
        var j = buf.readUInt8(fail);
        if (buf.isError(j)) return j;
        len |= j;
    }
    return len;
}

},{"7c238308bb002386":"bRL3M","2acbc866baed26c6":"iV1JX"}],"iexo6":[function(require,module,exports,__globalThis) {
var inherits = require("c2d50a9d5a6f334a");
var Buffer = require("883f76082a59dd03").Buffer;
var DERDecoder = require("dc9bd6cca8dafd6");
function PEMDecoder(entity) {
    DERDecoder.call(this, entity);
    this.enc = 'pem';
}
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;
PEMDecoder.prototype.decode = function decode(data, options) {
    var lines = data.toString().split(/[\r\n]+/g);
    var label = options.label.toUpperCase();
    var re = /^-----(BEGIN|END) ([^-]+)-----$/;
    var start = -1;
    var end = -1;
    for(var i = 0; i < lines.length; i++){
        var match = lines[i].match(re);
        if (match === null) continue;
        if (match[2] !== label) continue;
        if (start === -1) {
            if (match[1] !== 'BEGIN') break;
            start = i;
        } else {
            if (match[1] !== 'END') break;
            end = i;
            break;
        }
    }
    if (start === -1 || end === -1) throw new Error('PEM section not found for: ' + label);
    var base64 = lines.slice(start + 1, end).join('');
    // Remove excessive symbols
    base64.replace(/[^a-z0-9\+\/=]+/gi, '');
    var input = new Buffer(base64, 'base64');
    return DERDecoder.prototype.decode.call(this, input, options);
};

},{"c2d50a9d5a6f334a":"bRL3M","883f76082a59dd03":"fCgem","dc9bd6cca8dafd6":"foBr8"}],"2psTt":[function(require,module,exports,__globalThis) {
var encoders = exports;
encoders.der = require("6153180e09514e51");
encoders.pem = require("babaf0c4b3d9210a");

},{"6153180e09514e51":"b1CZy","babaf0c4b3d9210a":"jRlrF"}],"b1CZy":[function(require,module,exports,__globalThis) {
var inherits = require("94789e1422bf21a1");
var Buffer = require("41574641d7de4531").Buffer;
var asn1 = require("9d8c942bce7973a8");
var base = asn1.base;
// Import DER constants
var der = asn1.constants.der;
function DEREncoder(entity) {
    this.enc = 'der';
    this.name = entity.name;
    this.entity = entity;
    // Construct base tree
    this.tree = new DERNode();
    this.tree._init(entity.body);
}
module.exports = DEREncoder;
DEREncoder.prototype.encode = function encode(data, reporter) {
    return this.tree._encode(data, reporter).join();
};
// Tree methods
function DERNode(parent) {
    base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);
DERNode.prototype._encodeComposite = function encodeComposite(tag, primitive, cls, content) {
    var encodedTag = encodeTag(tag, primitive, cls, this.reporter);
    // Short form
    if (content.length < 0x80) {
        var header = new Buffer(2);
        header[0] = encodedTag;
        header[1] = content.length;
        return this._createEncoderBuffer([
            header,
            content
        ]);
    }
    // Long form
    // Count octets required to store length
    var lenOctets = 1;
    for(var i = content.length; i >= 0x100; i >>= 8)lenOctets++;
    var header = new Buffer(2 + lenOctets);
    header[0] = encodedTag;
    header[1] = 0x80 | lenOctets;
    for(var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)header[i] = j & 0xff;
    return this._createEncoderBuffer([
        header,
        content
    ]);
};
DERNode.prototype._encodeStr = function encodeStr(str, tag) {
    if (tag === 'bitstr') return this._createEncoderBuffer([
        str.unused | 0,
        str.data
    ]);
    else if (tag === 'bmpstr') {
        var buf = new Buffer(str.length * 2);
        for(var i = 0; i < str.length; i++)buf.writeUInt16BE(str.charCodeAt(i), i * 2);
        return this._createEncoderBuffer(buf);
    } else if (tag === 'numstr') {
        if (!this._isNumstr(str)) return this.reporter.error("Encoding of string type: numstr supports only digits and space");
        return this._createEncoderBuffer(str);
    } else if (tag === 'printstr') {
        if (!this._isPrintstr(str)) return this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark");
        return this._createEncoderBuffer(str);
    } else if (/str$/.test(tag)) return this._createEncoderBuffer(str);
    else if (tag === 'objDesc') return this._createEncoderBuffer(str);
    else return this.reporter.error('Encoding of string type: ' + tag + ' unsupported');
};
DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
    if (typeof id === 'string') {
        if (!values) return this.reporter.error('string objid given, but no values map found');
        if (!values.hasOwnProperty(id)) return this.reporter.error('objid not found in values map');
        id = values[id].split(/[\s\.]+/g);
        for(var i = 0; i < id.length; i++)id[i] |= 0;
    } else if (Array.isArray(id)) {
        id = id.slice();
        for(var i = 0; i < id.length; i++)id[i] |= 0;
    }
    if (!Array.isArray(id)) return this.reporter.error("objid() should be either array or string, got: " + JSON.stringify(id));
    if (!relative) {
        if (id[1] >= 40) return this.reporter.error('Second objid identifier OOB');
        id.splice(0, 2, id[0] * 40 + id[1]);
    }
    // Count number of octets
    var size = 0;
    for(var i = 0; i < id.length; i++){
        var ident = id[i];
        for(size++; ident >= 0x80; ident >>= 7)size++;
    }
    var objid = new Buffer(size);
    var offset = objid.length - 1;
    for(var i = id.length - 1; i >= 0; i--){
        var ident = id[i];
        objid[offset--] = ident & 0x7f;
        while((ident >>= 7) > 0)objid[offset--] = 0x80 | ident & 0x7f;
    }
    return this._createEncoderBuffer(objid);
};
function two(num) {
    if (num < 10) return '0' + num;
    else return num;
}
DERNode.prototype._encodeTime = function encodeTime(time, tag) {
    var str;
    var date = new Date(time);
    if (tag === 'gentime') str = [
        two(date.getFullYear()),
        two(date.getUTCMonth() + 1),
        two(date.getUTCDate()),
        two(date.getUTCHours()),
        two(date.getUTCMinutes()),
        two(date.getUTCSeconds()),
        'Z'
    ].join('');
    else if (tag === 'utctime') str = [
        two(date.getFullYear() % 100),
        two(date.getUTCMonth() + 1),
        two(date.getUTCDate()),
        two(date.getUTCHours()),
        two(date.getUTCMinutes()),
        two(date.getUTCSeconds()),
        'Z'
    ].join('');
    else this.reporter.error('Encoding ' + tag + ' time is not supported yet');
    return this._encodeStr(str, 'octstr');
};
DERNode.prototype._encodeNull = function encodeNull() {
    return this._createEncoderBuffer('');
};
DERNode.prototype._encodeInt = function encodeInt(num, values) {
    if (typeof num === 'string') {
        if (!values) return this.reporter.error('String int or enum given, but no values map');
        if (!values.hasOwnProperty(num)) return this.reporter.error('Values map doesn\'t contain: ' + JSON.stringify(num));
        num = values[num];
    }
    // Bignum, assume big endian
    if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
        var numArray = num.toArray();
        if (!num.sign && numArray[0] & 0x80) numArray.unshift(0);
        num = new Buffer(numArray);
    }
    if (Buffer.isBuffer(num)) {
        var size = num.length;
        if (num.length === 0) size++;
        var out = new Buffer(size);
        num.copy(out);
        if (num.length === 0) out[0] = 0;
        return this._createEncoderBuffer(out);
    }
    if (num < 0x80) return this._createEncoderBuffer(num);
    if (num < 0x100) return this._createEncoderBuffer([
        0,
        num
    ]);
    var size = 1;
    for(var i = num; i >= 0x100; i >>= 8)size++;
    var out = new Array(size);
    for(var i = out.length - 1; i >= 0; i--){
        out[i] = num & 0xff;
        num >>= 8;
    }
    if (out[0] & 0x80) out.unshift(0);
    return this._createEncoderBuffer(new Buffer(out));
};
DERNode.prototype._encodeBool = function encodeBool(value) {
    return this._createEncoderBuffer(value ? 0xff : 0);
};
DERNode.prototype._use = function use(entity, obj) {
    if (typeof entity === 'function') entity = entity(obj);
    return entity._getEncoder('der').tree;
};
DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
    var state = this._baseState;
    var i;
    if (state['default'] === null) return false;
    var data = dataBuffer.join();
    if (state.defaultBuffer === undefined) state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();
    if (data.length !== state.defaultBuffer.length) return false;
    for(i = 0; i < data.length; i++)if (data[i] !== state.defaultBuffer[i]) return false;
    return true;
};
// Utility methods
function encodeTag(tag, primitive, cls, reporter) {
    var res;
    if (tag === 'seqof') tag = 'seq';
    else if (tag === 'setof') tag = 'set';
    if (der.tagByName.hasOwnProperty(tag)) res = der.tagByName[tag];
    else if (typeof tag === 'number' && (tag | 0) === tag) res = tag;
    else return reporter.error('Unknown tag: ' + tag);
    if (res >= 0x1f) return reporter.error('Multi-octet tag encoding unsupported');
    if (!primitive) res |= 0x20;
    res |= der.tagClassByName[cls || 'universal'] << 6;
    return res;
}

},{"94789e1422bf21a1":"bRL3M","41574641d7de4531":"fCgem","9d8c942bce7973a8":"iV1JX"}],"jRlrF":[function(require,module,exports,__globalThis) {
var inherits = require("bc3c7930ded74eee");
var DEREncoder = require("cf885a4234262436");
function PEMEncoder(entity) {
    DEREncoder.call(this, entity);
    this.enc = 'pem';
}
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;
PEMEncoder.prototype.encode = function encode(data, options) {
    var buf = DEREncoder.prototype.encode.call(this, data);
    var p = buf.toString('base64');
    var out = [
        '-----BEGIN ' + options.label + '-----'
    ];
    for(var i = 0; i < p.length; i += 64)out.push(p.slice(i, i + 64));
    out.push('-----END ' + options.label + '-----');
    return out.join('\n');
};

},{"bc3c7930ded74eee":"bRL3M","cf885a4234262436":"b1CZy"}],"Tf0QA":[function(require,module,exports,__globalThis) {
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen
'use strict';
var asn = require("373dc11d39ac511a");
var Time = asn.define('Time', function() {
    this.choice({
        utcTime: this.utctime(),
        generalTime: this.gentime()
    });
});
var AttributeTypeValue = asn.define('AttributeTypeValue', function() {
    this.seq().obj(this.key('type').objid(), this.key('value').any());
});
var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function() {
    this.seq().obj(this.key('algorithm').objid(), this.key('parameters').optional(), this.key('curve').objid().optional());
});
var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function() {
    this.seq().obj(this.key('algorithm').use(AlgorithmIdentifier), this.key('subjectPublicKey').bitstr());
});
var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function() {
    this.setof(AttributeTypeValue);
});
var RDNSequence = asn.define('RDNSequence', function() {
    this.seqof(RelativeDistinguishedName);
});
var Name = asn.define('Name', function() {
    this.choice({
        rdnSequence: this.use(RDNSequence)
    });
});
var Validity = asn.define('Validity', function() {
    this.seq().obj(this.key('notBefore').use(Time), this.key('notAfter').use(Time));
});
var Extension = asn.define('Extension', function() {
    this.seq().obj(this.key('extnID').objid(), this.key('critical').bool().def(false), this.key('extnValue').octstr());
});
var TBSCertificate = asn.define('TBSCertificate', function() {
    this.seq().obj(this.key('version').explicit(0)['int']().optional(), this.key('serialNumber')['int'](), this.key('signature').use(AlgorithmIdentifier), this.key('issuer').use(Name), this.key('validity').use(Validity), this.key('subject').use(Name), this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo), this.key('issuerUniqueID').implicit(1).bitstr().optional(), this.key('subjectUniqueID').implicit(2).bitstr().optional(), this.key('extensions').explicit(3).seqof(Extension).optional());
});
var X509Certificate = asn.define('X509Certificate', function() {
    this.seq().obj(this.key('tbsCertificate').use(TBSCertificate), this.key('signatureAlgorithm').use(AlgorithmIdentifier), this.key('signatureValue').bitstr());
});
module.exports = X509Certificate;

},{"373dc11d39ac511a":"iV1JX"}],"bvb6u":[function(require,module,exports,__globalThis) {
module.exports = JSON.parse("{\"2.16.840.1.101.3.4.1.1\":\"aes-128-ecb\",\"2.16.840.1.101.3.4.1.2\":\"aes-128-cbc\",\"2.16.840.1.101.3.4.1.3\":\"aes-128-ofb\",\"2.16.840.1.101.3.4.1.4\":\"aes-128-cfb\",\"2.16.840.1.101.3.4.1.21\":\"aes-192-ecb\",\"2.16.840.1.101.3.4.1.22\":\"aes-192-cbc\",\"2.16.840.1.101.3.4.1.23\":\"aes-192-ofb\",\"2.16.840.1.101.3.4.1.24\":\"aes-192-cfb\",\"2.16.840.1.101.3.4.1.41\":\"aes-256-ecb\",\"2.16.840.1.101.3.4.1.42\":\"aes-256-cbc\",\"2.16.840.1.101.3.4.1.43\":\"aes-256-ofb\",\"2.16.840.1.101.3.4.1.44\":\"aes-256-cfb\"}");

},{}],"bNDUb":[function(require,module,exports,__globalThis) {
'use strict';
// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m;
var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m;
var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m;
var evp = require("482ca5fecee84bd1");
var ciphers = require("5e77b1b6b79a5d20");
var Buffer = require("fcf1038e6a690508").Buffer;
module.exports = function(okey, password) {
    var key = okey.toString();
    var match = key.match(findProc);
    var decrypted;
    if (!match) {
        var match2 = key.match(fullRegex);
        decrypted = Buffer.from(match2[2].replace(/[\r\n]/g, ''), 'base64');
    } else {
        var suite = 'aes' + match[1];
        var iv = Buffer.from(match[2], 'hex');
        var cipherText = Buffer.from(match[3].replace(/[\r\n]/g, ''), 'base64');
        var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key;
        var out = [];
        var cipher = ciphers.createDecipheriv(suite, cipherKey, iv);
        out.push(cipher.update(cipherText));
        out.push(cipher['final']());
        decrypted = Buffer.concat(out);
    }
    var tag = key.match(startRegex)[1];
    return {
        tag: tag,
        data: decrypted
    };
};

},{"482ca5fecee84bd1":"1rd4d","5e77b1b6b79a5d20":"hnlHj","fcf1038e6a690508":"eW7r9"}],"iadQk":[function(require,module,exports,__globalThis) {
module.exports = JSON.parse("{\"1.3.132.0.10\":\"secp256k1\",\"1.3.132.0.33\":\"p224\",\"1.2.840.10045.3.1.1\":\"p192\",\"1.2.840.10045.3.1.7\":\"p256\",\"1.3.132.0.34\":\"p384\",\"1.3.132.0.35\":\"p521\"}");

},{}],"vbFso":[function(require,module,exports,__globalThis) {
'use strict';
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var Buffer = require("c893e8283afd176a").Buffer;
var BN = require("18576d045784617e");
var EC = require("9429de8047bf329a").ec;
var parseKeys = require("88de5f3d7e6f8c00");
var curves = require("69d69f2e18a199ce");
function verify(sig, hash, key, signType, tag) {
    var pub = parseKeys(key);
    if (pub.type === 'ec') {
        // rsa keys can be interpreted as ecdsa ones in openssl
        if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type');
        return ecVerify(sig, hash, pub);
    } else if (pub.type === 'dsa') {
        if (signType !== 'dsa') throw new Error('wrong public key type');
        return dsaVerify(sig, hash, pub);
    }
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type');
    hash = Buffer.concat([
        tag,
        hash
    ]);
    var len = pub.modulus.byteLength();
    var pad = [
        1
    ];
    var padNum = 0;
    while(hash.length + pad.length + 2 < len){
        pad.push(0xff);
        padNum += 1;
    }
    pad.push(0x00);
    var i = -1;
    while(++i < hash.length)pad.push(hash[i]);
    pad = Buffer.from(pad);
    var red = BN.mont(pub.modulus);
    sig = new BN(sig).toRed(red);
    sig = sig.redPow(new BN(pub.publicExponent));
    sig = Buffer.from(sig.fromRed().toArray());
    var out = padNum < 8 ? 1 : 0;
    len = Math.min(sig.length, pad.length);
    if (sig.length !== pad.length) out = 1;
    i = -1;
    while(++i < len)out |= sig[i] ^ pad[i];
    return out === 0;
}
function ecVerify(sig, hash, pub) {
    var curveId = curves[pub.data.algorithm.curve.join('.')];
    if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'));
    var curve = new EC(curveId);
    var pubkey = pub.data.subjectPrivateKey.data;
    return curve.verify(hash, sig, pubkey);
}
function dsaVerify(sig, hash, pub) {
    var p = pub.data.p;
    var q = pub.data.q;
    var g = pub.data.g;
    var y = pub.data.pub_key;
    var unpacked = parseKeys.signature.decode(sig, 'der');
    var s = unpacked.s;
    var r = unpacked.r;
    checkValue(s, q);
    checkValue(r, q);
    var montp = BN.mont(p);
    var w = s.invm(q);
    var v = g.toRed(montp).redPow(new BN(hash).mul(w).mod(q)).fromRed().mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed()).mod(p).mod(q);
    return v.cmp(r) === 0;
}
function checkValue(b, q) {
    if (b.cmpn(0) <= 0) throw new Error('invalid sig');
    if (b.cmp(q) >= 0) throw new Error('invalid sig');
}
module.exports = verify;

},{"c893e8283afd176a":"eW7r9","18576d045784617e":"VopIn","9429de8047bf329a":"1NKsH","88de5f3d7e6f8c00":"4Szbv","69d69f2e18a199ce":"iadQk"}],"9Rcg1":[function(require,module,exports,__globalThis) {
var Buffer = require("59d8fd0d64d5aa42").Buffer;
var elliptic = require("a6b1ec3b8e72335c");
var BN = require("8c5a992927812eef");
module.exports = function createECDH(curve) {
    return new ECDH(curve);
};
var aliases = {
    secp256k1: {
        name: 'secp256k1',
        byteLength: 32
    },
    secp224r1: {
        name: 'p224',
        byteLength: 28
    },
    prime256v1: {
        name: 'p256',
        byteLength: 32
    },
    prime192v1: {
        name: 'p192',
        byteLength: 24
    },
    ed25519: {
        name: 'ed25519',
        byteLength: 32
    },
    secp384r1: {
        name: 'p384',
        byteLength: 48
    },
    secp521r1: {
        name: 'p521',
        byteLength: 66
    }
};
aliases.p224 = aliases.secp224r1;
aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
aliases.p192 = aliases.secp192r1 = aliases.prime192v1;
aliases.p384 = aliases.secp384r1;
aliases.p521 = aliases.secp521r1;
function ECDH(curve) {
    this.curveType = aliases[curve];
    if (!this.curveType) this.curveType = {
        name: curve
    };
    this.curve = new elliptic.ec(this.curveType.name) // eslint-disable-line new-cap
    ;
    this.keys = void 0;
}
ECDH.prototype.generateKeys = function(enc, format) {
    this.keys = this.curve.genKeyPair();
    return this.getPublicKey(enc, format);
};
ECDH.prototype.computeSecret = function(other, inenc, enc) {
    inenc = inenc || 'utf8';
    if (!Buffer.isBuffer(other)) other = new Buffer(other, inenc);
    var otherPub = this.curve.keyFromPublic(other).getPublic();
    var out = otherPub.mul(this.keys.getPrivate()).getX();
    return formatReturnValue(out, enc, this.curveType.byteLength);
};
ECDH.prototype.getPublicKey = function(enc, format) {
    var key = this.keys.getPublic(format === 'compressed', true);
    if (format === 'hybrid') {
        if (key[key.length - 1] % 2) key[0] = 7;
        else key[0] = 6;
    }
    return formatReturnValue(key, enc);
};
ECDH.prototype.getPrivateKey = function(enc) {
    return formatReturnValue(this.keys.getPrivate(), enc);
};
ECDH.prototype.setPublicKey = function(pub, enc) {
    enc = enc || 'utf8';
    if (!Buffer.isBuffer(pub)) pub = new Buffer(pub, enc);
    this.keys._importPublic(pub);
    return this;
};
ECDH.prototype.setPrivateKey = function(priv, enc) {
    enc = enc || 'utf8';
    if (!Buffer.isBuffer(priv)) priv = new Buffer(priv, enc);
    var _priv = new BN(priv);
    _priv = _priv.toString(16);
    this.keys = this.curve.genKeyPair();
    this.keys._importPrivate(_priv);
    return this;
};
function formatReturnValue(bn, enc, len) {
    if (!Array.isArray(bn)) bn = bn.toArray();
    var buf = new Buffer(bn);
    if (len && buf.length < len) {
        var zeros = new Buffer(len - buf.length);
        zeros.fill(0);
        buf = Buffer.concat([
            zeros,
            buf
        ]);
    }
    if (!enc) return buf;
    else return buf.toString(enc);
}

},{"59d8fd0d64d5aa42":"fCgem","a6b1ec3b8e72335c":"1NKsH","8c5a992927812eef":"68fon"}],"68fon":[function(require,module,exports,__globalThis) {
(function(module1, exports) {
    'use strict';
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || 'be');
        }
    }
    if (typeof module1 === 'object') module1.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') Buffer = window.Buffer;
        else Buffer = require("1b9e2dcc2d1e58c5").Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') return this._initNumber(number, base, endian);
        if (typeof number === 'object') return this._initArray(number, base, endian);
        if (base === 'hex') base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === 'le') this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== 'le') return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === 'be') for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === 'le') for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 0xf;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === 'be') for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 0xa;
            else if (c >= 17) r += c - 17 + 0xa;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
            out = '';
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = '';
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = '0' + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, 'Number can only safely store up to 53 bits');
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== 'undefined');
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        this.strip();
        var littleEndian = endian === 'le';
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== 'div' && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== 'mod') div = res.div.neg();
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== 'mod') div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === 'div') return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === 'mod') return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true);
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, 'Number is too big');
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === 'k256') prime = new K256();
        else if (name === 'p224') prime = new P224();
        else if (name === 'p192') prime = new P192();
        else if (name === 'p25519') prime = new P25519();
        else throw new Error('Unknown prime ' + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === 'string') {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), 'modulus must be greater than 1');
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

},{"1b9e2dcc2d1e58c5":"jhUEF"}],"h9Rdh":[function(require,module,exports,__globalThis) {
exports.publicEncrypt = require("d84cba4f52311cc8");
exports.privateDecrypt = require("f9c6d8fbe09b61c");
exports.privateEncrypt = function privateEncrypt(key, buf) {
    return exports.publicEncrypt(key, buf, true);
};
exports.publicDecrypt = function publicDecrypt(key, buf) {
    return exports.privateDecrypt(key, buf, true);
};

},{"d84cba4f52311cc8":"e6nSQ","f9c6d8fbe09b61c":"jIkKI"}],"e6nSQ":[function(require,module,exports,__globalThis) {
var parseKeys = require("ca2697dbde558d1");
var randomBytes = require("4704ad09aa96a56b");
var createHash = require("b8a92fd1d9e43252");
var mgf = require("469be15a31031bba");
var xor = require("f9f3694c0f7388b6");
var BN = require("cb7a38ec1a0039d7");
var withPublic = require("969e1e2dd90e2fbe");
var crt = require("9022efe01867a612");
var Buffer = require("d610bb618706f42f").Buffer;
module.exports = function publicEncrypt(publicKey, msg, reverse) {
    var padding;
    if (publicKey.padding) padding = publicKey.padding;
    else if (reverse) padding = 1;
    else padding = 4;
    var key = parseKeys(publicKey);
    var paddedMsg;
    if (padding === 4) paddedMsg = oaep(key, msg);
    else if (padding === 1) paddedMsg = pkcs1(key, msg, reverse);
    else if (padding === 3) {
        paddedMsg = new BN(msg);
        if (paddedMsg.cmp(key.modulus) >= 0) throw new Error('data too long for modulus');
    } else throw new Error('unknown padding');
    if (reverse) return crt(paddedMsg, key);
    else return withPublic(paddedMsg, key);
};
function oaep(key, msg) {
    var k = key.modulus.byteLength();
    var mLen = msg.length;
    var iHash = createHash('sha1').update(Buffer.alloc(0)).digest();
    var hLen = iHash.length;
    var hLen2 = 2 * hLen;
    if (mLen > k - hLen2 - 2) throw new Error('message too long');
    var ps = Buffer.alloc(k - mLen - hLen2 - 2);
    var dblen = k - hLen - 1;
    var seed = randomBytes(hLen);
    var maskedDb = xor(Buffer.concat([
        iHash,
        ps,
        Buffer.alloc(1, 1),
        msg
    ], dblen), mgf(seed, dblen));
    var maskedSeed = xor(seed, mgf(maskedDb, hLen));
    return new BN(Buffer.concat([
        Buffer.alloc(1),
        maskedSeed,
        maskedDb
    ], k));
}
function pkcs1(key, msg, reverse) {
    var mLen = msg.length;
    var k = key.modulus.byteLength();
    if (mLen > k - 11) throw new Error('message too long');
    var ps;
    if (reverse) ps = Buffer.alloc(k - mLen - 3, 0xff);
    else ps = nonZero(k - mLen - 3);
    return new BN(Buffer.concat([
        Buffer.from([
            0,
            reverse ? 1 : 2
        ]),
        ps,
        Buffer.alloc(1),
        msg
    ], k));
}
function nonZero(len) {
    var out = Buffer.allocUnsafe(len);
    var i = 0;
    var cache = randomBytes(len * 2);
    var cur = 0;
    var num;
    while(i < len){
        if (cur === cache.length) {
            cache = randomBytes(len * 2);
            cur = 0;
        }
        num = cache[cur++];
        if (num) out[i++] = num;
    }
    return out;
}

},{"ca2697dbde558d1":"4Szbv","4704ad09aa96a56b":"8hjhE","b8a92fd1d9e43252":"2WyL8","469be15a31031bba":"e2JgG","f9f3694c0f7388b6":"iaxu0","cb7a38ec1a0039d7":"3pDum","969e1e2dd90e2fbe":"fFkPV","9022efe01867a612":"e594P","d610bb618706f42f":"eW7r9"}],"e2JgG":[function(require,module,exports,__globalThis) {
var createHash = require("b36bb21196daa39");
var Buffer = require("cfa1ea60eac1ebfa").Buffer;
module.exports = function(seed, len) {
    var t = Buffer.alloc(0);
    var i = 0;
    var c;
    while(t.length < len){
        c = i2ops(i++);
        t = Buffer.concat([
            t,
            createHash('sha1').update(seed).update(c).digest()
        ]);
    }
    return t.slice(0, len);
};
function i2ops(c) {
    var out = Buffer.allocUnsafe(4);
    out.writeUInt32BE(c, 0);
    return out;
}

},{"b36bb21196daa39":"2WyL8","cfa1ea60eac1ebfa":"eW7r9"}],"iaxu0":[function(require,module,exports,__globalThis) {
module.exports = function xor(a, b) {
    var len = a.length;
    var i = -1;
    while(++i < len)a[i] ^= b[i];
    return a;
};

},{}],"3pDum":[function(require,module,exports,__globalThis) {
(function(module1, exports) {
    'use strict';
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || 'be');
        }
    }
    if (typeof module1 === 'object') module1.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') Buffer = window.Buffer;
        else Buffer = require("64c9d23ade4c9eaa").Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') return this._initNumber(number, base, endian);
        if (typeof number === 'object') return this._initArray(number, base, endian);
        if (base === 'hex') base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === 'le') this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== 'le') return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === 'be') for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === 'le') for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 0xf;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === 'be') for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 0xa;
            else if (c >= 17) r += c - 17 + 0xa;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
            out = '';
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = '';
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = '0' + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, 'Number can only safely store up to 53 bits');
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== 'undefined');
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        this.strip();
        var littleEndian = endian === 'le';
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== 'div' && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== 'mod') div = res.div.neg();
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== 'mod') div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === 'div') return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === 'mod') return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true);
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, 'Number is too big');
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === 'k256') prime = new K256();
        else if (name === 'p224') prime = new P224();
        else if (name === 'p192') prime = new P192();
        else if (name === 'p25519') prime = new P25519();
        else throw new Error('Unknown prime ' + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === 'string') {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), 'modulus must be greater than 1');
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

},{"64c9d23ade4c9eaa":"jhUEF"}],"fFkPV":[function(require,module,exports,__globalThis) {
var BN = require("94162e508c4195c3");
var Buffer = require("1bab2adfd8072b94").Buffer;
function withPublic(paddedMsg, key) {
    return Buffer.from(paddedMsg.toRed(BN.mont(key.modulus)).redPow(new BN(key.publicExponent)).fromRed().toArray());
}
module.exports = withPublic;

},{"94162e508c4195c3":"3pDum","1bab2adfd8072b94":"eW7r9"}],"jIkKI":[function(require,module,exports,__globalThis) {
var parseKeys = require("6c46b1d8bb7eae7b");
var mgf = require("9e51003323ea065d");
var xor = require("637b57d34a8dda25");
var BN = require("3927561f39566b29");
var crt = require("521cbc4ce6042d5b");
var createHash = require("95282d7c0e66f364");
var withPublic = require("1bc2f92e3c398dbe");
var Buffer = require("802d086fb6d63368").Buffer;
module.exports = function privateDecrypt(privateKey, enc, reverse) {
    var padding;
    if (privateKey.padding) padding = privateKey.padding;
    else if (reverse) padding = 1;
    else padding = 4;
    var key = parseKeys(privateKey);
    var k = key.modulus.byteLength();
    if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) throw new Error('decryption error');
    var msg;
    if (reverse) msg = withPublic(new BN(enc), key);
    else msg = crt(enc, key);
    var zBuffer = Buffer.alloc(k - msg.length);
    msg = Buffer.concat([
        zBuffer,
        msg
    ], k);
    if (padding === 4) return oaep(key, msg);
    else if (padding === 1) return pkcs1(key, msg, reverse);
    else if (padding === 3) return msg;
    else throw new Error('unknown padding');
};
function oaep(key, msg) {
    var k = key.modulus.byteLength();
    var iHash = createHash('sha1').update(Buffer.alloc(0)).digest();
    var hLen = iHash.length;
    if (msg[0] !== 0) throw new Error('decryption error');
    var maskedSeed = msg.slice(1, hLen + 1);
    var maskedDb = msg.slice(hLen + 1);
    var seed = xor(maskedSeed, mgf(maskedDb, hLen));
    var db = xor(maskedDb, mgf(seed, k - hLen - 1));
    if (compare(iHash, db.slice(0, hLen))) throw new Error('decryption error');
    var i = hLen;
    while(db[i] === 0)i++;
    if (db[i++] !== 1) throw new Error('decryption error');
    return db.slice(i);
}
function pkcs1(key, msg, reverse) {
    var p1 = msg.slice(0, 2);
    var i = 2;
    var status = 0;
    while(msg[i++] !== 0)if (i >= msg.length) {
        status++;
        break;
    }
    var ps = msg.slice(2, i - 1);
    if (p1.toString('hex') !== '0002' && !reverse || p1.toString('hex') !== '0001' && reverse) status++;
    if (ps.length < 8) status++;
    if (status) throw new Error('decryption error');
    return msg.slice(i);
}
function compare(a, b) {
    a = Buffer.from(a);
    b = Buffer.from(b);
    var dif = 0;
    var len = a.length;
    if (a.length !== b.length) {
        dif++;
        len = Math.min(a.length, b.length);
    }
    var i = -1;
    while(++i < len)dif += a[i] ^ b[i];
    return dif;
}

},{"6c46b1d8bb7eae7b":"4Szbv","9e51003323ea065d":"e2JgG","637b57d34a8dda25":"iaxu0","3927561f39566b29":"3pDum","521cbc4ce6042d5b":"e594P","95282d7c0e66f364":"2WyL8","1bc2f92e3c398dbe":"fFkPV","802d086fb6d63368":"eW7r9"}],"k3tsT":[function(require,module,exports,__globalThis) {
var global = arguments[3];
var process = require("e52c82591caff1d7");
'use strict';
function oldBrowser() {
    throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11');
}
var safeBuffer = require("954d667c0302f12c");
var randombytes = require("7041a0e993c249ef");
var Buffer = safeBuffer.Buffer;
var kBufferMaxLength = safeBuffer.kMaxLength;
var crypto = global.crypto || global.msCrypto;
var kMaxUint32 = Math.pow(2, 32) - 1;
function assertOffset(offset, length) {
    if (typeof offset !== 'number' || offset !== offset) throw new TypeError('offset must be a number');
    if (offset > kMaxUint32 || offset < 0) throw new TypeError('offset must be a uint32');
    if (offset > kBufferMaxLength || offset > length) throw new RangeError('offset out of range');
}
function assertSize(size, offset, length) {
    if (typeof size !== 'number' || size !== size) throw new TypeError('size must be a number');
    if (size > kMaxUint32 || size < 0) throw new TypeError('size must be a uint32');
    if (size + offset > length || size > kBufferMaxLength) throw new RangeError('buffer too small');
}
if (crypto && crypto.getRandomValues || false) {
    exports.randomFill = randomFill;
    exports.randomFillSync = randomFillSync;
} else {
    exports.randomFill = oldBrowser;
    exports.randomFillSync = oldBrowser;
}
function randomFill(buf, offset, size, cb) {
    if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
    if (typeof offset === 'function') {
        cb = offset;
        offset = 0;
        size = buf.length;
    } else if (typeof size === 'function') {
        cb = size;
        size = buf.length - offset;
    } else if (typeof cb !== 'function') throw new TypeError('"cb" argument must be a function');
    assertOffset(offset, buf.length);
    assertSize(size, offset, buf.length);
    return actualFill(buf, offset, size, cb);
}
function actualFill(buf, offset, size, cb) {
    var ourBuf = buf.buffer;
    var uint = new Uint8Array(ourBuf, offset, size);
    crypto.getRandomValues(uint);
    if (cb) {
        process.nextTick(function() {
            cb(null, buf);
        });
        return;
    }
    return buf;
    if (cb) {
        randombytes(size, function(err, bytes) {
            if (err) return cb(err);
            bytes.copy(buf, offset);
            cb(null, buf);
        });
        return;
    }
    var bytes = randombytes(size);
    bytes.copy(buf, offset);
    return buf;
}
function randomFillSync(buf, offset, size) {
    if (typeof offset === 'undefined') offset = 0;
    if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
    assertOffset(offset, buf.length);
    if (size === undefined) size = buf.length - offset;
    assertSize(size, offset, buf.length);
    return actualFill(buf, offset, size);
}

},{"e52c82591caff1d7":"d5jf4","954d667c0302f12c":"eW7r9","7041a0e993c249ef":"8hjhE"}],"aJdAt":[function(require,module,exports,__globalThis) {
/**
 * Module dependencies.
 */ var Strategy = require("9f6ce4661479d771");
/**
 * Expose `Strategy` directly from package.
 */ exports = module.exports = Strategy;
/**
 * Export constructors.
 */ exports.Strategy = Strategy;

},{"9f6ce4661479d771":"49cL7"}],"49cL7":[function(require,module,exports,__globalThis) {
/**
 * Module dependencies.
 */ var passport = require("86b84e6dcf510261"), util = require("be6ffc7759debb8"), lookup = require("2d6da29024e13af9").lookup;
/**
 * `Strategy` constructor.
 *
 * The local authentication strategy authenticates requests based on the
 * credentials submitted through an HTML-based login form.
 *
 * Applications must supply a `verify` callback which accepts `username` and
 * `password` credentials, and then calls the `done` callback supplying a
 * `user`, which should be set to `false` if the credentials are not valid.
 * If an exception occured, `err` should be set.
 *
 * Optionally, `options` can be used to change the fields in which the
 * credentials are found.
 *
 * Options:
 *   - `usernameField`  field name where the username is found, defaults to _username_
 *   - `passwordField`  field name where the password is found, defaults to _password_
 *   - `passReqToCallback`  when `true`, `req` is the first argument to the verify callback (default: `false`)
 *
 * Examples:
 *
 *     passport.use(new LocalStrategy(
 *       function(username, password, done) {
 *         User.findOne({ username: username, password: password }, function (err, user) {
 *           done(err, user);
 *         });
 *       }
 *     ));
 *
 * @param {Object} options
 * @param {Function} verify
 * @api public
 */ function Strategy(options, verify) {
    if (typeof options == 'function') {
        verify = options;
        options = {};
    }
    if (!verify) throw new TypeError('LocalStrategy requires a verify callback');
    this._usernameField = options.usernameField || 'username';
    this._passwordField = options.passwordField || 'password';
    passport.Strategy.call(this);
    this.name = 'local';
    this._verify = verify;
    this._passReqToCallback = options.passReqToCallback;
}
/**
 * Inherit from `passport.Strategy`.
 */ util.inherits(Strategy, passport.Strategy);
/**
 * Authenticate request based on the contents of a form submission.
 *
 * @param {Object} req
 * @api protected
 */ Strategy.prototype.authenticate = function(req, options) {
    options = options || {};
    var username = lookup(req.body, this._usernameField) || lookup(req.query, this._usernameField);
    var password = lookup(req.body, this._passwordField) || lookup(req.query, this._passwordField);
    if (!username || !password) return this.fail({
        message: options.badRequestMessage || 'Missing credentials'
    }, 400);
    var self = this;
    function verified(err, user, info) {
        if (err) return self.error(err);
        if (!user) return self.fail(info);
        self.success(user, info);
    }
    try {
        if (self._passReqToCallback) this._verify(req, username, password, verified);
        else this._verify(username, password, verified);
    } catch (ex) {
        return self.error(ex);
    }
};
/**
 * Expose `Strategy`.
 */ module.exports = Strategy;

},{"86b84e6dcf510261":"78L68","be6ffc7759debb8":"cxohQ","2d6da29024e13af9":"1dp7K"}],"78L68":[function(require,module,exports,__globalThis) {
/**
 * Module dependencies.
 */ var Strategy = require("c191b7ef4f17c672");
/**
 * Expose `Strategy` directly from package.
 */ exports = module.exports = Strategy;
/**
 * Export constructors.
 */ exports.Strategy = Strategy;

},{"c191b7ef4f17c672":"5TuB3"}],"5TuB3":[function(require,module,exports,__globalThis) {
/**
 * Creates an instance of `Strategy`.
 *
 * @constructor
 * @api public
 */ function Strategy() {}
/**
 * Authenticate request.
 *
 * This function must be overridden by subclasses.  In abstract form, it always
 * throws an exception.
 *
 * @param {Object} req The request to authenticate.
 * @param {Object} [options] Strategy-specific options.
 * @api public
 */ Strategy.prototype.authenticate = function(req, options) {
    throw new Error('Strategy#authenticate must be overridden by subclass');
};
/**
 * Expose `Strategy`.
 */ module.exports = Strategy;

},{}],"cxohQ":[function(require,module,exports,__globalThis) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
var process = require("bc23a3ea4a141c0b");
var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
    for(var i = 0; i < keys.length; i++)descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    return descriptors;
};
var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
    if (!isString(f)) {
        var objects = [];
        for(var i = 0; i < arguments.length; i++)objects.push(inspect(arguments[i]));
        return objects.join(' ');
    }
    var i = 1;
    var args = arguments;
    var len = args.length;
    var str = String(f).replace(formatRegExp, function(x) {
        if (x === '%%') return '%';
        if (i >= len) return x;
        switch(x){
            case '%s':
                return String(args[i++]);
            case '%d':
                return Number(args[i++]);
            case '%j':
                try {
                    return JSON.stringify(args[i++]);
                } catch (_) {
                    return '[Circular]';
                }
            default:
                return x;
        }
    });
    for(var x = args[i]; i < len; x = args[++i])if (isNull(x) || !isObject(x)) str += ' ' + x;
    else str += ' ' + inspect(x);
    return str;
};
// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
    if (typeof process !== 'undefined' && process.noDeprecation === true) return fn;
    // Allow for deprecating things in the process of starting up.
    if (typeof process === 'undefined') return function() {
        return exports.deprecate(fn, msg).apply(this, arguments);
    };
    var warned = false;
    function deprecated() {
        if (!warned) {
            if (process.throwDeprecation) throw new Error(msg);
            else if (process.traceDeprecation) console.trace(msg);
            else console.error(msg);
            warned = true;
        }
        return fn.apply(this, arguments);
    }
    return deprecated;
};
var debugs = {};
var debugEnvRegex = /^$/;
var debugEnv;
exports.debuglog = function(set) {
    set = set.toUpperCase();
    if (!debugs[set]) {
        if (debugEnvRegex.test(set)) {
            var pid = process.pid;
            debugs[set] = function() {
                var msg = exports.format.apply(exports, arguments);
                console.error('%s %d: %s', set, pid, msg);
            };
        } else debugs[set] = function() {};
    }
    return debugs[set];
};
/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */ /* legacy: obj, showHidden, depth, colors*/ function inspect(obj, opts) {
    // default options
    var ctx = {
        seen: [],
        stylize: stylizeNoColor
    };
    // legacy...
    if (arguments.length >= 3) ctx.depth = arguments[2];
    if (arguments.length >= 4) ctx.colors = arguments[3];
    if (isBoolean(opts)) // legacy...
    ctx.showHidden = opts;
    else if (opts) // got an "options" object
    exports._extend(ctx, opts);
    // set default options
    if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
    if (isUndefined(ctx.depth)) ctx.depth = 2;
    if (isUndefined(ctx.colors)) ctx.colors = false;
    if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
    if (ctx.colors) ctx.stylize = stylizeWithColor;
    return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;
// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
    'bold': [
        1,
        22
    ],
    'italic': [
        3,
        23
    ],
    'underline': [
        4,
        24
    ],
    'inverse': [
        7,
        27
    ],
    'white': [
        37,
        39
    ],
    'grey': [
        90,
        39
    ],
    'black': [
        30,
        39
    ],
    'blue': [
        34,
        39
    ],
    'cyan': [
        36,
        39
    ],
    'green': [
        32,
        39
    ],
    'magenta': [
        35,
        39
    ],
    'red': [
        31,
        39
    ],
    'yellow': [
        33,
        39
    ]
};
// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
    'special': 'cyan',
    'number': 'yellow',
    'boolean': 'yellow',
    'undefined': 'grey',
    'null': 'bold',
    'string': 'green',
    'date': 'magenta',
    // "name": intentionally not styling
    'regexp': 'red'
};
function stylizeWithColor(str, styleType) {
    var style = inspect.styles[styleType];
    if (style) return '\u001b[' + inspect.colors[style][0] + 'm' + str + '\u001b[' + inspect.colors[style][1] + 'm';
    else return str;
}
function stylizeNoColor(str, styleType) {
    return str;
}
function arrayToHash(array) {
    var hash = {};
    array.forEach(function(val, idx) {
        hash[val] = true;
    });
    return hash;
}
function formatValue(ctx, value, recurseTimes) {
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
    value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.
    !(value.constructor && value.constructor.prototype === value)) {
        var ret = value.inspect(recurseTimes, ctx);
        if (!isString(ret)) ret = formatValue(ctx, ret, recurseTimes);
        return ret;
    }
    // Primitive types cannot have properties
    var primitive = formatPrimitive(ctx, value);
    if (primitive) return primitive;
    // Look up the keys of the object.
    var keys = Object.keys(value);
    var visibleKeys = arrayToHash(keys);
    if (ctx.showHidden) keys = Object.getOwnPropertyNames(value);
    // IE doesn't make error fields non-enumerable
    // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
    if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) return formatError(value);
    // Some type of object without properties can be shortcutted.
    if (keys.length === 0) {
        if (isFunction(value)) {
            var name = value.name ? ': ' + value.name : '';
            return ctx.stylize('[Function' + name + ']', 'special');
        }
        if (isRegExp(value)) return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        if (isDate(value)) return ctx.stylize(Date.prototype.toString.call(value), 'date');
        if (isError(value)) return formatError(value);
    }
    var base = '', array = false, braces = [
        '{',
        '}'
    ];
    // Make Array say that they are Array
    if (isArray(value)) {
        array = true;
        braces = [
            '[',
            ']'
        ];
    }
    // Make functions say that they are functions
    if (isFunction(value)) {
        var n = value.name ? ': ' + value.name : '';
        base = ' [Function' + n + ']';
    }
    // Make RegExps say that they are RegExps
    if (isRegExp(value)) base = ' ' + RegExp.prototype.toString.call(value);
    // Make dates with properties first say the date
    if (isDate(value)) base = ' ' + Date.prototype.toUTCString.call(value);
    // Make error with message first say the error
    if (isError(value)) base = ' ' + formatError(value);
    if (keys.length === 0 && (!array || value.length == 0)) return braces[0] + base + braces[1];
    if (recurseTimes < 0) {
        if (isRegExp(value)) return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        else return ctx.stylize('[Object]', 'special');
    }
    ctx.seen.push(value);
    var output;
    if (array) output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
    else output = keys.map(function(key) {
        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
    ctx.seen.pop();
    return reduceToSingleString(output, base, braces);
}
function formatPrimitive(ctx, value) {
    if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');
    if (isString(value)) {
        var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
        return ctx.stylize(simple, 'string');
    }
    if (isNumber(value)) return ctx.stylize('' + value, 'number');
    if (isBoolean(value)) return ctx.stylize('' + value, 'boolean');
    // For some reason typeof null is "object", so special case here.
    if (isNull(value)) return ctx.stylize('null', 'null');
}
function formatError(value) {
    return '[' + Error.prototype.toString.call(value) + ']';
}
function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
    var output = [];
    for(var i = 0, l = value.length; i < l; ++i)if (hasOwnProperty(value, String(i))) output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
    else output.push('');
    keys.forEach(function(key) {
        if (!key.match(/^\d+$/)) output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
    });
    return output;
}
function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name, str, desc;
    desc = Object.getOwnPropertyDescriptor(value, key) || {
        value: value[key]
    };
    if (desc.get) {
        if (desc.set) str = ctx.stylize('[Getter/Setter]', 'special');
        else str = ctx.stylize('[Getter]', 'special');
    } else if (desc.set) str = ctx.stylize('[Setter]', 'special');
    if (!hasOwnProperty(visibleKeys, key)) name = '[' + key + ']';
    if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
            if (isNull(recurseTimes)) str = formatValue(ctx, desc.value, null);
            else str = formatValue(ctx, desc.value, recurseTimes - 1);
            if (str.indexOf('\n') > -1) {
                if (array) str = str.split('\n').map(function(line) {
                    return '  ' + line;
                }).join('\n').slice(2);
                else str = '\n' + str.split('\n').map(function(line) {
                    return '   ' + line;
                }).join('\n');
            }
        } else str = ctx.stylize('[Circular]', 'special');
    }
    if (isUndefined(name)) {
        if (array && key.match(/^\d+$/)) return str;
        name = JSON.stringify('' + key);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
            name = name.slice(1, -1);
            name = ctx.stylize(name, 'name');
        } else {
            name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
            name = ctx.stylize(name, 'string');
        }
    }
    return name + ': ' + str;
}
function reduceToSingleString(output, base, braces) {
    var numLinesEst = 0;
    var length = output.reduce(function(prev, cur) {
        numLinesEst++;
        if (cur.indexOf('\n') >= 0) numLinesEst++;
        return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
    }, 0);
    if (length > 60) return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}
// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
exports.types = require("6a1c15bae847a134");
function isArray(ar) {
    return Array.isArray(ar);
}
exports.isArray = isArray;
function isBoolean(arg) {
    return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;
function isNull(arg) {
    return arg === null;
}
exports.isNull = isNull;
function isNullOrUndefined(arg) {
    return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;
function isNumber(arg) {
    return typeof arg === 'number';
}
exports.isNumber = isNumber;
function isString(arg) {
    return typeof arg === 'string';
}
exports.isString = isString;
function isSymbol(arg) {
    return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;
function isUndefined(arg) {
    return arg === void 0;
}
exports.isUndefined = isUndefined;
function isRegExp(re) {
    return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;
exports.types.isRegExp = isRegExp;
function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;
function isDate(d) {
    return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;
exports.types.isDate = isDate;
function isError(e) {
    return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;
exports.types.isNativeError = isError;
function isFunction(arg) {
    return typeof arg === 'function';
}
exports.isFunction = isFunction;
function isPrimitive(arg) {
    return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || // ES6 symbol
    typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;
exports.isBuffer = require("a42137cd7fc8700d");
function objectToString(o) {
    return Object.prototype.toString.call(o);
}
function pad(n) {
    return n < 10 ? '0' + n.toString(10) : n.toString(10);
}
var months = [
    'Jan',
    'Feb',
    'Mar',
    'Apr',
    'May',
    'Jun',
    'Jul',
    'Aug',
    'Sep',
    'Oct',
    'Nov',
    'Dec'
];
// 26 Feb 16:19:34
function timestamp() {
    var d = new Date();
    var time = [
        pad(d.getHours()),
        pad(d.getMinutes()),
        pad(d.getSeconds())
    ].join(':');
    return [
        d.getDate(),
        months[d.getMonth()],
        time
    ].join(' ');
}
// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
    console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};
/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */ exports.inherits = require("a792e8e3e2aa1973");
exports._extend = function(origin, add) {
    // Don't do anything if add isn't an object
    if (!add || !isObject(add)) return origin;
    var keys = Object.keys(add);
    var i = keys.length;
    while(i--)origin[keys[i]] = add[keys[i]];
    return origin;
};
function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
}
var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;
exports.promisify = function promisify(original) {
    if (typeof original !== 'function') throw new TypeError('The "original" argument must be of type Function');
    if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
        var fn = original[kCustomPromisifiedSymbol];
        if (typeof fn !== 'function') throw new TypeError('The "util.promisify.custom" argument must be of type Function');
        Object.defineProperty(fn, kCustomPromisifiedSymbol, {
            value: fn,
            enumerable: false,
            writable: false,
            configurable: true
        });
        return fn;
    }
    function fn() {
        var promiseResolve, promiseReject;
        var promise = new Promise(function(resolve, reject) {
            promiseResolve = resolve;
            promiseReject = reject;
        });
        var args = [];
        for(var i = 0; i < arguments.length; i++)args.push(arguments[i]);
        args.push(function(err, value) {
            if (err) promiseReject(err);
            else promiseResolve(value);
        });
        try {
            original.apply(this, args);
        } catch (err) {
            promiseReject(err);
        }
        return promise;
    }
    Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
    if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
        value: fn,
        enumerable: false,
        writable: false,
        configurable: true
    });
    return Object.defineProperties(fn, getOwnPropertyDescriptors(original));
};
exports.promisify.custom = kCustomPromisifiedSymbol;
function callbackifyOnRejected(reason, cb) {
    // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
    // Because `null` is a special error value in callbacks which means "no error
    // occurred", we error-wrap so the callback consumer can distinguish between
    // "the promise rejected with null" or "the promise fulfilled with undefined".
    if (!reason) {
        var newReason = new Error('Promise was rejected with a falsy value');
        newReason.reason = reason;
        reason = newReason;
    }
    return cb(reason);
}
function callbackify(original) {
    if (typeof original !== 'function') throw new TypeError('The "original" argument must be of type Function');
    // We DO NOT return the promise as it gives the user a false sense that
    // the promise is actually somehow related to the callback's execution
    // and that the callback throwing will reject the promise.
    function callbackified() {
        var args = [];
        for(var i = 0; i < arguments.length; i++)args.push(arguments[i]);
        var maybeCb = args.pop();
        if (typeof maybeCb !== 'function') throw new TypeError('The last argument must be of type Function');
        var self = this;
        var cb = function() {
            return maybeCb.apply(self, arguments);
        };
        // In true node style we process the callback on `nextTick` with all the
        // implications (stack, `uncaughtException`, `async_hooks`)
        original.apply(this, args).then(function(ret) {
            process.nextTick(cb.bind(null, null, ret));
        }, function(rej) {
            process.nextTick(callbackifyOnRejected.bind(null, rej, cb));
        });
    }
    Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
    Object.defineProperties(callbackified, getOwnPropertyDescriptors(original));
    return callbackified;
}
exports.callbackify = callbackify;

},{"bc23a3ea4a141c0b":"d5jf4","6a1c15bae847a134":"bnQvf","a42137cd7fc8700d":"inNNy","a792e8e3e2aa1973":"bRL3M"}],"bnQvf":[function(require,module,exports,__globalThis) {
// Currently in sync with Node.js lib/internal/util/types.js
// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9
'use strict';
var isArgumentsObject = require("6b5f9ae3e436d527");
var isGeneratorFunction = require("285c2b8081bf4b68");
var whichTypedArray = require("e95b88ccd80e1671");
var isTypedArray = require("7db151546a22c2a8");
function uncurryThis(f) {
    return f.call.bind(f);
}
var BigIntSupported = typeof BigInt !== 'undefined';
var SymbolSupported = typeof Symbol !== 'undefined';
var ObjectToString = uncurryThis(Object.prototype.toString);
var numberValue = uncurryThis(Number.prototype.valueOf);
var stringValue = uncurryThis(String.prototype.valueOf);
var booleanValue = uncurryThis(Boolean.prototype.valueOf);
if (BigIntSupported) var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
if (SymbolSupported) var symbolValue = uncurryThis(Symbol.prototype.valueOf);
function checkBoxedPrimitive(value, prototypeValueOf) {
    if (typeof value !== 'object') return false;
    try {
        prototypeValueOf(value);
        return true;
    } catch (e) {
        return false;
    }
}
exports.isArgumentsObject = isArgumentsObject;
exports.isGeneratorFunction = isGeneratorFunction;
exports.isTypedArray = isTypedArray;
// Taken from here and modified for better browser support
// https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js
function isPromise(input) {
    return typeof Promise !== 'undefined' && input instanceof Promise || input !== null && typeof input === 'object' && typeof input.then === 'function' && typeof input.catch === 'function';
}
exports.isPromise = isPromise;
function isArrayBufferView(value) {
    if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) return ArrayBuffer.isView(value);
    return isTypedArray(value) || isDataView(value);
}
exports.isArrayBufferView = isArrayBufferView;
function isUint8Array(value) {
    return whichTypedArray(value) === 'Uint8Array';
}
exports.isUint8Array = isUint8Array;
function isUint8ClampedArray(value) {
    return whichTypedArray(value) === 'Uint8ClampedArray';
}
exports.isUint8ClampedArray = isUint8ClampedArray;
function isUint16Array(value) {
    return whichTypedArray(value) === 'Uint16Array';
}
exports.isUint16Array = isUint16Array;
function isUint32Array(value) {
    return whichTypedArray(value) === 'Uint32Array';
}
exports.isUint32Array = isUint32Array;
function isInt8Array(value) {
    return whichTypedArray(value) === 'Int8Array';
}
exports.isInt8Array = isInt8Array;
function isInt16Array(value) {
    return whichTypedArray(value) === 'Int16Array';
}
exports.isInt16Array = isInt16Array;
function isInt32Array(value) {
    return whichTypedArray(value) === 'Int32Array';
}
exports.isInt32Array = isInt32Array;
function isFloat32Array(value) {
    return whichTypedArray(value) === 'Float32Array';
}
exports.isFloat32Array = isFloat32Array;
function isFloat64Array(value) {
    return whichTypedArray(value) === 'Float64Array';
}
exports.isFloat64Array = isFloat64Array;
function isBigInt64Array(value) {
    return whichTypedArray(value) === 'BigInt64Array';
}
exports.isBigInt64Array = isBigInt64Array;
function isBigUint64Array(value) {
    return whichTypedArray(value) === 'BigUint64Array';
}
exports.isBigUint64Array = isBigUint64Array;
function isMapToString(value) {
    return ObjectToString(value) === '[object Map]';
}
isMapToString.working = typeof Map !== 'undefined' && isMapToString(new Map());
function isMap(value) {
    if (typeof Map === 'undefined') return false;
    return isMapToString.working ? isMapToString(value) : value instanceof Map;
}
exports.isMap = isMap;
function isSetToString(value) {
    return ObjectToString(value) === '[object Set]';
}
isSetToString.working = typeof Set !== 'undefined' && isSetToString(new Set());
function isSet(value) {
    if (typeof Set === 'undefined') return false;
    return isSetToString.working ? isSetToString(value) : value instanceof Set;
}
exports.isSet = isSet;
function isWeakMapToString(value) {
    return ObjectToString(value) === '[object WeakMap]';
}
isWeakMapToString.working = typeof WeakMap !== 'undefined' && isWeakMapToString(new WeakMap());
function isWeakMap(value) {
    if (typeof WeakMap === 'undefined') return false;
    return isWeakMapToString.working ? isWeakMapToString(value) : value instanceof WeakMap;
}
exports.isWeakMap = isWeakMap;
function isWeakSetToString(value) {
    return ObjectToString(value) === '[object WeakSet]';
}
isWeakSetToString.working = typeof WeakSet !== 'undefined' && isWeakSetToString(new WeakSet());
function isWeakSet(value) {
    return isWeakSetToString(value);
}
exports.isWeakSet = isWeakSet;
function isArrayBufferToString(value) {
    return ObjectToString(value) === '[object ArrayBuffer]';
}
isArrayBufferToString.working = typeof ArrayBuffer !== 'undefined' && isArrayBufferToString(new ArrayBuffer());
function isArrayBuffer(value) {
    if (typeof ArrayBuffer === 'undefined') return false;
    return isArrayBufferToString.working ? isArrayBufferToString(value) : value instanceof ArrayBuffer;
}
exports.isArrayBuffer = isArrayBuffer;
function isDataViewToString(value) {
    return ObjectToString(value) === '[object DataView]';
}
isDataViewToString.working = typeof ArrayBuffer !== 'undefined' && typeof DataView !== 'undefined' && isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1));
function isDataView(value) {
    if (typeof DataView === 'undefined') return false;
    return isDataViewToString.working ? isDataViewToString(value) : value instanceof DataView;
}
exports.isDataView = isDataView;
// Store a copy of SharedArrayBuffer in case it's deleted elsewhere
var SharedArrayBufferCopy = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : undefined;
function isSharedArrayBufferToString(value) {
    return ObjectToString(value) === '[object SharedArrayBuffer]';
}
function isSharedArrayBuffer(value) {
    if (typeof SharedArrayBufferCopy === 'undefined') return false;
    if (typeof isSharedArrayBufferToString.working === 'undefined') isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
    return isSharedArrayBufferToString.working ? isSharedArrayBufferToString(value) : value instanceof SharedArrayBufferCopy;
}
exports.isSharedArrayBuffer = isSharedArrayBuffer;
function isAsyncFunction(value) {
    return ObjectToString(value) === '[object AsyncFunction]';
}
exports.isAsyncFunction = isAsyncFunction;
function isMapIterator(value) {
    return ObjectToString(value) === '[object Map Iterator]';
}
exports.isMapIterator = isMapIterator;
function isSetIterator(value) {
    return ObjectToString(value) === '[object Set Iterator]';
}
exports.isSetIterator = isSetIterator;
function isGeneratorObject(value) {
    return ObjectToString(value) === '[object Generator]';
}
exports.isGeneratorObject = isGeneratorObject;
function isWebAssemblyCompiledModule(value) {
    return ObjectToString(value) === '[object WebAssembly.Module]';
}
exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;
function isNumberObject(value) {
    return checkBoxedPrimitive(value, numberValue);
}
exports.isNumberObject = isNumberObject;
function isStringObject(value) {
    return checkBoxedPrimitive(value, stringValue);
}
exports.isStringObject = isStringObject;
function isBooleanObject(value) {
    return checkBoxedPrimitive(value, booleanValue);
}
exports.isBooleanObject = isBooleanObject;
function isBigIntObject(value) {
    return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
}
exports.isBigIntObject = isBigIntObject;
function isSymbolObject(value) {
    return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
}
exports.isSymbolObject = isSymbolObject;
function isBoxedPrimitive(value) {
    return isNumberObject(value) || isStringObject(value) || isBooleanObject(value) || isBigIntObject(value) || isSymbolObject(value);
}
exports.isBoxedPrimitive = isBoxedPrimitive;
function isAnyArrayBuffer(value) {
    return typeof Uint8Array !== 'undefined' && (isArrayBuffer(value) || isSharedArrayBuffer(value));
}
exports.isAnyArrayBuffer = isAnyArrayBuffer;
[
    'isProxy',
    'isExternal',
    'isModuleNamespaceObject'
].forEach(function(method) {
    Object.defineProperty(exports, method, {
        enumerable: false,
        value: function() {
            throw new Error(method + ' is not supported in userland');
        }
    });
});

},{"6b5f9ae3e436d527":"czr4n","285c2b8081bf4b68":"2XUdn","e95b88ccd80e1671":"lVUO7","7db151546a22c2a8":"1ihkG"}],"czr4n":[function(require,module,exports,__globalThis) {
'use strict';
var hasToStringTag = require("e2b01ce809f132fb")();
var callBound = require("4a3fd3308cb18520");
var $toString = callBound('Object.prototype.toString');
/** @type {import('.')} */ var isStandardArguments = function isArguments(value) {
    if (hasToStringTag && value && typeof value === 'object' && Symbol.toStringTag in value) return false;
    return $toString(value) === '[object Arguments]';
};
/** @type {import('.')} */ var isLegacyArguments = function isArguments(value) {
    if (isStandardArguments(value)) return true;
    return value !== null && typeof value === 'object' && 'length' in value && typeof value.length === 'number' && value.length >= 0 && $toString(value) !== '[object Array]' && 'callee' in value && $toString(value.callee) === '[object Function]';
};
var supportsStandardArguments = function() {
    return isStandardArguments(arguments);
}();
// @ts-expect-error TODO make this not error
isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests
/** @type {import('.')} */ module.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;

},{"e2b01ce809f132fb":"9LdQ9","4a3fd3308cb18520":"lAcs1"}],"9LdQ9":[function(require,module,exports,__globalThis) {
'use strict';
var hasSymbols = require("2ef89576d4959bff");
/** @type {import('.')} */ module.exports = function hasToStringTagShams() {
    return hasSymbols() && !!Symbol.toStringTag;
};

},{"2ef89576d4959bff":"euYk7"}],"euYk7":[function(require,module,exports,__globalThis) {
'use strict';
/** @type {import('./shams')} */ /* eslint complexity: [2, 18], max-statements: [2, 33] */ module.exports = function hasSymbols() {
    if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') return false;
    if (typeof Symbol.iterator === 'symbol') return true;
    /** @type {{ [k in symbol]?: unknown }} */ var obj = {};
    var sym = Symbol('test');
    var symObj = Object(sym);
    if (typeof sym === 'string') return false;
    if (Object.prototype.toString.call(sym) !== '[object Symbol]') return false;
    if (Object.prototype.toString.call(symObj) !== '[object Symbol]') return false;
    // temp disabled per https://github.com/ljharb/object.assign/issues/17
    // if (sym instanceof Symbol) { return false; }
    // temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
    // if (!(symObj instanceof Symbol)) { return false; }
    // if (typeof Symbol.prototype.toString !== 'function') { return false; }
    // if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }
    var symVal = 42;
    obj[sym] = symVal;
    for(var _ in obj)return false;
     // eslint-disable-line no-restricted-syntax, no-unreachable-loop
    if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) return false;
    if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) return false;
    var syms = Object.getOwnPropertySymbols(obj);
    if (syms.length !== 1 || syms[0] !== sym) return false;
    if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) return false;
    if (typeof Object.getOwnPropertyDescriptor === 'function') {
        // eslint-disable-next-line no-extra-parens
        var descriptor = /** @type {PropertyDescriptor} */ Object.getOwnPropertyDescriptor(obj, sym);
        if (descriptor.value !== symVal || descriptor.enumerable !== true) return false;
    }
    return true;
};

},{}],"lAcs1":[function(require,module,exports,__globalThis) {
'use strict';
var GetIntrinsic = require("90205503fa989ea7");
var callBindBasic = require("79b99f4b8fc521d");
/** @type {(thisArg: string, searchString: string, position?: number) => number} */ var $indexOf = callBindBasic([
    GetIntrinsic('%String.prototype.indexOf%')
]);
/** @type {import('.')} */ module.exports = function callBoundIntrinsic(name, allowMissing) {
    /* eslint no-extra-parens: 0 */ var intrinsic = /** @type {(this: unknown, ...args: unknown[]) => unknown} */ GetIntrinsic(name, !!allowMissing);
    if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) return callBindBasic(/** @type {const} */ [
        intrinsic
    ]);
    return intrinsic;
};

},{"90205503fa989ea7":"dZb05","79b99f4b8fc521d":"eWvK7"}],"dZb05":[function(require,module,exports,__globalThis) {
'use strict';
var undefined1;
var $Object = require("2664640474097f21");
var $Error = require("ff34c740859aa28e");
var $EvalError = require("349515b7ea9b6cef");
var $RangeError = require("9da01653b2dd9abf");
var $ReferenceError = require("68586abd6b0136da");
var $SyntaxError = require("662263fdbc077fc8");
var $TypeError = require("abdfc34e5f6bb86");
var $URIError = require("daca1f932429e03e");
var abs = require("6a52a0c0ffccac74");
var floor = require("d01cf04757c5320b");
var max = require("a2657a92cb7dae87");
var min = require("6367c0241be1f01");
var pow = require("9bee48b90a8c96d");
var round = require("b5cc049891156ba3");
var sign = require("8d956274d8c0407e");
var $Function = Function;
// eslint-disable-next-line consistent-return
var getEvalledConstructor = function(expressionSyntax) {
    try {
        return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
    } catch (e) {}
};
var $gOPD = require("7f0abb73c570ef31");
var $defineProperty = require("3cbcb7341b0412ef");
var throwTypeError = function() {
    throw new $TypeError();
};
var ThrowTypeError = $gOPD ? function() {
    try {
        // eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
        arguments.callee; // IE 8 does not throw here
        return throwTypeError;
    } catch (calleeThrows) {
        try {
            // IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
            return $gOPD(arguments, 'callee').get;
        } catch (gOPDthrows) {
            return throwTypeError;
        }
    }
}() : throwTypeError;
var hasSymbols = require("1f00f712d594ccf")();
var getProto = require("89cf41d095fe5a0a");
var $ObjectGPO = require("a5e781ace21741c8");
var $ReflectGPO = require("db08b186beb7f382");
var $apply = require("213af9137f841281");
var $call = require("56d5af438508fcc0");
var needsEval = {};
var TypedArray = typeof Uint8Array === 'undefined' || !getProto ? undefined : getProto(Uint8Array);
var INTRINSICS = {
    __proto__: null,
    '%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
    '%Array%': Array,
    '%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
    '%ArrayIteratorPrototype%': hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined,
    '%AsyncFromSyncIteratorPrototype%': undefined,
    '%AsyncFunction%': needsEval,
    '%AsyncGenerator%': needsEval,
    '%AsyncGeneratorFunction%': needsEval,
    '%AsyncIteratorPrototype%': needsEval,
    '%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
    '%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
    '%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined : BigInt64Array,
    '%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined : BigUint64Array,
    '%Boolean%': Boolean,
    '%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
    '%Date%': Date,
    '%decodeURI%': decodeURI,
    '%decodeURIComponent%': decodeURIComponent,
    '%encodeURI%': encodeURI,
    '%encodeURIComponent%': encodeURIComponent,
    '%Error%': $Error,
    '%eval%': eval,
    '%EvalError%': $EvalError,
    '%Float16Array%': typeof Float16Array === 'undefined' ? undefined : Float16Array,
    '%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
    '%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
    '%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
    '%Function%': $Function,
    '%GeneratorFunction%': needsEval,
    '%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
    '%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
    '%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
    '%isFinite%': isFinite,
    '%isNaN%': isNaN,
    '%IteratorPrototype%': hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined,
    '%JSON%': typeof JSON === 'object' ? JSON : undefined,
    '%Map%': typeof Map === 'undefined' ? undefined : Map,
    '%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Map()[Symbol.iterator]()),
    '%Math%': Math,
    '%Number%': Number,
    '%Object%': $Object,
    '%Object.getOwnPropertyDescriptor%': $gOPD,
    '%parseFloat%': parseFloat,
    '%parseInt%': parseInt,
    '%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
    '%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
    '%RangeError%': $RangeError,
    '%ReferenceError%': $ReferenceError,
    '%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
    '%RegExp%': RegExp,
    '%Set%': typeof Set === 'undefined' ? undefined : Set,
    '%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Set()[Symbol.iterator]()),
    '%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
    '%String%': String,
    '%StringIteratorPrototype%': hasSymbols && getProto ? getProto(''[Symbol.iterator]()) : undefined,
    '%Symbol%': hasSymbols ? Symbol : undefined,
    '%SyntaxError%': $SyntaxError,
    '%ThrowTypeError%': ThrowTypeError,
    '%TypedArray%': TypedArray,
    '%TypeError%': $TypeError,
    '%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
    '%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
    '%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
    '%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
    '%URIError%': $URIError,
    '%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
    '%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
    '%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet,
    '%Function.prototype.call%': $call,
    '%Function.prototype.apply%': $apply,
    '%Object.defineProperty%': $defineProperty,
    '%Object.getPrototypeOf%': $ObjectGPO,
    '%Math.abs%': abs,
    '%Math.floor%': floor,
    '%Math.max%': max,
    '%Math.min%': min,
    '%Math.pow%': pow,
    '%Math.round%': round,
    '%Math.sign%': sign,
    '%Reflect.getPrototypeOf%': $ReflectGPO
};
if (getProto) try {
    null.error; // eslint-disable-line no-unused-expressions
} catch (e) {
    // https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229
    var errorProto = getProto(getProto(e));
    INTRINSICS['%Error.prototype%'] = errorProto;
}
var doEval = function doEval(name) {
    var value;
    if (name === '%AsyncFunction%') value = getEvalledConstructor('async function () {}');
    else if (name === '%GeneratorFunction%') value = getEvalledConstructor('function* () {}');
    else if (name === '%AsyncGeneratorFunction%') value = getEvalledConstructor('async function* () {}');
    else if (name === '%AsyncGenerator%') {
        var fn = doEval('%AsyncGeneratorFunction%');
        if (fn) value = fn.prototype;
    } else if (name === '%AsyncIteratorPrototype%') {
        var gen = doEval('%AsyncGenerator%');
        if (gen && getProto) value = getProto(gen.prototype);
    }
    INTRINSICS[name] = value;
    return value;
};
var LEGACY_ALIASES = {
    __proto__: null,
    '%ArrayBufferPrototype%': [
        'ArrayBuffer',
        'prototype'
    ],
    '%ArrayPrototype%': [
        'Array',
        'prototype'
    ],
    '%ArrayProto_entries%': [
        'Array',
        'prototype',
        'entries'
    ],
    '%ArrayProto_forEach%': [
        'Array',
        'prototype',
        'forEach'
    ],
    '%ArrayProto_keys%': [
        'Array',
        'prototype',
        'keys'
    ],
    '%ArrayProto_values%': [
        'Array',
        'prototype',
        'values'
    ],
    '%AsyncFunctionPrototype%': [
        'AsyncFunction',
        'prototype'
    ],
    '%AsyncGenerator%': [
        'AsyncGeneratorFunction',
        'prototype'
    ],
    '%AsyncGeneratorPrototype%': [
        'AsyncGeneratorFunction',
        'prototype',
        'prototype'
    ],
    '%BooleanPrototype%': [
        'Boolean',
        'prototype'
    ],
    '%DataViewPrototype%': [
        'DataView',
        'prototype'
    ],
    '%DatePrototype%': [
        'Date',
        'prototype'
    ],
    '%ErrorPrototype%': [
        'Error',
        'prototype'
    ],
    '%EvalErrorPrototype%': [
        'EvalError',
        'prototype'
    ],
    '%Float32ArrayPrototype%': [
        'Float32Array',
        'prototype'
    ],
    '%Float64ArrayPrototype%': [
        'Float64Array',
        'prototype'
    ],
    '%FunctionPrototype%': [
        'Function',
        'prototype'
    ],
    '%Generator%': [
        'GeneratorFunction',
        'prototype'
    ],
    '%GeneratorPrototype%': [
        'GeneratorFunction',
        'prototype',
        'prototype'
    ],
    '%Int8ArrayPrototype%': [
        'Int8Array',
        'prototype'
    ],
    '%Int16ArrayPrototype%': [
        'Int16Array',
        'prototype'
    ],
    '%Int32ArrayPrototype%': [
        'Int32Array',
        'prototype'
    ],
    '%JSONParse%': [
        'JSON',
        'parse'
    ],
    '%JSONStringify%': [
        'JSON',
        'stringify'
    ],
    '%MapPrototype%': [
        'Map',
        'prototype'
    ],
    '%NumberPrototype%': [
        'Number',
        'prototype'
    ],
    '%ObjectPrototype%': [
        'Object',
        'prototype'
    ],
    '%ObjProto_toString%': [
        'Object',
        'prototype',
        'toString'
    ],
    '%ObjProto_valueOf%': [
        'Object',
        'prototype',
        'valueOf'
    ],
    '%PromisePrototype%': [
        'Promise',
        'prototype'
    ],
    '%PromiseProto_then%': [
        'Promise',
        'prototype',
        'then'
    ],
    '%Promise_all%': [
        'Promise',
        'all'
    ],
    '%Promise_reject%': [
        'Promise',
        'reject'
    ],
    '%Promise_resolve%': [
        'Promise',
        'resolve'
    ],
    '%RangeErrorPrototype%': [
        'RangeError',
        'prototype'
    ],
    '%ReferenceErrorPrototype%': [
        'ReferenceError',
        'prototype'
    ],
    '%RegExpPrototype%': [
        'RegExp',
        'prototype'
    ],
    '%SetPrototype%': [
        'Set',
        'prototype'
    ],
    '%SharedArrayBufferPrototype%': [
        'SharedArrayBuffer',
        'prototype'
    ],
    '%StringPrototype%': [
        'String',
        'prototype'
    ],
    '%SymbolPrototype%': [
        'Symbol',
        'prototype'
    ],
    '%SyntaxErrorPrototype%': [
        'SyntaxError',
        'prototype'
    ],
    '%TypedArrayPrototype%': [
        'TypedArray',
        'prototype'
    ],
    '%TypeErrorPrototype%': [
        'TypeError',
        'prototype'
    ],
    '%Uint8ArrayPrototype%': [
        'Uint8Array',
        'prototype'
    ],
    '%Uint8ClampedArrayPrototype%': [
        'Uint8ClampedArray',
        'prototype'
    ],
    '%Uint16ArrayPrototype%': [
        'Uint16Array',
        'prototype'
    ],
    '%Uint32ArrayPrototype%': [
        'Uint32Array',
        'prototype'
    ],
    '%URIErrorPrototype%': [
        'URIError',
        'prototype'
    ],
    '%WeakMapPrototype%': [
        'WeakMap',
        'prototype'
    ],
    '%WeakSetPrototype%': [
        'WeakSet',
        'prototype'
    ]
};
var bind = require("7c5e688e48cd07b0");
var hasOwn = require("af36d49b4b8c6c7c");
var $concat = bind.call($call, Array.prototype.concat);
var $spliceApply = bind.call($apply, Array.prototype.splice);
var $replace = bind.call($call, String.prototype.replace);
var $strSlice = bind.call($call, String.prototype.slice);
var $exec = bind.call($call, RegExp.prototype.exec);
/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */ var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */ 
var stringToPath = function stringToPath(string) {
    var first = $strSlice(string, 0, 1);
    var last = $strSlice(string, -1);
    if (first === '%' && last !== '%') throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
    else if (last === '%' && first !== '%') throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
    var result = [];
    $replace(string, rePropName, function(match, number, quote, subString) {
        result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
    });
    return result;
};
/* end adaptation */ var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
    var intrinsicName = name;
    var alias;
    if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
        alias = LEGACY_ALIASES[intrinsicName];
        intrinsicName = '%' + alias[0] + '%';
    }
    if (hasOwn(INTRINSICS, intrinsicName)) {
        var value = INTRINSICS[intrinsicName];
        if (value === needsEval) value = doEval(intrinsicName);
        if (typeof value === 'undefined' && !allowMissing) throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
        return {
            alias: alias,
            name: intrinsicName,
            value: value
        };
    }
    throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};
module.exports = function GetIntrinsic(name, allowMissing) {
    if (typeof name !== 'string' || name.length === 0) throw new $TypeError('intrinsic name must be a non-empty string');
    if (arguments.length > 1 && typeof allowMissing !== 'boolean') throw new $TypeError('"allowMissing" argument must be a boolean');
    if ($exec(/^%?[^%]*%?$/, name) === null) throw new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');
    var parts = stringToPath(name);
    var intrinsicBaseName = parts.length > 0 ? parts[0] : '';
    var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
    var intrinsicRealName = intrinsic.name;
    var value = intrinsic.value;
    var skipFurtherCaching = false;
    var alias = intrinsic.alias;
    if (alias) {
        intrinsicBaseName = alias[0];
        $spliceApply(parts, $concat([
            0,
            1
        ], alias));
    }
    for(var i = 1, isOwn = true; i < parts.length; i += 1){
        var part = parts[i];
        var first = $strSlice(part, 0, 1);
        var last = $strSlice(part, -1);
        if ((first === '"' || first === "'" || first === '`' || last === '"' || last === "'" || last === '`') && first !== last) throw new $SyntaxError('property names with quotes must have matching quotes');
        if (part === 'constructor' || !isOwn) skipFurtherCaching = true;
        intrinsicBaseName += '.' + part;
        intrinsicRealName = '%' + intrinsicBaseName + '%';
        if (hasOwn(INTRINSICS, intrinsicRealName)) value = INTRINSICS[intrinsicRealName];
        else if (value != null) {
            if (!(part in value)) {
                if (!allowMissing) throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
                return void 0;
            }
            if ($gOPD && i + 1 >= parts.length) {
                var desc = $gOPD(value, part);
                isOwn = !!desc;
                // By convention, when a data property is converted to an accessor
                // property to emulate a data property that does not suffer from
                // the override mistake, that accessor's getter is marked with
                // an `originalValue` property. Here, when we detect this, we
                // uphold the illusion by pretending to see that original data
                // property, i.e., returning the value rather than the getter
                // itself.
                if (isOwn && 'get' in desc && !('originalValue' in desc.get)) value = desc.get;
                else value = value[part];
            } else {
                isOwn = hasOwn(value, part);
                value = value[part];
            }
            if (isOwn && !skipFurtherCaching) INTRINSICS[intrinsicRealName] = value;
        }
    }
    return value;
};

},{"2664640474097f21":"TtYyW","ff34c740859aa28e":"eDsor","349515b7ea9b6cef":"hIiFU","9da01653b2dd9abf":"11MNe","68586abd6b0136da":"2YV8d","662263fdbc077fc8":"8jeeH","abdfc34e5f6bb86":"6oWLR","daca1f932429e03e":"a04Um","6a52a0c0ffccac74":"h0j9f","d01cf04757c5320b":"29Rdc","a2657a92cb7dae87":"9admQ","6367c0241be1f01":"fqFst","9bee48b90a8c96d":"4r2Wo","b5cc049891156ba3":"c1LD1","8d956274d8c0407e":"aARhC","7f0abb73c570ef31":"eOTQB","3cbcb7341b0412ef":"5SmXK","1f00f712d594ccf":"3dK91","89cf41d095fe5a0a":"jKlXf","a5e781ace21741c8":"2dv7z","db08b186beb7f382":"5oM3R","213af9137f841281":"7xbND","56d5af438508fcc0":"fvkNV","7c5e688e48cd07b0":"6J4ob","af36d49b4b8c6c7c":"9Wb6f"}],"TtYyW":[function(require,module,exports,__globalThis) {
'use strict';
/** @type {import('.')} */ module.exports = Object;

},{}],"eDsor":[function(require,module,exports,__globalThis) {
'use strict';
/** @type {import('.')} */ module.exports = Error;

},{}],"hIiFU":[function(require,module,exports,__globalThis) {
'use strict';
/** @type {import('./eval')} */ module.exports = EvalError;

},{}],"11MNe":[function(require,module,exports,__globalThis) {
'use strict';
/** @type {import('./range')} */ module.exports = RangeError;

},{}],"2YV8d":[function(require,module,exports,__globalThis) {
'use strict';
/** @type {import('./ref')} */ module.exports = ReferenceError;

},{}],"8jeeH":[function(require,module,exports,__globalThis) {
'use strict';
/** @type {import('./syntax')} */ module.exports = SyntaxError;

},{}],"6oWLR":[function(require,module,exports,__globalThis) {
'use strict';
/** @type {import('./type')} */ module.exports = TypeError;

},{}],"a04Um":[function(require,module,exports,__globalThis) {
'use strict';
/** @type {import('./uri')} */ module.exports = URIError;

},{}],"h0j9f":[function(require,module,exports,__globalThis) {
'use strict';
/** @type {import('./abs')} */ module.exports = Math.abs;

},{}],"29Rdc":[function(require,module,exports,__globalThis) {
'use strict';
/** @type {import('./floor')} */ module.exports = Math.floor;

},{}],"9admQ":[function(require,module,exports,__globalThis) {
'use strict';
/** @type {import('./max')} */ module.exports = Math.max;

},{}],"fqFst":[function(require,module,exports,__globalThis) {
'use strict';
/** @type {import('./min')} */ module.exports = Math.min;

},{}],"4r2Wo":[function(require,module,exports,__globalThis) {
'use strict';
/** @type {import('./pow')} */ module.exports = Math.pow;

},{}],"c1LD1":[function(require,module,exports,__globalThis) {
'use strict';
/** @type {import('./round')} */ module.exports = Math.round;

},{}],"aARhC":[function(require,module,exports,__globalThis) {
'use strict';
var $isNaN = require("d292273fa9eecbef");
/** @type {import('./sign')} */ module.exports = function sign(number) {
    if ($isNaN(number) || number === 0) return number;
    return number < 0 ? -1 : 1;
};

},{"d292273fa9eecbef":"lfoom"}],"lfoom":[function(require,module,exports,__globalThis) {
'use strict';
/** @type {import('./isNaN')} */ module.exports = Number.isNaN || function isNaN(a) {
    return a !== a;
};

},{}],"eOTQB":[function(require,module,exports,__globalThis) {
'use strict';
/** @type {import('.')} */ var $gOPD = require("2065a078be813600");
if ($gOPD) try {
    $gOPD([], 'length');
} catch (e) {
    // IE 8 has a broken gOPD
    $gOPD = null;
}
module.exports = $gOPD;

},{"2065a078be813600":"hhhLk"}],"hhhLk":[function(require,module,exports,__globalThis) {
'use strict';
/** @type {import('./gOPD')} */ module.exports = Object.getOwnPropertyDescriptor;

},{}],"5SmXK":[function(require,module,exports,__globalThis) {
'use strict';
/** @type {import('.')} */ var $defineProperty = Object.defineProperty || false;
if ($defineProperty) try {
    $defineProperty({}, 'a', {
        value: 1
    });
} catch (e) {
    // IE 8 has a broken defineProperty
    $defineProperty = false;
}
module.exports = $defineProperty;

},{}],"3dK91":[function(require,module,exports,__globalThis) {
'use strict';
var origSymbol = typeof Symbol !== 'undefined' && Symbol;
var hasSymbolSham = require("3fb25678c62d2fce");
/** @type {import('.')} */ module.exports = function hasNativeSymbols() {
    if (typeof origSymbol !== 'function') return false;
    if (typeof Symbol !== 'function') return false;
    if (typeof origSymbol('foo') !== 'symbol') return false;
    if (typeof Symbol('bar') !== 'symbol') return false;
    return hasSymbolSham();
};

},{"3fb25678c62d2fce":"euYk7"}],"jKlXf":[function(require,module,exports,__globalThis) {
'use strict';
var reflectGetProto = require("ba0ea764912daf49");
var originalGetProto = require("1bd809a13f9b0f46");
var getDunderProto = require("fbec8086c64f7968");
/** @type {import('.')} */ module.exports = reflectGetProto ? function getProto(O) {
    // @ts-expect-error TS can't narrow inside a closure, for some reason
    return reflectGetProto(O);
} : originalGetProto ? function getProto(O) {
    if (!O || typeof O !== 'object' && typeof O !== 'function') throw new TypeError('getProto: not an object');
    // @ts-expect-error TS can't narrow inside a closure, for some reason
    return originalGetProto(O);
} : getDunderProto ? function getProto(O) {
    // @ts-expect-error TS can't narrow inside a closure, for some reason
    return getDunderProto(O);
} : null;

},{"ba0ea764912daf49":"5oM3R","1bd809a13f9b0f46":"2dv7z","fbec8086c64f7968":"3dID4"}],"5oM3R":[function(require,module,exports,__globalThis) {
'use strict';
/** @type {import('./Reflect.getPrototypeOf')} */ module.exports = typeof Reflect !== 'undefined' && Reflect.getPrototypeOf || null;

},{}],"2dv7z":[function(require,module,exports,__globalThis) {
'use strict';
var $Object = require("23f06d8f004a91fb");
/** @type {import('./Object.getPrototypeOf')} */ module.exports = $Object.getPrototypeOf || null;

},{"23f06d8f004a91fb":"TtYyW"}],"3dID4":[function(require,module,exports,__globalThis) {
'use strict';
var callBind = require("20202e6273970ec3");
var gOPD = require("6e9e415ed4ed192c");
var hasProtoAccessor;
try {
    // eslint-disable-next-line no-extra-parens, no-proto
    hasProtoAccessor = /** @type {{ __proto__?: typeof Array.prototype }} */ [].__proto__ === Array.prototype;
} catch (e) {
    if (!e || typeof e !== 'object' || !('code' in e) || e.code !== 'ERR_PROTO_ACCESS') throw e;
}
// eslint-disable-next-line no-extra-parens
var desc = !!hasProtoAccessor && gOPD && gOPD(Object.prototype, /** @type {keyof typeof Object.prototype} */ '__proto__');
var $Object = Object;
var $getPrototypeOf = $Object.getPrototypeOf;
/** @type {import('./get')} */ module.exports = desc && typeof desc.get === 'function' ? callBind([
    desc.get
]) : typeof $getPrototypeOf === 'function' ? /** @type {import('./get')} */ function getDunder(value) {
    // eslint-disable-next-line eqeqeq
    return $getPrototypeOf(value == null ? value : $Object(value));
} : false;

},{"20202e6273970ec3":"eWvK7","6e9e415ed4ed192c":"eOTQB"}],"eWvK7":[function(require,module,exports,__globalThis) {
'use strict';
var bind = require("d6d8aee3c61fa381");
var $TypeError = require("3ad70b4ee76fdc3");
var $call = require("79792e7530a25b0e");
var $actualApply = require("1883a23d55f655c3");
/** @type {(args: [Function, thisArg?: unknown, ...args: unknown[]]) => Function} TODO FIXME, find a way to use import('.') */ module.exports = function callBindBasic(args) {
    if (args.length < 1 || typeof args[0] !== 'function') throw new $TypeError('a function is required');
    return $actualApply(bind, $call, args);
};

},{"d6d8aee3c61fa381":"6J4ob","3ad70b4ee76fdc3":"6oWLR","79792e7530a25b0e":"fvkNV","1883a23d55f655c3":"ki0KW"}],"6J4ob":[function(require,module,exports,__globalThis) {
'use strict';
var implementation = require("12e173b4dbaee960");
module.exports = Function.prototype.bind || implementation;

},{"12e173b4dbaee960":"jwaxQ"}],"jwaxQ":[function(require,module,exports,__globalThis) {
'use strict';
/* eslint no-invalid-this: 1 */ var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var toStr = Object.prototype.toString;
var max = Math.max;
var funcType = '[object Function]';
var concatty = function concatty(a, b) {
    var arr = [];
    for(var i = 0; i < a.length; i += 1)arr[i] = a[i];
    for(var j = 0; j < b.length; j += 1)arr[j + a.length] = b[j];
    return arr;
};
var slicy = function slicy(arrLike, offset) {
    var arr = [];
    for(var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1)arr[j] = arrLike[i];
    return arr;
};
var joiny = function(arr, joiner) {
    var str = '';
    for(var i = 0; i < arr.length; i += 1){
        str += arr[i];
        if (i + 1 < arr.length) str += joiner;
    }
    return str;
};
module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.apply(target) !== funcType) throw new TypeError(ERROR_MESSAGE + target);
    var args = slicy(arguments, 1);
    var bound;
    var binder = function() {
        if (this instanceof bound) {
            var result = target.apply(this, concatty(args, arguments));
            if (Object(result) === result) return result;
            return this;
        }
        return target.apply(that, concatty(args, arguments));
    };
    var boundLength = max(0, target.length - args.length);
    var boundArgs = [];
    for(var i = 0; i < boundLength; i++)boundArgs[i] = '$' + i;
    bound = Function('binder', 'return function (' + joiny(boundArgs, ',') + '){ return binder.apply(this,arguments); }')(binder);
    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }
    return bound;
};

},{}],"fvkNV":[function(require,module,exports,__globalThis) {
'use strict';
/** @type {import('./functionCall')} */ module.exports = Function.prototype.call;

},{}],"ki0KW":[function(require,module,exports,__globalThis) {
'use strict';
var bind = require("ba0cb57b961776b");
var $apply = require("8002d8d4a5e40cd8");
var $call = require("dd5326344bf1485c");
var $reflectApply = require("ddbf3cfadf2f22c");
/** @type {import('./actualApply')} */ module.exports = $reflectApply || bind.call($call, $apply);

},{"ba0cb57b961776b":"6J4ob","8002d8d4a5e40cd8":"7xbND","dd5326344bf1485c":"fvkNV","ddbf3cfadf2f22c":"hEK1J"}],"7xbND":[function(require,module,exports,__globalThis) {
'use strict';
/** @type {import('./functionApply')} */ module.exports = Function.prototype.apply;

},{}],"hEK1J":[function(require,module,exports,__globalThis) {
'use strict';
/** @type {import('./reflectApply')} */ module.exports = typeof Reflect !== 'undefined' && Reflect && Reflect.apply;

},{}],"9Wb6f":[function(require,module,exports,__globalThis) {
'use strict';
var call = Function.prototype.call;
var $hasOwn = Object.prototype.hasOwnProperty;
var bind = require("126cb75e62f8e17b");
/** @type {import('.')} */ module.exports = bind.call(call, $hasOwn);

},{"126cb75e62f8e17b":"6J4ob"}],"2XUdn":[function(require,module,exports,__globalThis) {
'use strict';
var callBound = require("7f8723b0ba578595");
var safeRegexTest = require("32324cc769caa0cc");
var isFnRegex = safeRegexTest(/^\s*(?:function)?\*/);
var hasToStringTag = require("b42ab74c25dbb155")();
var getProto = require("4729fa737ebfd9c1");
var toStr = callBound('Object.prototype.toString');
var fnToStr = callBound('Function.prototype.toString');
var getGeneratorFunc = function() {
    if (!hasToStringTag) return false;
    try {
        return Function('return function*() {}')();
    } catch (e) {}
};
/** @type {undefined | false | null | GeneratorFunctionConstructor} */ var GeneratorFunction;
/** @type {import('.')} */ module.exports = function isGeneratorFunction(fn) {
    if (typeof fn !== 'function') return false;
    if (isFnRegex(fnToStr(fn))) return true;
    if (!hasToStringTag) {
        var str = toStr(fn);
        return str === '[object GeneratorFunction]';
    }
    if (!getProto) return false;
    if (typeof GeneratorFunction === 'undefined') {
        var generatorFunc = getGeneratorFunc();
        GeneratorFunction = generatorFunc ? /** @type {GeneratorFunctionConstructor} */ getProto(generatorFunc) : false;
    }
    return getProto(fn) === GeneratorFunction;
};

},{"7f8723b0ba578595":"lAcs1","32324cc769caa0cc":"1kD8p","b42ab74c25dbb155":"9LdQ9","4729fa737ebfd9c1":"jKlXf"}],"1kD8p":[function(require,module,exports,__globalThis) {
'use strict';
var callBound = require("39b5e226f465bdc3");
var isRegex = require("a52af5ff2805a373");
var $exec = callBound('RegExp.prototype.exec');
var $TypeError = require("e0ef9e92c1444ab0");
/** @type {import('.')} */ module.exports = function regexTester(regex) {
    if (!isRegex(regex)) throw new $TypeError('`regex` must be a RegExp');
    return function test(s) {
        return $exec(regex, s) !== null;
    };
};

},{"39b5e226f465bdc3":"lAcs1","a52af5ff2805a373":"cBe8p","e0ef9e92c1444ab0":"6oWLR"}],"cBe8p":[function(require,module,exports,__globalThis) {
'use strict';
var callBound = require("e8ae6fb50d24c345");
var hasToStringTag = require("a5e890a505b039e5")();
var hasOwn = require("a7c11bfda61a32f");
var gOPD = require("2ad64b17b65049b4");
/** @type {import('.')} */ var fn;
if (hasToStringTag) {
    /** @type {(receiver: ThisParameterType<typeof RegExp.prototype.exec>, ...args: Parameters<typeof RegExp.prototype.exec>) => ReturnType<typeof RegExp.prototype.exec>} */ var $exec = callBound('RegExp.prototype.exec');
    /** @type {object} */ var isRegexMarker = {};
    var throwRegexMarker = function() {
        throw isRegexMarker;
    };
    /** @type {{ toString(): never, valueOf(): never, [Symbol.toPrimitive]?(): never }} */ var badStringifier = {
        toString: throwRegexMarker,
        valueOf: throwRegexMarker
    };
    if (typeof Symbol.toPrimitive === 'symbol') badStringifier[Symbol.toPrimitive] = throwRegexMarker;
    /** @type {import('.')} */ // @ts-expect-error TS can't figure out that the $exec call always throws
    // eslint-disable-next-line consistent-return
    fn = function isRegex(value) {
        if (!value || typeof value !== 'object') return false;
        // eslint-disable-next-line no-extra-parens
        var descriptor = /** @type {NonNullable<typeof gOPD>} */ gOPD(/** @type {{ lastIndex?: unknown }} */ value, 'lastIndex');
        var hasLastIndexDataProperty = descriptor && hasOwn(descriptor, 'value');
        if (!hasLastIndexDataProperty) return false;
        try {
            // eslint-disable-next-line no-extra-parens
            $exec(value, /** @type {unknown} */ badStringifier);
        } catch (e) {
            return e === isRegexMarker;
        }
    };
} else {
    /** @type {(receiver: ThisParameterType<typeof Object.prototype.toString>, ...args: Parameters<typeof Object.prototype.toString>) => ReturnType<typeof Object.prototype.toString>} */ var $toString = callBound('Object.prototype.toString');
    /** @const @type {'[object RegExp]'} */ var regexClass = '[object RegExp]';
    /** @type {import('.')} */ fn = function isRegex(value) {
        // In older browsers, typeof regex incorrectly returns 'function'
        if (!value || typeof value !== 'object' && typeof value !== 'function') return false;
        return $toString(value) === regexClass;
    };
}
module.exports = fn;

},{"e8ae6fb50d24c345":"lAcs1","a5e890a505b039e5":"9LdQ9","a7c11bfda61a32f":"9Wb6f","2ad64b17b65049b4":"eOTQB"}],"lVUO7":[function(require,module,exports,__globalThis) {
var global = arguments[3];
'use strict';
var forEach = require("2941d48f36957e3c");
var availableTypedArrays = require("beaf5502a5823cce");
var callBind = require("e5d203a1b4c809f9");
var callBound = require("c1f328b1ef67e936");
var gOPD = require("ce6b45c571ba4e3e");
var getProto = require("4877134a9146c5d7");
var $toString = callBound('Object.prototype.toString');
var hasToStringTag = require("9e7ef6c88184c56")();
var g = typeof globalThis === 'undefined' ? global : globalThis;
var typedArrays = availableTypedArrays();
var $slice = callBound('String.prototype.slice');
/** @type {<T = unknown>(array: readonly T[], value: unknown) => number} */ var $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {
    for(var i = 0; i < array.length; i += 1){
        if (array[i] === value) return i;
    }
    return -1;
};
/** @typedef {import('./types').Getter} Getter */ /** @type {import('./types').Cache} */ var cache = {
    __proto__: null
};
if (hasToStringTag && gOPD && getProto) forEach(typedArrays, function(typedArray) {
    var arr = new g[typedArray]();
    if (Symbol.toStringTag in arr && getProto) {
        var proto = getProto(arr);
        // @ts-expect-error TS won't narrow inside a closure
        var descriptor = gOPD(proto, Symbol.toStringTag);
        if (!descriptor && proto) {
            var superProto = getProto(proto);
            // @ts-expect-error TS won't narrow inside a closure
            descriptor = gOPD(superProto, Symbol.toStringTag);
        }
        // @ts-expect-error TODO: fix
        cache['$' + typedArray] = callBind(descriptor.get);
    }
});
else forEach(typedArrays, function(typedArray) {
    var arr = new g[typedArray]();
    var fn = arr.slice || arr.set;
    if (fn) cache[/** @type {`$${import('.').TypedArrayName}`} */ '$' + typedArray] = /** @type {import('./types').BoundSlice | import('./types').BoundSet} */ // @ts-expect-error TODO FIXME
    callBind(fn);
});
/** @type {(value: object) => false | import('.').TypedArrayName} */ var tryTypedArrays = function tryAllTypedArrays(value) {
    /** @type {ReturnType<typeof tryAllTypedArrays>} */ var found = false;
    forEach(/** @type {Record<`\$${import('.').TypedArrayName}`, Getter>} */ cache, /** @type {(getter: Getter, name: `\$${import('.').TypedArrayName}`) => void} */ function(getter, typedArray) {
        if (!found) try {
            // @ts-expect-error a throw is fine here
            if ('$' + getter(value) === typedArray) found = /** @type {import('.').TypedArrayName} */ $slice(typedArray, 1);
        } catch (e) {}
    });
    return found;
};
/** @type {(value: object) => false | import('.').TypedArrayName} */ var trySlices = function tryAllSlices(value) {
    /** @type {ReturnType<typeof tryAllSlices>} */ var found = false;
    forEach(/** @type {Record<`\$${import('.').TypedArrayName}`, Getter>} */ cache, /** @type {(getter: Getter, name: `\$${import('.').TypedArrayName}`) => void} */ function(getter, name) {
        if (!found) try {
            // @ts-expect-error a throw is fine here
            getter(value);
            found = /** @type {import('.').TypedArrayName} */ $slice(name, 1);
        } catch (e) {}
    });
    return found;
};
/** @type {import('.')} */ module.exports = function whichTypedArray(value) {
    if (!value || typeof value !== 'object') return false;
    if (!hasToStringTag) {
        /** @type {string} */ var tag = $slice($toString(value), 8, -1);
        if ($indexOf(typedArrays, tag) > -1) return tag;
        if (tag !== 'Object') return false;
        // node < 0.6 hits here on real Typed Arrays
        return trySlices(value);
    }
    if (!gOPD) return null;
     // unknown engine
    return tryTypedArrays(value);
};

},{"2941d48f36957e3c":"1Sol9","beaf5502a5823cce":"kfela","e5d203a1b4c809f9":"bfo8D","c1f328b1ef67e936":"lAcs1","ce6b45c571ba4e3e":"eOTQB","4877134a9146c5d7":"jKlXf","9e7ef6c88184c56":"9LdQ9"}],"1Sol9":[function(require,module,exports,__globalThis) {
'use strict';
var isCallable = require("e50ebc24bbb25feb");
var toStr = Object.prototype.toString;
var hasOwnProperty = Object.prototype.hasOwnProperty;
/** @type {<This, A extends readonly unknown[]>(arr: A, iterator: (this: This | void, value: A[number], index: number, arr: A) => void, receiver: This | undefined) => void} */ var forEachArray = function forEachArray(array, iterator, receiver) {
    for(var i = 0, len = array.length; i < len; i++)if (hasOwnProperty.call(array, i)) {
        if (receiver == null) iterator(array[i], i, array);
        else iterator.call(receiver, array[i], i, array);
    }
};
/** @type {<This, S extends string>(string: S, iterator: (this: This | void, value: S[number], index: number, string: S) => void, receiver: This | undefined) => void} */ var forEachString = function forEachString(string, iterator, receiver) {
    for(var i = 0, len = string.length; i < len; i++)// no such thing as a sparse string.
    if (receiver == null) iterator(string.charAt(i), i, string);
    else iterator.call(receiver, string.charAt(i), i, string);
};
/** @type {<This, O>(obj: O, iterator: (this: This | void, value: O[keyof O], index: keyof O, obj: O) => void, receiver: This | undefined) => void} */ var forEachObject = function forEachObject(object, iterator, receiver) {
    for(var k in object)if (hasOwnProperty.call(object, k)) {
        if (receiver == null) iterator(object[k], k, object);
        else iterator.call(receiver, object[k], k, object);
    }
};
/** @type {(x: unknown) => x is readonly unknown[]} */ function isArray(x) {
    return toStr.call(x) === '[object Array]';
}
/** @type {import('.')._internal} */ module.exports = function forEach(list, iterator, thisArg) {
    if (!isCallable(iterator)) throw new TypeError('iterator must be a function');
    var receiver;
    if (arguments.length >= 3) receiver = thisArg;
    if (isArray(list)) forEachArray(list, iterator, receiver);
    else if (typeof list === 'string') forEachString(list, iterator, receiver);
    else forEachObject(list, iterator, receiver);
};

},{"e50ebc24bbb25feb":"9ocyk"}],"9ocyk":[function(require,module,exports,__globalThis) {
'use strict';
var fnToStr = Function.prototype.toString;
var reflectApply = typeof Reflect === 'object' && Reflect !== null && Reflect.apply;
var badArrayLike;
var isCallableMarker;
if (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') try {
    badArrayLike = Object.defineProperty({}, 'length', {
        get: function() {
            throw isCallableMarker;
        }
    });
    isCallableMarker = {};
    // eslint-disable-next-line no-throw-literal
    reflectApply(function() {
        throw 42;
    }, null, badArrayLike);
} catch (_) {
    if (_ !== isCallableMarker) reflectApply = null;
}
else reflectApply = null;
var constructorRegex = /^\s*class\b/;
var isES6ClassFn = function isES6ClassFunction(value) {
    try {
        var fnStr = fnToStr.call(value);
        return constructorRegex.test(fnStr);
    } catch (e) {
        return false; // not a function
    }
};
var tryFunctionObject = function tryFunctionToStr(value) {
    try {
        if (isES6ClassFn(value)) return false;
        fnToStr.call(value);
        return true;
    } catch (e) {
        return false;
    }
};
var toStr = Object.prototype.toString;
var objectClass = '[object Object]';
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var ddaClass = '[object HTMLAllCollection]'; // IE 11
var ddaClass2 = '[object HTML document.all class]';
var ddaClass3 = '[object HTMLCollection]'; // IE 9-10
var hasToStringTag = typeof Symbol === 'function' && !!Symbol.toStringTag; // better: use `has-tostringtag`
var isIE68 = !(0 in [
    , 
]); // eslint-disable-line no-sparse-arrays, comma-spacing
var isDDA = function isDocumentDotAll() {
    return false;
};
if (typeof document === 'object') {
    // Firefox 3 canonicalizes DDA to undefined when it's not accessed directly
    var all = document.all;
    if (toStr.call(all) === toStr.call(document.all)) isDDA = function isDocumentDotAll(value) {
        /* globals document: false */ // in IE 6-8, typeof document.all is "object" and it's truthy
        if ((isIE68 || !value) && (typeof value === 'undefined' || typeof value === 'object')) try {
            var str = toStr.call(value);
            return (str === ddaClass || str === ddaClass2 || str === ddaClass3 // opera 12.16
             || str === objectClass // IE 6-8
            ) && value('') == null; // eslint-disable-line eqeqeq
        } catch (e) {}
        return false;
    };
}
module.exports = reflectApply ? function isCallable(value) {
    if (isDDA(value)) return true;
    if (!value) return false;
    if (typeof value !== 'function' && typeof value !== 'object') return false;
    try {
        reflectApply(value, null, badArrayLike);
    } catch (e) {
        if (e !== isCallableMarker) return false;
    }
    return !isES6ClassFn(value) && tryFunctionObject(value);
} : function isCallable(value) {
    if (isDDA(value)) return true;
    if (!value) return false;
    if (typeof value !== 'function' && typeof value !== 'object') return false;
    if (hasToStringTag) return tryFunctionObject(value);
    if (isES6ClassFn(value)) return false;
    var strClass = toStr.call(value);
    if (strClass !== fnClass && strClass !== genClass && !/^\[object HTML/.test(strClass)) return false;
    return tryFunctionObject(value);
};

},{}],"kfela":[function(require,module,exports,__globalThis) {
var global = arguments[3];
'use strict';
var possibleNames = require("3021d1584ad62785");
var g = typeof globalThis === 'undefined' ? global : globalThis;
/** @type {import('.')} */ module.exports = function availableTypedArrays() {
    var /** @type {ReturnType<typeof availableTypedArrays>} */ out = [];
    for(var i = 0; i < possibleNames.length; i++)if (typeof g[possibleNames[i]] === 'function') // @ts-expect-error
    out[out.length] = possibleNames[i];
    return out;
};

},{"3021d1584ad62785":"2CagV"}],"2CagV":[function(require,module,exports,__globalThis) {
'use strict';
/** @type {import('.')} */ module.exports = [
    'Float16Array',
    'Float32Array',
    'Float64Array',
    'Int8Array',
    'Int16Array',
    'Int32Array',
    'Uint8Array',
    'Uint8ClampedArray',
    'Uint16Array',
    'Uint32Array',
    'BigInt64Array',
    'BigUint64Array'
];

},{}],"bfo8D":[function(require,module,exports,__globalThis) {
'use strict';
var setFunctionLength = require("f4b53071c102d4e");
var $defineProperty = require("3426ee59b177cf96");
var callBindBasic = require("48445b01a0d39287");
var applyBind = require("2ccc4afca1db8d27");
module.exports = function callBind(originalFunction) {
    var func = callBindBasic(arguments);
    var adjustedLength = originalFunction.length - (arguments.length - 1);
    return setFunctionLength(func, 1 + (adjustedLength > 0 ? adjustedLength : 0), true);
};
if ($defineProperty) $defineProperty(module.exports, 'apply', {
    value: applyBind
});
else module.exports.apply = applyBind;

},{"f4b53071c102d4e":"9IKoX","3426ee59b177cf96":"5SmXK","48445b01a0d39287":"eWvK7","2ccc4afca1db8d27":"9eptg"}],"9IKoX":[function(require,module,exports,__globalThis) {
'use strict';
var GetIntrinsic = require("8b1c9107ef1524f2");
var define = require("37dd1486f0f556ef");
var hasDescriptors = require("6a9d2b46085df706")();
var gOPD = require("2d412b0f532d1834");
var $TypeError = require("4352c534d27fe477");
var $floor = GetIntrinsic('%Math.floor%');
/** @type {import('.')} */ module.exports = function setFunctionLength(fn, length) {
    if (typeof fn !== 'function') throw new $TypeError('`fn` is not a function');
    if (typeof length !== 'number' || length < 0 || length > 0xFFFFFFFF || $floor(length) !== length) throw new $TypeError('`length` must be a positive 32-bit integer');
    var loose = arguments.length > 2 && !!arguments[2];
    var functionLengthIsConfigurable = true;
    var functionLengthIsWritable = true;
    if ('length' in fn && gOPD) {
        var desc = gOPD(fn, 'length');
        if (desc && !desc.configurable) functionLengthIsConfigurable = false;
        if (desc && !desc.writable) functionLengthIsWritable = false;
    }
    if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
        if (hasDescriptors) define(/** @type {Parameters<define>[0]} */ fn, 'length', length, true, true);
        else define(/** @type {Parameters<define>[0]} */ fn, 'length', length);
    }
    return fn;
};

},{"8b1c9107ef1524f2":"dZb05","37dd1486f0f556ef":"6cEff","6a9d2b46085df706":"esBLZ","2d412b0f532d1834":"eOTQB","4352c534d27fe477":"6oWLR"}],"6cEff":[function(require,module,exports,__globalThis) {
'use strict';
var $defineProperty = require("f17fd23367965521");
var $SyntaxError = require("50f12088ee0f6bb");
var $TypeError = require("45c79de2b2f9c949");
var gopd = require("3f9bd39335781ec7");
/** @type {import('.')} */ module.exports = function defineDataProperty(obj, property, value) {
    if (!obj || typeof obj !== 'object' && typeof obj !== 'function') throw new $TypeError('`obj` must be an object or a function`');
    if (typeof property !== 'string' && typeof property !== 'symbol') throw new $TypeError('`property` must be a string or a symbol`');
    if (arguments.length > 3 && typeof arguments[3] !== 'boolean' && arguments[3] !== null) throw new $TypeError('`nonEnumerable`, if provided, must be a boolean or null');
    if (arguments.length > 4 && typeof arguments[4] !== 'boolean' && arguments[4] !== null) throw new $TypeError('`nonWritable`, if provided, must be a boolean or null');
    if (arguments.length > 5 && typeof arguments[5] !== 'boolean' && arguments[5] !== null) throw new $TypeError('`nonConfigurable`, if provided, must be a boolean or null');
    if (arguments.length > 6 && typeof arguments[6] !== 'boolean') throw new $TypeError('`loose`, if provided, must be a boolean');
    var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
    var nonWritable = arguments.length > 4 ? arguments[4] : null;
    var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
    var loose = arguments.length > 6 ? arguments[6] : false;
    /* @type {false | TypedPropertyDescriptor<unknown>} */ var desc = !!gopd && gopd(obj, property);
    if ($defineProperty) $defineProperty(obj, property, {
        configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
        enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
        value: value,
        writable: nonWritable === null && desc ? desc.writable : !nonWritable
    });
    else if (loose || !nonEnumerable && !nonWritable && !nonConfigurable) // must fall back to [[Set]], and was not explicitly asked to make non-enumerable, non-writable, or non-configurable
    obj[property] = value; // eslint-disable-line no-param-reassign
    else throw new $SyntaxError('This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.');
};

},{"f17fd23367965521":"5SmXK","50f12088ee0f6bb":"8jeeH","45c79de2b2f9c949":"6oWLR","3f9bd39335781ec7":"eOTQB"}],"esBLZ":[function(require,module,exports,__globalThis) {
'use strict';
var $defineProperty = require("1c3b0ce871129f60");
var hasPropertyDescriptors = function hasPropertyDescriptors() {
    return !!$defineProperty;
};
hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
    // node v0.6 has a bug where array lengths can be Set but not Defined
    if (!$defineProperty) return null;
    try {
        return $defineProperty([], 'length', {
            value: 1
        }).length !== 1;
    } catch (e) {
        // In Firefox 4-22, defining length on an array throws an exception.
        return true;
    }
};
module.exports = hasPropertyDescriptors;

},{"1c3b0ce871129f60":"5SmXK"}],"9eptg":[function(require,module,exports,__globalThis) {
'use strict';
var bind = require("a42cbe56dcf9275");
var $apply = require("374f458abdeecf5a");
var actualApply = require("5dc0de3ccb73e5d2");
/** @type {import('./applyBind')} */ module.exports = function applyBind() {
    return actualApply(bind, $apply, arguments);
};

},{"a42cbe56dcf9275":"6J4ob","374f458abdeecf5a":"7xbND","5dc0de3ccb73e5d2":"ki0KW"}],"1ihkG":[function(require,module,exports,__globalThis) {
'use strict';
var whichTypedArray = require("ccf73e5f240c2b8");
/** @type {import('.')} */ module.exports = function isTypedArray(value) {
    return !!whichTypedArray(value);
};

},{"ccf73e5f240c2b8":"lVUO7"}],"inNNy":[function(require,module,exports,__globalThis) {
module.exports = function isBuffer(arg) {
    return arg && typeof arg === 'object' && typeof arg.copy === 'function' && typeof arg.fill === 'function' && typeof arg.readUInt8 === 'function';
};

},{}],"1dp7K":[function(require,module,exports,__globalThis) {
exports.lookup = function(obj, field) {
    if (!obj) return null;
    var chain = field.split(']').join('').split('[');
    for(var i = 0, len = chain.length; i < len; i++){
        var prop = obj[chain[i]];
        if (typeof prop === 'undefined') return null;
        if (typeof prop !== 'object') return prop;
        obj = prop;
    }
    return null;
};

},{}],"b76Dk":[function(require,module,exports,__globalThis) {
const crypto = require("45b3b038fa8175db");
module.exports = function pbkdf2(password, salt, options, callback) {
    crypto.pbkdf2(password, salt, options.iterations, options.keylen, options.digestAlgorithm, callback);
};

},{"45b3b038fa8175db":"hagNj"}],"aQDVO":[function(require,module,exports,__globalThis) {
const generaterr = require("e35dafd4455aa5ac");
const AuthenticationError = generaterr('AuthenticationError');
module.exports = {
    AuthenticationError,
    IncorrectUsernameError: generaterr('IncorrectUsernameError', null, {
        inherits: AuthenticationError
    }),
    IncorrectPasswordError: generaterr('IncorrectPasswordError', null, {
        inherits: AuthenticationError
    }),
    MissingUsernameError: generaterr('MissingUsernameError', null, {
        inherits: AuthenticationError
    }),
    MissingPasswordError: generaterr('MissingPasswordError', null, {
        inherits: AuthenticationError
    }),
    UserExistsError: generaterr('UserExistsError', null, {
        inherits: AuthenticationError
    }),
    NoSaltValueStoredError: generaterr('NoSaltValueStoredError', null, {
        inherits: AuthenticationError
    }),
    AttemptTooSoonError: generaterr('AttemptTooSoonError', null, {
        inherits: AuthenticationError
    }),
    TooManyAttemptsError: generaterr('TooManyAttemptsError', null, {
        inherits: AuthenticationError
    })
};

},{"e35dafd4455aa5ac":"isFaC"}],"isFaC":[function(require,module,exports,__globalThis) {
/* jshint expr: true */ var util = require("cd5b6d64cde52a6c");
module.exports = function(name, parameters, options) {
    options = options || {};
    options.captureStackTrace = options.captureStackTrace === undefined ? true : false;
    options.inherits = options.inherits || Error;
    var ctor = function() {
        if (!(this instanceof ctor)) {
            var constructorArgs = Array.prototype.slice.call(arguments);
            constructorArgs.unshift(ctor);
            return new (ctor.bind.apply(ctor, constructorArgs))();
        }
        options.inherits.call(this);
        if (options.captureStackTrace) Error.captureStackTrace && Error.captureStackTrace(this, arguments.callee);
        copy(parameters, this);
        var msg = arguments[0];
        if (msg) {
            var args = Array.prototype.slice.call(arguments);
            if (args.length > 1 && typeof args[args.length - 1] == 'object') {
                var instanceParams = args.pop();
                copy(instanceParams, this);
            }
            this.message = util.format.apply(util, args);
        }
        this.name = name;
    };
    util.inherits(ctor, options.inherits);
    return ctor;
};
function copy(from, to) {
    if (from) {
        for(var key in from)if (from.hasOwnProperty(key)) to[key] = from[key];
    }
    return to;
}

},{"cd5b6d64cde52a6c":"cxohQ"}],"jqnbV":[function(require,module,exports,__globalThis) {
var Buffer = require("e9244f615ac27762").Buffer;
const scmp = require("b495748e6a431de");
const pbkdf2 = require("e1171d53a7b20d82");
const errors = require("eac08c07717057bc");
// authenticate function needs refactoring - to avoid bugs we wrapped a bit dirty
module.exports = function(user, password, options, cb) {
    if (cb) return authenticate(user, password, options, cb);
    return new Promise((resolve, reject)=>{
        authenticate(user, password, options, (err, user, error)=>err ? reject(err) : resolve({
                user,
                error
            }));
    });
};
function authenticate(user, password, options, cb) {
    let promise = Promise.resolve();
    if (options.limitAttempts) {
        const attemptsInterval = Math.pow(options.interval, Math.log(user.get(options.attemptsField) + 1));
        const calculatedInterval = attemptsInterval < options.maxInterval ? attemptsInterval : options.maxInterval;
        if (Date.now() - user.get(options.lastLoginField) < calculatedInterval) {
            user.set(options.lastLoginField, Date.now());
            user.save().then(function() {
                return cb(null, false, new errors.AttemptTooSoonError(options.errorMessages.AttemptTooSoonError));
            }).catch(function(saveErr) {
                return cb(saveErr);
            });
            return;
        }
        if (user.get(options.attemptsField) >= options.maxAttempts) {
            if (options.unlockInterval && Date.now() - user.get(options.lastLoginField) > options.unlockInterval) {
                user.set(options.lastLoginField, Date.now());
                user.set(options.attemptsField, 0);
                promise = user.save();
            } else return cb(null, false, new errors.TooManyAttemptsError(options.errorMessages.TooManyAttemptsError));
        }
    }
    promise.then(function() {
        if (!user.get(options.saltField)) return cb(null, false, new errors.NoSaltValueStoredError(options.errorMessages.NoSaltValueStoredError));
        pbkdf2(password, user.get(options.saltField), options, function(err, hashBuffer) {
            if (err) return cb(err);
            if (scmp(hashBuffer, Buffer.from(user.get(options.hashField), options.encoding))) {
                if (options.limitAttempts) {
                    user.set(options.lastLoginField, Date.now());
                    user.set(options.attemptsField, 0);
                    user.save().then(function(user) {
                        return cb(null, user);
                    }).catch(function(saveErr) {
                        return cb(saveErr);
                    });
                } else return cb(null, user);
            } else {
                if (options.limitAttempts) {
                    user.set(options.lastLoginField, Date.now());
                    user.set(options.attemptsField, user.get(options.attemptsField) + 1);
                    user.save().then(function() {
                        if (user.get(options.attemptsField) >= options.maxAttempts) return cb(null, false, new errors.TooManyAttemptsError(options.errorMessages.TooManyAttemptsError));
                        else return cb(null, false, new errors.IncorrectPasswordError(options.errorMessages.IncorrectPasswordError));
                    }).catch(function(saveErr) {
                        return cb(saveErr);
                    });
                } else return cb(null, false, new errors.IncorrectPasswordError(options.errorMessages.IncorrectPasswordError));
            }
        });
    });
}

},{"e9244f615ac27762":"fCgem","b495748e6a431de":"2o6PJ","e1171d53a7b20d82":"b76Dk","eac08c07717057bc":"aQDVO"}],"2o6PJ":[function(require,module,exports,__globalThis) {
var Buffer = require("c3cfb098a592e492").Buffer;
'use strict';
const crypto = require("6eb20ac9320fcee2");
const scmpCompare = require("6f9fd592a7e5373a");
/**
 * Does a constant-time Buffer comparison by not short-circuiting
 * on first sign of non-equivalency.
 *
 * @param {Buffer} a The first Buffer to be compared against the second
 * @param {Buffer} b The second Buffer to be compared against the first
 * @return {Boolean}
 */ module.exports = function scmp(a, b) {
    // check that both inputs are buffers
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new Error('Both scmp args must be Buffers');
    // return early here if buffer lengths are not equal since timingSafeEqual
    // will throw if buffer lengths are not equal
    if (a.length !== b.length) return false;
    // use crypto.timingSafeEqual if available (since Node.js v6.6.0),
    // otherwise use our own scmp-internal function.
    if (crypto.timingSafeEqual) return crypto.timingSafeEqual(a, b);
    return scmpCompare(a, b);
};

},{"c3cfb098a592e492":"fCgem","6eb20ac9320fcee2":"hagNj","6f9fd592a7e5373a":"5mvQP"}],"5mvQP":[function(require,module,exports,__globalThis) {
'use strict';
module.exports = function scmpCompare(a, b) {
    const len = a.length;
    let result = 0;
    for(let i = 0; i < len; ++i)result |= a[i] ^ b[i];
    return result === 0;
};

},{}]},["80cCk","1SICI"], "1SICI", "parcelRequire94c2")

//# sourceMappingURL=main.js.map
