stages:
  - build
  - deploy

variables:
  # Gemeinsame Variablen
  DOCKER_CONFIG: "/kaniko/.docker"
  FRONTEND_IMAGE: "${CI_REGISTRY_IMAGE}/frontend:${CI_COMMIT_SHORT_SHA}"
  BACKEND_IMAGE: "${CI_REGISTRY_IMAGE}/backend:${CI_COMMIT_SHORT_SHA}"

cache: # Cache f√ºr node_modules
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - frontend/node_modules/
    - backend/node_modules/

build_frontend:
  stage: build
  image: node:22-alpine
  script:
    - cd frontend
    - npm install --frozen-lockfile
    - npm run build
  artifacts:
    paths:
      - frontend/prod/ 
    expire_in: 1 hour

build_backend:
  stage: build
  image: node:22-alpine
  script:
    - cd backend
    - npm install --production --frozen-lockfile
  artifacts:
    paths:
      - backend/
    expire_in: 1 hour

deploy_frontend:
  stage: deploy
  image: gcr.io/kaniko-project/executor:debug
  needs: ["build_frontend"]
  script:
    - echo "Building Frontend-Image: ${FRONTEND_IMAGE}"
    - /kaniko/executor
        --context "${CI_PROJECT_DIR}/frontend"
        --dockerfile "${CI_PROJECT_DIR}/frontend/Dockerfile"
        --destination "${FRONTEND_IMAGE}"
        --cache=true

deploy_backend:
  stage: deploy
  image: gcr.io/kaniko-project/executor:debug
  needs: ["build_backend"]
  script:
    - echo "Building Backend-Image: ${BACKEND_IMAGE}"
    - /kaniko/executor
        --context "${CI_PROJECT_DIR}/backend"
        --dockerfile "${CI_PROJECT_DIR}/backend/Dockerfile"
        --destination "${BACKEND_IMAGE}"
        --build-arg NODE_ENV=production
        --cache=true