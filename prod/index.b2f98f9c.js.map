{"mappings":"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","sources":["<anon>","src/js/main.js"],"sourcesContent":["\"use strict\";\nvar userLang = navigator.language || navigator.userLanguage;\n//Funktionen beim Aufruf der Seite um die Inhalte zu laden\ndocument.addEventListener('DOMContentLoaded', function() {\n    console.log(\"onLoad Function\");\n    fetchRecommendedPodcasts();\n    const resultsDiv = document.getElementById('podcast-list');\n    resultsDiv.innerHTML = '<p class=\"loading-message\">Empfohlene Podcast werden geladen...</p>';\n    getCategories();\n    const searchInput = document.getElementById('search-title');\n    if (searchInput) searchInput.addEventListener('keydown', function(event) {\n        if (event.key === 'Enter') searchPodcasts();\n    });\n    else console.error(\"Search input field not found\");\n    //Wenn man keine Favoriten hat, wird das Panel nicht angezeigt --> wirkt cleaner\n    let favorites = JSON.parse(localStorage.getItem('favorites')) || [];\n    console.log(favorites);\n    if (favorites.length === 0) document.getElementById(\"newestEpisodes\").innerHTML = '';\n    else favorites.forEach((element)=>{\n        insertFavouriteEpisodes(element);\n    });\n});\n//Einfügen der neusten Episoden der Lieblingspodcasts\nasync function insertFavouriteEpisodes(id) {\n    var div = document.getElementById(\"fav-div\");\n    let url = new URL('https://api.fyyd.de/0.2/podcast/episodes');\n    url.searchParams.append(\"podcast_id\", id);\n    url.searchParams.append(\"count\", 1);\n    console.log('URL:', url.href);\n    try {\n        const response = await fetch(url);\n        const data = await response.json();\n        console.log(data.data.episodes.length);\n        const podcastDiv = document.createElement('div');\n        const podcastImage = document.createElement('img');\n        const podcastTitle = document.createElement('h4');\n        const link = document.createElement(\"a\");\n        link.href = `podcastDash.html?id=${encodeURIComponent(id)}`;\n        link.target = \"_blank\";\n        podcastTitle.innerHTML = limitToXWords(data.data.episodes[0].title, 6);\n        podcastImage.src = data.data.layoutImageURL;\n        podcastDiv.appendChild(podcastImage);\n        podcastDiv.appendChild(podcastTitle);\n        link.appendChild(podcastDiv);\n        div.appendChild(link);\n    } catch (error) {\n        console.error('Error fetching recommended podcasts:', error);\n        document.getElementById('podcast-list').innerHTML = '<p class=\"loading-message\">Fehler beim Laden empfohlener Podcasts. Bitte probiere es sp\\xe4ter nochmal.</p>';\n    }\n}\n//Suchfunktion die nach dem eingegebenen Titel sucht\nfunction searchPodcasts() {\n    const searchTitle = document.getElementById('search-title').value;\n    const resultsDiv = document.getElementById('search');\n    resultsDiv.innerHTML = '<p class=\"loading-message\">Suche l\\xe4uft...';\n    fetchPodcasts(searchTitle, 0);\n}\n//Holt die benötigte Anfrage von der API und nutzt das Page system um dynamisch nachzuladen\nasync function fetchPodcasts(title, page) {\n    showLoadingAnimation();\n    let url = new URL('https://api.fyyd.de/0.2/search/podcast/');\n    url.searchParams.append('title', title);\n    url.searchParams.append('page', page);\n    console.log('URL:', url.href);\n    const resultsDiv = document.getElementById('search');\n    if (page === 0) resultsDiv.innerHTML = '<p class=\"loading-message suche\">Suche l\\xe4uft...</p>';\n    const existingMoreBtn = document.getElementById('more-btn-search');\n    if (existingMoreBtn) existingMoreBtn.parentNode.removeChild(existingMoreBtn);\n    const loadingMessage = document.createElement('p');\n    if (page != 0) loadingMessage.textContent = 'Ergebnisse werden geladen...';\n    loadingMessage.setAttribute('id', 'loading-message');\n    resultsDiv.appendChild(loadingMessage);\n    try {\n        const response = await fetch(url);\n        const data = await response.json();\n        insertSearchResults(data, page);\n        // Remove the loading message\n        const loadingMessage = document.getElementById('loading-message');\n        if (loadingMessage) loadingMessage.remove();\n        // Add \"more\" button if there are more results\n        if (data.data.length > 0) {\n            // Create the button element with Material Icon\n            const moreBtn = document.createElement('button');\n            moreBtn.className = \"more-button\";\n            moreBtn.style = \"border: none; background: white;\";\n            moreBtn.setAttribute(\"id\", \"more-btn-search\"); // ID for the button\n            moreBtn.addEventListener('click', function() {\n                console.log(\"moreBtn\");\n                fetchPodcasts(title, page + 1);\n            });\n            // Create the icon element\n            const icon = document.createElement('img');\n            icon.src = \"images/arrow_right.png\";\n            icon.style = \"height: 90px; margin-bottom: 125px; padding-left: 40px\";\n            // Append the icon to the button\n            moreBtn.appendChild(icon);\n            // Append the button to the container\n            resultsDiv.appendChild(moreBtn);\n        } else resultsDiv.innerHTML = 'Keine weiteren Ergebnisse.';\n    } catch (error) {\n        console.error('Error fetching podcasts:', error);\n        resultsDiv.innerHTML = '<p class=\"loading-message\">Fehler beim Laden von Podcasts. Bitte probiere es sp\\xe4ter nochmal.</p>';\n    }\n    hideLoadingAnimation();\n}\n//Holt aus allen Podcast eine zufällige Seite\nasync function fetchRecommendedPodcasts() {\n    showLoadingAnimation();\n    let url = new URL('https://api.fyyd.de/0.2/podcasts/');\n    url.searchParams.append('page', getRandomInt(1370));\n    url.searchParams.append('count', 30);\n    console.log('URL:', url.href);\n    try {\n        const response = await fetch(url);\n        const data = await response.json();\n        insertRecommendedResults(data);\n    } catch (error) {\n        console.error('Error fetching recommended podcasts:', error);\n        document.getElementById('podcast-list').innerHTML = '<p class=\"loading-message\">Fehler beim Laden empfohlener Podcasts. Bitte probiere es sp\\xe4ter nochmal.</p>';\n    }\n    hideLoadingAnimation();\n}\n//Zufallsfunktion für Recommended gibt eine Zufallszahl von 0 bis max zurück\nfunction getRandomInt(max) {\n    return Math.floor(Math.random() * max);\n}\n//Einfügen der Zufälligen Podcast (Empfohlen sind hier einfach zufällige Podcast, sodass jeder Podcast die Chance hat gesehen zu werden)\nfunction insertRecommendedResults(data) {\n    const resultsDiv = document.getElementById('podcast-list');\n    resultsDiv.innerHTML = '';\n    data.data.forEach((podcast)=>{\n        const podcastDiv = document.createElement('div');\n        const titleDiv = document.createElement('h4');\n        const descriptionDiv = document.createElement('p');\n        const podcastImage = document.createElement('img');\n        const podcastLink = document.createElement('a');\n        titleDiv.textContent = podcast.title;\n        podcastImage.src = podcast.layoutImageURL;\n        podcastImage.className = 'img';\n        podcastLink.appendChild(podcastImage);\n        podcastLink.appendChild(titleDiv);\n        podcastLink.href = `podcastDash.html?id=${encodeURIComponent(podcast.id)}`;\n        //podcastLink.target = \"_blank\"; besser fürs Abspielen im Hintergrund aber nervig, da zu viele Tabs\n        podcastDiv.appendChild(podcastLink);\n        resultsDiv.appendChild(podcastDiv);\n    });\n}\n//Einfügen der suche\nfunction insertSearchResults(data, page) {\n    const resultsDiv = document.getElementById('search');\n    // Wenn es sich um die erste Seite handelt, wird das div geleert\n    if (page === 0) resultsDiv.innerHTML = '';\n    data.data.forEach((podcast)=>{\n        const podcastDiv = document.createElement('div');\n        const titleDiv = document.createElement('h4');\n        const podcastImage = document.createElement('img');\n        const podcastLink = document.createElement('a');\n        titleDiv.textContent = podcast.title;\n        podcastImage.src = podcast.layoutImageURL;\n        podcastImage.className = 'img'; // Added class for image styling\n        podcastLink.appendChild(podcastImage);\n        podcastLink.appendChild(titleDiv);\n        podcastLink.href = `podcastDash.html?id=${encodeURIComponent(podcast.id)}`;\n        podcastLink.target = \"_blank\";\n        podcastDiv.appendChild(podcastLink);\n        resultsDiv.appendChild(podcastDiv);\n    });\n}\n//Limitiert die Wörter für die Podcastfolgen, da diese zu lang für das Grid war, es werden nicht mehr als x Wörter zurückgegeben\nfunction limitToXWords(input, x) {\n    const words = input.split(\" \");\n    if (words.length > x) return words.slice(0, x).join(\" \");\n    return input;\n}\n//laden der Kategorien von der API\nasync function getCategories() {\n    let url = new URL('https://api.fyyd.de/0.2/categories');\n    console.log('URL:', url.href);\n    try {\n        const response = await fetch(url);\n        const data = await response.json();\n        const div = document.getElementById(\"categoryContainer\");\n        div.innerHTML = '';\n        const catBtndiv = document.createElement('div');\n        const catCount = data.data.length;\n        var forCounter = 0;\n        var randomCat = Math.floor(Math.random() * catCount + 1);\n        console.log(randomCat);\n        data.data.forEach((element)=>{\n            const catBtn = document.createElement('input');\n            catBtn.setAttribute(\"type\", \"button\");\n            catBtn.setAttribute(\"value\", element.name_de);\n            catBtn.className = 'category-button';\n            forCounter++;\n            if (forCounter === randomCat) {\n                console.log(\"fetching\" + element.name_de);\n                fetchCategoryPodcasts(element.id, element.name_de, 0);\n            }\n            catBtn.addEventListener('click', function() {\n                fetchCategoryPodcasts(element.id, element.name_de, 0);\n            });\n            catBtndiv.appendChild(catBtn);\n        });\n        div.appendChild(catBtndiv);\n    } catch (error) {\n        console.error('Error fetching categories:', error);\n        document.getElementById(\"categoryContainer\").innerHTML = '<p class=\"loading-message\">Fehler beim Laden von Kategorien. Bitte probiere es sp\\xe4ter nochmal.</p>';\n    }\n}\n//Fetchen der jeweiligen Kategorie, dabei nutzen wir auch hier das Page System zum nachladen um mehr Podcasts anzuzeigen\nasync function fetchCategoryPodcasts(id, name, page) {\n    showLoadingAnimation();\n    let url = new URL('https://api.fyyd.de/0.2/category');\n    url.searchParams.append('category_id', id);\n    url.searchParams.append('page', page);\n    console.log('URL:', url.href);\n    document.getElementById(\"category-search-monitor\").innerHTML = name;\n    const resultsDiv = document.getElementById(\"categoryResult\");\n    if (page === 0) resultsDiv.innerHTML = '<p class=\"loading-message\">Inhalte der Kategorie ' + name + ' werden geladen...</p>';\n    else {\n        const existingMoreBtn = document.getElementById('more-btn');\n        if (existingMoreBtn) resultsDiv.removeChild(existingMoreBtn);\n        const loadingMessage = document.createElement('p');\n        loadingMessage.textContent = \"Weitere Podcasts werden geladen...\";\n        loadingMessage.setAttribute(\"id\", \"loading-message\");\n        resultsDiv.appendChild(loadingMessage);\n    }\n    try {\n        const response = await fetch(url);\n        const data = await response.json();\n        insertCategorySearchResults(data, page === 0);\n        const loadingMessage = document.getElementById('loading-message');\n        if (loadingMessage) resultsDiv.removeChild(loadingMessage);\n        //Erstellen des More-Buttons am Ende des Grids um mehr anzuzeigen\n        const moreBtn = document.createElement('button');\n        moreBtn.setAttribute(\"type\", \"button\");\n        moreBtn.setAttribute(\"id\", \"more-btn\");\n        moreBtn.style = \"border: none; background: white;\";\n        moreBtn.addEventListener('click', function() {\n            console.log(\"moreBtn\");\n            fetchCategoryPodcasts(id, name, page + 1);\n        });\n        const icon = document.createElement('img');\n        icon.src = \"images/arrow_right.png\";\n        icon.style.height = \"90px\";\n        icon.style.marginBottom = \"140px\";\n        icon.style.paddingLeft = \"40px\";\n        moreBtn.appendChild(icon);\n        resultsDiv.appendChild(moreBtn);\n    } catch (error) {\n        console.error('Error fetching category podcasts:', error);\n        document.getElementById(\"categoryResult\").innerHTML = '<p class=\"loading-message\">Fehler beim Laden von Podcasts. Bitte probiere es sp\\xe4ter nochmal.</p>';\n    }\n    hideLoadingAnimation();\n}\n//Einfügen der Ergebnis bei der Kategorie-Suche, isInitialLoad ist hier, dass der Inhalt bereits geladen wurde, dann würde das Div geleert werden\nfunction insertCategorySearchResults(data, isInitialLoad) {\n    const resultsDiv = document.getElementById(\"categoryResult\");\n    if (isInitialLoad) resultsDiv.innerHTML = '';\n    data.data.podcasts.forEach((podcasts)=>{\n        const podcastDiv = document.createElement('div');\n        const titleDiv = document.createElement('h4');\n        const podcastImage = document.createElement('img');\n        const podcastLink = document.createElement('a');\n        titleDiv.textContent = podcasts.title;\n        podcastImage.src = podcasts.layoutImageURL;\n        podcastImage.className = 'img';\n        podcastLink.appendChild(podcastImage);\n        podcastLink.appendChild(titleDiv);\n        podcastLink.href = `podcastDash.html?id=${encodeURIComponent(podcasts.id)}&title=${encodeURIComponent(podcasts.title)}&description=${encodeURIComponent(podcasts.description)}&image=${encodeURIComponent(podcasts.layoutImageURL)}`;\n        podcastLink.target = \"_blank\";\n        podcastDiv.appendChild(podcastLink);\n        resultsDiv.appendChild(podcastDiv);\n    });\n}\n//Funktionen für die Animation\nfunction showLoadingAnimation() {\n    const loadingAnimation = document.getElementById('loadingAnimation');\n    if (loadingAnimation) {\n        loadingAnimation.style.animationPlayState = 'running'; // Start the animation\n        loadingAnimation.style.display = 'flex'; // Ensure it's visible\n    } else console.error(\"Loading animation element not found.\");\n}\nfunction hideLoadingAnimation() {\n    const loadingAnimation = document.getElementById('loadingAnimation');\n    if (loadingAnimation) loadingAnimation.style.animationPlayState = 'paused'; // Pause the animation\n    else console.error(\"Loading animation element not found.\");\n}\n\n//# sourceMappingURL=index.b2f98f9c.js.map\n","\"use strict\";\r\n\r\nvar userLang = navigator.language || navigator.userLanguage;\r\n\r\n//Funktionen beim Aufruf der Seite um die Inhalte zu laden\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n    console.log(\"onLoad Function\");\r\n    fetchRecommendedPodcasts();\r\n    const resultsDiv = document.getElementById('podcast-list');\r\n    resultsDiv.innerHTML = '<p class=\"loading-message\">Empfohlene Podcast werden geladen...</p>';\r\n    getCategories();\r\n    \r\n    const searchInput = document.getElementById('search-title');\r\n    if (searchInput) {\r\n        searchInput.addEventListener('keydown', function(event) {\r\n            if (event.key === 'Enter') {\r\n                searchPodcasts();\r\n            }\r\n        });\r\n    } else {\r\n        console.error(\"Search input field not found\");\r\n    }\r\n    //Wenn man keine Favoriten hat, wird das Panel nicht angezeigt --> wirkt cleaner\r\n    let favorites = JSON.parse(localStorage.getItem('favorites')) || [];\r\n    console.log(favorites);\r\n    if (favorites.length === 0) {\r\n    document.getElementById(\"newestEpisodes\").innerHTML = '';\r\n    } else {\r\n    favorites.forEach(element => {\r\n        insertFavouriteEpisodes(element);\r\n    });\r\n}\r\n\r\n});\r\n\r\n//Einfügen der neusten Episoden der Lieblingspodcasts\r\nasync function insertFavouriteEpisodes(id){\r\n    var div = document.getElementById(\"fav-div\");\r\n    let url = new URL('https://api.fyyd.de/0.2/podcast/episodes');\r\n    url.searchParams.append(\"podcast_id\", id);\r\n    url.searchParams.append(\"count\", 1);\r\n    console.log('URL:', url.href);\r\n    try {\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        console.log(data.data.episodes.length);\r\n\r\n\r\n        const podcastDiv = document.createElement('div');\r\n        const podcastImage = document.createElement('img');\r\n        const podcastTitle = document.createElement('h4');\r\n        const link = document.createElement(\"a\");\r\n        link.href = `podcastDash.html?id=${encodeURIComponent(id)}`;\r\n        link.target = \"_blank\";\r\n        podcastTitle.innerHTML = limitToXWords( data.data.episodes[0].title,6);\r\n        podcastImage.src = data.data.layoutImageURL;\r\n        podcastDiv.appendChild(podcastImage);\r\n        podcastDiv.appendChild(podcastTitle);\r\n        link.appendChild(podcastDiv)\r\n        div.appendChild(link);\r\n        \r\n    }\r\n    catch (error) {\r\n        console.error('Error fetching recommended podcasts:', error);\r\n        document.getElementById('podcast-list').innerHTML = '<p class=\"loading-message\">Fehler beim Laden empfohlener Podcasts. Bitte probiere es später nochmal.</p>';\r\n    }\r\n}\r\n\r\n//Suchfunktion die nach dem eingegebenen Titel sucht\r\nfunction searchPodcasts() {\r\n    const searchTitle = document.getElementById('search-title').value;\r\n    const resultsDiv = document.getElementById('search');\r\n    resultsDiv.innerHTML = '<p class=\"loading-message\">Suche läuft...';\r\n    fetchPodcasts(searchTitle,0);\r\n}\r\n\r\n//Holt die benötigte Anfrage von der API und nutzt das Page system um dynamisch nachzuladen\r\nasync function fetchPodcasts(title, page) {\r\n    showLoadingAnimation();\r\n    let url = new URL('https://api.fyyd.de/0.2/search/podcast/');\r\n    url.searchParams.append('title', title);\r\n    url.searchParams.append('page', page);\r\n    console.log('URL:', url.href);\r\n    \r\n    const resultsDiv = document.getElementById('search');\r\n\r\n    if (page === 0) {\r\n        resultsDiv.innerHTML = '<p class=\"loading-message suche\">Suche läuft...</p>';\r\n    }\r\n    const existingMoreBtn = document.getElementById('more-btn-search');\r\n    if (existingMoreBtn) {\r\n        existingMoreBtn.parentNode.removeChild(existingMoreBtn);\r\n    }\r\n    const loadingMessage = document.createElement('p');\r\n    if(page != 0){\r\n        loadingMessage.textContent = 'Ergebnisse werden geladen...';\r\n    }\r\n    \r\n    loadingMessage.setAttribute('id', 'loading-message');\r\n    resultsDiv.appendChild(loadingMessage);\r\n\r\n    try {\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        insertSearchResults(data, page);\r\n\r\n        // Remove the loading message\r\n        const loadingMessage = document.getElementById('loading-message');\r\n        if (loadingMessage) {\r\n            loadingMessage.remove();\r\n        }\r\n\r\n        // Add \"more\" button if there are more results\r\n        if (data.data.length > 0) {\r\n            // Create the button element with Material Icon\r\n            const moreBtn = document.createElement('button');\r\n            moreBtn.className = \"more-button\";\r\n            moreBtn.style = \"border: none; background: white;\"\r\n            moreBtn.setAttribute(\"id\", \"more-btn-search\"); // ID for the button\r\n            moreBtn.addEventListener('click', function () {\r\n                console.log(\"moreBtn\");\r\n                fetchPodcasts(title, page + 1);\r\n            });\r\n\r\n            // Create the icon element\r\n            const icon = document.createElement('img');\r\n            icon.src = \"images/arrow_right.png\";\r\n            icon.style = \"height: 90px; margin-bottom: 125px; padding-left: 40px\"\r\n            // Append the icon to the button\r\n            moreBtn.appendChild(icon);\r\n\r\n            // Append the button to the container\r\n            resultsDiv.appendChild(moreBtn);\r\n        } else {\r\n            resultsDiv.innerHTML = 'Keine weiteren Ergebnisse.';\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error('Error fetching podcasts:', error);\r\n        resultsDiv.innerHTML = '<p class=\"loading-message\">Fehler beim Laden von Podcasts. Bitte probiere es später nochmal.</p>';\r\n    }\r\n    hideLoadingAnimation();\r\n\r\n}\r\n\r\n//Holt aus allen Podcast eine zufällige Seite\r\nasync function fetchRecommendedPodcasts() {\r\n    showLoadingAnimation();\r\n    let url = new URL('https://api.fyyd.de/0.2/podcasts/');\r\n    url.searchParams.append('page',getRandomInt(1370));\r\n    url.searchParams.append('count',30);\r\n    console.log('URL:', url.href);\r\n    try {\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        insertRecommendedResults(data);\r\n    } catch (error) {\r\n        console.error('Error fetching recommended podcasts:', error);\r\n        document.getElementById('podcast-list').innerHTML = '<p class=\"loading-message\">Fehler beim Laden empfohlener Podcasts. Bitte probiere es später nochmal.</p>';\r\n\r\n    }\r\n    hideLoadingAnimation();\r\n}\r\n//Zufallsfunktion für Recommended gibt eine Zufallszahl von 0 bis max zurück\r\nfunction getRandomInt(max){\r\n    return Math.floor(Math.random() * max);\r\n}\r\n\r\n//Einfügen der Zufälligen Podcast (Empfohlen sind hier einfach zufällige Podcast, sodass jeder Podcast die Chance hat gesehen zu werden)\r\nfunction insertRecommendedResults(data) {\r\n    const resultsDiv = document.getElementById('podcast-list');\r\n    resultsDiv.innerHTML = '';\r\n    data.data.forEach(podcast => {\r\n        const podcastDiv = document.createElement('div');\r\n        const titleDiv = document.createElement('h4');\r\n        const descriptionDiv = document.createElement('p');\r\n        const podcastImage = document.createElement('img');\r\n        const podcastLink = document.createElement('a');\r\n        titleDiv.textContent = podcast.title;\r\n        podcastImage.src = podcast.layoutImageURL;\r\n        podcastImage.className = 'img';\r\n        podcastLink.appendChild(podcastImage);\r\n        podcastLink.appendChild(titleDiv);\r\n        podcastLink.href = `podcastDash.html?id=${encodeURIComponent(podcast.id)}`;\r\n        //podcastLink.target = \"_blank\"; besser fürs Abspielen im Hintergrund aber nervig, da zu viele Tabs\r\n        podcastDiv.appendChild(podcastLink);\r\n        resultsDiv.appendChild(podcastDiv);\r\n    });\r\n}\r\n\r\n//Einfügen der suche\r\nfunction insertSearchResults(data, page) {\r\n    const resultsDiv = document.getElementById('search');\r\n    // Wenn es sich um die erste Seite handelt, wird das div geleert\r\n    if (page === 0) {\r\n        resultsDiv.innerHTML = '';\r\n    }\r\n\r\n    data.data.forEach(podcast => {\r\n        const podcastDiv = document.createElement('div');\r\n        const titleDiv = document.createElement('h4');\r\n        const podcastImage = document.createElement('img');\r\n        const podcastLink = document.createElement('a');\r\n\r\n        titleDiv.textContent = podcast.title;\r\n        podcastImage.src = podcast.layoutImageURL;\r\n        podcastImage.className = 'img'; // Added class for image styling\r\n\r\n        podcastLink.appendChild(podcastImage);\r\n        podcastLink.appendChild(titleDiv);\r\n\r\n        podcastLink.href = `podcastDash.html?id=${encodeURIComponent(podcast.id)}`;\r\n        podcastLink.target = \"_blank\";\r\n\r\n        podcastDiv.appendChild(podcastLink);\r\n\r\n        resultsDiv.appendChild(podcastDiv);\r\n    });\r\n}\r\n\r\n//Limitiert die Wörter für die Podcastfolgen, da diese zu lang für das Grid war, es werden nicht mehr als x Wörter zurückgegeben\r\nfunction limitToXWords(input,x) {\r\n    const words = input.split(\" \");\r\n    if (words.length > x) {\r\n      return words.slice(0, x).join(\" \");\r\n    }\r\n    return input;\r\n  }\r\n\r\n//laden der Kategorien von der API\r\nasync function getCategories() {\r\n    let url = new URL('https://api.fyyd.de/0.2/categories');\r\n    console.log('URL:', url.href);\r\n    try {\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        const div = document.getElementById(\"categoryContainer\");\r\n        div.innerHTML = '';\r\n        const catBtndiv = document.createElement('div');\r\n        const catCount = data.data.length;\r\n        var forCounter = 0;\r\n        var randomCat = Math.floor(Math.random()*catCount+1)\r\n        console.log(randomCat);\r\n        data.data.forEach(element => {\r\n            const catBtn = document.createElement('input');\r\n            catBtn.setAttribute(\"type\", \"button\");\r\n            catBtn.setAttribute(\"value\", element.name_de);\r\n            catBtn.className = 'category-button';\r\n            forCounter++;\r\n            if(forCounter === randomCat)\r\n                {\r\n                    console.log(\"fetching\" + element.name_de);\r\n                    fetchCategoryPodcasts(element.id,element.name_de,0)\r\n                }\r\n            catBtn.addEventListener('click', function() {\r\n                fetchCategoryPodcasts(element.id,element.name_de,0);\r\n            });\r\n\r\n            catBtndiv.appendChild(catBtn);\r\n            \r\n        });\r\n        div.appendChild(catBtndiv);\r\n    } catch (error) {\r\n        console.error('Error fetching categories:', error);\r\n        document.getElementById(\"categoryContainer\").innerHTML = '<p class=\"loading-message\">Fehler beim Laden von Kategorien. Bitte probiere es später nochmal.</p>';\r\n    }\r\n}\r\n//Fetchen der jeweiligen Kategorie, dabei nutzen wir auch hier das Page System zum nachladen um mehr Podcasts anzuzeigen\r\nasync function fetchCategoryPodcasts(id, name, page) {\r\n    showLoadingAnimation();\r\n    let url = new URL('https://api.fyyd.de/0.2/category');\r\n    url.searchParams.append('category_id', id);\r\n    url.searchParams.append('page', page);\r\n    console.log('URL:', url.href);\r\n    document.getElementById(\"category-search-monitor\").innerHTML = name\r\n\r\n    const resultsDiv = document.getElementById(\"categoryResult\");\r\n\r\n    if (page === 0) {\r\n        resultsDiv.innerHTML = '<p class=\"loading-message\">Inhalte der Kategorie ' + name + ' werden geladen...</p>';\r\n    } else {\r\n        const existingMoreBtn = document.getElementById('more-btn');\r\n        if (existingMoreBtn) {\r\n            resultsDiv.removeChild(existingMoreBtn);\r\n        }\r\n        const loadingMessage = document.createElement('p');\r\n        loadingMessage.textContent = \"Weitere Podcasts werden geladen...\";\r\n        loadingMessage.setAttribute(\"id\", \"loading-message\");\r\n        resultsDiv.appendChild(loadingMessage);\r\n    }\r\n\r\n    try {\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        insertCategorySearchResults(data, page === 0);\r\n        const loadingMessage = document.getElementById('loading-message');\r\n        if (loadingMessage) {\r\n            resultsDiv.removeChild(loadingMessage);\r\n        }\r\n//Erstellen des More-Buttons am Ende des Grids um mehr anzuzeigen\r\nconst moreBtn = document.createElement('button'); \r\nmoreBtn.setAttribute(\"type\", \"button\");\r\nmoreBtn.setAttribute(\"id\", \"more-btn\");\r\nmoreBtn.style = \"border: none; background: white;\"\r\nmoreBtn.addEventListener('click', function () {\r\n    console.log(\"moreBtn\");\r\n    fetchCategoryPodcasts(id, name, page + 1);\r\n});\r\n\r\nconst icon = document.createElement('img');\r\nicon.src = \"images/arrow_right.png\";\r\nicon.style.height = \"90px\";\r\nicon.style.marginBottom = \"140px\";\r\nicon.style.paddingLeft = \"40px\";\r\nmoreBtn.appendChild(icon);\r\nresultsDiv.appendChild(moreBtn);\r\n    } catch (error) {\r\n        console.error('Error fetching category podcasts:', error);\r\n        document.getElementById(\"categoryResult\").innerHTML = '<p class=\"loading-message\">Fehler beim Laden von Podcasts. Bitte probiere es später nochmal.</p>';\r\n    }\r\n    hideLoadingAnimation();\r\n}\r\n\r\n//Einfügen der Ergebnis bei der Kategorie-Suche, isInitialLoad ist hier, dass der Inhalt bereits geladen wurde, dann würde das Div geleert werden\r\nfunction insertCategorySearchResults(data, isInitialLoad) {\r\n    const resultsDiv = document.getElementById(\"categoryResult\");\r\n\r\n    if (isInitialLoad) {\r\n        resultsDiv.innerHTML = '';\r\n    }\r\n\r\n    data.data.podcasts.forEach(podcasts => {\r\n        const podcastDiv = document.createElement('div');\r\n        const titleDiv = document.createElement('h4');\r\n        const podcastImage = document.createElement('img');\r\n        const podcastLink = document.createElement('a');\r\n\r\n        titleDiv.textContent = podcasts.title;\r\n        podcastImage.src = podcasts.layoutImageURL;\r\n        podcastImage.className = 'img';\r\n\r\n        podcastLink.appendChild(podcastImage);\r\n        podcastLink.appendChild(titleDiv);\r\n\r\n        podcastLink.href = `podcastDash.html?id=${encodeURIComponent(podcasts.id)}&title=${encodeURIComponent(podcasts.title)}&description=${encodeURIComponent(podcasts.description)}&image=${encodeURIComponent(podcasts.layoutImageURL)}`;\r\n        podcastLink.target = \"_blank\";\r\n        podcastDiv.appendChild(podcastLink);\r\n\r\n        resultsDiv.appendChild(podcastDiv);\r\n    });\r\n}\r\n\r\n//Funktionen für die Animation\r\nfunction showLoadingAnimation() {\r\n    const loadingAnimation = document.getElementById('loadingAnimation');\r\n    if (loadingAnimation) {\r\n        loadingAnimation.style.animationPlayState = 'running'; // Start the animation\r\n        loadingAnimation.style.display = 'flex'; // Ensure it's visible\r\n    } else {\r\n        console.error(\"Loading animation element not found.\");\r\n    }\r\n}\r\n\r\nfunction hideLoadingAnimation() {\r\n    const loadingAnimation = document.getElementById('loadingAnimation');\r\n    if (loadingAnimation) {\r\n        loadingAnimation.style.animationPlayState = 'paused'; // Pause the animation\r\n    } else {\r\n        console.error(\"Loading animation element not found.\");\r\n    }\r\n}"],"names":["insertFavouriteEpisodes","id","div","document","getElementById","url","URL","searchParams","append","console","log","href","response","fetch","data","json","episodes","length","podcastDiv","createElement","podcastImage","podcastTitle","link","encodeURIComponent","target","innerHTML","limitToXWords","input","x","words","split","slice","join","title","src","layoutImageURL","appendChild","error","fetchPodcasts","page","showLoadingAnimation","resultsDiv","existingMoreBtn","parentNode","removeChild","loadingMessage","textContent","setAttribute","insertSearchResults","forEach","podcast","titleDiv","podcastLink","className","remove","moreBtn","style","addEventListener","icon","hideLoadingAnimation","fetchRecommendedPodcasts","Math","floor","random","insertRecommendedResults","getCategories","catBtndiv","catCount","forCounter","randomCat","element","catBtn","name_de","fetchCategoryPodcasts","name","insertCategorySearchResults","isInitialLoad","podcasts","description","height","marginBottom","paddingLeft","loadingAnimation","animationPlayState","display","navigator","language","userLanguage","searchInput","event","key","searchPodcasts","searchTitle","value","favorites","JSON","parse","localStorage","getItem"],"version":3,"file":"index.b2f98f9c.js.map"}