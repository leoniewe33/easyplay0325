{"mappings":"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","sources":["<anon>","src/js/favourites.js"],"sourcesContent":["//Funktionalität der Navigation\ndocument.getElementById('menuButton').addEventListener('click', function() {\n    document.body.classList.toggle('drawer-open');\n});\ndocument.addEventListener('click', function(event) {\n    var drawer = document.getElementById('drawer');\n    var menuButton = document.getElementById('menuButton');\n    if (!drawer.contains(event.target) && !menuButton.contains(event.target)) document.body.classList.remove('drawer-open');\n});\ndocument.getElementById('searchButton').addEventListener('click', function() {\n    var searchBar = document.getElementById('podcast-search');\n    searchBar.classList.toggle('visible');\n    if (searchBar.classList.contains('visible')) document.getElementById('search-title').focus();\n});\n//Favoriten hinzufügen --> im Local Cache speichern\nfunction addFavourite() {\n    console.log(\"favourite\");\n    const podcastId = getQueryParams().id;\n    let favorites = JSON.parse(localStorage.getItem('favorites')) || [];\n    if (!favorites.includes(podcastId)) {\n        favorites.push(podcastId);\n        localStorage.setItem('favorites', JSON.stringify(favorites));\n        alert(\"Podcast wurde zu den Favoriten hinzugef\\xfcgt!\");\n    } else removeFavourite(podcastId);\n}\n//Favorite löschen --> aus dem Local Cache entfernen, dabei wird der Local Cache ohne den jeweiligen Podcast kopiert und dann ersetzt\nfunction removeFavourite(podcastId) {\n    let favorites = JSON.parse(localStorage.getItem('favorites')) || [];\n    favorites = favorites.filter((id)=>id !== podcastId);\n    localStorage.setItem('favorites', JSON.stringify(favorites));\n    alert(\"Podcast wurde aus den Favoriten entfernt!\");\n}\n// Alle Funktion, die beim Laden der Seite aufgerufen werden, dabei werden die Favoriten aus dem Local Cache geladen und jedes Element einzeln eingefügt\ndocument.addEventListener('DOMContentLoaded', function() {\n    console.log(\"onLoad Function\");\n    let favorites = JSON.parse(localStorage.getItem('favorites')) || [];\n    console.log(favorites);\n    favorites.forEach((element)=>{\n        console.log(element);\n        insertFavourite(element);\n    });\n    if (favorites == 0) {\n        var div = document.getElementById(\"fav-div\");\n        div.innerHTML = \"Du hast noch keine Favoriten\";\n    }\n});\n//Das Div der Favoriten mit dem Podcast ausfüllen\nasync function insertFavourite(id) {\n    showLoadingAnimation();\n    var div = document.getElementById(\"fav-div\");\n    let url = new URL('https://api.fyyd.de/0.2/podcast');\n    url.searchParams.append(\"podcast_id\", id);\n    console.log('URL:', url.href);\n    try {\n        const response = await fetch(url);\n        const data = await response.json();\n        console.log(data.data.title);\n        const podcastDiv = document.createElement('div');\n        const podcastImage = document.createElement('img');\n        const podcastTitle = document.createElement('h4');\n        const removeBtn = document.createElement('input');\n        const link = document.createElement(\"a\");\n        removeBtn.setAttribute(\"type\", \"button\");\n        removeBtn.setAttribute(\"value\", \"Entfernen\");\n        removeBtn.className = \"button-remove\";\n        //remove Btn Click Funktion\n        removeBtn.onclick = function(event) {\n            event.preventDefault();\n            removeFavourite(id);\n            podcastDiv.remove();\n            location.reload(); // Aktualisiert die Seite\n        };\n        link.href = `podcastDash.html?id=${encodeURIComponent(id)}`;\n        //podcastLink.target = \"_blank\"; besser fürs Abspielen im Hintergrund aber nervig, da zu viele Tabs\n        podcastTitle.innerHTML = data.data.title;\n        podcastImage.src = data.data.layoutImageURL;\n        podcastDiv.appendChild(podcastImage);\n        podcastDiv.appendChild(podcastTitle);\n        podcastDiv.appendChild(removeBtn);\n        link.appendChild(podcastDiv);\n        div.appendChild(link);\n        hideLoadingAnimation();\n    } catch (error) {\n        console.error('Error fetching recommended podcasts:', error);\n        document.getElementById('podcast-list').innerHTML = '<p class=\"loading-message\">Fehler beim Laden empfohlener Podcasts. Bitte probiere es sp\\xe4ter nochmal.</p>';\n    }\n}\n//entfernen eines Favoriten\nfunction removeFavourite(podcastId) {\n    let favorites = JSON.parse(localStorage.getItem('favorites')) || [];\n    console.log(podcastId);\n    favorites = favorites.filter((id)=>id !== podcastId);\n    localStorage.setItem('favorites', JSON.stringify(favorites));\n}\ndocument.getElementById('closeButton').addEventListener('click', function() {\n    document.body.classList.remove('drawer-open');\n});\n//Funktionen für die Animationen\nfunction showLoadingAnimation() {\n    const loadingAnimation = document.getElementById('loadingAnimation');\n    if (loadingAnimation) {\n        loadingAnimation.style.animationPlayState = 'running'; // Start the animation\n        loadingAnimation.style.display = 'flex'; // Ensure it's visible\n    } else console.error(\"Loading animation element not found.\");\n}\nfunction hideLoadingAnimation() {\n    const loadingAnimation = document.getElementById('loadingAnimation');\n    if (loadingAnimation) loadingAnimation.style.animationPlayState = 'paused'; // Pause the animation\n    else console.error(\"Loading animation element not found.\");\n}\n\n//# sourceMappingURL=fav.4cd2cdbb.js.map\n","//Funktionalität der Navigation\r\ndocument.getElementById('menuButton').addEventListener('click', function() {\r\n    document.body.classList.toggle('drawer-open');\r\n});\r\n  document.addEventListener('click', function(event) {\r\n    var drawer = document.getElementById('drawer');\r\n    var menuButton = document.getElementById('menuButton');\r\n\r\n    if(!drawer.contains(event.target) && !menuButton.contains(event.target)) {\r\n        document.body.classList.remove('drawer-open');\r\n    }\r\n});\r\n\r\ndocument.getElementById('searchButton').addEventListener('click', function() {\r\n    var searchBar = document.getElementById('podcast-search');\r\n    searchBar.classList.toggle('visible');\r\n    if (searchBar.classList.contains('visible')) {\r\n    document.getElementById('search-title').focus();\r\n    }       \r\n });\r\n\r\n//Favoriten hinzufügen --> im Local Cache speichern\r\nfunction addFavourite() {\r\n    console.log(\"favourite\");\r\n    const podcastId = getQueryParams().id; \r\n    \r\n    let favorites = JSON.parse(localStorage.getItem('favorites')) || [];\r\n    \r\n    if (!favorites.includes(podcastId)) {\r\n        favorites.push(podcastId);\r\n        localStorage.setItem('favorites', JSON.stringify(favorites));\r\n        alert(\"Podcast wurde zu den Favoriten hinzugefügt!\");\r\n    } else {\r\n        removeFavourite(podcastId)\r\n    }\r\n}\r\n\r\n//Favorite löschen --> aus dem Local Cache entfernen, dabei wird der Local Cache ohne den jeweiligen Podcast kopiert und dann ersetzt\r\nfunction removeFavourite(podcastId) {\r\n    let favorites = JSON.parse(localStorage.getItem('favorites')) || [];\r\n    favorites = favorites.filter(id => id !== podcastId);\r\n    localStorage.setItem('favorites', JSON.stringify(favorites));\r\n\r\n    alert(\"Podcast wurde aus den Favoriten entfernt!\");\r\n}\r\n\r\n\r\n\r\n // Alle Funktion, die beim Laden der Seite aufgerufen werden, dabei werden die Favoriten aus dem Local Cache geladen und jedes Element einzeln eingefügt\r\n document.addEventListener('DOMContentLoaded', function() {\r\n    console.log(\"onLoad Function\");\r\n    let favorites = JSON.parse(localStorage.getItem('favorites')) || [];\r\n    console.log(favorites)\r\n    favorites.forEach(element => {\r\n        console.log(element);\r\n        insertFavourite(element);\r\n    });\r\n    if(favorites == 0)\r\n    {\r\n        var div = document.getElementById(\"fav-div\");\r\n        div.innerHTML = \"Du hast noch keine Favoriten\"\r\n    }\r\n});\r\n\r\n//Das Div der Favoriten mit dem Podcast ausfüllen\r\nasync function insertFavourite(id) {\r\n    showLoadingAnimation();\r\nvar div = document.getElementById(\"fav-div\");\r\nlet url = new URL('https://api.fyyd.de/0.2/podcast');\r\nurl.searchParams.append(\"podcast_id\", id);\r\nconsole.log('URL:', url.href);\r\ntry {\r\nconst response = await fetch(url);\r\nconst data = await response.json();\r\nconsole.log(data.data.title);\r\n\r\nconst podcastDiv = document.createElement('div');\r\nconst podcastImage = document.createElement('img');\r\nconst podcastTitle = document.createElement('h4');\r\nconst removeBtn = document.createElement('input');\r\nconst link = document.createElement(\"a\");\r\nremoveBtn.setAttribute(\"type\", \"button\");\r\nremoveBtn.setAttribute(\"value\", \"Entfernen\");\r\nremoveBtn.className = \"button-remove\";\r\n\r\n//remove Btn Click Funktion\r\nremoveBtn.onclick = function(event) {\r\nevent.preventDefault();\r\nremoveFavourite(id);\r\npodcastDiv.remove();\r\nlocation.reload(); // Aktualisiert die Seite\r\n};\r\nlink.href = `podcastDash.html?id=${encodeURIComponent(id)}`;\r\n//podcastLink.target = \"_blank\"; besser fürs Abspielen im Hintergrund aber nervig, da zu viele Tabs\r\npodcastTitle.innerHTML = data.data.title;\r\npodcastImage.src = data.data.layoutImageURL;\r\npodcastDiv.appendChild(podcastImage);\r\npodcastDiv.appendChild(podcastTitle);\r\npodcastDiv.appendChild(removeBtn);\r\nlink.appendChild(podcastDiv)\r\ndiv.appendChild(link);\r\nhideLoadingAnimation();\r\n\r\n}\r\ncatch (error) {\r\nconsole.error('Error fetching recommended podcasts:', error);\r\ndocument.getElementById('podcast-list').innerHTML = '<p class=\"loading-message\">Fehler beim Laden empfohlener Podcasts. Bitte probiere es später nochmal.</p>';\r\n}\r\n}\r\n\r\n//entfernen eines Favoriten\r\nfunction removeFavourite(podcastId) {\r\nlet favorites = JSON.parse(localStorage.getItem('favorites')) || [];\r\nconsole.log(podcastId);\r\nfavorites = favorites.filter(id => id !== podcastId);\r\nlocalStorage.setItem('favorites', JSON.stringify(favorites));\r\n}\r\n   document.getElementById('closeButton').addEventListener('click', function() {\r\n    document.body.classList.remove('drawer-open');\r\n });\r\n\r\n //Funktionen für die Animationen\r\n function showLoadingAnimation() {\r\nconst loadingAnimation = document.getElementById('loadingAnimation');\r\nif (loadingAnimation) {\r\nloadingAnimation.style.animationPlayState = 'running'; // Start the animation\r\nloadingAnimation.style.display = 'flex'; // Ensure it's visible\r\n} else {\r\nconsole.error(\"Loading animation element not found.\");\r\n}\r\n}\r\n\r\nfunction hideLoadingAnimation() {\r\nconst loadingAnimation = document.getElementById('loadingAnimation');\r\nif (loadingAnimation) {\r\nloadingAnimation.style.animationPlayState = 'paused'; // Pause the animation\r\n} else {\r\nconsole.error(\"Loading animation element not found.\");\r\n}\r\n}\r\n"],"names":["removeFavourite","podcastId","favorites","JSON","parse","localStorage","getItem","filter","id","setItem","stringify","alert","insertFavourite","showLoadingAnimation","loadingAnimation","document","getElementById","style","animationPlayState","display","console","error","div","url","URL","searchParams","append","log","href","response","fetch","data","json","title","podcastDiv","createElement","podcastImage","podcastTitle","removeBtn","link","setAttribute","className","onclick","event","preventDefault","remove","location","reload","encodeURIComponent","innerHTML","src","layoutImageURL","appendChild","hideLoadingAnimation","addEventListener","body","classList","toggle","drawer","menuButton","contains","target","searchBar","focus","forEach","element"],"version":3,"file":"fav.4cd2cdbb.js.map"}